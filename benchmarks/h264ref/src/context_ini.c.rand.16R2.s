	.text
	.file	"context_ini.c"
	.globl	create_context_memory   # -- Begin function create_context_memory
	.p2align	4, 0x90
	.type	create_context_memory,@function
create_context_memory:                  # @create_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_17
# %bb.1:                                # %func_create_context_memory.28
	callq	create_context_memory.28
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_create_context_memory.31
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.31
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_create_context_memory.36
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.36
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_create_context_memory.41
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_create_context_memory.55
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.55
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_create_context_memory.68
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_create_context_memory.69
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_create_context_memory.72
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.72
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %func_create_context_memory.73
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.73
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_10:                               # %func_create_context_memory.78
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.78
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_11:                               # %func_create_context_memory.79
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_12:                               # %func_create_context_memory.80
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_13:                               # %func_create_context_memory.81
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.81
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_14:                               # %func_create_context_memory.82
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_15:                               # %func_create_context_memory.83
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_16:                               # %func_create_context_memory.84
	.cfi_def_cfa %rbp, 16
	callq	create_context_memory.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB0_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB0_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB0_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB0_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB0_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB0_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB0_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB0_15
	jmp	.LBB0_16
.Lfunc_end0:
	.size	create_context_memory, .Lfunc_end0-create_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory     # -- Begin function free_context_memory
	.p2align	4, 0x90
	.type	free_context_memory,@function
free_context_memory:                    # @free_context_memory
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_free_context_memory.5
	callq	free_context_memory.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_free_context_memory.6
	.cfi_def_cfa %rbp, 16
	callq	free_context_memory.6
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	free_context_memory, .Lfunc_end1-free_context_memory
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber       # -- Begin function SetCtxModelNumber
	.p2align	4, 0x90
	.type	SetCtxModelNumber,@function
SetCtxModelNumber:                      # @SetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_7
# %bb.1:                                # %func_SetCtxModelNumber.27
	callq	SetCtxModelNumber.27
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_SetCtxModelNumber.46
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_SetCtxModelNumber.50
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.50
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_SetCtxModelNumber.57
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.57
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_SetCtxModelNumber.60
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_SetCtxModelNumber.63
	.cfi_def_cfa %rbp, 16
	callq	SetCtxModelNumber.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
	jmp	.LBB2_6
.Lfunc_end2:
	.size	SetCtxModelNumber, .Lfunc_end2-SetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts           # -- Begin function init_contexts
	.p2align	4, 0x90
	.type	init_contexts,@function
init_contexts:                          # @init_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_17
# %bb.1:                                # %func_init_contexts.3
	callq	init_contexts.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_init_contexts.11
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_init_contexts.16
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_init_contexts.17
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_init_contexts.19
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_init_contexts.20
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_init_contexts.22
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.22
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_init_contexts.26
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %func_init_contexts.30
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_10:                               # %func_init_contexts.33
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.33
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_11:                               # %func_init_contexts.34
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_12:                               # %func_init_contexts.39
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_13:                               # %func_init_contexts.40
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.40
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_14:                               # %func_init_contexts.51
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_15:                               # %func_init_contexts.61
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_16:                               # %func_init_contexts.71
	.cfi_def_cfa %rbp, 16
	callq	init_contexts.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB3_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB3_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB3_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB3_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB3_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB3_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB3_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB3_15
	jmp	.LBB3_16
.Lfunc_end3:
	.size	init_contexts, .Lfunc_end3-init_contexts
	.cfi_endproc
                                        # -- End function
	.globl	XRate                   # -- Begin function XRate
	.p2align	4, 0x90
	.type	XRate,@function
XRate:                                  # @XRate
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_17
# %bb.1:                                # %func_XRate.4
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_XRate.8
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_XRate.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_XRate.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.32
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_XRate.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.37
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_XRate.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.44
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_XRate.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_XRate.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.47
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %func_XRate.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_10:                               # %func_XRate.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_11:                               # %func_XRate.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_12:                               # %func_XRate.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_13:                               # %func_XRate.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_14:                               # %func_XRate.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_15:                               # %func_XRate.76
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_16:                               # %func_XRate.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	XRate.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB4_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB4_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB4_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB4_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB4_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB4_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB4_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB4_15
	jmp	.LBB4_16
.Lfunc_end4:
	.size	XRate, .Lfunc_end4-XRate
	.cfi_endproc
                                        # -- End function
	.globl	GetCtxModelNumber       # -- Begin function GetCtxModelNumber
	.p2align	4, 0x90
	.type	GetCtxModelNumber,@function
GetCtxModelNumber:                      # @GetCtxModelNumber
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_17
# %bb.1:                                # %func_GetCtxModelNumber.12
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_GetCtxModelNumber.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.14
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_GetCtxModelNumber.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_GetCtxModelNumber.24
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_GetCtxModelNumber.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_GetCtxModelNumber.35
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_GetCtxModelNumber.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_GetCtxModelNumber.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %func_GetCtxModelNumber.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_10:                               # %func_GetCtxModelNumber.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_11:                               # %func_GetCtxModelNumber.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_12:                               # %func_GetCtxModelNumber.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_13:                               # %func_GetCtxModelNumber.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_14:                               # %func_GetCtxModelNumber.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_15:                               # %func_GetCtxModelNumber.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.66
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_16:                               # %func_GetCtxModelNumber.70
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	GetCtxModelNumber.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_17:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.18:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.19:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.20:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.21:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.22:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
# %bb.23:                               # %ctrl6
	cmpl	$7, %eax
	je	.LBB5_8
# %bb.24:                               # %ctrl7
	cmpl	$8, %eax
	je	.LBB5_9
# %bb.25:                               # %ctrl8
	cmpl	$9, %eax
	je	.LBB5_10
# %bb.26:                               # %ctrl9
	cmpl	$10, %eax
	je	.LBB5_11
# %bb.27:                               # %ctrl10
	cmpl	$11, %eax
	je	.LBB5_12
# %bb.28:                               # %ctrl11
	cmpl	$12, %eax
	je	.LBB5_13
# %bb.29:                               # %ctrl12
	cmpl	$13, %eax
	je	.LBB5_14
# %bb.30:                               # %ctrl13
	cmpl	$14, %eax
	je	.LBB5_15
	jmp	.LBB5_16
.Lfunc_end5:
	.size	GetCtxModelNumber, .Lfunc_end5-GetCtxModelNumber
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts          # -- Begin function store_contexts
	.p2align	4, 0x90
	.type	store_contexts,@function
store_contexts:                         # @store_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_7
# %bb.1:                                # %func_store_contexts.2
	callq	store_contexts.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_store_contexts.10
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.10
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_store_contexts.18
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.18
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_store_contexts.38
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_store_contexts.42
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_store_contexts.43
	.cfi_def_cfa %rbp, 16
	callq	store_contexts.43
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
	jmp	.LBB6_6
.Lfunc_end6:
	.size	store_contexts, .Lfunc_end6-store_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts # -- Begin function update_field_frame_contexts
	.p2align	4, 0x90
	.type	update_field_frame_contexts,@function
update_field_frame_contexts:            # @update_field_frame_contexts
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_7
# %bb.1:                                # %func_update_field_frame_contexts.1
	movl	%ebx, %edi
	callq	update_field_frame_contexts.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_update_field_frame_contexts.7
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_update_field_frame_contexts.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.9
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_update_field_frame_contexts.21
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_update_field_frame_contexts.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_update_field_frame_contexts.25
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	update_field_frame_contexts.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
	jmp	.LBB7_6
.Lfunc_end7:
	.size	update_field_frame_contexts, .Lfunc_end7-update_field_frame_contexts
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.1 # -- Begin function update_field_frame_contexts.1
	.p2align	4, 0x90
	.type	update_field_frame_contexts.1,@function
update_field_frame_contexts.1:          # @update_field_frame_contexts.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$155103166, -16(%rbp)   # imm = 0x93EAFBE
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB8_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB8_2:                                # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB8_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB8_2 Depth=1
	movl	$0, -4(%rbp)
.LBB8_4:                                # %for.cond1
                                        #   Parent Loop BB8_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB8_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB8_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB8_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_4
.LBB8_7:                                # %for.end
                                        #   in Loop: Header=BB8_2 Depth=1
	jmp	.LBB8_8
.LBB8_8:                                # %for.inc23
                                        #   in Loop: Header=BB8_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_2
.LBB8_9:                                # %for.end25
	jmp	.LBB8_19
.LBB8_10:                               # %if.else
	movl	$0, -8(%rbp)
.LBB8_11:                               # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB8_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB8_11 Depth=1
	movl	$0, -4(%rbp)
.LBB8_13:                               # %for.cond29
                                        #   Parent Loop BB8_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB8_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB8_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB8_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB8_13
.LBB8_16:                               # %for.end56
                                        #   in Loop: Header=BB8_11 Depth=1
	jmp	.LBB8_17
.LBB8_17:                               # %for.inc57
                                        #   in Loop: Header=BB8_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB8_11
.LBB8_18:                               # %for.end59
	jmp	.LBB8_19
.LBB8_19:                               # %if.end
	cmpl	$155103166, -16(%rbp)   # imm = 0x93EAFBE
	jne	.LBB8_21
.LBB8_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_21:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB8_20
.Lfunc_end8:
	.size	update_field_frame_contexts.1, .Lfunc_end8-update_field_frame_contexts.1
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.2        # -- Begin function store_contexts.2
	.p2align	4, 0x90
	.type	store_contexts.2,@function
store_contexts.2:                       # @store_contexts.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$109062883, -16(%rbp)   # imm = 0x6802AE3
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB9_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB9_3
.LBB9_2:                                # %if.else
	jmp	.LBB9_3
.LBB9_3:                                # %if.end
	cmpl	$109062883, -16(%rbp)   # imm = 0x6802AE3
	jne	.LBB9_5
.LBB9_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB9_4
.Lfunc_end9:
	.size	store_contexts.2, .Lfunc_end9-store_contexts.2
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.3         # -- Begin function init_contexts.3
	.p2align	4, 0x90
	.type	init_contexts.3,@function
init_contexts.3:                        # @init_contexts.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2028143819, -28(%rbp)  # imm = 0x78E304CB
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB10_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB10_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	$0, -4(%rbp)
.LBB10_3:                               # %for.cond2
                                        #   Parent Loop BB10_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB10_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB10_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB10_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_7
.LBB10_6:                               # %if.else
                                        #   in Loop: Header=BB10_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_7:                               # %if.end
                                        #   in Loop: Header=BB10_3 Depth=2
	jmp	.LBB10_8
.LBB10_8:                               # %for.inc
                                        #   in Loop: Header=BB10_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_3
.LBB10_9:                               # %for.end
                                        #   in Loop: Header=BB10_1 Depth=1
	jmp	.LBB10_10
.LBB10_10:                              # %for.inc28
                                        #   in Loop: Header=BB10_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_1
.LBB10_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB10_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB10_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB10_12 Depth=1
	movl	$0, -4(%rbp)
.LBB10_14:                              # %for.cond34
                                        #   Parent Loop BB10_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB10_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB10_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB10_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_18
.LBB10_17:                              # %if.else52
                                        #   in Loop: Header=BB10_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_18:                              # %if.end66
                                        #   in Loop: Header=BB10_14 Depth=2
	jmp	.LBB10_19
.LBB10_19:                              # %for.inc67
                                        #   in Loop: Header=BB10_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_14
.LBB10_20:                              # %for.end69
                                        #   in Loop: Header=BB10_12 Depth=1
	jmp	.LBB10_21
.LBB10_21:                              # %for.inc70
                                        #   in Loop: Header=BB10_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_12
.LBB10_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB10_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB10_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB10_23 Depth=1
	movl	$0, -4(%rbp)
.LBB10_25:                              # %for.cond76
                                        #   Parent Loop BB10_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB10_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB10_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB10_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_29
.LBB10_28:                              # %if.else94
                                        #   in Loop: Header=BB10_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_29:                              # %if.end108
                                        #   in Loop: Header=BB10_25 Depth=2
	jmp	.LBB10_30
.LBB10_30:                              # %for.inc109
                                        #   in Loop: Header=BB10_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_25
.LBB10_31:                              # %for.end111
                                        #   in Loop: Header=BB10_23 Depth=1
	jmp	.LBB10_32
.LBB10_32:                              # %for.inc112
                                        #   in Loop: Header=BB10_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_23
.LBB10_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB10_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB10_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB10_34 Depth=1
	movl	$0, -4(%rbp)
.LBB10_36:                              # %for.cond118
                                        #   Parent Loop BB10_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB10_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB10_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB10_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_40
.LBB10_39:                              # %if.else136
                                        #   in Loop: Header=BB10_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_40:                              # %if.end150
                                        #   in Loop: Header=BB10_36 Depth=2
	jmp	.LBB10_41
.LBB10_41:                              # %for.inc151
                                        #   in Loop: Header=BB10_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_36
.LBB10_42:                              # %for.end153
                                        #   in Loop: Header=BB10_34 Depth=1
	jmp	.LBB10_43
.LBB10_43:                              # %for.inc154
                                        #   in Loop: Header=BB10_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_34
.LBB10_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB10_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB10_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB10_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB10_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_49
.LBB10_48:                              # %if.else172
                                        #   in Loop: Header=BB10_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_49:                              # %if.end183
                                        #   in Loop: Header=BB10_45 Depth=1
	jmp	.LBB10_50
.LBB10_50:                              # %for.inc184
                                        #   in Loop: Header=BB10_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_45
.LBB10_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB10_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB10_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB10_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB10_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_56
.LBB10_55:                              # %if.else202
                                        #   in Loop: Header=BB10_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_56:                              # %if.end213
                                        #   in Loop: Header=BB10_52 Depth=1
	jmp	.LBB10_57
.LBB10_57:                              # %for.inc214
                                        #   in Loop: Header=BB10_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_52
.LBB10_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB10_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB10_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB10_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB10_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_63
.LBB10_62:                              # %if.else232
                                        #   in Loop: Header=BB10_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_63:                              # %if.end243
                                        #   in Loop: Header=BB10_59 Depth=1
	jmp	.LBB10_64
.LBB10_64:                              # %for.inc244
                                        #   in Loop: Header=BB10_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_59
.LBB10_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB10_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB10_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB10_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB10_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_70
.LBB10_69:                              # %if.else262
                                        #   in Loop: Header=BB10_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_70:                              # %if.end273
                                        #   in Loop: Header=BB10_66 Depth=1
	jmp	.LBB10_71
.LBB10_71:                              # %for.inc274
                                        #   in Loop: Header=BB10_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_66
.LBB10_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB10_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB10_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB10_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB10_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_77
.LBB10_76:                              # %if.else292
                                        #   in Loop: Header=BB10_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_77:                              # %if.end303
                                        #   in Loop: Header=BB10_73 Depth=1
	jmp	.LBB10_78
.LBB10_78:                              # %for.inc304
                                        #   in Loop: Header=BB10_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_73
.LBB10_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB10_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB10_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB10_80 Depth=1
	movl	$0, -4(%rbp)
.LBB10_82:                              # %for.cond310
                                        #   Parent Loop BB10_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB10_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB10_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_86
.LBB10_85:                              # %if.else328
                                        #   in Loop: Header=BB10_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_86:                              # %if.end342
                                        #   in Loop: Header=BB10_82 Depth=2
	jmp	.LBB10_87
.LBB10_87:                              # %for.inc343
                                        #   in Loop: Header=BB10_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_82
.LBB10_88:                              # %for.end345
                                        #   in Loop: Header=BB10_80 Depth=1
	jmp	.LBB10_89
.LBB10_89:                              # %for.inc346
                                        #   in Loop: Header=BB10_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_80
.LBB10_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB10_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB10_91 Depth=1
	movl	$0, -4(%rbp)
.LBB10_93:                              # %for.cond352
                                        #   Parent Loop BB10_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB10_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB10_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB10_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_97
.LBB10_96:                              # %if.else370
                                        #   in Loop: Header=BB10_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_97:                              # %if.end384
                                        #   in Loop: Header=BB10_93 Depth=2
	jmp	.LBB10_98
.LBB10_98:                              # %for.inc385
                                        #   in Loop: Header=BB10_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_93
.LBB10_99:                              # %for.end387
                                        #   in Loop: Header=BB10_91 Depth=1
	jmp	.LBB10_100
.LBB10_100:                             # %for.inc388
                                        #   in Loop: Header=BB10_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_91
.LBB10_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB10_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB10_102 Depth=1
	movl	$0, -4(%rbp)
.LBB10_104:                             # %for.cond394
                                        #   Parent Loop BB10_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB10_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB10_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB10_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_108
.LBB10_107:                             # %if.else412
                                        #   in Loop: Header=BB10_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_108:                             # %if.end426
                                        #   in Loop: Header=BB10_104 Depth=2
	jmp	.LBB10_109
.LBB10_109:                             # %for.inc427
                                        #   in Loop: Header=BB10_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_104
.LBB10_110:                             # %for.end429
                                        #   in Loop: Header=BB10_102 Depth=1
	jmp	.LBB10_111
.LBB10_111:                             # %for.inc430
                                        #   in Loop: Header=BB10_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_102
.LBB10_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB10_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB10_113 Depth=1
	movl	$0, -4(%rbp)
.LBB10_115:                             # %for.cond436
                                        #   Parent Loop BB10_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB10_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB10_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB10_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_119
.LBB10_118:                             # %if.else454
                                        #   in Loop: Header=BB10_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_119:                             # %if.end468
                                        #   in Loop: Header=BB10_115 Depth=2
	jmp	.LBB10_120
.LBB10_120:                             # %for.inc469
                                        #   in Loop: Header=BB10_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_115
.LBB10_121:                             # %for.end471
                                        #   in Loop: Header=BB10_113 Depth=1
	jmp	.LBB10_122
.LBB10_122:                             # %for.inc472
                                        #   in Loop: Header=BB10_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_113
.LBB10_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB10_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB10_124 Depth=1
	movl	$0, -4(%rbp)
.LBB10_126:                             # %for.cond478
                                        #   Parent Loop BB10_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB10_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB10_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB10_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_130
.LBB10_129:                             # %if.else496
                                        #   in Loop: Header=BB10_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_130:                             # %if.end510
                                        #   in Loop: Header=BB10_126 Depth=2
	jmp	.LBB10_131
.LBB10_131:                             # %for.inc511
                                        #   in Loop: Header=BB10_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_126
.LBB10_132:                             # %for.end513
                                        #   in Loop: Header=BB10_124 Depth=1
	jmp	.LBB10_133
.LBB10_133:                             # %for.inc514
                                        #   in Loop: Header=BB10_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_124
.LBB10_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB10_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB10_135 Depth=1
	movl	$0, -4(%rbp)
.LBB10_137:                             # %for.cond520
                                        #   Parent Loop BB10_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB10_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB10_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB10_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_141
.LBB10_140:                             # %if.else538
                                        #   in Loop: Header=BB10_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_141:                             # %if.end552
                                        #   in Loop: Header=BB10_137 Depth=2
	jmp	.LBB10_142
.LBB10_142:                             # %for.inc553
                                        #   in Loop: Header=BB10_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_137
.LBB10_143:                             # %for.end555
                                        #   in Loop: Header=BB10_135 Depth=1
	jmp	.LBB10_144
.LBB10_144:                             # %for.inc556
                                        #   in Loop: Header=BB10_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_135
.LBB10_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB10_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB10_146 Depth=1
	movl	$0, -4(%rbp)
.LBB10_148:                             # %for.cond562
                                        #   Parent Loop BB10_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB10_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB10_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB10_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_152
.LBB10_151:                             # %if.else580
                                        #   in Loop: Header=BB10_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_152:                             # %if.end594
                                        #   in Loop: Header=BB10_148 Depth=2
	jmp	.LBB10_153
.LBB10_153:                             # %for.inc595
                                        #   in Loop: Header=BB10_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_148
.LBB10_154:                             # %for.end597
                                        #   in Loop: Header=BB10_146 Depth=1
	jmp	.LBB10_155
.LBB10_155:                             # %for.inc598
                                        #   in Loop: Header=BB10_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_146
.LBB10_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB10_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB10_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB10_157 Depth=1
	movl	$0, -4(%rbp)
.LBB10_159:                             # %for.cond604
                                        #   Parent Loop BB10_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB10_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB10_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB10_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB10_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB10_163
.LBB10_162:                             # %if.else622
                                        #   in Loop: Header=BB10_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB10_163:                             # %if.end636
                                        #   in Loop: Header=BB10_159 Depth=2
	jmp	.LBB10_164
.LBB10_164:                             # %for.inc637
                                        #   in Loop: Header=BB10_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB10_159
.LBB10_165:                             # %for.end639
                                        #   in Loop: Header=BB10_157 Depth=1
	jmp	.LBB10_166
.LBB10_166:                             # %for.inc640
                                        #   in Loop: Header=BB10_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB10_157
.LBB10_167:                             # %for.end642
	cmpl	$2028143819, -28(%rbp)  # imm = 0x78E304CB
	jne	.LBB10_169
.LBB10_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB10_168
.Lfunc_end10:
	.size	init_contexts.3, .Lfunc_end10-init_contexts.3
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.4
.LCPI11_0:
	.quad	4607182418800017408     # double 1
.LCPI11_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI11_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI11_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.4
	.p2align	4, 0x90
	.type	XRate.4,@function
XRate.4:                                # @XRate.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1552077083, -32(%rbp)  # imm = 0x5C82D11B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB11_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB11_3
.LBB11_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB11_3:                               # %cond.end
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI11_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI11_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI11_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB11_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI11_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB11_6
.LBB11_5:                               # %cond.false6
	vmovsd	.LCPI11_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI11_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI11_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB11_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB11_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB11_9
.LBB11_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB11_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB11_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB11_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB11_13
.LBB11_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB11_13:                              # %cond.end26
	jmp	.LBB11_15
.LBB11_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB11_15
.LBB11_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB11_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB11_18
.LBB11_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB11_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1552077083, -32(%rbp)  # imm = 0x5C82D11B
	jne	.LBB11_20
.LBB11_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB11_19
.Lfunc_end11:
	.size	XRate.4, .Lfunc_end11-XRate.4
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.5   # -- Begin function free_context_memory.5
	.p2align	4, 0x90
	.type	free_context_memory.5,@function
free_context_memory.5:                  # @free_context_memory.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1052773383, -12(%rbp)  # imm = 0x3EC00C07
	movl	$0, -4(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB12_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_3:                               # %for.cond1
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB12_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_3
.LBB12_6:                               # %for.end
                                        #   in Loop: Header=BB12_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$1052773383, -12(%rbp)  # imm = 0x3EC00C07
	jne	.LBB12_10
.LBB12_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_9
.Lfunc_end12:
	.size	free_context_memory.5, .Lfunc_end12-free_context_memory.5
	.cfi_endproc
                                        # -- End function
	.globl	free_context_memory.6   # -- Begin function free_context_memory.6
	.p2align	4, 0x90
	.type	free_context_memory.6,@function
free_context_memory.6:                  # @free_context_memory.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$485559681, -12(%rbp)   # imm = 0x1CF10D81
	movl	$0, -4(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB13_3 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB13_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	$0, -8(%rbp)
.LBB13_3:                               # %for.cond1
                                        #   Parent Loop BB13_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB13_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB13_3 Depth=2
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB13_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB13_3
.LBB13_6:                               # %for.end
                                        #   in Loop: Header=BB13_1 Depth=1
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	free
# %bb.7:                                # %for.inc14
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_1
.LBB13_8:                               # %for.end16
	movq	initialized, %rdi
	callq	free
	movq	model_number, %rdi
	callq	free
	cmpl	$485559681, -12(%rbp)   # imm = 0x1CF10D81
	jne	.LBB13_10
.LBB13_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_9
.Lfunc_end13:
	.size	free_context_memory.6, .Lfunc_end13-free_context_memory.6
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.7 # -- Begin function update_field_frame_contexts.7
	.p2align	4, 0x90
	.type	update_field_frame_contexts.7,@function
update_field_frame_contexts.7:          # @update_field_frame_contexts.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1633420801, -12(%rbp)  # imm = 0x615C0601
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB14_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB14_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB14_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB14_2 Depth=1
	movl	$0, -4(%rbp)
.LBB14_4:                               # %for.cond1
                                        #   Parent Loop BB14_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB14_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB14_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB14_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_4
.LBB14_7:                               # %for.end
                                        #   in Loop: Header=BB14_2 Depth=1
	jmp	.LBB14_8
.LBB14_8:                               # %for.inc23
                                        #   in Loop: Header=BB14_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_2
.LBB14_9:                               # %for.end25
	jmp	.LBB14_19
.LBB14_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB14_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB14_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB14_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB14_11 Depth=1
	movl	$0, -4(%rbp)
.LBB14_13:                              # %for.cond29
                                        #   Parent Loop BB14_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB14_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB14_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB14_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_13
.LBB14_16:                              # %for.end56
                                        #   in Loop: Header=BB14_11 Depth=1
	jmp	.LBB14_17
.LBB14_17:                              # %for.inc57
                                        #   in Loop: Header=BB14_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB14_11
.LBB14_18:                              # %for.end59
	jmp	.LBB14_19
.LBB14_19:                              # %if.end
	cmpl	$1633420801, -12(%rbp)  # imm = 0x615C0601
	jne	.LBB14_21
.LBB14_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_20
.Lfunc_end14:
	.size	update_field_frame_contexts.7, .Lfunc_end14-update_field_frame_contexts.7
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.8
.LCPI15_0:
	.quad	4607182418800017408     # double 1
.LCPI15_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI15_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI15_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.8
	.p2align	4, 0x90
	.type	XRate.8,@function
XRate.8:                                # @XRate.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$640936016, -36(%rbp)   # imm = 0x2633E850
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB15_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB15_3
.LBB15_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB15_3:                               # %cond.end
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI15_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI15_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI15_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB15_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI15_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB15_6
.LBB15_5:                               # %cond.false6
	vmovsd	.LCPI15_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI15_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI15_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB15_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB15_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB15_9
.LBB15_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB15_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB15_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB15_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB15_13
.LBB15_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB15_13:                              # %cond.end26
	jmp	.LBB15_15
.LBB15_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB15_15
.LBB15_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB15_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB15_18
.LBB15_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB15_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$640936016, -36(%rbp)   # imm = 0x2633E850
	jne	.LBB15_20
.LBB15_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB15_19
.Lfunc_end15:
	.size	XRate.8, .Lfunc_end15-XRate.8
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.9 # -- Begin function update_field_frame_contexts.9
	.p2align	4, 0x90
	.type	update_field_frame_contexts.9,@function
update_field_frame_contexts.9:          # @update_field_frame_contexts.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1274697627, -16(%rbp)  # imm = 0x4BFA579B
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB16_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB16_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB16_2 Depth=1
	movl	$0, -8(%rbp)
.LBB16_4:                               # %for.cond1
                                        #   Parent Loop BB16_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB16_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB16_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB16_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_4
.LBB16_7:                               # %for.end
                                        #   in Loop: Header=BB16_2 Depth=1
	jmp	.LBB16_8
.LBB16_8:                               # %for.inc23
                                        #   in Loop: Header=BB16_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_2
.LBB16_9:                               # %for.end25
	jmp	.LBB16_19
.LBB16_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB16_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB16_11 Depth=1
	movl	$0, -8(%rbp)
.LBB16_13:                              # %for.cond29
                                        #   Parent Loop BB16_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB16_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB16_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB16_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_13
.LBB16_16:                              # %for.end56
                                        #   in Loop: Header=BB16_11 Depth=1
	jmp	.LBB16_17
.LBB16_17:                              # %for.inc57
                                        #   in Loop: Header=BB16_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_11
.LBB16_18:                              # %for.end59
	jmp	.LBB16_19
.LBB16_19:                              # %if.end
	cmpl	$1274697627, -16(%rbp)  # imm = 0x4BFA579B
	jne	.LBB16_21
.LBB16_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_20
.Lfunc_end16:
	.size	update_field_frame_contexts.9, .Lfunc_end16-update_field_frame_contexts.9
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.10       # -- Begin function store_contexts.10
	.p2align	4, 0x90
	.type	store_contexts.10,@function
store_contexts.10:                      # @store_contexts.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1151899844, -16(%rbp)  # imm = 0x44A898C4
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB17_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB17_3
.LBB17_2:                               # %if.else
	jmp	.LBB17_3
.LBB17_3:                               # %if.end
	cmpl	$1151899844, -16(%rbp)  # imm = 0x44A898C4
	jne	.LBB17_5
.LBB17_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_4
.Lfunc_end17:
	.size	store_contexts.10, .Lfunc_end17-store_contexts.10
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.11        # -- Begin function init_contexts.11
	.p2align	4, 0x90
	.type	init_contexts.11,@function
init_contexts.11:                       # @init_contexts.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1143726971, -28(%rbp)  # imm = 0x442BE37B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB18_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB18_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	$0, -4(%rbp)
.LBB18_3:                               # %for.cond2
                                        #   Parent Loop BB18_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB18_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_7
.LBB18_6:                               # %if.else
                                        #   in Loop: Header=BB18_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_7:                               # %if.end
                                        #   in Loop: Header=BB18_3 Depth=2
	jmp	.LBB18_8
.LBB18_8:                               # %for.inc
                                        #   in Loop: Header=BB18_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_3
.LBB18_9:                               # %for.end
                                        #   in Loop: Header=BB18_1 Depth=1
	jmp	.LBB18_10
.LBB18_10:                              # %for.inc28
                                        #   in Loop: Header=BB18_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_1
.LBB18_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB18_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB18_12 Depth=1
	movl	$0, -4(%rbp)
.LBB18_14:                              # %for.cond34
                                        #   Parent Loop BB18_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB18_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB18_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB18_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_18
.LBB18_17:                              # %if.else52
                                        #   in Loop: Header=BB18_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_18:                              # %if.end66
                                        #   in Loop: Header=BB18_14 Depth=2
	jmp	.LBB18_19
.LBB18_19:                              # %for.inc67
                                        #   in Loop: Header=BB18_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_14
.LBB18_20:                              # %for.end69
                                        #   in Loop: Header=BB18_12 Depth=1
	jmp	.LBB18_21
.LBB18_21:                              # %for.inc70
                                        #   in Loop: Header=BB18_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_12
.LBB18_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB18_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	$0, -4(%rbp)
.LBB18_25:                              # %for.cond76
                                        #   Parent Loop BB18_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB18_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_29
.LBB18_28:                              # %if.else94
                                        #   in Loop: Header=BB18_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_29:                              # %if.end108
                                        #   in Loop: Header=BB18_25 Depth=2
	jmp	.LBB18_30
.LBB18_30:                              # %for.inc109
                                        #   in Loop: Header=BB18_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_25
.LBB18_31:                              # %for.end111
                                        #   in Loop: Header=BB18_23 Depth=1
	jmp	.LBB18_32
.LBB18_32:                              # %for.inc112
                                        #   in Loop: Header=BB18_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_23
.LBB18_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB18_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB18_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	$0, -4(%rbp)
.LBB18_36:                              # %for.cond118
                                        #   Parent Loop BB18_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB18_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB18_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB18_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_40
.LBB18_39:                              # %if.else136
                                        #   in Loop: Header=BB18_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_40:                              # %if.end150
                                        #   in Loop: Header=BB18_36 Depth=2
	jmp	.LBB18_41
.LBB18_41:                              # %for.inc151
                                        #   in Loop: Header=BB18_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_36
.LBB18_42:                              # %for.end153
                                        #   in Loop: Header=BB18_34 Depth=1
	jmp	.LBB18_43
.LBB18_43:                              # %for.inc154
                                        #   in Loop: Header=BB18_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_34
.LBB18_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB18_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB18_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB18_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_49
.LBB18_48:                              # %if.else172
                                        #   in Loop: Header=BB18_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_49:                              # %if.end183
                                        #   in Loop: Header=BB18_45 Depth=1
	jmp	.LBB18_50
.LBB18_50:                              # %for.inc184
                                        #   in Loop: Header=BB18_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_45
.LBB18_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB18_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB18_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB18_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_56
.LBB18_55:                              # %if.else202
                                        #   in Loop: Header=BB18_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_56:                              # %if.end213
                                        #   in Loop: Header=BB18_52 Depth=1
	jmp	.LBB18_57
.LBB18_57:                              # %for.inc214
                                        #   in Loop: Header=BB18_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_52
.LBB18_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB18_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB18_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB18_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB18_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_63
.LBB18_62:                              # %if.else232
                                        #   in Loop: Header=BB18_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_63:                              # %if.end243
                                        #   in Loop: Header=BB18_59 Depth=1
	jmp	.LBB18_64
.LBB18_64:                              # %for.inc244
                                        #   in Loop: Header=BB18_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_59
.LBB18_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB18_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB18_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_70
.LBB18_69:                              # %if.else262
                                        #   in Loop: Header=BB18_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_70:                              # %if.end273
                                        #   in Loop: Header=BB18_66 Depth=1
	jmp	.LBB18_71
.LBB18_71:                              # %for.inc274
                                        #   in Loop: Header=BB18_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_66
.LBB18_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB18_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB18_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB18_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB18_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_77
.LBB18_76:                              # %if.else292
                                        #   in Loop: Header=BB18_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_77:                              # %if.end303
                                        #   in Loop: Header=BB18_73 Depth=1
	jmp	.LBB18_78
.LBB18_78:                              # %for.inc304
                                        #   in Loop: Header=BB18_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_73
.LBB18_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB18_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB18_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB18_80 Depth=1
	movl	$0, -4(%rbp)
.LBB18_82:                              # %for.cond310
                                        #   Parent Loop BB18_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB18_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB18_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_86
.LBB18_85:                              # %if.else328
                                        #   in Loop: Header=BB18_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_86:                              # %if.end342
                                        #   in Loop: Header=BB18_82 Depth=2
	jmp	.LBB18_87
.LBB18_87:                              # %for.inc343
                                        #   in Loop: Header=BB18_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_82
.LBB18_88:                              # %for.end345
                                        #   in Loop: Header=BB18_80 Depth=1
	jmp	.LBB18_89
.LBB18_89:                              # %for.inc346
                                        #   in Loop: Header=BB18_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_80
.LBB18_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB18_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB18_91 Depth=1
	movl	$0, -4(%rbp)
.LBB18_93:                              # %for.cond352
                                        #   Parent Loop BB18_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB18_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB18_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB18_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_97
.LBB18_96:                              # %if.else370
                                        #   in Loop: Header=BB18_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_97:                              # %if.end384
                                        #   in Loop: Header=BB18_93 Depth=2
	jmp	.LBB18_98
.LBB18_98:                              # %for.inc385
                                        #   in Loop: Header=BB18_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_93
.LBB18_99:                              # %for.end387
                                        #   in Loop: Header=BB18_91 Depth=1
	jmp	.LBB18_100
.LBB18_100:                             # %for.inc388
                                        #   in Loop: Header=BB18_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_91
.LBB18_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB18_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB18_102 Depth=1
	movl	$0, -4(%rbp)
.LBB18_104:                             # %for.cond394
                                        #   Parent Loop BB18_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB18_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB18_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_108
.LBB18_107:                             # %if.else412
                                        #   in Loop: Header=BB18_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_108:                             # %if.end426
                                        #   in Loop: Header=BB18_104 Depth=2
	jmp	.LBB18_109
.LBB18_109:                             # %for.inc427
                                        #   in Loop: Header=BB18_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_104
.LBB18_110:                             # %for.end429
                                        #   in Loop: Header=BB18_102 Depth=1
	jmp	.LBB18_111
.LBB18_111:                             # %for.inc430
                                        #   in Loop: Header=BB18_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_102
.LBB18_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB18_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB18_113 Depth=1
	movl	$0, -4(%rbp)
.LBB18_115:                             # %for.cond436
                                        #   Parent Loop BB18_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB18_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB18_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_119
.LBB18_118:                             # %if.else454
                                        #   in Loop: Header=BB18_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_119:                             # %if.end468
                                        #   in Loop: Header=BB18_115 Depth=2
	jmp	.LBB18_120
.LBB18_120:                             # %for.inc469
                                        #   in Loop: Header=BB18_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_115
.LBB18_121:                             # %for.end471
                                        #   in Loop: Header=BB18_113 Depth=1
	jmp	.LBB18_122
.LBB18_122:                             # %for.inc472
                                        #   in Loop: Header=BB18_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_113
.LBB18_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB18_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB18_124 Depth=1
	movl	$0, -4(%rbp)
.LBB18_126:                             # %for.cond478
                                        #   Parent Loop BB18_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB18_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB18_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB18_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_130
.LBB18_129:                             # %if.else496
                                        #   in Loop: Header=BB18_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_130:                             # %if.end510
                                        #   in Loop: Header=BB18_126 Depth=2
	jmp	.LBB18_131
.LBB18_131:                             # %for.inc511
                                        #   in Loop: Header=BB18_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_126
.LBB18_132:                             # %for.end513
                                        #   in Loop: Header=BB18_124 Depth=1
	jmp	.LBB18_133
.LBB18_133:                             # %for.inc514
                                        #   in Loop: Header=BB18_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_124
.LBB18_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB18_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	$0, -4(%rbp)
.LBB18_137:                             # %for.cond520
                                        #   Parent Loop BB18_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB18_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB18_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB18_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_141
.LBB18_140:                             # %if.else538
                                        #   in Loop: Header=BB18_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_141:                             # %if.end552
                                        #   in Loop: Header=BB18_137 Depth=2
	jmp	.LBB18_142
.LBB18_142:                             # %for.inc553
                                        #   in Loop: Header=BB18_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_137
.LBB18_143:                             # %for.end555
                                        #   in Loop: Header=BB18_135 Depth=1
	jmp	.LBB18_144
.LBB18_144:                             # %for.inc556
                                        #   in Loop: Header=BB18_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_135
.LBB18_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB18_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB18_146 Depth=1
	movl	$0, -4(%rbp)
.LBB18_148:                             # %for.cond562
                                        #   Parent Loop BB18_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB18_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB18_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_152
.LBB18_151:                             # %if.else580
                                        #   in Loop: Header=BB18_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_152:                             # %if.end594
                                        #   in Loop: Header=BB18_148 Depth=2
	jmp	.LBB18_153
.LBB18_153:                             # %for.inc595
                                        #   in Loop: Header=BB18_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_148
.LBB18_154:                             # %for.end597
                                        #   in Loop: Header=BB18_146 Depth=1
	jmp	.LBB18_155
.LBB18_155:                             # %for.inc598
                                        #   in Loop: Header=BB18_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_146
.LBB18_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB18_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB18_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB18_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB18_157 Depth=1
	movl	$0, -4(%rbp)
.LBB18_159:                             # %for.cond604
                                        #   Parent Loop BB18_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB18_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB18_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB18_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB18_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB18_163
.LBB18_162:                             # %if.else622
                                        #   in Loop: Header=BB18_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB18_163:                             # %if.end636
                                        #   in Loop: Header=BB18_159 Depth=2
	jmp	.LBB18_164
.LBB18_164:                             # %for.inc637
                                        #   in Loop: Header=BB18_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB18_159
.LBB18_165:                             # %for.end639
                                        #   in Loop: Header=BB18_157 Depth=1
	jmp	.LBB18_166
.LBB18_166:                             # %for.inc640
                                        #   in Loop: Header=BB18_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB18_157
.LBB18_167:                             # %for.end642
	cmpl	$1143726971, -28(%rbp)  # imm = 0x442BE37B
	jne	.LBB18_169
.LBB18_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_168
.Lfunc_end18:
	.size	init_contexts.11, .Lfunc_end18-init_contexts.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.12
.LCPI19_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.12
	.p2align	4, 0x90
	.type	GetCtxModelNumber.12,@function
GetCtxModelNumber.12:                   # @GetCtxModelNumber.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI19_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1752889620, -48(%rbp)  # imm = 0x687AF914
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB19_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_3 Depth 2
                                        #       Child Loop BB19_5 Depth 3
                                        #     Child Loop BB19_14 Depth 2
                                        #       Child Loop BB19_16 Depth 3
                                        #     Child Loop BB19_25 Depth 2
                                        #       Child Loop BB19_27 Depth 3
                                        #     Child Loop BB19_36 Depth 2
                                        #       Child Loop BB19_38 Depth 3
                                        #     Child Loop BB19_47 Depth 2
                                        #     Child Loop BB19_54 Depth 2
                                        #     Child Loop BB19_61 Depth 2
                                        #     Child Loop BB19_68 Depth 2
                                        #     Child Loop BB19_75 Depth 2
                                        #     Child Loop BB19_82 Depth 2
                                        #       Child Loop BB19_84 Depth 3
                                        #     Child Loop BB19_93 Depth 2
                                        #       Child Loop BB19_95 Depth 3
                                        #     Child Loop BB19_104 Depth 2
                                        #       Child Loop BB19_106 Depth 3
                                        #     Child Loop BB19_115 Depth 2
                                        #       Child Loop BB19_117 Depth 3
                                        #     Child Loop BB19_126 Depth 2
                                        #       Child Loop BB19_128 Depth 3
                                        #     Child Loop BB19_137 Depth 2
                                        #       Child Loop BB19_139 Depth 3
                                        #     Child Loop BB19_148 Depth 2
                                        #       Child Loop BB19_150 Depth 3
                                        #     Child Loop BB19_159 Depth 2
                                        #       Child Loop BB19_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB19_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB19_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB19_3:                               # %for.cond2
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB19_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	$0, -4(%rbp)
.LBB19_5:                               # %for.cond5
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB19_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB19_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB19_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_9
.LBB19_8:                               # %if.else
                                        #   in Loop: Header=BB19_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_9:                               # %if.end
                                        #   in Loop: Header=BB19_5 Depth=3
	jmp	.LBB19_10
.LBB19_10:                              # %for.inc
                                        #   in Loop: Header=BB19_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_5
.LBB19_11:                              # %for.end
                                        #   in Loop: Header=BB19_3 Depth=2
	jmp	.LBB19_12
.LBB19_12:                              # %for.inc33
                                        #   in Loop: Header=BB19_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_3
.LBB19_13:                              # %for.end35
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_14:                              # %for.cond36
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB19_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB19_14 Depth=2
	movl	$0, -4(%rbp)
.LBB19_16:                              # %for.cond39
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB19_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB19_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB19_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_20
.LBB19_19:                              # %if.else58
                                        #   in Loop: Header=BB19_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_20:                              # %if.end73
                                        #   in Loop: Header=BB19_16 Depth=3
	jmp	.LBB19_21
.LBB19_21:                              # %for.inc74
                                        #   in Loop: Header=BB19_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_16
.LBB19_22:                              # %for.end76
                                        #   in Loop: Header=BB19_14 Depth=2
	jmp	.LBB19_23
.LBB19_23:                              # %for.inc77
                                        #   in Loop: Header=BB19_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_14
.LBB19_24:                              # %for.end79
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_25:                              # %for.cond80
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB19_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB19_25 Depth=2
	movl	$0, -4(%rbp)
.LBB19_27:                              # %for.cond83
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB19_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB19_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB19_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_31
.LBB19_30:                              # %if.else102
                                        #   in Loop: Header=BB19_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_31:                              # %if.end117
                                        #   in Loop: Header=BB19_27 Depth=3
	jmp	.LBB19_32
.LBB19_32:                              # %for.inc118
                                        #   in Loop: Header=BB19_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_27
.LBB19_33:                              # %for.end120
                                        #   in Loop: Header=BB19_25 Depth=2
	jmp	.LBB19_34
.LBB19_34:                              # %for.inc121
                                        #   in Loop: Header=BB19_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_25
.LBB19_35:                              # %for.end123
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_36:                              # %for.cond124
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB19_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB19_36 Depth=2
	movl	$0, -4(%rbp)
.LBB19_38:                              # %for.cond127
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB19_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB19_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB19_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_42
.LBB19_41:                              # %if.else146
                                        #   in Loop: Header=BB19_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_42:                              # %if.end161
                                        #   in Loop: Header=BB19_38 Depth=3
	jmp	.LBB19_43
.LBB19_43:                              # %for.inc162
                                        #   in Loop: Header=BB19_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_38
.LBB19_44:                              # %for.end164
                                        #   in Loop: Header=BB19_36 Depth=2
	jmp	.LBB19_45
.LBB19_45:                              # %for.inc165
                                        #   in Loop: Header=BB19_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_36
.LBB19_46:                              # %for.end167
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_47:                              # %for.cond168
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB19_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB19_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_51
.LBB19_50:                              # %if.else184
                                        #   in Loop: Header=BB19_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_51:                              # %if.end196
                                        #   in Loop: Header=BB19_47 Depth=2
	jmp	.LBB19_52
.LBB19_52:                              # %for.inc197
                                        #   in Loop: Header=BB19_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_47
.LBB19_53:                              # %for.end199
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_54:                              # %for.cond200
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB19_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB19_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_58
.LBB19_57:                              # %if.else216
                                        #   in Loop: Header=BB19_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_58:                              # %if.end228
                                        #   in Loop: Header=BB19_54 Depth=2
	jmp	.LBB19_59
.LBB19_59:                              # %for.inc229
                                        #   in Loop: Header=BB19_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_54
.LBB19_60:                              # %for.end231
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_61:                              # %for.cond232
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB19_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB19_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB19_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_65
.LBB19_64:                              # %if.else248
                                        #   in Loop: Header=BB19_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_65:                              # %if.end260
                                        #   in Loop: Header=BB19_61 Depth=2
	jmp	.LBB19_66
.LBB19_66:                              # %for.inc261
                                        #   in Loop: Header=BB19_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_61
.LBB19_67:                              # %for.end263
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_68:                              # %for.cond264
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB19_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB19_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB19_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_72
.LBB19_71:                              # %if.else280
                                        #   in Loop: Header=BB19_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_72:                              # %if.end292
                                        #   in Loop: Header=BB19_68 Depth=2
	jmp	.LBB19_73
.LBB19_73:                              # %for.inc293
                                        #   in Loop: Header=BB19_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_68
.LBB19_74:                              # %for.end295
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -4(%rbp)
.LBB19_75:                              # %for.cond296
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB19_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB19_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB19_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_79
.LBB19_78:                              # %if.else312
                                        #   in Loop: Header=BB19_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_79:                              # %if.end324
                                        #   in Loop: Header=BB19_75 Depth=2
	jmp	.LBB19_80
.LBB19_80:                              # %for.inc325
                                        #   in Loop: Header=BB19_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_75
.LBB19_81:                              # %for.end327
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_82:                              # %for.cond328
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB19_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB19_82 Depth=2
	movl	$0, -4(%rbp)
.LBB19_84:                              # %for.cond331
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB19_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB19_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB19_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_88
.LBB19_87:                              # %if.else350
                                        #   in Loop: Header=BB19_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_88:                              # %if.end365
                                        #   in Loop: Header=BB19_84 Depth=3
	jmp	.LBB19_89
.LBB19_89:                              # %for.inc366
                                        #   in Loop: Header=BB19_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_84
.LBB19_90:                              # %for.end368
                                        #   in Loop: Header=BB19_82 Depth=2
	jmp	.LBB19_91
.LBB19_91:                              # %for.inc369
                                        #   in Loop: Header=BB19_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_82
.LBB19_92:                              # %for.end371
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_93:                              # %for.cond372
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB19_93 Depth=2
	movl	$0, -4(%rbp)
.LBB19_95:                              # %for.cond375
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB19_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB19_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB19_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_99
.LBB19_98:                              # %if.else394
                                        #   in Loop: Header=BB19_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_99:                              # %if.end409
                                        #   in Loop: Header=BB19_95 Depth=3
	jmp	.LBB19_100
.LBB19_100:                             # %for.inc410
                                        #   in Loop: Header=BB19_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_95
.LBB19_101:                             # %for.end412
                                        #   in Loop: Header=BB19_93 Depth=2
	jmp	.LBB19_102
.LBB19_102:                             # %for.inc413
                                        #   in Loop: Header=BB19_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_93
.LBB19_103:                             # %for.end415
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_104:                             # %for.cond416
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB19_104 Depth=2
	movl	$0, -4(%rbp)
.LBB19_106:                             # %for.cond419
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB19_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB19_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB19_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_110
.LBB19_109:                             # %if.else438
                                        #   in Loop: Header=BB19_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_110:                             # %if.end453
                                        #   in Loop: Header=BB19_106 Depth=3
	jmp	.LBB19_111
.LBB19_111:                             # %for.inc454
                                        #   in Loop: Header=BB19_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_106
.LBB19_112:                             # %for.end456
                                        #   in Loop: Header=BB19_104 Depth=2
	jmp	.LBB19_113
.LBB19_113:                             # %for.inc457
                                        #   in Loop: Header=BB19_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_104
.LBB19_114:                             # %for.end459
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_115:                             # %for.cond460
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB19_115 Depth=2
	movl	$0, -4(%rbp)
.LBB19_117:                             # %for.cond463
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB19_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB19_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB19_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_121
.LBB19_120:                             # %if.else482
                                        #   in Loop: Header=BB19_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_121:                             # %if.end497
                                        #   in Loop: Header=BB19_117 Depth=3
	jmp	.LBB19_122
.LBB19_122:                             # %for.inc498
                                        #   in Loop: Header=BB19_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_117
.LBB19_123:                             # %for.end500
                                        #   in Loop: Header=BB19_115 Depth=2
	jmp	.LBB19_124
.LBB19_124:                             # %for.inc501
                                        #   in Loop: Header=BB19_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_115
.LBB19_125:                             # %for.end503
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_126:                             # %for.cond504
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB19_126 Depth=2
	movl	$0, -4(%rbp)
.LBB19_128:                             # %for.cond507
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB19_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB19_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB19_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_132
.LBB19_131:                             # %if.else526
                                        #   in Loop: Header=BB19_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_132:                             # %if.end541
                                        #   in Loop: Header=BB19_128 Depth=3
	jmp	.LBB19_133
.LBB19_133:                             # %for.inc542
                                        #   in Loop: Header=BB19_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_128
.LBB19_134:                             # %for.end544
                                        #   in Loop: Header=BB19_126 Depth=2
	jmp	.LBB19_135
.LBB19_135:                             # %for.inc545
                                        #   in Loop: Header=BB19_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_126
.LBB19_136:                             # %for.end547
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_137:                             # %for.cond548
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB19_137 Depth=2
	movl	$0, -4(%rbp)
.LBB19_139:                             # %for.cond551
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB19_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB19_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB19_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_143
.LBB19_142:                             # %if.else570
                                        #   in Loop: Header=BB19_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_143:                             # %if.end585
                                        #   in Loop: Header=BB19_139 Depth=3
	jmp	.LBB19_144
.LBB19_144:                             # %for.inc586
                                        #   in Loop: Header=BB19_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_139
.LBB19_145:                             # %for.end588
                                        #   in Loop: Header=BB19_137 Depth=2
	jmp	.LBB19_146
.LBB19_146:                             # %for.inc589
                                        #   in Loop: Header=BB19_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_137
.LBB19_147:                             # %for.end591
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_148:                             # %for.cond592
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB19_148 Depth=2
	movl	$0, -4(%rbp)
.LBB19_150:                             # %for.cond595
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB19_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB19_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB19_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_154
.LBB19_153:                             # %if.else614
                                        #   in Loop: Header=BB19_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_154:                             # %if.end629
                                        #   in Loop: Header=BB19_150 Depth=3
	jmp	.LBB19_155
.LBB19_155:                             # %for.inc630
                                        #   in Loop: Header=BB19_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_150
.LBB19_156:                             # %for.end632
                                        #   in Loop: Header=BB19_148 Depth=2
	jmp	.LBB19_157
.LBB19_157:                             # %for.inc633
                                        #   in Loop: Header=BB19_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_148
.LBB19_158:                             # %for.end635
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	$0, -8(%rbp)
.LBB19_159:                             # %for.cond636
                                        #   Parent Loop BB19_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB19_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB19_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB19_159 Depth=2
	movl	$0, -4(%rbp)
.LBB19_161:                             # %for.cond639
                                        #   Parent Loop BB19_1 Depth=1
                                        #     Parent Loop BB19_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB19_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB19_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB19_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB19_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB19_165
.LBB19_164:                             # %if.else658
                                        #   in Loop: Header=BB19_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB19_165:                             # %if.end673
                                        #   in Loop: Header=BB19_161 Depth=3
	jmp	.LBB19_166
.LBB19_166:                             # %for.inc674
                                        #   in Loop: Header=BB19_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_161
.LBB19_167:                             # %for.end676
                                        #   in Loop: Header=BB19_159 Depth=2
	jmp	.LBB19_168
.LBB19_168:                             # %for.inc677
                                        #   in Loop: Header=BB19_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_159
.LBB19_169:                             # %for.end679
                                        #   in Loop: Header=BB19_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB19_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB19_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB19_171:                             # %if.end682
                                        #   in Loop: Header=BB19_1 Depth=1
	jmp	.LBB19_172
.LBB19_172:                             # %for.inc683
                                        #   in Loop: Header=BB19_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB19_1
.LBB19_173:                             # %for.end685
	cmpl	$1752889620, -48(%rbp)  # imm = 0x687AF914
	jne	.LBB19_175
.LBB19_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_174
.Lfunc_end19:
	.size	GetCtxModelNumber.12, .Lfunc_end19-GetCtxModelNumber.12
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.13
.LCPI20_0:
	.quad	4607182418800017408     # double 1
.LCPI20_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI20_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI20_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.13
	.p2align	4, 0x90
	.type	XRate.13,@function
XRate.13:                               # @XRate.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1685329755, -32(%rbp)  # imm = 0x6474175B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB20_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB20_3
.LBB20_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB20_3:                               # %cond.end
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI20_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI20_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB20_6
.LBB20_5:                               # %cond.false6
	vmovsd	.LCPI20_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI20_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI20_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB20_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB20_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB20_9
.LBB20_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB20_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB20_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB20_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB20_13
.LBB20_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB20_13:                              # %cond.end26
	jmp	.LBB20_15
.LBB20_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB20_15
.LBB20_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB20_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB20_18
.LBB20_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB20_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1685329755, -32(%rbp)  # imm = 0x6474175B
	jne	.LBB20_20
.LBB20_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB20_19
.Lfunc_end20:
	.size	XRate.13, .Lfunc_end20-XRate.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.14
.LCPI21_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.14
	.p2align	4, 0x90
	.type	GetCtxModelNumber.14,@function
GetCtxModelNumber.14:                   # @GetCtxModelNumber.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI21_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$614890248, -48(%rbp)   # imm = 0x24A67B08
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB21_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_3 Depth 2
                                        #       Child Loop BB21_5 Depth 3
                                        #     Child Loop BB21_14 Depth 2
                                        #       Child Loop BB21_16 Depth 3
                                        #     Child Loop BB21_25 Depth 2
                                        #       Child Loop BB21_27 Depth 3
                                        #     Child Loop BB21_36 Depth 2
                                        #       Child Loop BB21_38 Depth 3
                                        #     Child Loop BB21_47 Depth 2
                                        #     Child Loop BB21_54 Depth 2
                                        #     Child Loop BB21_61 Depth 2
                                        #     Child Loop BB21_68 Depth 2
                                        #     Child Loop BB21_75 Depth 2
                                        #     Child Loop BB21_82 Depth 2
                                        #       Child Loop BB21_84 Depth 3
                                        #     Child Loop BB21_93 Depth 2
                                        #       Child Loop BB21_95 Depth 3
                                        #     Child Loop BB21_104 Depth 2
                                        #       Child Loop BB21_106 Depth 3
                                        #     Child Loop BB21_115 Depth 2
                                        #       Child Loop BB21_117 Depth 3
                                        #     Child Loop BB21_126 Depth 2
                                        #       Child Loop BB21_128 Depth 3
                                        #     Child Loop BB21_137 Depth 2
                                        #       Child Loop BB21_139 Depth 3
                                        #     Child Loop BB21_148 Depth 2
                                        #       Child Loop BB21_150 Depth 3
                                        #     Child Loop BB21_159 Depth 2
                                        #       Child Loop BB21_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB21_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB21_3:                               # %for.cond2
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	$0, -4(%rbp)
.LBB21_5:                               # %for.cond5
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB21_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_9
.LBB21_8:                               # %if.else
                                        #   in Loop: Header=BB21_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_9:                               # %if.end
                                        #   in Loop: Header=BB21_5 Depth=3
	jmp	.LBB21_10
.LBB21_10:                              # %for.inc
                                        #   in Loop: Header=BB21_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_5
.LBB21_11:                              # %for.end
                                        #   in Loop: Header=BB21_3 Depth=2
	jmp	.LBB21_12
.LBB21_12:                              # %for.inc33
                                        #   in Loop: Header=BB21_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_3
.LBB21_13:                              # %for.end35
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_14:                              # %for.cond36
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	$0, -4(%rbp)
.LBB21_16:                              # %for.cond39
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB21_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_20
.LBB21_19:                              # %if.else58
                                        #   in Loop: Header=BB21_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_20:                              # %if.end73
                                        #   in Loop: Header=BB21_16 Depth=3
	jmp	.LBB21_21
.LBB21_21:                              # %for.inc74
                                        #   in Loop: Header=BB21_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_16
.LBB21_22:                              # %for.end76
                                        #   in Loop: Header=BB21_14 Depth=2
	jmp	.LBB21_23
.LBB21_23:                              # %for.inc77
                                        #   in Loop: Header=BB21_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_14
.LBB21_24:                              # %for.end79
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_25:                              # %for.cond80
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	$0, -4(%rbp)
.LBB21_27:                              # %for.cond83
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB21_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_31
.LBB21_30:                              # %if.else102
                                        #   in Loop: Header=BB21_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_31:                              # %if.end117
                                        #   in Loop: Header=BB21_27 Depth=3
	jmp	.LBB21_32
.LBB21_32:                              # %for.inc118
                                        #   in Loop: Header=BB21_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_27
.LBB21_33:                              # %for.end120
                                        #   in Loop: Header=BB21_25 Depth=2
	jmp	.LBB21_34
.LBB21_34:                              # %for.inc121
                                        #   in Loop: Header=BB21_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_25
.LBB21_35:                              # %for.end123
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_36:                              # %for.cond124
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB21_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	$0, -4(%rbp)
.LBB21_38:                              # %for.cond127
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB21_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_42
.LBB21_41:                              # %if.else146
                                        #   in Loop: Header=BB21_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_42:                              # %if.end161
                                        #   in Loop: Header=BB21_38 Depth=3
	jmp	.LBB21_43
.LBB21_43:                              # %for.inc162
                                        #   in Loop: Header=BB21_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_38
.LBB21_44:                              # %for.end164
                                        #   in Loop: Header=BB21_36 Depth=2
	jmp	.LBB21_45
.LBB21_45:                              # %for.inc165
                                        #   in Loop: Header=BB21_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_36
.LBB21_46:                              # %for.end167
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_47:                              # %for.cond168
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_51
.LBB21_50:                              # %if.else184
                                        #   in Loop: Header=BB21_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_51:                              # %if.end196
                                        #   in Loop: Header=BB21_47 Depth=2
	jmp	.LBB21_52
.LBB21_52:                              # %for.inc197
                                        #   in Loop: Header=BB21_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_47
.LBB21_53:                              # %for.end199
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_54:                              # %for.cond200
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_58
.LBB21_57:                              # %if.else216
                                        #   in Loop: Header=BB21_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_58:                              # %if.end228
                                        #   in Loop: Header=BB21_54 Depth=2
	jmp	.LBB21_59
.LBB21_59:                              # %for.inc229
                                        #   in Loop: Header=BB21_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_54
.LBB21_60:                              # %for.end231
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_61:                              # %for.cond232
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB21_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_65
.LBB21_64:                              # %if.else248
                                        #   in Loop: Header=BB21_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_65:                              # %if.end260
                                        #   in Loop: Header=BB21_61 Depth=2
	jmp	.LBB21_66
.LBB21_66:                              # %for.inc261
                                        #   in Loop: Header=BB21_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_61
.LBB21_67:                              # %for.end263
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_68:                              # %for.cond264
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB21_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_72
.LBB21_71:                              # %if.else280
                                        #   in Loop: Header=BB21_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_72:                              # %if.end292
                                        #   in Loop: Header=BB21_68 Depth=2
	jmp	.LBB21_73
.LBB21_73:                              # %for.inc293
                                        #   in Loop: Header=BB21_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_68
.LBB21_74:                              # %for.end295
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -4(%rbp)
.LBB21_75:                              # %for.cond296
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB21_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_79
.LBB21_78:                              # %if.else312
                                        #   in Loop: Header=BB21_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_79:                              # %if.end324
                                        #   in Loop: Header=BB21_75 Depth=2
	jmp	.LBB21_80
.LBB21_80:                              # %for.inc325
                                        #   in Loop: Header=BB21_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_75
.LBB21_81:                              # %for.end327
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_82:                              # %for.cond328
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB21_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	$0, -4(%rbp)
.LBB21_84:                              # %for.cond331
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_88
.LBB21_87:                              # %if.else350
                                        #   in Loop: Header=BB21_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_88:                              # %if.end365
                                        #   in Loop: Header=BB21_84 Depth=3
	jmp	.LBB21_89
.LBB21_89:                              # %for.inc366
                                        #   in Loop: Header=BB21_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_84
.LBB21_90:                              # %for.end368
                                        #   in Loop: Header=BB21_82 Depth=2
	jmp	.LBB21_91
.LBB21_91:                              # %for.inc369
                                        #   in Loop: Header=BB21_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_82
.LBB21_92:                              # %for.end371
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_93:                              # %for.cond372
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	$0, -4(%rbp)
.LBB21_95:                              # %for.cond375
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB21_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_99
.LBB21_98:                              # %if.else394
                                        #   in Loop: Header=BB21_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_99:                              # %if.end409
                                        #   in Loop: Header=BB21_95 Depth=3
	jmp	.LBB21_100
.LBB21_100:                             # %for.inc410
                                        #   in Loop: Header=BB21_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_95
.LBB21_101:                             # %for.end412
                                        #   in Loop: Header=BB21_93 Depth=2
	jmp	.LBB21_102
.LBB21_102:                             # %for.inc413
                                        #   in Loop: Header=BB21_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_93
.LBB21_103:                             # %for.end415
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_104:                             # %for.cond416
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	$0, -4(%rbp)
.LBB21_106:                             # %for.cond419
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_110
.LBB21_109:                             # %if.else438
                                        #   in Loop: Header=BB21_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_110:                             # %if.end453
                                        #   in Loop: Header=BB21_106 Depth=3
	jmp	.LBB21_111
.LBB21_111:                             # %for.inc454
                                        #   in Loop: Header=BB21_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_106
.LBB21_112:                             # %for.end456
                                        #   in Loop: Header=BB21_104 Depth=2
	jmp	.LBB21_113
.LBB21_113:                             # %for.inc457
                                        #   in Loop: Header=BB21_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_104
.LBB21_114:                             # %for.end459
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_115:                             # %for.cond460
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	$0, -4(%rbp)
.LBB21_117:                             # %for.cond463
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_121
.LBB21_120:                             # %if.else482
                                        #   in Loop: Header=BB21_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_121:                             # %if.end497
                                        #   in Loop: Header=BB21_117 Depth=3
	jmp	.LBB21_122
.LBB21_122:                             # %for.inc498
                                        #   in Loop: Header=BB21_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_117
.LBB21_123:                             # %for.end500
                                        #   in Loop: Header=BB21_115 Depth=2
	jmp	.LBB21_124
.LBB21_124:                             # %for.inc501
                                        #   in Loop: Header=BB21_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_115
.LBB21_125:                             # %for.end503
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_126:                             # %for.cond504
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	$0, -4(%rbp)
.LBB21_128:                             # %for.cond507
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_132
.LBB21_131:                             # %if.else526
                                        #   in Loop: Header=BB21_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_132:                             # %if.end541
                                        #   in Loop: Header=BB21_128 Depth=3
	jmp	.LBB21_133
.LBB21_133:                             # %for.inc542
                                        #   in Loop: Header=BB21_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_128
.LBB21_134:                             # %for.end544
                                        #   in Loop: Header=BB21_126 Depth=2
	jmp	.LBB21_135
.LBB21_135:                             # %for.inc545
                                        #   in Loop: Header=BB21_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_126
.LBB21_136:                             # %for.end547
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_137:                             # %for.cond548
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	$0, -4(%rbp)
.LBB21_139:                             # %for.cond551
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB21_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_143
.LBB21_142:                             # %if.else570
                                        #   in Loop: Header=BB21_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_143:                             # %if.end585
                                        #   in Loop: Header=BB21_139 Depth=3
	jmp	.LBB21_144
.LBB21_144:                             # %for.inc586
                                        #   in Loop: Header=BB21_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_139
.LBB21_145:                             # %for.end588
                                        #   in Loop: Header=BB21_137 Depth=2
	jmp	.LBB21_146
.LBB21_146:                             # %for.inc589
                                        #   in Loop: Header=BB21_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_137
.LBB21_147:                             # %for.end591
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_148:                             # %for.cond592
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	$0, -4(%rbp)
.LBB21_150:                             # %for.cond595
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_154
.LBB21_153:                             # %if.else614
                                        #   in Loop: Header=BB21_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_154:                             # %if.end629
                                        #   in Loop: Header=BB21_150 Depth=3
	jmp	.LBB21_155
.LBB21_155:                             # %for.inc630
                                        #   in Loop: Header=BB21_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_150
.LBB21_156:                             # %for.end632
                                        #   in Loop: Header=BB21_148 Depth=2
	jmp	.LBB21_157
.LBB21_157:                             # %for.inc633
                                        #   in Loop: Header=BB21_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_148
.LBB21_158:                             # %for.end635
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	$0, -8(%rbp)
.LBB21_159:                             # %for.cond636
                                        #   Parent Loop BB21_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB21_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	$0, -4(%rbp)
.LBB21_161:                             # %for.cond639
                                        #   Parent Loop BB21_1 Depth=1
                                        #     Parent Loop BB21_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB21_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB21_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB21_165
.LBB21_164:                             # %if.else658
                                        #   in Loop: Header=BB21_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB21_165:                             # %if.end673
                                        #   in Loop: Header=BB21_161 Depth=3
	jmp	.LBB21_166
.LBB21_166:                             # %for.inc674
                                        #   in Loop: Header=BB21_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB21_161
.LBB21_167:                             # %for.end676
                                        #   in Loop: Header=BB21_159 Depth=2
	jmp	.LBB21_168
.LBB21_168:                             # %for.inc677
                                        #   in Loop: Header=BB21_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB21_159
.LBB21_169:                             # %for.end679
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB21_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB21_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB21_171:                             # %if.end682
                                        #   in Loop: Header=BB21_1 Depth=1
	jmp	.LBB21_172
.LBB21_172:                             # %for.inc683
                                        #   in Loop: Header=BB21_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_1
.LBB21_173:                             # %for.end685
	cmpl	$614890248, -48(%rbp)   # imm = 0x24A67B08
	jne	.LBB21_175
.LBB21_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_174
.Lfunc_end21:
	.size	GetCtxModelNumber.14, .Lfunc_end21-GetCtxModelNumber.14
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.15
.LCPI22_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.15
	.p2align	4, 0x90
	.type	GetCtxModelNumber.15,@function
GetCtxModelNumber.15:                   # @GetCtxModelNumber.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI22_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$949629330, -48(%rbp)   # imm = 0x389A3192
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
                                        #       Child Loop BB22_5 Depth 3
                                        #     Child Loop BB22_14 Depth 2
                                        #       Child Loop BB22_16 Depth 3
                                        #     Child Loop BB22_25 Depth 2
                                        #       Child Loop BB22_27 Depth 3
                                        #     Child Loop BB22_36 Depth 2
                                        #       Child Loop BB22_38 Depth 3
                                        #     Child Loop BB22_47 Depth 2
                                        #     Child Loop BB22_54 Depth 2
                                        #     Child Loop BB22_61 Depth 2
                                        #     Child Loop BB22_68 Depth 2
                                        #     Child Loop BB22_75 Depth 2
                                        #     Child Loop BB22_82 Depth 2
                                        #       Child Loop BB22_84 Depth 3
                                        #     Child Loop BB22_93 Depth 2
                                        #       Child Loop BB22_95 Depth 3
                                        #     Child Loop BB22_104 Depth 2
                                        #       Child Loop BB22_106 Depth 3
                                        #     Child Loop BB22_115 Depth 2
                                        #       Child Loop BB22_117 Depth 3
                                        #     Child Loop BB22_126 Depth 2
                                        #       Child Loop BB22_128 Depth 3
                                        #     Child Loop BB22_137 Depth 2
                                        #       Child Loop BB22_139 Depth 3
                                        #     Child Loop BB22_148 Depth 2
                                        #       Child Loop BB22_150 Depth 3
                                        #     Child Loop BB22_159 Depth 2
                                        #       Child Loop BB22_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB22_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB22_3:                               # %for.cond2
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB22_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	$0, -4(%rbp)
.LBB22_5:                               # %for.cond5
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB22_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB22_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB22_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_9
.LBB22_8:                               # %if.else
                                        #   in Loop: Header=BB22_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_9:                               # %if.end
                                        #   in Loop: Header=BB22_5 Depth=3
	jmp	.LBB22_10
.LBB22_10:                              # %for.inc
                                        #   in Loop: Header=BB22_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_5
.LBB22_11:                              # %for.end
                                        #   in Loop: Header=BB22_3 Depth=2
	jmp	.LBB22_12
.LBB22_12:                              # %for.inc33
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_3
.LBB22_13:                              # %for.end35
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_14:                              # %for.cond36
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB22_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB22_14 Depth=2
	movl	$0, -4(%rbp)
.LBB22_16:                              # %for.cond39
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB22_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB22_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB22_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_20
.LBB22_19:                              # %if.else58
                                        #   in Loop: Header=BB22_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_20:                              # %if.end73
                                        #   in Loop: Header=BB22_16 Depth=3
	jmp	.LBB22_21
.LBB22_21:                              # %for.inc74
                                        #   in Loop: Header=BB22_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_16
.LBB22_22:                              # %for.end76
                                        #   in Loop: Header=BB22_14 Depth=2
	jmp	.LBB22_23
.LBB22_23:                              # %for.inc77
                                        #   in Loop: Header=BB22_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_14
.LBB22_24:                              # %for.end79
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_25:                              # %for.cond80
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB22_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB22_25 Depth=2
	movl	$0, -4(%rbp)
.LBB22_27:                              # %for.cond83
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB22_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB22_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB22_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_31
.LBB22_30:                              # %if.else102
                                        #   in Loop: Header=BB22_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_31:                              # %if.end117
                                        #   in Loop: Header=BB22_27 Depth=3
	jmp	.LBB22_32
.LBB22_32:                              # %for.inc118
                                        #   in Loop: Header=BB22_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_27
.LBB22_33:                              # %for.end120
                                        #   in Loop: Header=BB22_25 Depth=2
	jmp	.LBB22_34
.LBB22_34:                              # %for.inc121
                                        #   in Loop: Header=BB22_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_25
.LBB22_35:                              # %for.end123
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_36:                              # %for.cond124
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB22_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB22_36 Depth=2
	movl	$0, -4(%rbp)
.LBB22_38:                              # %for.cond127
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB22_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB22_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB22_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_42
.LBB22_41:                              # %if.else146
                                        #   in Loop: Header=BB22_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_42:                              # %if.end161
                                        #   in Loop: Header=BB22_38 Depth=3
	jmp	.LBB22_43
.LBB22_43:                              # %for.inc162
                                        #   in Loop: Header=BB22_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_38
.LBB22_44:                              # %for.end164
                                        #   in Loop: Header=BB22_36 Depth=2
	jmp	.LBB22_45
.LBB22_45:                              # %for.inc165
                                        #   in Loop: Header=BB22_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_36
.LBB22_46:                              # %for.end167
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_47:                              # %for.cond168
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB22_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB22_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_51
.LBB22_50:                              # %if.else184
                                        #   in Loop: Header=BB22_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_51:                              # %if.end196
                                        #   in Loop: Header=BB22_47 Depth=2
	jmp	.LBB22_52
.LBB22_52:                              # %for.inc197
                                        #   in Loop: Header=BB22_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_47
.LBB22_53:                              # %for.end199
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_54:                              # %for.cond200
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB22_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB22_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_58
.LBB22_57:                              # %if.else216
                                        #   in Loop: Header=BB22_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_58:                              # %if.end228
                                        #   in Loop: Header=BB22_54 Depth=2
	jmp	.LBB22_59
.LBB22_59:                              # %for.inc229
                                        #   in Loop: Header=BB22_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_54
.LBB22_60:                              # %for.end231
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_61:                              # %for.cond232
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB22_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_65
.LBB22_64:                              # %if.else248
                                        #   in Loop: Header=BB22_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_65:                              # %if.end260
                                        #   in Loop: Header=BB22_61 Depth=2
	jmp	.LBB22_66
.LBB22_66:                              # %for.inc261
                                        #   in Loop: Header=BB22_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_61
.LBB22_67:                              # %for.end263
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_68:                              # %for.cond264
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB22_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB22_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB22_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_72
.LBB22_71:                              # %if.else280
                                        #   in Loop: Header=BB22_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_72:                              # %if.end292
                                        #   in Loop: Header=BB22_68 Depth=2
	jmp	.LBB22_73
.LBB22_73:                              # %for.inc293
                                        #   in Loop: Header=BB22_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_68
.LBB22_74:                              # %for.end295
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -4(%rbp)
.LBB22_75:                              # %for.cond296
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB22_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB22_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_79
.LBB22_78:                              # %if.else312
                                        #   in Loop: Header=BB22_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_79:                              # %if.end324
                                        #   in Loop: Header=BB22_75 Depth=2
	jmp	.LBB22_80
.LBB22_80:                              # %for.inc325
                                        #   in Loop: Header=BB22_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_75
.LBB22_81:                              # %for.end327
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_82:                              # %for.cond328
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB22_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB22_82 Depth=2
	movl	$0, -4(%rbp)
.LBB22_84:                              # %for.cond331
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB22_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB22_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB22_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_88
.LBB22_87:                              # %if.else350
                                        #   in Loop: Header=BB22_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_88:                              # %if.end365
                                        #   in Loop: Header=BB22_84 Depth=3
	jmp	.LBB22_89
.LBB22_89:                              # %for.inc366
                                        #   in Loop: Header=BB22_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_84
.LBB22_90:                              # %for.end368
                                        #   in Loop: Header=BB22_82 Depth=2
	jmp	.LBB22_91
.LBB22_91:                              # %for.inc369
                                        #   in Loop: Header=BB22_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_82
.LBB22_92:                              # %for.end371
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_93:                              # %for.cond372
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	$0, -4(%rbp)
.LBB22_95:                              # %for.cond375
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB22_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB22_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB22_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_99
.LBB22_98:                              # %if.else394
                                        #   in Loop: Header=BB22_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_99:                              # %if.end409
                                        #   in Loop: Header=BB22_95 Depth=3
	jmp	.LBB22_100
.LBB22_100:                             # %for.inc410
                                        #   in Loop: Header=BB22_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_95
.LBB22_101:                             # %for.end412
                                        #   in Loop: Header=BB22_93 Depth=2
	jmp	.LBB22_102
.LBB22_102:                             # %for.inc413
                                        #   in Loop: Header=BB22_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_93
.LBB22_103:                             # %for.end415
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_104:                             # %for.cond416
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB22_104 Depth=2
	movl	$0, -4(%rbp)
.LBB22_106:                             # %for.cond419
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB22_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB22_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_110
.LBB22_109:                             # %if.else438
                                        #   in Loop: Header=BB22_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_110:                             # %if.end453
                                        #   in Loop: Header=BB22_106 Depth=3
	jmp	.LBB22_111
.LBB22_111:                             # %for.inc454
                                        #   in Loop: Header=BB22_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_106
.LBB22_112:                             # %for.end456
                                        #   in Loop: Header=BB22_104 Depth=2
	jmp	.LBB22_113
.LBB22_113:                             # %for.inc457
                                        #   in Loop: Header=BB22_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_104
.LBB22_114:                             # %for.end459
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_115:                             # %for.cond460
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB22_115 Depth=2
	movl	$0, -4(%rbp)
.LBB22_117:                             # %for.cond463
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB22_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB22_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_121
.LBB22_120:                             # %if.else482
                                        #   in Loop: Header=BB22_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_121:                             # %if.end497
                                        #   in Loop: Header=BB22_117 Depth=3
	jmp	.LBB22_122
.LBB22_122:                             # %for.inc498
                                        #   in Loop: Header=BB22_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_117
.LBB22_123:                             # %for.end500
                                        #   in Loop: Header=BB22_115 Depth=2
	jmp	.LBB22_124
.LBB22_124:                             # %for.inc501
                                        #   in Loop: Header=BB22_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_115
.LBB22_125:                             # %for.end503
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_126:                             # %for.cond504
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB22_126 Depth=2
	movl	$0, -4(%rbp)
.LBB22_128:                             # %for.cond507
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB22_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB22_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB22_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_132
.LBB22_131:                             # %if.else526
                                        #   in Loop: Header=BB22_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_132:                             # %if.end541
                                        #   in Loop: Header=BB22_128 Depth=3
	jmp	.LBB22_133
.LBB22_133:                             # %for.inc542
                                        #   in Loop: Header=BB22_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_128
.LBB22_134:                             # %for.end544
                                        #   in Loop: Header=BB22_126 Depth=2
	jmp	.LBB22_135
.LBB22_135:                             # %for.inc545
                                        #   in Loop: Header=BB22_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_126
.LBB22_136:                             # %for.end547
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_137:                             # %for.cond548
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB22_137 Depth=2
	movl	$0, -4(%rbp)
.LBB22_139:                             # %for.cond551
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB22_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB22_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB22_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_143
.LBB22_142:                             # %if.else570
                                        #   in Loop: Header=BB22_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_143:                             # %if.end585
                                        #   in Loop: Header=BB22_139 Depth=3
	jmp	.LBB22_144
.LBB22_144:                             # %for.inc586
                                        #   in Loop: Header=BB22_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_139
.LBB22_145:                             # %for.end588
                                        #   in Loop: Header=BB22_137 Depth=2
	jmp	.LBB22_146
.LBB22_146:                             # %for.inc589
                                        #   in Loop: Header=BB22_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_137
.LBB22_147:                             # %for.end591
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_148:                             # %for.cond592
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB22_148 Depth=2
	movl	$0, -4(%rbp)
.LBB22_150:                             # %for.cond595
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB22_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB22_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_154
.LBB22_153:                             # %if.else614
                                        #   in Loop: Header=BB22_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_154:                             # %if.end629
                                        #   in Loop: Header=BB22_150 Depth=3
	jmp	.LBB22_155
.LBB22_155:                             # %for.inc630
                                        #   in Loop: Header=BB22_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_150
.LBB22_156:                             # %for.end632
                                        #   in Loop: Header=BB22_148 Depth=2
	jmp	.LBB22_157
.LBB22_157:                             # %for.inc633
                                        #   in Loop: Header=BB22_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_148
.LBB22_158:                             # %for.end635
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_159:                             # %for.cond636
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB22_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB22_159 Depth=2
	movl	$0, -4(%rbp)
.LBB22_161:                             # %for.cond639
                                        #   Parent Loop BB22_1 Depth=1
                                        #     Parent Loop BB22_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB22_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB22_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB22_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB22_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB22_165
.LBB22_164:                             # %if.else658
                                        #   in Loop: Header=BB22_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB22_165:                             # %if.end673
                                        #   in Loop: Header=BB22_161 Depth=3
	jmp	.LBB22_166
.LBB22_166:                             # %for.inc674
                                        #   in Loop: Header=BB22_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_161
.LBB22_167:                             # %for.end676
                                        #   in Loop: Header=BB22_159 Depth=2
	jmp	.LBB22_168
.LBB22_168:                             # %for.inc677
                                        #   in Loop: Header=BB22_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_159
.LBB22_169:                             # %for.end679
                                        #   in Loop: Header=BB22_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB22_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB22_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB22_171:                             # %if.end682
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_172
.LBB22_172:                             # %for.inc683
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB22_1
.LBB22_173:                             # %for.end685
	cmpl	$949629330, -48(%rbp)   # imm = 0x389A3192
	jne	.LBB22_175
.LBB22_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_174
.Lfunc_end22:
	.size	GetCtxModelNumber.15, .Lfunc_end22-GetCtxModelNumber.15
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.16        # -- Begin function init_contexts.16
	.p2align	4, 0x90
	.type	init_contexts.16,@function
init_contexts.16:                       # @init_contexts.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1068105007, -28(%rbp)  # imm = 0x3FA9FD2F
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB23_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -4(%rbp)
.LBB23_3:                               # %for.cond2
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB23_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_7
.LBB23_6:                               # %if.else
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_7:                               # %if.end
                                        #   in Loop: Header=BB23_3 Depth=2
	jmp	.LBB23_8
.LBB23_8:                               # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_3
.LBB23_9:                               # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_10
.LBB23_10:                              # %for.inc28
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_1
.LBB23_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB23_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB23_12 Depth=1
	movl	$0, -4(%rbp)
.LBB23_14:                              # %for.cond34
                                        #   Parent Loop BB23_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB23_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_18
.LBB23_17:                              # %if.else52
                                        #   in Loop: Header=BB23_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_18:                              # %if.end66
                                        #   in Loop: Header=BB23_14 Depth=2
	jmp	.LBB23_19
.LBB23_19:                              # %for.inc67
                                        #   in Loop: Header=BB23_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_14
.LBB23_20:                              # %for.end69
                                        #   in Loop: Header=BB23_12 Depth=1
	jmp	.LBB23_21
.LBB23_21:                              # %for.inc70
                                        #   in Loop: Header=BB23_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_12
.LBB23_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB23_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	$0, -4(%rbp)
.LBB23_25:                              # %for.cond76
                                        #   Parent Loop BB23_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB23_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_29
.LBB23_28:                              # %if.else94
                                        #   in Loop: Header=BB23_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_29:                              # %if.end108
                                        #   in Loop: Header=BB23_25 Depth=2
	jmp	.LBB23_30
.LBB23_30:                              # %for.inc109
                                        #   in Loop: Header=BB23_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_25
.LBB23_31:                              # %for.end111
                                        #   in Loop: Header=BB23_23 Depth=1
	jmp	.LBB23_32
.LBB23_32:                              # %for.inc112
                                        #   in Loop: Header=BB23_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_23
.LBB23_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB23_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB23_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	$0, -4(%rbp)
.LBB23_36:                              # %for.cond118
                                        #   Parent Loop BB23_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB23_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_40
.LBB23_39:                              # %if.else136
                                        #   in Loop: Header=BB23_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_40:                              # %if.end150
                                        #   in Loop: Header=BB23_36 Depth=2
	jmp	.LBB23_41
.LBB23_41:                              # %for.inc151
                                        #   in Loop: Header=BB23_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_36
.LBB23_42:                              # %for.end153
                                        #   in Loop: Header=BB23_34 Depth=1
	jmp	.LBB23_43
.LBB23_43:                              # %for.inc154
                                        #   in Loop: Header=BB23_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_34
.LBB23_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB23_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_49
.LBB23_48:                              # %if.else172
                                        #   in Loop: Header=BB23_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_49:                              # %if.end183
                                        #   in Loop: Header=BB23_45 Depth=1
	jmp	.LBB23_50
.LBB23_50:                              # %for.inc184
                                        #   in Loop: Header=BB23_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_45
.LBB23_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB23_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_56
.LBB23_55:                              # %if.else202
                                        #   in Loop: Header=BB23_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_56:                              # %if.end213
                                        #   in Loop: Header=BB23_52 Depth=1
	jmp	.LBB23_57
.LBB23_57:                              # %for.inc214
                                        #   in Loop: Header=BB23_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_52
.LBB23_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB23_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB23_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_63
.LBB23_62:                              # %if.else232
                                        #   in Loop: Header=BB23_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_63:                              # %if.end243
                                        #   in Loop: Header=BB23_59 Depth=1
	jmp	.LBB23_64
.LBB23_64:                              # %for.inc244
                                        #   in Loop: Header=BB23_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_59
.LBB23_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB23_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB23_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_70
.LBB23_69:                              # %if.else262
                                        #   in Loop: Header=BB23_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_70:                              # %if.end273
                                        #   in Loop: Header=BB23_66 Depth=1
	jmp	.LBB23_71
.LBB23_71:                              # %for.inc274
                                        #   in Loop: Header=BB23_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_66
.LBB23_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB23_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB23_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_77
.LBB23_76:                              # %if.else292
                                        #   in Loop: Header=BB23_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_77:                              # %if.end303
                                        #   in Loop: Header=BB23_73 Depth=1
	jmp	.LBB23_78
.LBB23_78:                              # %for.inc304
                                        #   in Loop: Header=BB23_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_73
.LBB23_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB23_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB23_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	$0, -4(%rbp)
.LBB23_82:                              # %for.cond310
                                        #   Parent Loop BB23_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_86
.LBB23_85:                              # %if.else328
                                        #   in Loop: Header=BB23_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_86:                              # %if.end342
                                        #   in Loop: Header=BB23_82 Depth=2
	jmp	.LBB23_87
.LBB23_87:                              # %for.inc343
                                        #   in Loop: Header=BB23_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_82
.LBB23_88:                              # %for.end345
                                        #   in Loop: Header=BB23_80 Depth=1
	jmp	.LBB23_89
.LBB23_89:                              # %for.inc346
                                        #   in Loop: Header=BB23_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_80
.LBB23_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB23_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	$0, -4(%rbp)
.LBB23_93:                              # %for.cond352
                                        #   Parent Loop BB23_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_97
.LBB23_96:                              # %if.else370
                                        #   in Loop: Header=BB23_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_97:                              # %if.end384
                                        #   in Loop: Header=BB23_93 Depth=2
	jmp	.LBB23_98
.LBB23_98:                              # %for.inc385
                                        #   in Loop: Header=BB23_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_93
.LBB23_99:                              # %for.end387
                                        #   in Loop: Header=BB23_91 Depth=1
	jmp	.LBB23_100
.LBB23_100:                             # %for.inc388
                                        #   in Loop: Header=BB23_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_91
.LBB23_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB23_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB23_102 Depth=1
	movl	$0, -4(%rbp)
.LBB23_104:                             # %for.cond394
                                        #   Parent Loop BB23_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_108
.LBB23_107:                             # %if.else412
                                        #   in Loop: Header=BB23_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_108:                             # %if.end426
                                        #   in Loop: Header=BB23_104 Depth=2
	jmp	.LBB23_109
.LBB23_109:                             # %for.inc427
                                        #   in Loop: Header=BB23_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_104
.LBB23_110:                             # %for.end429
                                        #   in Loop: Header=BB23_102 Depth=1
	jmp	.LBB23_111
.LBB23_111:                             # %for.inc430
                                        #   in Loop: Header=BB23_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_102
.LBB23_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB23_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB23_113 Depth=1
	movl	$0, -4(%rbp)
.LBB23_115:                             # %for.cond436
                                        #   Parent Loop BB23_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_119
.LBB23_118:                             # %if.else454
                                        #   in Loop: Header=BB23_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_119:                             # %if.end468
                                        #   in Loop: Header=BB23_115 Depth=2
	jmp	.LBB23_120
.LBB23_120:                             # %for.inc469
                                        #   in Loop: Header=BB23_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_115
.LBB23_121:                             # %for.end471
                                        #   in Loop: Header=BB23_113 Depth=1
	jmp	.LBB23_122
.LBB23_122:                             # %for.inc472
                                        #   in Loop: Header=BB23_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_113
.LBB23_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB23_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB23_124 Depth=1
	movl	$0, -4(%rbp)
.LBB23_126:                             # %for.cond478
                                        #   Parent Loop BB23_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB23_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_130
.LBB23_129:                             # %if.else496
                                        #   in Loop: Header=BB23_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_130:                             # %if.end510
                                        #   in Loop: Header=BB23_126 Depth=2
	jmp	.LBB23_131
.LBB23_131:                             # %for.inc511
                                        #   in Loop: Header=BB23_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_126
.LBB23_132:                             # %for.end513
                                        #   in Loop: Header=BB23_124 Depth=1
	jmp	.LBB23_133
.LBB23_133:                             # %for.inc514
                                        #   in Loop: Header=BB23_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_124
.LBB23_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB23_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB23_135 Depth=1
	movl	$0, -4(%rbp)
.LBB23_137:                             # %for.cond520
                                        #   Parent Loop BB23_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB23_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_141
.LBB23_140:                             # %if.else538
                                        #   in Loop: Header=BB23_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_141:                             # %if.end552
                                        #   in Loop: Header=BB23_137 Depth=2
	jmp	.LBB23_142
.LBB23_142:                             # %for.inc553
                                        #   in Loop: Header=BB23_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_137
.LBB23_143:                             # %for.end555
                                        #   in Loop: Header=BB23_135 Depth=1
	jmp	.LBB23_144
.LBB23_144:                             # %for.inc556
                                        #   in Loop: Header=BB23_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_135
.LBB23_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB23_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB23_146 Depth=1
	movl	$0, -4(%rbp)
.LBB23_148:                             # %for.cond562
                                        #   Parent Loop BB23_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_152
.LBB23_151:                             # %if.else580
                                        #   in Loop: Header=BB23_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_152:                             # %if.end594
                                        #   in Loop: Header=BB23_148 Depth=2
	jmp	.LBB23_153
.LBB23_153:                             # %for.inc595
                                        #   in Loop: Header=BB23_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_148
.LBB23_154:                             # %for.end597
                                        #   in Loop: Header=BB23_146 Depth=1
	jmp	.LBB23_155
.LBB23_155:                             # %for.inc598
                                        #   in Loop: Header=BB23_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_146
.LBB23_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB23_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB23_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB23_157 Depth=1
	movl	$0, -4(%rbp)
.LBB23_159:                             # %for.cond604
                                        #   Parent Loop BB23_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB23_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB23_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB23_163
.LBB23_162:                             # %if.else622
                                        #   in Loop: Header=BB23_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB23_163:                             # %if.end636
                                        #   in Loop: Header=BB23_159 Depth=2
	jmp	.LBB23_164
.LBB23_164:                             # %for.inc637
                                        #   in Loop: Header=BB23_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_159
.LBB23_165:                             # %for.end639
                                        #   in Loop: Header=BB23_157 Depth=1
	jmp	.LBB23_166
.LBB23_166:                             # %for.inc640
                                        #   in Loop: Header=BB23_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_157
.LBB23_167:                             # %for.end642
	cmpl	$1068105007, -28(%rbp)  # imm = 0x3FA9FD2F
	jne	.LBB23_169
.LBB23_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_168
.Lfunc_end23:
	.size	init_contexts.16, .Lfunc_end23-init_contexts.16
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.17        # -- Begin function init_contexts.17
	.p2align	4, 0x90
	.type	init_contexts.17,@function
init_contexts.17:                       # @init_contexts.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1567568519, -28(%rbp)  # imm = 0x5D6F3287
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB24_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	$0, -4(%rbp)
.LBB24_3:                               # %for.cond2
                                        #   Parent Loop BB24_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB24_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_7
.LBB24_6:                               # %if.else
                                        #   in Loop: Header=BB24_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_7:                               # %if.end
                                        #   in Loop: Header=BB24_3 Depth=2
	jmp	.LBB24_8
.LBB24_8:                               # %for.inc
                                        #   in Loop: Header=BB24_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_3
.LBB24_9:                               # %for.end
                                        #   in Loop: Header=BB24_1 Depth=1
	jmp	.LBB24_10
.LBB24_10:                              # %for.inc28
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_1
.LBB24_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB24_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB24_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB24_12 Depth=1
	movl	$0, -4(%rbp)
.LBB24_14:                              # %for.cond34
                                        #   Parent Loop BB24_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB24_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB24_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB24_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_18
.LBB24_17:                              # %if.else52
                                        #   in Loop: Header=BB24_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_18:                              # %if.end66
                                        #   in Loop: Header=BB24_14 Depth=2
	jmp	.LBB24_19
.LBB24_19:                              # %for.inc67
                                        #   in Loop: Header=BB24_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_14
.LBB24_20:                              # %for.end69
                                        #   in Loop: Header=BB24_12 Depth=1
	jmp	.LBB24_21
.LBB24_21:                              # %for.inc70
                                        #   in Loop: Header=BB24_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_12
.LBB24_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB24_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB24_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB24_23 Depth=1
	movl	$0, -4(%rbp)
.LBB24_25:                              # %for.cond76
                                        #   Parent Loop BB24_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB24_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB24_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB24_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_29
.LBB24_28:                              # %if.else94
                                        #   in Loop: Header=BB24_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_29:                              # %if.end108
                                        #   in Loop: Header=BB24_25 Depth=2
	jmp	.LBB24_30
.LBB24_30:                              # %for.inc109
                                        #   in Loop: Header=BB24_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_25
.LBB24_31:                              # %for.end111
                                        #   in Loop: Header=BB24_23 Depth=1
	jmp	.LBB24_32
.LBB24_32:                              # %for.inc112
                                        #   in Loop: Header=BB24_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_23
.LBB24_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB24_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB24_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB24_34 Depth=1
	movl	$0, -4(%rbp)
.LBB24_36:                              # %for.cond118
                                        #   Parent Loop BB24_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB24_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB24_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB24_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_40
.LBB24_39:                              # %if.else136
                                        #   in Loop: Header=BB24_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_40:                              # %if.end150
                                        #   in Loop: Header=BB24_36 Depth=2
	jmp	.LBB24_41
.LBB24_41:                              # %for.inc151
                                        #   in Loop: Header=BB24_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_36
.LBB24_42:                              # %for.end153
                                        #   in Loop: Header=BB24_34 Depth=1
	jmp	.LBB24_43
.LBB24_43:                              # %for.inc154
                                        #   in Loop: Header=BB24_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_34
.LBB24_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB24_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB24_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB24_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_49
.LBB24_48:                              # %if.else172
                                        #   in Loop: Header=BB24_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_49:                              # %if.end183
                                        #   in Loop: Header=BB24_45 Depth=1
	jmp	.LBB24_50
.LBB24_50:                              # %for.inc184
                                        #   in Loop: Header=BB24_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_45
.LBB24_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB24_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB24_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB24_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_56
.LBB24_55:                              # %if.else202
                                        #   in Loop: Header=BB24_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_56:                              # %if.end213
                                        #   in Loop: Header=BB24_52 Depth=1
	jmp	.LBB24_57
.LBB24_57:                              # %for.inc214
                                        #   in Loop: Header=BB24_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_52
.LBB24_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB24_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB24_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB24_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB24_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_63
.LBB24_62:                              # %if.else232
                                        #   in Loop: Header=BB24_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_63:                              # %if.end243
                                        #   in Loop: Header=BB24_59 Depth=1
	jmp	.LBB24_64
.LBB24_64:                              # %for.inc244
                                        #   in Loop: Header=BB24_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_59
.LBB24_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB24_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB24_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB24_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB24_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_70
.LBB24_69:                              # %if.else262
                                        #   in Loop: Header=BB24_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_70:                              # %if.end273
                                        #   in Loop: Header=BB24_66 Depth=1
	jmp	.LBB24_71
.LBB24_71:                              # %for.inc274
                                        #   in Loop: Header=BB24_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_66
.LBB24_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB24_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB24_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB24_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB24_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_77
.LBB24_76:                              # %if.else292
                                        #   in Loop: Header=BB24_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_77:                              # %if.end303
                                        #   in Loop: Header=BB24_73 Depth=1
	jmp	.LBB24_78
.LBB24_78:                              # %for.inc304
                                        #   in Loop: Header=BB24_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_73
.LBB24_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB24_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB24_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB24_80 Depth=1
	movl	$0, -4(%rbp)
.LBB24_82:                              # %for.cond310
                                        #   Parent Loop BB24_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB24_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB24_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_86
.LBB24_85:                              # %if.else328
                                        #   in Loop: Header=BB24_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_86:                              # %if.end342
                                        #   in Loop: Header=BB24_82 Depth=2
	jmp	.LBB24_87
.LBB24_87:                              # %for.inc343
                                        #   in Loop: Header=BB24_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_82
.LBB24_88:                              # %for.end345
                                        #   in Loop: Header=BB24_80 Depth=1
	jmp	.LBB24_89
.LBB24_89:                              # %for.inc346
                                        #   in Loop: Header=BB24_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_80
.LBB24_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB24_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB24_91 Depth=1
	movl	$0, -4(%rbp)
.LBB24_93:                              # %for.cond352
                                        #   Parent Loop BB24_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB24_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB24_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB24_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_97
.LBB24_96:                              # %if.else370
                                        #   in Loop: Header=BB24_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_97:                              # %if.end384
                                        #   in Loop: Header=BB24_93 Depth=2
	jmp	.LBB24_98
.LBB24_98:                              # %for.inc385
                                        #   in Loop: Header=BB24_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_93
.LBB24_99:                              # %for.end387
                                        #   in Loop: Header=BB24_91 Depth=1
	jmp	.LBB24_100
.LBB24_100:                             # %for.inc388
                                        #   in Loop: Header=BB24_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_91
.LBB24_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB24_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB24_102 Depth=1
	movl	$0, -4(%rbp)
.LBB24_104:                             # %for.cond394
                                        #   Parent Loop BB24_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB24_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB24_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB24_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_108
.LBB24_107:                             # %if.else412
                                        #   in Loop: Header=BB24_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_108:                             # %if.end426
                                        #   in Loop: Header=BB24_104 Depth=2
	jmp	.LBB24_109
.LBB24_109:                             # %for.inc427
                                        #   in Loop: Header=BB24_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_104
.LBB24_110:                             # %for.end429
                                        #   in Loop: Header=BB24_102 Depth=1
	jmp	.LBB24_111
.LBB24_111:                             # %for.inc430
                                        #   in Loop: Header=BB24_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_102
.LBB24_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB24_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB24_113 Depth=1
	movl	$0, -4(%rbp)
.LBB24_115:                             # %for.cond436
                                        #   Parent Loop BB24_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB24_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB24_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB24_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_119
.LBB24_118:                             # %if.else454
                                        #   in Loop: Header=BB24_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_119:                             # %if.end468
                                        #   in Loop: Header=BB24_115 Depth=2
	jmp	.LBB24_120
.LBB24_120:                             # %for.inc469
                                        #   in Loop: Header=BB24_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_115
.LBB24_121:                             # %for.end471
                                        #   in Loop: Header=BB24_113 Depth=1
	jmp	.LBB24_122
.LBB24_122:                             # %for.inc472
                                        #   in Loop: Header=BB24_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_113
.LBB24_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB24_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB24_124 Depth=1
	movl	$0, -4(%rbp)
.LBB24_126:                             # %for.cond478
                                        #   Parent Loop BB24_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB24_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB24_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB24_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_130
.LBB24_129:                             # %if.else496
                                        #   in Loop: Header=BB24_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_130:                             # %if.end510
                                        #   in Loop: Header=BB24_126 Depth=2
	jmp	.LBB24_131
.LBB24_131:                             # %for.inc511
                                        #   in Loop: Header=BB24_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_126
.LBB24_132:                             # %for.end513
                                        #   in Loop: Header=BB24_124 Depth=1
	jmp	.LBB24_133
.LBB24_133:                             # %for.inc514
                                        #   in Loop: Header=BB24_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_124
.LBB24_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB24_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	$0, -4(%rbp)
.LBB24_137:                             # %for.cond520
                                        #   Parent Loop BB24_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB24_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB24_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB24_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_141
.LBB24_140:                             # %if.else538
                                        #   in Loop: Header=BB24_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_141:                             # %if.end552
                                        #   in Loop: Header=BB24_137 Depth=2
	jmp	.LBB24_142
.LBB24_142:                             # %for.inc553
                                        #   in Loop: Header=BB24_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_137
.LBB24_143:                             # %for.end555
                                        #   in Loop: Header=BB24_135 Depth=1
	jmp	.LBB24_144
.LBB24_144:                             # %for.inc556
                                        #   in Loop: Header=BB24_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_135
.LBB24_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB24_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB24_146 Depth=1
	movl	$0, -4(%rbp)
.LBB24_148:                             # %for.cond562
                                        #   Parent Loop BB24_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB24_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB24_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB24_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_152
.LBB24_151:                             # %if.else580
                                        #   in Loop: Header=BB24_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_152:                             # %if.end594
                                        #   in Loop: Header=BB24_148 Depth=2
	jmp	.LBB24_153
.LBB24_153:                             # %for.inc595
                                        #   in Loop: Header=BB24_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_148
.LBB24_154:                             # %for.end597
                                        #   in Loop: Header=BB24_146 Depth=1
	jmp	.LBB24_155
.LBB24_155:                             # %for.inc598
                                        #   in Loop: Header=BB24_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_146
.LBB24_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB24_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB24_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB24_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB24_157 Depth=1
	movl	$0, -4(%rbp)
.LBB24_159:                             # %for.cond604
                                        #   Parent Loop BB24_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB24_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB24_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB24_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB24_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB24_163
.LBB24_162:                             # %if.else622
                                        #   in Loop: Header=BB24_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB24_163:                             # %if.end636
                                        #   in Loop: Header=BB24_159 Depth=2
	jmp	.LBB24_164
.LBB24_164:                             # %for.inc637
                                        #   in Loop: Header=BB24_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_159
.LBB24_165:                             # %for.end639
                                        #   in Loop: Header=BB24_157 Depth=1
	jmp	.LBB24_166
.LBB24_166:                             # %for.inc640
                                        #   in Loop: Header=BB24_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB24_157
.LBB24_167:                             # %for.end642
	cmpl	$1567568519, -28(%rbp)  # imm = 0x5D6F3287
	jne	.LBB24_169
.LBB24_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_168
.Lfunc_end24:
	.size	init_contexts.17, .Lfunc_end24-init_contexts.17
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.18       # -- Begin function store_contexts.18
	.p2align	4, 0x90
	.type	store_contexts.18,@function
store_contexts.18:                      # @store_contexts.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$565001119, -16(%rbp)   # imm = 0x21AD3B9F
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB25_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB25_3
.LBB25_2:                               # %if.else
	jmp	.LBB25_3
.LBB25_3:                               # %if.end
	cmpl	$565001119, -16(%rbp)   # imm = 0x21AD3B9F
	jne	.LBB25_5
.LBB25_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_4
.Lfunc_end25:
	.size	store_contexts.18, .Lfunc_end25-store_contexts.18
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.19        # -- Begin function init_contexts.19
	.p2align	4, 0x90
	.type	init_contexts.19,@function
init_contexts.19:                       # @init_contexts.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1774576841, -28(%rbp)  # imm = 0x69C5E4C9
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB26_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB26_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	$0, -4(%rbp)
.LBB26_3:                               # %for.cond2
                                        #   Parent Loop BB26_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB26_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_7
.LBB26_6:                               # %if.else
                                        #   in Loop: Header=BB26_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_7:                               # %if.end
                                        #   in Loop: Header=BB26_3 Depth=2
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc
                                        #   in Loop: Header=BB26_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_3
.LBB26_9:                               # %for.end
                                        #   in Loop: Header=BB26_1 Depth=1
	jmp	.LBB26_10
.LBB26_10:                              # %for.inc28
                                        #   in Loop: Header=BB26_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_1
.LBB26_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB26_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB26_12 Depth=1
	movl	$0, -4(%rbp)
.LBB26_14:                              # %for.cond34
                                        #   Parent Loop BB26_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB26_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB26_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB26_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_18
.LBB26_17:                              # %if.else52
                                        #   in Loop: Header=BB26_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_18:                              # %if.end66
                                        #   in Loop: Header=BB26_14 Depth=2
	jmp	.LBB26_19
.LBB26_19:                              # %for.inc67
                                        #   in Loop: Header=BB26_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_14
.LBB26_20:                              # %for.end69
                                        #   in Loop: Header=BB26_12 Depth=1
	jmp	.LBB26_21
.LBB26_21:                              # %for.inc70
                                        #   in Loop: Header=BB26_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_12
.LBB26_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB26_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB26_23 Depth=1
	movl	$0, -4(%rbp)
.LBB26_25:                              # %for.cond76
                                        #   Parent Loop BB26_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB26_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_29
.LBB26_28:                              # %if.else94
                                        #   in Loop: Header=BB26_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_29:                              # %if.end108
                                        #   in Loop: Header=BB26_25 Depth=2
	jmp	.LBB26_30
.LBB26_30:                              # %for.inc109
                                        #   in Loop: Header=BB26_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_25
.LBB26_31:                              # %for.end111
                                        #   in Loop: Header=BB26_23 Depth=1
	jmp	.LBB26_32
.LBB26_32:                              # %for.inc112
                                        #   in Loop: Header=BB26_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_23
.LBB26_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB26_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB26_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB26_34 Depth=1
	movl	$0, -4(%rbp)
.LBB26_36:                              # %for.cond118
                                        #   Parent Loop BB26_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB26_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB26_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB26_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_40
.LBB26_39:                              # %if.else136
                                        #   in Loop: Header=BB26_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_40:                              # %if.end150
                                        #   in Loop: Header=BB26_36 Depth=2
	jmp	.LBB26_41
.LBB26_41:                              # %for.inc151
                                        #   in Loop: Header=BB26_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_36
.LBB26_42:                              # %for.end153
                                        #   in Loop: Header=BB26_34 Depth=1
	jmp	.LBB26_43
.LBB26_43:                              # %for.inc154
                                        #   in Loop: Header=BB26_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_34
.LBB26_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB26_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB26_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB26_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB26_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_49
.LBB26_48:                              # %if.else172
                                        #   in Loop: Header=BB26_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_49:                              # %if.end183
                                        #   in Loop: Header=BB26_45 Depth=1
	jmp	.LBB26_50
.LBB26_50:                              # %for.inc184
                                        #   in Loop: Header=BB26_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_45
.LBB26_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB26_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB26_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB26_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB26_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_56
.LBB26_55:                              # %if.else202
                                        #   in Loop: Header=BB26_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_56:                              # %if.end213
                                        #   in Loop: Header=BB26_52 Depth=1
	jmp	.LBB26_57
.LBB26_57:                              # %for.inc214
                                        #   in Loop: Header=BB26_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_52
.LBB26_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB26_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB26_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB26_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB26_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_63
.LBB26_62:                              # %if.else232
                                        #   in Loop: Header=BB26_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_63:                              # %if.end243
                                        #   in Loop: Header=BB26_59 Depth=1
	jmp	.LBB26_64
.LBB26_64:                              # %for.inc244
                                        #   in Loop: Header=BB26_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_59
.LBB26_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB26_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB26_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB26_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB26_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_70
.LBB26_69:                              # %if.else262
                                        #   in Loop: Header=BB26_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_70:                              # %if.end273
                                        #   in Loop: Header=BB26_66 Depth=1
	jmp	.LBB26_71
.LBB26_71:                              # %for.inc274
                                        #   in Loop: Header=BB26_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_66
.LBB26_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB26_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB26_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB26_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB26_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_77
.LBB26_76:                              # %if.else292
                                        #   in Loop: Header=BB26_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_77:                              # %if.end303
                                        #   in Loop: Header=BB26_73 Depth=1
	jmp	.LBB26_78
.LBB26_78:                              # %for.inc304
                                        #   in Loop: Header=BB26_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_73
.LBB26_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB26_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB26_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB26_80 Depth=1
	movl	$0, -4(%rbp)
.LBB26_82:                              # %for.cond310
                                        #   Parent Loop BB26_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB26_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB26_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_86
.LBB26_85:                              # %if.else328
                                        #   in Loop: Header=BB26_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_86:                              # %if.end342
                                        #   in Loop: Header=BB26_82 Depth=2
	jmp	.LBB26_87
.LBB26_87:                              # %for.inc343
                                        #   in Loop: Header=BB26_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_82
.LBB26_88:                              # %for.end345
                                        #   in Loop: Header=BB26_80 Depth=1
	jmp	.LBB26_89
.LBB26_89:                              # %for.inc346
                                        #   in Loop: Header=BB26_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_80
.LBB26_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB26_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB26_91 Depth=1
	movl	$0, -4(%rbp)
.LBB26_93:                              # %for.cond352
                                        #   Parent Loop BB26_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB26_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB26_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB26_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_97
.LBB26_96:                              # %if.else370
                                        #   in Loop: Header=BB26_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_97:                              # %if.end384
                                        #   in Loop: Header=BB26_93 Depth=2
	jmp	.LBB26_98
.LBB26_98:                              # %for.inc385
                                        #   in Loop: Header=BB26_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_93
.LBB26_99:                              # %for.end387
                                        #   in Loop: Header=BB26_91 Depth=1
	jmp	.LBB26_100
.LBB26_100:                             # %for.inc388
                                        #   in Loop: Header=BB26_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_91
.LBB26_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB26_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB26_102 Depth=1
	movl	$0, -4(%rbp)
.LBB26_104:                             # %for.cond394
                                        #   Parent Loop BB26_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB26_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB26_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_108
.LBB26_107:                             # %if.else412
                                        #   in Loop: Header=BB26_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_108:                             # %if.end426
                                        #   in Loop: Header=BB26_104 Depth=2
	jmp	.LBB26_109
.LBB26_109:                             # %for.inc427
                                        #   in Loop: Header=BB26_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_104
.LBB26_110:                             # %for.end429
                                        #   in Loop: Header=BB26_102 Depth=1
	jmp	.LBB26_111
.LBB26_111:                             # %for.inc430
                                        #   in Loop: Header=BB26_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_102
.LBB26_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB26_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB26_113 Depth=1
	movl	$0, -4(%rbp)
.LBB26_115:                             # %for.cond436
                                        #   Parent Loop BB26_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB26_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB26_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_119
.LBB26_118:                             # %if.else454
                                        #   in Loop: Header=BB26_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_119:                             # %if.end468
                                        #   in Loop: Header=BB26_115 Depth=2
	jmp	.LBB26_120
.LBB26_120:                             # %for.inc469
                                        #   in Loop: Header=BB26_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_115
.LBB26_121:                             # %for.end471
                                        #   in Loop: Header=BB26_113 Depth=1
	jmp	.LBB26_122
.LBB26_122:                             # %for.inc472
                                        #   in Loop: Header=BB26_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_113
.LBB26_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB26_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB26_124 Depth=1
	movl	$0, -4(%rbp)
.LBB26_126:                             # %for.cond478
                                        #   Parent Loop BB26_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB26_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB26_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB26_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_130
.LBB26_129:                             # %if.else496
                                        #   in Loop: Header=BB26_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_130:                             # %if.end510
                                        #   in Loop: Header=BB26_126 Depth=2
	jmp	.LBB26_131
.LBB26_131:                             # %for.inc511
                                        #   in Loop: Header=BB26_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_126
.LBB26_132:                             # %for.end513
                                        #   in Loop: Header=BB26_124 Depth=1
	jmp	.LBB26_133
.LBB26_133:                             # %for.inc514
                                        #   in Loop: Header=BB26_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_124
.LBB26_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB26_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB26_135 Depth=1
	movl	$0, -4(%rbp)
.LBB26_137:                             # %for.cond520
                                        #   Parent Loop BB26_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB26_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB26_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB26_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_141
.LBB26_140:                             # %if.else538
                                        #   in Loop: Header=BB26_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_141:                             # %if.end552
                                        #   in Loop: Header=BB26_137 Depth=2
	jmp	.LBB26_142
.LBB26_142:                             # %for.inc553
                                        #   in Loop: Header=BB26_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_137
.LBB26_143:                             # %for.end555
                                        #   in Loop: Header=BB26_135 Depth=1
	jmp	.LBB26_144
.LBB26_144:                             # %for.inc556
                                        #   in Loop: Header=BB26_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_135
.LBB26_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB26_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB26_146 Depth=1
	movl	$0, -4(%rbp)
.LBB26_148:                             # %for.cond562
                                        #   Parent Loop BB26_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB26_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB26_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_152
.LBB26_151:                             # %if.else580
                                        #   in Loop: Header=BB26_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_152:                             # %if.end594
                                        #   in Loop: Header=BB26_148 Depth=2
	jmp	.LBB26_153
.LBB26_153:                             # %for.inc595
                                        #   in Loop: Header=BB26_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_148
.LBB26_154:                             # %for.end597
                                        #   in Loop: Header=BB26_146 Depth=1
	jmp	.LBB26_155
.LBB26_155:                             # %for.inc598
                                        #   in Loop: Header=BB26_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_146
.LBB26_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB26_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB26_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	$0, -4(%rbp)
.LBB26_159:                             # %for.cond604
                                        #   Parent Loop BB26_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB26_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB26_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB26_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB26_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB26_163
.LBB26_162:                             # %if.else622
                                        #   in Loop: Header=BB26_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB26_163:                             # %if.end636
                                        #   in Loop: Header=BB26_159 Depth=2
	jmp	.LBB26_164
.LBB26_164:                             # %for.inc637
                                        #   in Loop: Header=BB26_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_159
.LBB26_165:                             # %for.end639
                                        #   in Loop: Header=BB26_157 Depth=1
	jmp	.LBB26_166
.LBB26_166:                             # %for.inc640
                                        #   in Loop: Header=BB26_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_157
.LBB26_167:                             # %for.end642
	cmpl	$1774576841, -28(%rbp)  # imm = 0x69C5E4C9
	jne	.LBB26_169
.LBB26_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_168
.Lfunc_end26:
	.size	init_contexts.19, .Lfunc_end26-init_contexts.19
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.20        # -- Begin function init_contexts.20
	.p2align	4, 0x90
	.type	init_contexts.20,@function
init_contexts.20:                       # @init_contexts.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$262503416, -28(%rbp)   # imm = 0xFA57BF8
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB27_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_3:                               # %for.cond2
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB27_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_7
.LBB27_6:                               # %if.else
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_7:                               # %if.end
                                        #   in Loop: Header=BB27_3 Depth=2
	jmp	.LBB27_8
.LBB27_8:                               # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_3
.LBB27_9:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_10
.LBB27_10:                              # %for.inc28
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_1
.LBB27_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB27_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB27_12 Depth=1
	movl	$0, -4(%rbp)
.LBB27_14:                              # %for.cond34
                                        #   Parent Loop BB27_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB27_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_18
.LBB27_17:                              # %if.else52
                                        #   in Loop: Header=BB27_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_18:                              # %if.end66
                                        #   in Loop: Header=BB27_14 Depth=2
	jmp	.LBB27_19
.LBB27_19:                              # %for.inc67
                                        #   in Loop: Header=BB27_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_14
.LBB27_20:                              # %for.end69
                                        #   in Loop: Header=BB27_12 Depth=1
	jmp	.LBB27_21
.LBB27_21:                              # %for.inc70
                                        #   in Loop: Header=BB27_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_12
.LBB27_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB27_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	$0, -4(%rbp)
.LBB27_25:                              # %for.cond76
                                        #   Parent Loop BB27_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB27_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_29
.LBB27_28:                              # %if.else94
                                        #   in Loop: Header=BB27_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_29:                              # %if.end108
                                        #   in Loop: Header=BB27_25 Depth=2
	jmp	.LBB27_30
.LBB27_30:                              # %for.inc109
                                        #   in Loop: Header=BB27_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_25
.LBB27_31:                              # %for.end111
                                        #   in Loop: Header=BB27_23 Depth=1
	jmp	.LBB27_32
.LBB27_32:                              # %for.inc112
                                        #   in Loop: Header=BB27_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_23
.LBB27_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB27_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB27_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	$0, -4(%rbp)
.LBB27_36:                              # %for.cond118
                                        #   Parent Loop BB27_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB27_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_40
.LBB27_39:                              # %if.else136
                                        #   in Loop: Header=BB27_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_40:                              # %if.end150
                                        #   in Loop: Header=BB27_36 Depth=2
	jmp	.LBB27_41
.LBB27_41:                              # %for.inc151
                                        #   in Loop: Header=BB27_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_36
.LBB27_42:                              # %for.end153
                                        #   in Loop: Header=BB27_34 Depth=1
	jmp	.LBB27_43
.LBB27_43:                              # %for.inc154
                                        #   in Loop: Header=BB27_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_34
.LBB27_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB27_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_49
.LBB27_48:                              # %if.else172
                                        #   in Loop: Header=BB27_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_49:                              # %if.end183
                                        #   in Loop: Header=BB27_45 Depth=1
	jmp	.LBB27_50
.LBB27_50:                              # %for.inc184
                                        #   in Loop: Header=BB27_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_45
.LBB27_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB27_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_56
.LBB27_55:                              # %if.else202
                                        #   in Loop: Header=BB27_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_56:                              # %if.end213
                                        #   in Loop: Header=BB27_52 Depth=1
	jmp	.LBB27_57
.LBB27_57:                              # %for.inc214
                                        #   in Loop: Header=BB27_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_52
.LBB27_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB27_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB27_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_63
.LBB27_62:                              # %if.else232
                                        #   in Loop: Header=BB27_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_63:                              # %if.end243
                                        #   in Loop: Header=BB27_59 Depth=1
	jmp	.LBB27_64
.LBB27_64:                              # %for.inc244
                                        #   in Loop: Header=BB27_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_59
.LBB27_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB27_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB27_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_70
.LBB27_69:                              # %if.else262
                                        #   in Loop: Header=BB27_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_70:                              # %if.end273
                                        #   in Loop: Header=BB27_66 Depth=1
	jmp	.LBB27_71
.LBB27_71:                              # %for.inc274
                                        #   in Loop: Header=BB27_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_66
.LBB27_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB27_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB27_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_77
.LBB27_76:                              # %if.else292
                                        #   in Loop: Header=BB27_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_77:                              # %if.end303
                                        #   in Loop: Header=BB27_73 Depth=1
	jmp	.LBB27_78
.LBB27_78:                              # %for.inc304
                                        #   in Loop: Header=BB27_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_73
.LBB27_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB27_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB27_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB27_80 Depth=1
	movl	$0, -4(%rbp)
.LBB27_82:                              # %for.cond310
                                        #   Parent Loop BB27_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_86
.LBB27_85:                              # %if.else328
                                        #   in Loop: Header=BB27_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_86:                              # %if.end342
                                        #   in Loop: Header=BB27_82 Depth=2
	jmp	.LBB27_87
.LBB27_87:                              # %for.inc343
                                        #   in Loop: Header=BB27_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_82
.LBB27_88:                              # %for.end345
                                        #   in Loop: Header=BB27_80 Depth=1
	jmp	.LBB27_89
.LBB27_89:                              # %for.inc346
                                        #   in Loop: Header=BB27_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_80
.LBB27_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB27_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB27_91 Depth=1
	movl	$0, -4(%rbp)
.LBB27_93:                              # %for.cond352
                                        #   Parent Loop BB27_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_97
.LBB27_96:                              # %if.else370
                                        #   in Loop: Header=BB27_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_97:                              # %if.end384
                                        #   in Loop: Header=BB27_93 Depth=2
	jmp	.LBB27_98
.LBB27_98:                              # %for.inc385
                                        #   in Loop: Header=BB27_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_93
.LBB27_99:                              # %for.end387
                                        #   in Loop: Header=BB27_91 Depth=1
	jmp	.LBB27_100
.LBB27_100:                             # %for.inc388
                                        #   in Loop: Header=BB27_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_91
.LBB27_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB27_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB27_102 Depth=1
	movl	$0, -4(%rbp)
.LBB27_104:                             # %for.cond394
                                        #   Parent Loop BB27_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_108
.LBB27_107:                             # %if.else412
                                        #   in Loop: Header=BB27_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_108:                             # %if.end426
                                        #   in Loop: Header=BB27_104 Depth=2
	jmp	.LBB27_109
.LBB27_109:                             # %for.inc427
                                        #   in Loop: Header=BB27_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_104
.LBB27_110:                             # %for.end429
                                        #   in Loop: Header=BB27_102 Depth=1
	jmp	.LBB27_111
.LBB27_111:                             # %for.inc430
                                        #   in Loop: Header=BB27_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_102
.LBB27_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB27_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB27_113 Depth=1
	movl	$0, -4(%rbp)
.LBB27_115:                             # %for.cond436
                                        #   Parent Loop BB27_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_119
.LBB27_118:                             # %if.else454
                                        #   in Loop: Header=BB27_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_119:                             # %if.end468
                                        #   in Loop: Header=BB27_115 Depth=2
	jmp	.LBB27_120
.LBB27_120:                             # %for.inc469
                                        #   in Loop: Header=BB27_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_115
.LBB27_121:                             # %for.end471
                                        #   in Loop: Header=BB27_113 Depth=1
	jmp	.LBB27_122
.LBB27_122:                             # %for.inc472
                                        #   in Loop: Header=BB27_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_113
.LBB27_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB27_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB27_124 Depth=1
	movl	$0, -4(%rbp)
.LBB27_126:                             # %for.cond478
                                        #   Parent Loop BB27_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB27_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_130
.LBB27_129:                             # %if.else496
                                        #   in Loop: Header=BB27_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_130:                             # %if.end510
                                        #   in Loop: Header=BB27_126 Depth=2
	jmp	.LBB27_131
.LBB27_131:                             # %for.inc511
                                        #   in Loop: Header=BB27_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_126
.LBB27_132:                             # %for.end513
                                        #   in Loop: Header=BB27_124 Depth=1
	jmp	.LBB27_133
.LBB27_133:                             # %for.inc514
                                        #   in Loop: Header=BB27_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_124
.LBB27_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB27_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	$0, -4(%rbp)
.LBB27_137:                             # %for.cond520
                                        #   Parent Loop BB27_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB27_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_141
.LBB27_140:                             # %if.else538
                                        #   in Loop: Header=BB27_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_141:                             # %if.end552
                                        #   in Loop: Header=BB27_137 Depth=2
	jmp	.LBB27_142
.LBB27_142:                             # %for.inc553
                                        #   in Loop: Header=BB27_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_137
.LBB27_143:                             # %for.end555
                                        #   in Loop: Header=BB27_135 Depth=1
	jmp	.LBB27_144
.LBB27_144:                             # %for.inc556
                                        #   in Loop: Header=BB27_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_135
.LBB27_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB27_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB27_146 Depth=1
	movl	$0, -4(%rbp)
.LBB27_148:                             # %for.cond562
                                        #   Parent Loop BB27_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_152
.LBB27_151:                             # %if.else580
                                        #   in Loop: Header=BB27_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_152:                             # %if.end594
                                        #   in Loop: Header=BB27_148 Depth=2
	jmp	.LBB27_153
.LBB27_153:                             # %for.inc595
                                        #   in Loop: Header=BB27_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_148
.LBB27_154:                             # %for.end597
                                        #   in Loop: Header=BB27_146 Depth=1
	jmp	.LBB27_155
.LBB27_155:                             # %for.inc598
                                        #   in Loop: Header=BB27_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_146
.LBB27_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB27_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB27_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB27_157 Depth=1
	movl	$0, -4(%rbp)
.LBB27_159:                             # %for.cond604
                                        #   Parent Loop BB27_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB27_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB27_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB27_163
.LBB27_162:                             # %if.else622
                                        #   in Loop: Header=BB27_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB27_163:                             # %if.end636
                                        #   in Loop: Header=BB27_159 Depth=2
	jmp	.LBB27_164
.LBB27_164:                             # %for.inc637
                                        #   in Loop: Header=BB27_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_159
.LBB27_165:                             # %for.end639
                                        #   in Loop: Header=BB27_157 Depth=1
	jmp	.LBB27_166
.LBB27_166:                             # %for.inc640
                                        #   in Loop: Header=BB27_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_157
.LBB27_167:                             # %for.end642
	cmpl	$262503416, -28(%rbp)   # imm = 0xFA57BF8
	jne	.LBB27_169
.LBB27_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_168
.Lfunc_end27:
	.size	init_contexts.20, .Lfunc_end27-init_contexts.20
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.21 # -- Begin function update_field_frame_contexts.21
	.p2align	4, 0x90
	.type	update_field_frame_contexts.21,@function
update_field_frame_contexts.21:         # @update_field_frame_contexts.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1661661455, -12(%rbp)  # imm = 0x630AF10F
	movl	%edi, -16(%rbp)
	cmpl	$0, -16(%rbp)
	je	.LBB28_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB28_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB28_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	$0, -8(%rbp)
.LBB28_4:                               # %for.cond1
                                        #   Parent Loop BB28_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB28_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB28_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB28_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_4
.LBB28_7:                               # %for.end
                                        #   in Loop: Header=BB28_2 Depth=1
	jmp	.LBB28_8
.LBB28_8:                               # %for.inc23
                                        #   in Loop: Header=BB28_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_2
.LBB28_9:                               # %for.end25
	jmp	.LBB28_19
.LBB28_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB28_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB28_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB28_11 Depth=1
	movl	$0, -8(%rbp)
.LBB28_13:                              # %for.cond29
                                        #   Parent Loop BB28_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB28_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB28_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB28_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_13
.LBB28_16:                              # %for.end56
                                        #   in Loop: Header=BB28_11 Depth=1
	jmp	.LBB28_17
.LBB28_17:                              # %for.inc57
                                        #   in Loop: Header=BB28_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_11
.LBB28_18:                              # %for.end59
	jmp	.LBB28_19
.LBB28_19:                              # %if.end
	cmpl	$1661661455, -12(%rbp)  # imm = 0x630AF10F
	jne	.LBB28_21
.LBB28_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_20
.Lfunc_end28:
	.size	update_field_frame_contexts.21, .Lfunc_end28-update_field_frame_contexts.21
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.22        # -- Begin function init_contexts.22
	.p2align	4, 0x90
	.type	init_contexts.22,@function
init_contexts.22:                       # @init_contexts.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$802449705, -28(%rbp)   # imm = 0x2FD46929
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB29_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB29_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_7
.LBB29_6:                               # %if.else
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_7:                               # %if.end
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_8
.LBB29_8:                               # %for.inc
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_3
.LBB29_9:                               # %for.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_10
.LBB29_10:                              # %for.inc28
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_1
.LBB29_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB29_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB29_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB29_12 Depth=1
	movl	$0, -4(%rbp)
.LBB29_14:                              # %for.cond34
                                        #   Parent Loop BB29_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB29_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB29_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB29_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_18
.LBB29_17:                              # %if.else52
                                        #   in Loop: Header=BB29_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_18:                              # %if.end66
                                        #   in Loop: Header=BB29_14 Depth=2
	jmp	.LBB29_19
.LBB29_19:                              # %for.inc67
                                        #   in Loop: Header=BB29_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_14
.LBB29_20:                              # %for.end69
                                        #   in Loop: Header=BB29_12 Depth=1
	jmp	.LBB29_21
.LBB29_21:                              # %for.inc70
                                        #   in Loop: Header=BB29_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_12
.LBB29_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB29_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB29_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB29_23 Depth=1
	movl	$0, -4(%rbp)
.LBB29_25:                              # %for.cond76
                                        #   Parent Loop BB29_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB29_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB29_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB29_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_29
.LBB29_28:                              # %if.else94
                                        #   in Loop: Header=BB29_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_29:                              # %if.end108
                                        #   in Loop: Header=BB29_25 Depth=2
	jmp	.LBB29_30
.LBB29_30:                              # %for.inc109
                                        #   in Loop: Header=BB29_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_25
.LBB29_31:                              # %for.end111
                                        #   in Loop: Header=BB29_23 Depth=1
	jmp	.LBB29_32
.LBB29_32:                              # %for.inc112
                                        #   in Loop: Header=BB29_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_23
.LBB29_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB29_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB29_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB29_34 Depth=1
	movl	$0, -4(%rbp)
.LBB29_36:                              # %for.cond118
                                        #   Parent Loop BB29_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB29_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB29_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB29_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_40
.LBB29_39:                              # %if.else136
                                        #   in Loop: Header=BB29_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_40:                              # %if.end150
                                        #   in Loop: Header=BB29_36 Depth=2
	jmp	.LBB29_41
.LBB29_41:                              # %for.inc151
                                        #   in Loop: Header=BB29_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_36
.LBB29_42:                              # %for.end153
                                        #   in Loop: Header=BB29_34 Depth=1
	jmp	.LBB29_43
.LBB29_43:                              # %for.inc154
                                        #   in Loop: Header=BB29_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_34
.LBB29_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB29_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB29_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB29_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_49
.LBB29_48:                              # %if.else172
                                        #   in Loop: Header=BB29_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_49:                              # %if.end183
                                        #   in Loop: Header=BB29_45 Depth=1
	jmp	.LBB29_50
.LBB29_50:                              # %for.inc184
                                        #   in Loop: Header=BB29_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_45
.LBB29_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB29_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB29_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB29_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_56
.LBB29_55:                              # %if.else202
                                        #   in Loop: Header=BB29_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_56:                              # %if.end213
                                        #   in Loop: Header=BB29_52 Depth=1
	jmp	.LBB29_57
.LBB29_57:                              # %for.inc214
                                        #   in Loop: Header=BB29_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_52
.LBB29_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB29_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB29_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB29_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB29_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_63
.LBB29_62:                              # %if.else232
                                        #   in Loop: Header=BB29_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_63:                              # %if.end243
                                        #   in Loop: Header=BB29_59 Depth=1
	jmp	.LBB29_64
.LBB29_64:                              # %for.inc244
                                        #   in Loop: Header=BB29_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_59
.LBB29_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB29_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB29_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB29_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB29_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_70
.LBB29_69:                              # %if.else262
                                        #   in Loop: Header=BB29_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_70:                              # %if.end273
                                        #   in Loop: Header=BB29_66 Depth=1
	jmp	.LBB29_71
.LBB29_71:                              # %for.inc274
                                        #   in Loop: Header=BB29_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_66
.LBB29_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB29_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB29_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB29_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB29_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_77
.LBB29_76:                              # %if.else292
                                        #   in Loop: Header=BB29_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_77:                              # %if.end303
                                        #   in Loop: Header=BB29_73 Depth=1
	jmp	.LBB29_78
.LBB29_78:                              # %for.inc304
                                        #   in Loop: Header=BB29_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_73
.LBB29_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB29_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB29_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB29_80 Depth=1
	movl	$0, -4(%rbp)
.LBB29_82:                              # %for.cond310
                                        #   Parent Loop BB29_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB29_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB29_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_86
.LBB29_85:                              # %if.else328
                                        #   in Loop: Header=BB29_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_86:                              # %if.end342
                                        #   in Loop: Header=BB29_82 Depth=2
	jmp	.LBB29_87
.LBB29_87:                              # %for.inc343
                                        #   in Loop: Header=BB29_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_82
.LBB29_88:                              # %for.end345
                                        #   in Loop: Header=BB29_80 Depth=1
	jmp	.LBB29_89
.LBB29_89:                              # %for.inc346
                                        #   in Loop: Header=BB29_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_80
.LBB29_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB29_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB29_91 Depth=1
	movl	$0, -4(%rbp)
.LBB29_93:                              # %for.cond352
                                        #   Parent Loop BB29_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB29_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB29_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB29_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_97
.LBB29_96:                              # %if.else370
                                        #   in Loop: Header=BB29_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_97:                              # %if.end384
                                        #   in Loop: Header=BB29_93 Depth=2
	jmp	.LBB29_98
.LBB29_98:                              # %for.inc385
                                        #   in Loop: Header=BB29_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_93
.LBB29_99:                              # %for.end387
                                        #   in Loop: Header=BB29_91 Depth=1
	jmp	.LBB29_100
.LBB29_100:                             # %for.inc388
                                        #   in Loop: Header=BB29_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_91
.LBB29_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB29_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB29_102 Depth=1
	movl	$0, -4(%rbp)
.LBB29_104:                             # %for.cond394
                                        #   Parent Loop BB29_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB29_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB29_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_108
.LBB29_107:                             # %if.else412
                                        #   in Loop: Header=BB29_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_108:                             # %if.end426
                                        #   in Loop: Header=BB29_104 Depth=2
	jmp	.LBB29_109
.LBB29_109:                             # %for.inc427
                                        #   in Loop: Header=BB29_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_104
.LBB29_110:                             # %for.end429
                                        #   in Loop: Header=BB29_102 Depth=1
	jmp	.LBB29_111
.LBB29_111:                             # %for.inc430
                                        #   in Loop: Header=BB29_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_102
.LBB29_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB29_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB29_113 Depth=1
	movl	$0, -4(%rbp)
.LBB29_115:                             # %for.cond436
                                        #   Parent Loop BB29_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB29_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB29_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_119
.LBB29_118:                             # %if.else454
                                        #   in Loop: Header=BB29_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_119:                             # %if.end468
                                        #   in Loop: Header=BB29_115 Depth=2
	jmp	.LBB29_120
.LBB29_120:                             # %for.inc469
                                        #   in Loop: Header=BB29_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_115
.LBB29_121:                             # %for.end471
                                        #   in Loop: Header=BB29_113 Depth=1
	jmp	.LBB29_122
.LBB29_122:                             # %for.inc472
                                        #   in Loop: Header=BB29_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_113
.LBB29_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB29_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB29_124 Depth=1
	movl	$0, -4(%rbp)
.LBB29_126:                             # %for.cond478
                                        #   Parent Loop BB29_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB29_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB29_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB29_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_130
.LBB29_129:                             # %if.else496
                                        #   in Loop: Header=BB29_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_130:                             # %if.end510
                                        #   in Loop: Header=BB29_126 Depth=2
	jmp	.LBB29_131
.LBB29_131:                             # %for.inc511
                                        #   in Loop: Header=BB29_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_126
.LBB29_132:                             # %for.end513
                                        #   in Loop: Header=BB29_124 Depth=1
	jmp	.LBB29_133
.LBB29_133:                             # %for.inc514
                                        #   in Loop: Header=BB29_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_124
.LBB29_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB29_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	$0, -4(%rbp)
.LBB29_137:                             # %for.cond520
                                        #   Parent Loop BB29_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB29_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB29_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB29_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_141
.LBB29_140:                             # %if.else538
                                        #   in Loop: Header=BB29_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_141:                             # %if.end552
                                        #   in Loop: Header=BB29_137 Depth=2
	jmp	.LBB29_142
.LBB29_142:                             # %for.inc553
                                        #   in Loop: Header=BB29_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_137
.LBB29_143:                             # %for.end555
                                        #   in Loop: Header=BB29_135 Depth=1
	jmp	.LBB29_144
.LBB29_144:                             # %for.inc556
                                        #   in Loop: Header=BB29_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_135
.LBB29_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB29_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB29_146 Depth=1
	movl	$0, -4(%rbp)
.LBB29_148:                             # %for.cond562
                                        #   Parent Loop BB29_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB29_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB29_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_152
.LBB29_151:                             # %if.else580
                                        #   in Loop: Header=BB29_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_152:                             # %if.end594
                                        #   in Loop: Header=BB29_148 Depth=2
	jmp	.LBB29_153
.LBB29_153:                             # %for.inc595
                                        #   in Loop: Header=BB29_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_148
.LBB29_154:                             # %for.end597
                                        #   in Loop: Header=BB29_146 Depth=1
	jmp	.LBB29_155
.LBB29_155:                             # %for.inc598
                                        #   in Loop: Header=BB29_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_146
.LBB29_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB29_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB29_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB29_157 Depth=1
	movl	$0, -4(%rbp)
.LBB29_159:                             # %for.cond604
                                        #   Parent Loop BB29_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB29_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB29_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB29_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB29_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB29_163
.LBB29_162:                             # %if.else622
                                        #   in Loop: Header=BB29_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB29_163:                             # %if.end636
                                        #   in Loop: Header=BB29_159 Depth=2
	jmp	.LBB29_164
.LBB29_164:                             # %for.inc637
                                        #   in Loop: Header=BB29_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_159
.LBB29_165:                             # %for.end639
                                        #   in Loop: Header=BB29_157 Depth=1
	jmp	.LBB29_166
.LBB29_166:                             # %for.inc640
                                        #   in Loop: Header=BB29_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_157
.LBB29_167:                             # %for.end642
	cmpl	$802449705, -28(%rbp)   # imm = 0x2FD46929
	jne	.LBB29_169
.LBB29_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_168
.Lfunc_end29:
	.size	init_contexts.22, .Lfunc_end29-init_contexts.22
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.23 # -- Begin function update_field_frame_contexts.23
	.p2align	4, 0x90
	.type	update_field_frame_contexts.23,@function
update_field_frame_contexts.23:         # @update_field_frame_contexts.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1511339492, -16(%rbp)  # imm = 0x5A1535E4
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB30_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	$0, -4(%rbp)
.LBB30_4:                               # %for.cond1
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB30_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc23
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end25
	jmp	.LBB30_19
.LBB30_10:                              # %if.else
	movl	$0, -8(%rbp)
.LBB30_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	$0, -4(%rbp)
.LBB30_13:                              # %for.cond29
                                        #   Parent Loop BB30_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB30_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB30_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB30_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_13
.LBB30_16:                              # %for.end56
                                        #   in Loop: Header=BB30_11 Depth=1
	jmp	.LBB30_17
.LBB30_17:                              # %for.inc57
                                        #   in Loop: Header=BB30_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_11
.LBB30_18:                              # %for.end59
	jmp	.LBB30_19
.LBB30_19:                              # %if.end
	cmpl	$1511339492, -16(%rbp)  # imm = 0x5A1535E4
	jne	.LBB30_21
.LBB30_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_20
.Lfunc_end30:
	.size	update_field_frame_contexts.23, .Lfunc_end30-update_field_frame_contexts.23
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.24
.LCPI31_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.24
	.p2align	4, 0x90
	.type	GetCtxModelNumber.24,@function
GetCtxModelNumber.24:                   # @GetCtxModelNumber.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI31_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$235592179, -44(%rbp)   # imm = 0xE0AD9F3
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_3 Depth 2
                                        #       Child Loop BB31_5 Depth 3
                                        #     Child Loop BB31_14 Depth 2
                                        #       Child Loop BB31_16 Depth 3
                                        #     Child Loop BB31_25 Depth 2
                                        #       Child Loop BB31_27 Depth 3
                                        #     Child Loop BB31_36 Depth 2
                                        #       Child Loop BB31_38 Depth 3
                                        #     Child Loop BB31_47 Depth 2
                                        #     Child Loop BB31_54 Depth 2
                                        #     Child Loop BB31_61 Depth 2
                                        #     Child Loop BB31_68 Depth 2
                                        #     Child Loop BB31_75 Depth 2
                                        #     Child Loop BB31_82 Depth 2
                                        #       Child Loop BB31_84 Depth 3
                                        #     Child Loop BB31_93 Depth 2
                                        #       Child Loop BB31_95 Depth 3
                                        #     Child Loop BB31_104 Depth 2
                                        #       Child Loop BB31_106 Depth 3
                                        #     Child Loop BB31_115 Depth 2
                                        #       Child Loop BB31_117 Depth 3
                                        #     Child Loop BB31_126 Depth 2
                                        #       Child Loop BB31_128 Depth 3
                                        #     Child Loop BB31_137 Depth 2
                                        #       Child Loop BB31_139 Depth 3
                                        #     Child Loop BB31_148 Depth 2
                                        #       Child Loop BB31_150 Depth 3
                                        #     Child Loop BB31_159 Depth 2
                                        #       Child Loop BB31_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB31_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB31_3:                               # %for.cond2
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB31_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	$0, -4(%rbp)
.LBB31_5:                               # %for.cond5
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB31_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_9
.LBB31_8:                               # %if.else
                                        #   in Loop: Header=BB31_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_9:                               # %if.end
                                        #   in Loop: Header=BB31_5 Depth=3
	jmp	.LBB31_10
.LBB31_10:                              # %for.inc
                                        #   in Loop: Header=BB31_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_5
.LBB31_11:                              # %for.end
                                        #   in Loop: Header=BB31_3 Depth=2
	jmp	.LBB31_12
.LBB31_12:                              # %for.inc33
                                        #   in Loop: Header=BB31_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_3
.LBB31_13:                              # %for.end35
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_14:                              # %for.cond36
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	$0, -4(%rbp)
.LBB31_16:                              # %for.cond39
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB31_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_20
.LBB31_19:                              # %if.else58
                                        #   in Loop: Header=BB31_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_20:                              # %if.end73
                                        #   in Loop: Header=BB31_16 Depth=3
	jmp	.LBB31_21
.LBB31_21:                              # %for.inc74
                                        #   in Loop: Header=BB31_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_16
.LBB31_22:                              # %for.end76
                                        #   in Loop: Header=BB31_14 Depth=2
	jmp	.LBB31_23
.LBB31_23:                              # %for.inc77
                                        #   in Loop: Header=BB31_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_14
.LBB31_24:                              # %for.end79
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_25:                              # %for.cond80
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	$0, -4(%rbp)
.LBB31_27:                              # %for.cond83
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB31_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_31
.LBB31_30:                              # %if.else102
                                        #   in Loop: Header=BB31_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_31:                              # %if.end117
                                        #   in Loop: Header=BB31_27 Depth=3
	jmp	.LBB31_32
.LBB31_32:                              # %for.inc118
                                        #   in Loop: Header=BB31_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_27
.LBB31_33:                              # %for.end120
                                        #   in Loop: Header=BB31_25 Depth=2
	jmp	.LBB31_34
.LBB31_34:                              # %for.inc121
                                        #   in Loop: Header=BB31_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_25
.LBB31_35:                              # %for.end123
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_36:                              # %for.cond124
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB31_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	$0, -4(%rbp)
.LBB31_38:                              # %for.cond127
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB31_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_42
.LBB31_41:                              # %if.else146
                                        #   in Loop: Header=BB31_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_42:                              # %if.end161
                                        #   in Loop: Header=BB31_38 Depth=3
	jmp	.LBB31_43
.LBB31_43:                              # %for.inc162
                                        #   in Loop: Header=BB31_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_38
.LBB31_44:                              # %for.end164
                                        #   in Loop: Header=BB31_36 Depth=2
	jmp	.LBB31_45
.LBB31_45:                              # %for.inc165
                                        #   in Loop: Header=BB31_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_36
.LBB31_46:                              # %for.end167
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_47:                              # %for.cond168
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_51
.LBB31_50:                              # %if.else184
                                        #   in Loop: Header=BB31_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_51:                              # %if.end196
                                        #   in Loop: Header=BB31_47 Depth=2
	jmp	.LBB31_52
.LBB31_52:                              # %for.inc197
                                        #   in Loop: Header=BB31_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_47
.LBB31_53:                              # %for.end199
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_54:                              # %for.cond200
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_58
.LBB31_57:                              # %if.else216
                                        #   in Loop: Header=BB31_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_58:                              # %if.end228
                                        #   in Loop: Header=BB31_54 Depth=2
	jmp	.LBB31_59
.LBB31_59:                              # %for.inc229
                                        #   in Loop: Header=BB31_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_54
.LBB31_60:                              # %for.end231
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_61:                              # %for.cond232
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB31_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_65
.LBB31_64:                              # %if.else248
                                        #   in Loop: Header=BB31_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_65:                              # %if.end260
                                        #   in Loop: Header=BB31_61 Depth=2
	jmp	.LBB31_66
.LBB31_66:                              # %for.inc261
                                        #   in Loop: Header=BB31_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_61
.LBB31_67:                              # %for.end263
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_68:                              # %for.cond264
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB31_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_72
.LBB31_71:                              # %if.else280
                                        #   in Loop: Header=BB31_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_72:                              # %if.end292
                                        #   in Loop: Header=BB31_68 Depth=2
	jmp	.LBB31_73
.LBB31_73:                              # %for.inc293
                                        #   in Loop: Header=BB31_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_68
.LBB31_74:                              # %for.end295
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -4(%rbp)
.LBB31_75:                              # %for.cond296
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB31_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_79
.LBB31_78:                              # %if.else312
                                        #   in Loop: Header=BB31_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_79:                              # %if.end324
                                        #   in Loop: Header=BB31_75 Depth=2
	jmp	.LBB31_80
.LBB31_80:                              # %for.inc325
                                        #   in Loop: Header=BB31_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_75
.LBB31_81:                              # %for.end327
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_82:                              # %for.cond328
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB31_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	$0, -4(%rbp)
.LBB31_84:                              # %for.cond331
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB31_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_88
.LBB31_87:                              # %if.else350
                                        #   in Loop: Header=BB31_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_88:                              # %if.end365
                                        #   in Loop: Header=BB31_84 Depth=3
	jmp	.LBB31_89
.LBB31_89:                              # %for.inc366
                                        #   in Loop: Header=BB31_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_84
.LBB31_90:                              # %for.end368
                                        #   in Loop: Header=BB31_82 Depth=2
	jmp	.LBB31_91
.LBB31_91:                              # %for.inc369
                                        #   in Loop: Header=BB31_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_82
.LBB31_92:                              # %for.end371
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_93:                              # %for.cond372
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	$0, -4(%rbp)
.LBB31_95:                              # %for.cond375
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB31_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_99
.LBB31_98:                              # %if.else394
                                        #   in Loop: Header=BB31_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_99:                              # %if.end409
                                        #   in Loop: Header=BB31_95 Depth=3
	jmp	.LBB31_100
.LBB31_100:                             # %for.inc410
                                        #   in Loop: Header=BB31_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_95
.LBB31_101:                             # %for.end412
                                        #   in Loop: Header=BB31_93 Depth=2
	jmp	.LBB31_102
.LBB31_102:                             # %for.inc413
                                        #   in Loop: Header=BB31_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_93
.LBB31_103:                             # %for.end415
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_104:                             # %for.cond416
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	$0, -4(%rbp)
.LBB31_106:                             # %for.cond419
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_110
.LBB31_109:                             # %if.else438
                                        #   in Loop: Header=BB31_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_110:                             # %if.end453
                                        #   in Loop: Header=BB31_106 Depth=3
	jmp	.LBB31_111
.LBB31_111:                             # %for.inc454
                                        #   in Loop: Header=BB31_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_106
.LBB31_112:                             # %for.end456
                                        #   in Loop: Header=BB31_104 Depth=2
	jmp	.LBB31_113
.LBB31_113:                             # %for.inc457
                                        #   in Loop: Header=BB31_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_104
.LBB31_114:                             # %for.end459
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_115:                             # %for.cond460
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	$0, -4(%rbp)
.LBB31_117:                             # %for.cond463
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_121
.LBB31_120:                             # %if.else482
                                        #   in Loop: Header=BB31_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_121:                             # %if.end497
                                        #   in Loop: Header=BB31_117 Depth=3
	jmp	.LBB31_122
.LBB31_122:                             # %for.inc498
                                        #   in Loop: Header=BB31_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_117
.LBB31_123:                             # %for.end500
                                        #   in Loop: Header=BB31_115 Depth=2
	jmp	.LBB31_124
.LBB31_124:                             # %for.inc501
                                        #   in Loop: Header=BB31_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_115
.LBB31_125:                             # %for.end503
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_126:                             # %for.cond504
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	$0, -4(%rbp)
.LBB31_128:                             # %for.cond507
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB31_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_132
.LBB31_131:                             # %if.else526
                                        #   in Loop: Header=BB31_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_132:                             # %if.end541
                                        #   in Loop: Header=BB31_128 Depth=3
	jmp	.LBB31_133
.LBB31_133:                             # %for.inc542
                                        #   in Loop: Header=BB31_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_128
.LBB31_134:                             # %for.end544
                                        #   in Loop: Header=BB31_126 Depth=2
	jmp	.LBB31_135
.LBB31_135:                             # %for.inc545
                                        #   in Loop: Header=BB31_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_126
.LBB31_136:                             # %for.end547
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_137:                             # %for.cond548
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	$0, -4(%rbp)
.LBB31_139:                             # %for.cond551
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB31_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_143
.LBB31_142:                             # %if.else570
                                        #   in Loop: Header=BB31_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_143:                             # %if.end585
                                        #   in Loop: Header=BB31_139 Depth=3
	jmp	.LBB31_144
.LBB31_144:                             # %for.inc586
                                        #   in Loop: Header=BB31_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_139
.LBB31_145:                             # %for.end588
                                        #   in Loop: Header=BB31_137 Depth=2
	jmp	.LBB31_146
.LBB31_146:                             # %for.inc589
                                        #   in Loop: Header=BB31_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_137
.LBB31_147:                             # %for.end591
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_148:                             # %for.cond592
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	$0, -4(%rbp)
.LBB31_150:                             # %for.cond595
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_154
.LBB31_153:                             # %if.else614
                                        #   in Loop: Header=BB31_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_154:                             # %if.end629
                                        #   in Loop: Header=BB31_150 Depth=3
	jmp	.LBB31_155
.LBB31_155:                             # %for.inc630
                                        #   in Loop: Header=BB31_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_150
.LBB31_156:                             # %for.end632
                                        #   in Loop: Header=BB31_148 Depth=2
	jmp	.LBB31_157
.LBB31_157:                             # %for.inc633
                                        #   in Loop: Header=BB31_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_148
.LBB31_158:                             # %for.end635
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	$0, -8(%rbp)
.LBB31_159:                             # %for.cond636
                                        #   Parent Loop BB31_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB31_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB31_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	$0, -4(%rbp)
.LBB31_161:                             # %for.cond639
                                        #   Parent Loop BB31_1 Depth=1
                                        #     Parent Loop BB31_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB31_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB31_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB31_165
.LBB31_164:                             # %if.else658
                                        #   in Loop: Header=BB31_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB31_165:                             # %if.end673
                                        #   in Loop: Header=BB31_161 Depth=3
	jmp	.LBB31_166
.LBB31_166:                             # %for.inc674
                                        #   in Loop: Header=BB31_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_161
.LBB31_167:                             # %for.end676
                                        #   in Loop: Header=BB31_159 Depth=2
	jmp	.LBB31_168
.LBB31_168:                             # %for.inc677
                                        #   in Loop: Header=BB31_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB31_159
.LBB31_169:                             # %for.end679
                                        #   in Loop: Header=BB31_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB31_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB31_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB31_171:                             # %if.end682
                                        #   in Loop: Header=BB31_1 Depth=1
	jmp	.LBB31_172
.LBB31_172:                             # %for.inc683
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_1
.LBB31_173:                             # %for.end685
	cmpl	$235592179, -44(%rbp)   # imm = 0xE0AD9F3
	jne	.LBB31_175
.LBB31_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_174
.Lfunc_end31:
	.size	GetCtxModelNumber.24, .Lfunc_end31-GetCtxModelNumber.24
	.cfi_endproc
                                        # -- End function
	.globl	update_field_frame_contexts.25 # -- Begin function update_field_frame_contexts.25
	.p2align	4, 0x90
	.type	update_field_frame_contexts.25,@function
update_field_frame_contexts.25:         # @update_field_frame_contexts.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$187407837, -16(%rbp)   # imm = 0xB2B9DDD
	movl	%edi, -12(%rbp)
	cmpl	$0, -12(%rbp)
	je	.LBB32_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB32_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_4 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	$0, -8(%rbp)
.LBB32_4:                               # %for.cond1
                                        #   Parent Loop BB32_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB32_7
# %bb.5:                                # %for.body3
                                        #   in Loop: Header=BB32_4 Depth=2
	movq	initialized, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	sarl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB32_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_4
.LBB32_7:                               # %for.end
                                        #   in Loop: Header=BB32_2 Depth=1
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc23
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_2
.LBB32_9:                               # %for.end25
	jmp	.LBB32_19
.LBB32_10:                              # %if.else
	movl	$0, -4(%rbp)
.LBB32_11:                              # %for.cond26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_13 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB32_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	$0, -8(%rbp)
.LBB32_13:                              # %for.cond29
                                        #   Parent Loop BB32_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	number_of_slices, %ecx
	addl	$1, %ecx
	sarl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB32_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB32_13 Depth=2
	movq	initialized, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	initialized, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	model_number, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	model_number, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB32_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_13
.LBB32_16:                              # %for.end56
                                        #   in Loop: Header=BB32_11 Depth=1
	jmp	.LBB32_17
.LBB32_17:                              # %for.inc57
                                        #   in Loop: Header=BB32_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_11
.LBB32_18:                              # %for.end59
	jmp	.LBB32_19
.LBB32_19:                              # %if.end
	cmpl	$187407837, -16(%rbp)   # imm = 0xB2B9DDD
	jne	.LBB32_21
.LBB32_20:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_20
.Lfunc_end32:
	.size	update_field_frame_contexts.25, .Lfunc_end32-update_field_frame_contexts.25
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.26        # -- Begin function init_contexts.26
	.p2align	4, 0x90
	.type	init_contexts.26,@function
init_contexts.26:                       # @init_contexts.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1085361852, -28(%rbp)  # imm = 0x40B14EBC
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB33_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB33_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	$0, -4(%rbp)
.LBB33_3:                               # %for.cond2
                                        #   Parent Loop BB33_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB33_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_7
.LBB33_6:                               # %if.else
                                        #   in Loop: Header=BB33_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_7:                               # %if.end
                                        #   in Loop: Header=BB33_3 Depth=2
	jmp	.LBB33_8
.LBB33_8:                               # %for.inc
                                        #   in Loop: Header=BB33_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_3
.LBB33_9:                               # %for.end
                                        #   in Loop: Header=BB33_1 Depth=1
	jmp	.LBB33_10
.LBB33_10:                              # %for.inc28
                                        #   in Loop: Header=BB33_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_1
.LBB33_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB33_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB33_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB33_12 Depth=1
	movl	$0, -4(%rbp)
.LBB33_14:                              # %for.cond34
                                        #   Parent Loop BB33_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB33_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB33_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB33_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_18
.LBB33_17:                              # %if.else52
                                        #   in Loop: Header=BB33_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_18:                              # %if.end66
                                        #   in Loop: Header=BB33_14 Depth=2
	jmp	.LBB33_19
.LBB33_19:                              # %for.inc67
                                        #   in Loop: Header=BB33_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_14
.LBB33_20:                              # %for.end69
                                        #   in Loop: Header=BB33_12 Depth=1
	jmp	.LBB33_21
.LBB33_21:                              # %for.inc70
                                        #   in Loop: Header=BB33_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_12
.LBB33_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB33_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB33_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB33_23 Depth=1
	movl	$0, -4(%rbp)
.LBB33_25:                              # %for.cond76
                                        #   Parent Loop BB33_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB33_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB33_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB33_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_29
.LBB33_28:                              # %if.else94
                                        #   in Loop: Header=BB33_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_29:                              # %if.end108
                                        #   in Loop: Header=BB33_25 Depth=2
	jmp	.LBB33_30
.LBB33_30:                              # %for.inc109
                                        #   in Loop: Header=BB33_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_25
.LBB33_31:                              # %for.end111
                                        #   in Loop: Header=BB33_23 Depth=1
	jmp	.LBB33_32
.LBB33_32:                              # %for.inc112
                                        #   in Loop: Header=BB33_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_23
.LBB33_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB33_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB33_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB33_34 Depth=1
	movl	$0, -4(%rbp)
.LBB33_36:                              # %for.cond118
                                        #   Parent Loop BB33_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB33_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB33_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB33_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_40
.LBB33_39:                              # %if.else136
                                        #   in Loop: Header=BB33_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_40:                              # %if.end150
                                        #   in Loop: Header=BB33_36 Depth=2
	jmp	.LBB33_41
.LBB33_41:                              # %for.inc151
                                        #   in Loop: Header=BB33_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_36
.LBB33_42:                              # %for.end153
                                        #   in Loop: Header=BB33_34 Depth=1
	jmp	.LBB33_43
.LBB33_43:                              # %for.inc154
                                        #   in Loop: Header=BB33_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_34
.LBB33_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB33_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB33_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB33_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_49
.LBB33_48:                              # %if.else172
                                        #   in Loop: Header=BB33_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_49:                              # %if.end183
                                        #   in Loop: Header=BB33_45 Depth=1
	jmp	.LBB33_50
.LBB33_50:                              # %for.inc184
                                        #   in Loop: Header=BB33_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_45
.LBB33_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB33_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB33_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB33_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_56
.LBB33_55:                              # %if.else202
                                        #   in Loop: Header=BB33_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_56:                              # %if.end213
                                        #   in Loop: Header=BB33_52 Depth=1
	jmp	.LBB33_57
.LBB33_57:                              # %for.inc214
                                        #   in Loop: Header=BB33_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_52
.LBB33_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB33_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB33_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB33_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB33_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_63
.LBB33_62:                              # %if.else232
                                        #   in Loop: Header=BB33_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_63:                              # %if.end243
                                        #   in Loop: Header=BB33_59 Depth=1
	jmp	.LBB33_64
.LBB33_64:                              # %for.inc244
                                        #   in Loop: Header=BB33_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_59
.LBB33_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB33_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB33_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB33_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB33_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_70
.LBB33_69:                              # %if.else262
                                        #   in Loop: Header=BB33_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_70:                              # %if.end273
                                        #   in Loop: Header=BB33_66 Depth=1
	jmp	.LBB33_71
.LBB33_71:                              # %for.inc274
                                        #   in Loop: Header=BB33_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_66
.LBB33_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB33_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB33_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB33_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB33_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_77
.LBB33_76:                              # %if.else292
                                        #   in Loop: Header=BB33_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_77:                              # %if.end303
                                        #   in Loop: Header=BB33_73 Depth=1
	jmp	.LBB33_78
.LBB33_78:                              # %for.inc304
                                        #   in Loop: Header=BB33_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_73
.LBB33_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB33_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB33_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB33_80 Depth=1
	movl	$0, -4(%rbp)
.LBB33_82:                              # %for.cond310
                                        #   Parent Loop BB33_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB33_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB33_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_86
.LBB33_85:                              # %if.else328
                                        #   in Loop: Header=BB33_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_86:                              # %if.end342
                                        #   in Loop: Header=BB33_82 Depth=2
	jmp	.LBB33_87
.LBB33_87:                              # %for.inc343
                                        #   in Loop: Header=BB33_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_82
.LBB33_88:                              # %for.end345
                                        #   in Loop: Header=BB33_80 Depth=1
	jmp	.LBB33_89
.LBB33_89:                              # %for.inc346
                                        #   in Loop: Header=BB33_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_80
.LBB33_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB33_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB33_91 Depth=1
	movl	$0, -4(%rbp)
.LBB33_93:                              # %for.cond352
                                        #   Parent Loop BB33_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB33_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB33_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB33_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_97
.LBB33_96:                              # %if.else370
                                        #   in Loop: Header=BB33_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_97:                              # %if.end384
                                        #   in Loop: Header=BB33_93 Depth=2
	jmp	.LBB33_98
.LBB33_98:                              # %for.inc385
                                        #   in Loop: Header=BB33_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_93
.LBB33_99:                              # %for.end387
                                        #   in Loop: Header=BB33_91 Depth=1
	jmp	.LBB33_100
.LBB33_100:                             # %for.inc388
                                        #   in Loop: Header=BB33_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_91
.LBB33_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB33_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB33_102 Depth=1
	movl	$0, -4(%rbp)
.LBB33_104:                             # %for.cond394
                                        #   Parent Loop BB33_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB33_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB33_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB33_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_108
.LBB33_107:                             # %if.else412
                                        #   in Loop: Header=BB33_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_108:                             # %if.end426
                                        #   in Loop: Header=BB33_104 Depth=2
	jmp	.LBB33_109
.LBB33_109:                             # %for.inc427
                                        #   in Loop: Header=BB33_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_104
.LBB33_110:                             # %for.end429
                                        #   in Loop: Header=BB33_102 Depth=1
	jmp	.LBB33_111
.LBB33_111:                             # %for.inc430
                                        #   in Loop: Header=BB33_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_102
.LBB33_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB33_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB33_113 Depth=1
	movl	$0, -4(%rbp)
.LBB33_115:                             # %for.cond436
                                        #   Parent Loop BB33_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB33_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB33_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB33_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_119
.LBB33_118:                             # %if.else454
                                        #   in Loop: Header=BB33_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_119:                             # %if.end468
                                        #   in Loop: Header=BB33_115 Depth=2
	jmp	.LBB33_120
.LBB33_120:                             # %for.inc469
                                        #   in Loop: Header=BB33_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_115
.LBB33_121:                             # %for.end471
                                        #   in Loop: Header=BB33_113 Depth=1
	jmp	.LBB33_122
.LBB33_122:                             # %for.inc472
                                        #   in Loop: Header=BB33_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_113
.LBB33_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB33_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB33_124 Depth=1
	movl	$0, -4(%rbp)
.LBB33_126:                             # %for.cond478
                                        #   Parent Loop BB33_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB33_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB33_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB33_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_130
.LBB33_129:                             # %if.else496
                                        #   in Loop: Header=BB33_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_130:                             # %if.end510
                                        #   in Loop: Header=BB33_126 Depth=2
	jmp	.LBB33_131
.LBB33_131:                             # %for.inc511
                                        #   in Loop: Header=BB33_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_126
.LBB33_132:                             # %for.end513
                                        #   in Loop: Header=BB33_124 Depth=1
	jmp	.LBB33_133
.LBB33_133:                             # %for.inc514
                                        #   in Loop: Header=BB33_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_124
.LBB33_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB33_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	$0, -4(%rbp)
.LBB33_137:                             # %for.cond520
                                        #   Parent Loop BB33_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB33_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB33_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB33_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_141
.LBB33_140:                             # %if.else538
                                        #   in Loop: Header=BB33_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_141:                             # %if.end552
                                        #   in Loop: Header=BB33_137 Depth=2
	jmp	.LBB33_142
.LBB33_142:                             # %for.inc553
                                        #   in Loop: Header=BB33_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_137
.LBB33_143:                             # %for.end555
                                        #   in Loop: Header=BB33_135 Depth=1
	jmp	.LBB33_144
.LBB33_144:                             # %for.inc556
                                        #   in Loop: Header=BB33_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_135
.LBB33_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB33_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB33_146 Depth=1
	movl	$0, -4(%rbp)
.LBB33_148:                             # %for.cond562
                                        #   Parent Loop BB33_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB33_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB33_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB33_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_152
.LBB33_151:                             # %if.else580
                                        #   in Loop: Header=BB33_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_152:                             # %if.end594
                                        #   in Loop: Header=BB33_148 Depth=2
	jmp	.LBB33_153
.LBB33_153:                             # %for.inc595
                                        #   in Loop: Header=BB33_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_148
.LBB33_154:                             # %for.end597
                                        #   in Loop: Header=BB33_146 Depth=1
	jmp	.LBB33_155
.LBB33_155:                             # %for.inc598
                                        #   in Loop: Header=BB33_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_146
.LBB33_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB33_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB33_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB33_157 Depth=1
	movl	$0, -4(%rbp)
.LBB33_159:                             # %for.cond604
                                        #   Parent Loop BB33_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB33_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB33_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB33_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB33_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB33_163
.LBB33_162:                             # %if.else622
                                        #   in Loop: Header=BB33_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB33_163:                             # %if.end636
                                        #   in Loop: Header=BB33_159 Depth=2
	jmp	.LBB33_164
.LBB33_164:                             # %for.inc637
                                        #   in Loop: Header=BB33_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_159
.LBB33_165:                             # %for.end639
                                        #   in Loop: Header=BB33_157 Depth=1
	jmp	.LBB33_166
.LBB33_166:                             # %for.inc640
                                        #   in Loop: Header=BB33_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_157
.LBB33_167:                             # %for.end642
	cmpl	$1085361852, -28(%rbp)  # imm = 0x40B14EBC
	jne	.LBB33_169
.LBB33_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_168
.Lfunc_end33:
	.size	init_contexts.26, .Lfunc_end33-init_contexts.26
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.27    # -- Begin function SetCtxModelNumber.27
	.p2align	4, 0x90
	.type	SetCtxModelNumber.27,@function
SetCtxModelNumber.27:                   # @SetCtxModelNumber.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$704690704, -16(%rbp)   # imm = 0x2A00BA10
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB34_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB34_11
.LBB34_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB34_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB34_11
.LBB34_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB34_11
.LBB34_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB34_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB34_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB34_10
.LBB34_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB34_10:                              # %if.end38
	jmp	.LBB34_11
.LBB34_11:                              # %if.end39
	cmpl	$704690704, -16(%rbp)   # imm = 0x2A00BA10
	jne	.LBB34_13
.LBB34_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_12
.Lfunc_end34:
	.size	SetCtxModelNumber.27, .Lfunc_end34-SetCtxModelNumber.27
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.28
.LCPI35_0:
	.quad	4611686018427387904     # double 2
.LCPI35_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.28
	.p2align	4, 0x90
	.type	create_context_memory.28,@function
create_context_memory.28:               # @create_context_memory.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$726549469, -20(%rbp)   # imm = 0x2B4E43DD
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB35_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB35_3
.LBB35_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB35_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB35_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB35_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB35_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB35_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB35_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB35_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB35_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB35_11:                              # %if.end10
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB35_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB35_13:                              # %if.end16
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	$0, -8(%rbp)
.LBB35_14:                              # %for.cond17
                                        #   Parent Loop BB35_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB35_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB35_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB35_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB35_17:                              # %if.end28
                                        #   in Loop: Header=BB35_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB35_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB35_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB35_19:                              # %if.end39
                                        #   in Loop: Header=BB35_14 Depth=2
	jmp	.LBB35_20
.LBB35_20:                              # %for.inc
                                        #   in Loop: Header=BB35_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_14
.LBB35_21:                              # %for.end
                                        #   in Loop: Header=BB35_8 Depth=1
	jmp	.LBB35_22
.LBB35_22:                              # %for.inc40
                                        #   in Loop: Header=BB35_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_8
.LBB35_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB35_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB35_26 Depth 2
                                        #       Child Loop BB35_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB35_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	$0, -8(%rbp)
.LBB35_26:                              # %for.cond47
                                        #   Parent Loop BB35_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB35_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB35_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	$0, -12(%rbp)
.LBB35_28:                              # %for.cond51
                                        #   Parent Loop BB35_24 Depth=1
                                        #     Parent Loop BB35_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB35_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB35_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB35_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB35_28
.LBB35_31:                              # %for.end63
                                        #   in Loop: Header=BB35_26 Depth=2
	jmp	.LBB35_32
.LBB35_32:                              # %for.inc64
                                        #   in Loop: Header=BB35_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB35_26
.LBB35_33:                              # %for.end66
                                        #   in Loop: Header=BB35_24 Depth=1
	jmp	.LBB35_34
.LBB35_34:                              # %for.inc67
                                        #   in Loop: Header=BB35_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_24
.LBB35_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB35_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB35_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB35_36 Depth=1
	vmovsd	.LCPI35_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI35_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB35_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_36
.LBB35_39:                              # %for.end98
	cmpl	$726549469, -20(%rbp)   # imm = 0x2B4E43DD
	jne	.LBB35_41
.LBB35_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_40
.Lfunc_end35:
	.size	create_context_memory.28, .Lfunc_end35-create_context_memory.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.29
.LCPI36_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.29
	.p2align	4, 0x90
	.type	GetCtxModelNumber.29,@function
GetCtxModelNumber.29:                   # @GetCtxModelNumber.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI36_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1086482937, -44(%rbp)  # imm = 0x40C269F9
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_3 Depth 2
                                        #       Child Loop BB36_5 Depth 3
                                        #     Child Loop BB36_14 Depth 2
                                        #       Child Loop BB36_16 Depth 3
                                        #     Child Loop BB36_25 Depth 2
                                        #       Child Loop BB36_27 Depth 3
                                        #     Child Loop BB36_36 Depth 2
                                        #       Child Loop BB36_38 Depth 3
                                        #     Child Loop BB36_47 Depth 2
                                        #     Child Loop BB36_54 Depth 2
                                        #     Child Loop BB36_61 Depth 2
                                        #     Child Loop BB36_68 Depth 2
                                        #     Child Loop BB36_75 Depth 2
                                        #     Child Loop BB36_82 Depth 2
                                        #       Child Loop BB36_84 Depth 3
                                        #     Child Loop BB36_93 Depth 2
                                        #       Child Loop BB36_95 Depth 3
                                        #     Child Loop BB36_104 Depth 2
                                        #       Child Loop BB36_106 Depth 3
                                        #     Child Loop BB36_115 Depth 2
                                        #       Child Loop BB36_117 Depth 3
                                        #     Child Loop BB36_126 Depth 2
                                        #       Child Loop BB36_128 Depth 3
                                        #     Child Loop BB36_137 Depth 2
                                        #       Child Loop BB36_139 Depth 3
                                        #     Child Loop BB36_148 Depth 2
                                        #       Child Loop BB36_150 Depth 3
                                        #     Child Loop BB36_159 Depth 2
                                        #       Child Loop BB36_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB36_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB36_3:                               # %for.cond2
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB36_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	$0, -4(%rbp)
.LBB36_5:                               # %for.cond5
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB36_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_9
.LBB36_8:                               # %if.else
                                        #   in Loop: Header=BB36_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_9:                               # %if.end
                                        #   in Loop: Header=BB36_5 Depth=3
	jmp	.LBB36_10
.LBB36_10:                              # %for.inc
                                        #   in Loop: Header=BB36_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_5
.LBB36_11:                              # %for.end
                                        #   in Loop: Header=BB36_3 Depth=2
	jmp	.LBB36_12
.LBB36_12:                              # %for.inc33
                                        #   in Loop: Header=BB36_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_3
.LBB36_13:                              # %for.end35
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_14:                              # %for.cond36
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	$0, -4(%rbp)
.LBB36_16:                              # %for.cond39
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB36_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_20
.LBB36_19:                              # %if.else58
                                        #   in Loop: Header=BB36_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_20:                              # %if.end73
                                        #   in Loop: Header=BB36_16 Depth=3
	jmp	.LBB36_21
.LBB36_21:                              # %for.inc74
                                        #   in Loop: Header=BB36_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_16
.LBB36_22:                              # %for.end76
                                        #   in Loop: Header=BB36_14 Depth=2
	jmp	.LBB36_23
.LBB36_23:                              # %for.inc77
                                        #   in Loop: Header=BB36_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_14
.LBB36_24:                              # %for.end79
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_25:                              # %for.cond80
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	$0, -4(%rbp)
.LBB36_27:                              # %for.cond83
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB36_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_31
.LBB36_30:                              # %if.else102
                                        #   in Loop: Header=BB36_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_31:                              # %if.end117
                                        #   in Loop: Header=BB36_27 Depth=3
	jmp	.LBB36_32
.LBB36_32:                              # %for.inc118
                                        #   in Loop: Header=BB36_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_27
.LBB36_33:                              # %for.end120
                                        #   in Loop: Header=BB36_25 Depth=2
	jmp	.LBB36_34
.LBB36_34:                              # %for.inc121
                                        #   in Loop: Header=BB36_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_25
.LBB36_35:                              # %for.end123
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_36:                              # %for.cond124
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB36_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	$0, -4(%rbp)
.LBB36_38:                              # %for.cond127
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB36_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_42
.LBB36_41:                              # %if.else146
                                        #   in Loop: Header=BB36_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_42:                              # %if.end161
                                        #   in Loop: Header=BB36_38 Depth=3
	jmp	.LBB36_43
.LBB36_43:                              # %for.inc162
                                        #   in Loop: Header=BB36_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_38
.LBB36_44:                              # %for.end164
                                        #   in Loop: Header=BB36_36 Depth=2
	jmp	.LBB36_45
.LBB36_45:                              # %for.inc165
                                        #   in Loop: Header=BB36_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_36
.LBB36_46:                              # %for.end167
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_47:                              # %for.cond168
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_51
.LBB36_50:                              # %if.else184
                                        #   in Loop: Header=BB36_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_51:                              # %if.end196
                                        #   in Loop: Header=BB36_47 Depth=2
	jmp	.LBB36_52
.LBB36_52:                              # %for.inc197
                                        #   in Loop: Header=BB36_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_47
.LBB36_53:                              # %for.end199
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_54:                              # %for.cond200
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_58
.LBB36_57:                              # %if.else216
                                        #   in Loop: Header=BB36_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_58:                              # %if.end228
                                        #   in Loop: Header=BB36_54 Depth=2
	jmp	.LBB36_59
.LBB36_59:                              # %for.inc229
                                        #   in Loop: Header=BB36_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_54
.LBB36_60:                              # %for.end231
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_61:                              # %for.cond232
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB36_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_65
.LBB36_64:                              # %if.else248
                                        #   in Loop: Header=BB36_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_65:                              # %if.end260
                                        #   in Loop: Header=BB36_61 Depth=2
	jmp	.LBB36_66
.LBB36_66:                              # %for.inc261
                                        #   in Loop: Header=BB36_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_61
.LBB36_67:                              # %for.end263
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_68:                              # %for.cond264
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB36_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_72
.LBB36_71:                              # %if.else280
                                        #   in Loop: Header=BB36_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_72:                              # %if.end292
                                        #   in Loop: Header=BB36_68 Depth=2
	jmp	.LBB36_73
.LBB36_73:                              # %for.inc293
                                        #   in Loop: Header=BB36_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_68
.LBB36_74:                              # %for.end295
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -4(%rbp)
.LBB36_75:                              # %for.cond296
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_79
.LBB36_78:                              # %if.else312
                                        #   in Loop: Header=BB36_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_79:                              # %if.end324
                                        #   in Loop: Header=BB36_75 Depth=2
	jmp	.LBB36_80
.LBB36_80:                              # %for.inc325
                                        #   in Loop: Header=BB36_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_75
.LBB36_81:                              # %for.end327
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_82:                              # %for.cond328
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB36_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	$0, -4(%rbp)
.LBB36_84:                              # %for.cond331
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_88
.LBB36_87:                              # %if.else350
                                        #   in Loop: Header=BB36_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_88:                              # %if.end365
                                        #   in Loop: Header=BB36_84 Depth=3
	jmp	.LBB36_89
.LBB36_89:                              # %for.inc366
                                        #   in Loop: Header=BB36_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_84
.LBB36_90:                              # %for.end368
                                        #   in Loop: Header=BB36_82 Depth=2
	jmp	.LBB36_91
.LBB36_91:                              # %for.inc369
                                        #   in Loop: Header=BB36_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_82
.LBB36_92:                              # %for.end371
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_93:                              # %for.cond372
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	$0, -4(%rbp)
.LBB36_95:                              # %for.cond375
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB36_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_99
.LBB36_98:                              # %if.else394
                                        #   in Loop: Header=BB36_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_99:                              # %if.end409
                                        #   in Loop: Header=BB36_95 Depth=3
	jmp	.LBB36_100
.LBB36_100:                             # %for.inc410
                                        #   in Loop: Header=BB36_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_95
.LBB36_101:                             # %for.end412
                                        #   in Loop: Header=BB36_93 Depth=2
	jmp	.LBB36_102
.LBB36_102:                             # %for.inc413
                                        #   in Loop: Header=BB36_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_93
.LBB36_103:                             # %for.end415
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_104:                             # %for.cond416
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	$0, -4(%rbp)
.LBB36_106:                             # %for.cond419
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_110
.LBB36_109:                             # %if.else438
                                        #   in Loop: Header=BB36_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_110:                             # %if.end453
                                        #   in Loop: Header=BB36_106 Depth=3
	jmp	.LBB36_111
.LBB36_111:                             # %for.inc454
                                        #   in Loop: Header=BB36_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_106
.LBB36_112:                             # %for.end456
                                        #   in Loop: Header=BB36_104 Depth=2
	jmp	.LBB36_113
.LBB36_113:                             # %for.inc457
                                        #   in Loop: Header=BB36_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_104
.LBB36_114:                             # %for.end459
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_115:                             # %for.cond460
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	$0, -4(%rbp)
.LBB36_117:                             # %for.cond463
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_121
.LBB36_120:                             # %if.else482
                                        #   in Loop: Header=BB36_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_121:                             # %if.end497
                                        #   in Loop: Header=BB36_117 Depth=3
	jmp	.LBB36_122
.LBB36_122:                             # %for.inc498
                                        #   in Loop: Header=BB36_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_117
.LBB36_123:                             # %for.end500
                                        #   in Loop: Header=BB36_115 Depth=2
	jmp	.LBB36_124
.LBB36_124:                             # %for.inc501
                                        #   in Loop: Header=BB36_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_115
.LBB36_125:                             # %for.end503
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_126:                             # %for.cond504
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	$0, -4(%rbp)
.LBB36_128:                             # %for.cond507
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB36_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_132
.LBB36_131:                             # %if.else526
                                        #   in Loop: Header=BB36_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_132:                             # %if.end541
                                        #   in Loop: Header=BB36_128 Depth=3
	jmp	.LBB36_133
.LBB36_133:                             # %for.inc542
                                        #   in Loop: Header=BB36_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_128
.LBB36_134:                             # %for.end544
                                        #   in Loop: Header=BB36_126 Depth=2
	jmp	.LBB36_135
.LBB36_135:                             # %for.inc545
                                        #   in Loop: Header=BB36_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_126
.LBB36_136:                             # %for.end547
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_137:                             # %for.cond548
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	$0, -4(%rbp)
.LBB36_139:                             # %for.cond551
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB36_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_143
.LBB36_142:                             # %if.else570
                                        #   in Loop: Header=BB36_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_143:                             # %if.end585
                                        #   in Loop: Header=BB36_139 Depth=3
	jmp	.LBB36_144
.LBB36_144:                             # %for.inc586
                                        #   in Loop: Header=BB36_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_139
.LBB36_145:                             # %for.end588
                                        #   in Loop: Header=BB36_137 Depth=2
	jmp	.LBB36_146
.LBB36_146:                             # %for.inc589
                                        #   in Loop: Header=BB36_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_137
.LBB36_147:                             # %for.end591
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_148:                             # %for.cond592
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	$0, -4(%rbp)
.LBB36_150:                             # %for.cond595
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_154
.LBB36_153:                             # %if.else614
                                        #   in Loop: Header=BB36_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_154:                             # %if.end629
                                        #   in Loop: Header=BB36_150 Depth=3
	jmp	.LBB36_155
.LBB36_155:                             # %for.inc630
                                        #   in Loop: Header=BB36_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_150
.LBB36_156:                             # %for.end632
                                        #   in Loop: Header=BB36_148 Depth=2
	jmp	.LBB36_157
.LBB36_157:                             # %for.inc633
                                        #   in Loop: Header=BB36_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_148
.LBB36_158:                             # %for.end635
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	$0, -8(%rbp)
.LBB36_159:                             # %for.cond636
                                        #   Parent Loop BB36_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB36_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	$0, -4(%rbp)
.LBB36_161:                             # %for.cond639
                                        #   Parent Loop BB36_1 Depth=1
                                        #     Parent Loop BB36_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB36_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB36_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB36_165
.LBB36_164:                             # %if.else658
                                        #   in Loop: Header=BB36_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB36_165:                             # %if.end673
                                        #   in Loop: Header=BB36_161 Depth=3
	jmp	.LBB36_166
.LBB36_166:                             # %for.inc674
                                        #   in Loop: Header=BB36_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_161
.LBB36_167:                             # %for.end676
                                        #   in Loop: Header=BB36_159 Depth=2
	jmp	.LBB36_168
.LBB36_168:                             # %for.inc677
                                        #   in Loop: Header=BB36_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_159
.LBB36_169:                             # %for.end679
                                        #   in Loop: Header=BB36_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB36_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB36_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB36_171:                             # %if.end682
                                        #   in Loop: Header=BB36_1 Depth=1
	jmp	.LBB36_172
.LBB36_172:                             # %for.inc683
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_1
.LBB36_173:                             # %for.end685
	cmpl	$1086482937, -44(%rbp)  # imm = 0x40C269F9
	jne	.LBB36_175
.LBB36_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_174
.Lfunc_end36:
	.size	GetCtxModelNumber.29, .Lfunc_end36-GetCtxModelNumber.29
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.30        # -- Begin function init_contexts.30
	.p2align	4, 0x90
	.type	init_contexts.30,@function
init_contexts.30:                       # @init_contexts.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1213593410, -28(%rbp)  # imm = 0x4855F742
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB37_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -4(%rbp)
.LBB37_3:                               # %for.cond2
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB37_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_7
.LBB37_6:                               # %if.else
                                        #   in Loop: Header=BB37_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_7:                               # %if.end
                                        #   in Loop: Header=BB37_3 Depth=2
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_3
.LBB37_9:                               # %for.end
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_10
.LBB37_10:                              # %for.inc28
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_1
.LBB37_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB37_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB37_12 Depth=1
	movl	$0, -4(%rbp)
.LBB37_14:                              # %for.cond34
                                        #   Parent Loop BB37_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB37_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_18
.LBB37_17:                              # %if.else52
                                        #   in Loop: Header=BB37_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_18:                              # %if.end66
                                        #   in Loop: Header=BB37_14 Depth=2
	jmp	.LBB37_19
.LBB37_19:                              # %for.inc67
                                        #   in Loop: Header=BB37_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_14
.LBB37_20:                              # %for.end69
                                        #   in Loop: Header=BB37_12 Depth=1
	jmp	.LBB37_21
.LBB37_21:                              # %for.inc70
                                        #   in Loop: Header=BB37_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_12
.LBB37_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB37_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	$0, -4(%rbp)
.LBB37_25:                              # %for.cond76
                                        #   Parent Loop BB37_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB37_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_29
.LBB37_28:                              # %if.else94
                                        #   in Loop: Header=BB37_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_29:                              # %if.end108
                                        #   in Loop: Header=BB37_25 Depth=2
	jmp	.LBB37_30
.LBB37_30:                              # %for.inc109
                                        #   in Loop: Header=BB37_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_25
.LBB37_31:                              # %for.end111
                                        #   in Loop: Header=BB37_23 Depth=1
	jmp	.LBB37_32
.LBB37_32:                              # %for.inc112
                                        #   in Loop: Header=BB37_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_23
.LBB37_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB37_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB37_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	$0, -4(%rbp)
.LBB37_36:                              # %for.cond118
                                        #   Parent Loop BB37_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB37_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_40
.LBB37_39:                              # %if.else136
                                        #   in Loop: Header=BB37_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_40:                              # %if.end150
                                        #   in Loop: Header=BB37_36 Depth=2
	jmp	.LBB37_41
.LBB37_41:                              # %for.inc151
                                        #   in Loop: Header=BB37_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_36
.LBB37_42:                              # %for.end153
                                        #   in Loop: Header=BB37_34 Depth=1
	jmp	.LBB37_43
.LBB37_43:                              # %for.inc154
                                        #   in Loop: Header=BB37_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_34
.LBB37_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB37_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_49
.LBB37_48:                              # %if.else172
                                        #   in Loop: Header=BB37_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_49:                              # %if.end183
                                        #   in Loop: Header=BB37_45 Depth=1
	jmp	.LBB37_50
.LBB37_50:                              # %for.inc184
                                        #   in Loop: Header=BB37_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_45
.LBB37_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB37_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_56
.LBB37_55:                              # %if.else202
                                        #   in Loop: Header=BB37_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_56:                              # %if.end213
                                        #   in Loop: Header=BB37_52 Depth=1
	jmp	.LBB37_57
.LBB37_57:                              # %for.inc214
                                        #   in Loop: Header=BB37_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_52
.LBB37_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB37_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB37_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_63
.LBB37_62:                              # %if.else232
                                        #   in Loop: Header=BB37_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_63:                              # %if.end243
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_64
.LBB37_64:                              # %for.inc244
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_59
.LBB37_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB37_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB37_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_70
.LBB37_69:                              # %if.else262
                                        #   in Loop: Header=BB37_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_70:                              # %if.end273
                                        #   in Loop: Header=BB37_66 Depth=1
	jmp	.LBB37_71
.LBB37_71:                              # %for.inc274
                                        #   in Loop: Header=BB37_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_66
.LBB37_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB37_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB37_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_77
.LBB37_76:                              # %if.else292
                                        #   in Loop: Header=BB37_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_77:                              # %if.end303
                                        #   in Loop: Header=BB37_73 Depth=1
	jmp	.LBB37_78
.LBB37_78:                              # %for.inc304
                                        #   in Loop: Header=BB37_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_73
.LBB37_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB37_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB37_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB37_80 Depth=1
	movl	$0, -4(%rbp)
.LBB37_82:                              # %for.cond310
                                        #   Parent Loop BB37_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_86
.LBB37_85:                              # %if.else328
                                        #   in Loop: Header=BB37_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_86:                              # %if.end342
                                        #   in Loop: Header=BB37_82 Depth=2
	jmp	.LBB37_87
.LBB37_87:                              # %for.inc343
                                        #   in Loop: Header=BB37_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_82
.LBB37_88:                              # %for.end345
                                        #   in Loop: Header=BB37_80 Depth=1
	jmp	.LBB37_89
.LBB37_89:                              # %for.inc346
                                        #   in Loop: Header=BB37_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_80
.LBB37_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB37_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	$0, -4(%rbp)
.LBB37_93:                              # %for.cond352
                                        #   Parent Loop BB37_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB37_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_97
.LBB37_96:                              # %if.else370
                                        #   in Loop: Header=BB37_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_97:                              # %if.end384
                                        #   in Loop: Header=BB37_93 Depth=2
	jmp	.LBB37_98
.LBB37_98:                              # %for.inc385
                                        #   in Loop: Header=BB37_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_93
.LBB37_99:                              # %for.end387
                                        #   in Loop: Header=BB37_91 Depth=1
	jmp	.LBB37_100
.LBB37_100:                             # %for.inc388
                                        #   in Loop: Header=BB37_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_91
.LBB37_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB37_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB37_102 Depth=1
	movl	$0, -4(%rbp)
.LBB37_104:                             # %for.cond394
                                        #   Parent Loop BB37_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_108
.LBB37_107:                             # %if.else412
                                        #   in Loop: Header=BB37_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_108:                             # %if.end426
                                        #   in Loop: Header=BB37_104 Depth=2
	jmp	.LBB37_109
.LBB37_109:                             # %for.inc427
                                        #   in Loop: Header=BB37_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_104
.LBB37_110:                             # %for.end429
                                        #   in Loop: Header=BB37_102 Depth=1
	jmp	.LBB37_111
.LBB37_111:                             # %for.inc430
                                        #   in Loop: Header=BB37_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_102
.LBB37_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB37_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB37_113 Depth=1
	movl	$0, -4(%rbp)
.LBB37_115:                             # %for.cond436
                                        #   Parent Loop BB37_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_119
.LBB37_118:                             # %if.else454
                                        #   in Loop: Header=BB37_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_119:                             # %if.end468
                                        #   in Loop: Header=BB37_115 Depth=2
	jmp	.LBB37_120
.LBB37_120:                             # %for.inc469
                                        #   in Loop: Header=BB37_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_115
.LBB37_121:                             # %for.end471
                                        #   in Loop: Header=BB37_113 Depth=1
	jmp	.LBB37_122
.LBB37_122:                             # %for.inc472
                                        #   in Loop: Header=BB37_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_113
.LBB37_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB37_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB37_124 Depth=1
	movl	$0, -4(%rbp)
.LBB37_126:                             # %for.cond478
                                        #   Parent Loop BB37_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB37_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_130
.LBB37_129:                             # %if.else496
                                        #   in Loop: Header=BB37_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_130:                             # %if.end510
                                        #   in Loop: Header=BB37_126 Depth=2
	jmp	.LBB37_131
.LBB37_131:                             # %for.inc511
                                        #   in Loop: Header=BB37_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_126
.LBB37_132:                             # %for.end513
                                        #   in Loop: Header=BB37_124 Depth=1
	jmp	.LBB37_133
.LBB37_133:                             # %for.inc514
                                        #   in Loop: Header=BB37_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_124
.LBB37_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB37_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB37_135 Depth=1
	movl	$0, -4(%rbp)
.LBB37_137:                             # %for.cond520
                                        #   Parent Loop BB37_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB37_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_141
.LBB37_140:                             # %if.else538
                                        #   in Loop: Header=BB37_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_141:                             # %if.end552
                                        #   in Loop: Header=BB37_137 Depth=2
	jmp	.LBB37_142
.LBB37_142:                             # %for.inc553
                                        #   in Loop: Header=BB37_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_137
.LBB37_143:                             # %for.end555
                                        #   in Loop: Header=BB37_135 Depth=1
	jmp	.LBB37_144
.LBB37_144:                             # %for.inc556
                                        #   in Loop: Header=BB37_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_135
.LBB37_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB37_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB37_146 Depth=1
	movl	$0, -4(%rbp)
.LBB37_148:                             # %for.cond562
                                        #   Parent Loop BB37_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_152
.LBB37_151:                             # %if.else580
                                        #   in Loop: Header=BB37_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_152:                             # %if.end594
                                        #   in Loop: Header=BB37_148 Depth=2
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc595
                                        #   in Loop: Header=BB37_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_148
.LBB37_154:                             # %for.end597
                                        #   in Loop: Header=BB37_146 Depth=1
	jmp	.LBB37_155
.LBB37_155:                             # %for.inc598
                                        #   in Loop: Header=BB37_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_146
.LBB37_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB37_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB37_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB37_157 Depth=1
	movl	$0, -4(%rbp)
.LBB37_159:                             # %for.cond604
                                        #   Parent Loop BB37_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB37_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB37_163
.LBB37_162:                             # %if.else622
                                        #   in Loop: Header=BB37_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB37_163:                             # %if.end636
                                        #   in Loop: Header=BB37_159 Depth=2
	jmp	.LBB37_164
.LBB37_164:                             # %for.inc637
                                        #   in Loop: Header=BB37_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_159
.LBB37_165:                             # %for.end639
                                        #   in Loop: Header=BB37_157 Depth=1
	jmp	.LBB37_166
.LBB37_166:                             # %for.inc640
                                        #   in Loop: Header=BB37_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_157
.LBB37_167:                             # %for.end642
	cmpl	$1213593410, -28(%rbp)  # imm = 0x4855F742
	jne	.LBB37_169
.LBB37_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_168
.Lfunc_end37:
	.size	init_contexts.30, .Lfunc_end37-init_contexts.30
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.31
.LCPI38_0:
	.quad	4611686018427387904     # double 2
.LCPI38_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.31
	.p2align	4, 0x90
	.type	create_context_memory.31,@function
create_context_memory.31:               # @create_context_memory.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1646198614, -20(%rbp)  # imm = 0x621EFF56
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB38_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB38_3
.LBB38_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB38_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB38_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB38_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB38_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB38_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB38_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB38_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB38_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB38_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB38_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB38_11:                              # %if.end10
                                        #   in Loop: Header=BB38_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB38_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB38_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB38_13:                              # %if.end16
                                        #   in Loop: Header=BB38_8 Depth=1
	movl	$0, -8(%rbp)
.LBB38_14:                              # %for.cond17
                                        #   Parent Loop BB38_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB38_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB38_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB38_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB38_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB38_17:                              # %if.end28
                                        #   in Loop: Header=BB38_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB38_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB38_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB38_19:                              # %if.end39
                                        #   in Loop: Header=BB38_14 Depth=2
	jmp	.LBB38_20
.LBB38_20:                              # %for.inc
                                        #   in Loop: Header=BB38_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_14
.LBB38_21:                              # %for.end
                                        #   in Loop: Header=BB38_8 Depth=1
	jmp	.LBB38_22
.LBB38_22:                              # %for.inc40
                                        #   in Loop: Header=BB38_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_8
.LBB38_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB38_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_26 Depth 2
                                        #       Child Loop BB38_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB38_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB38_24 Depth=1
	movl	$0, -8(%rbp)
.LBB38_26:                              # %for.cond47
                                        #   Parent Loop BB38_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB38_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB38_26 Depth=2
	movl	$0, -12(%rbp)
.LBB38_28:                              # %for.cond51
                                        #   Parent Loop BB38_24 Depth=1
                                        #     Parent Loop BB38_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB38_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB38_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB38_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_28
.LBB38_31:                              # %for.end63
                                        #   in Loop: Header=BB38_26 Depth=2
	jmp	.LBB38_32
.LBB38_32:                              # %for.inc64
                                        #   in Loop: Header=BB38_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_26
.LBB38_33:                              # %for.end66
                                        #   in Loop: Header=BB38_24 Depth=1
	jmp	.LBB38_34
.LBB38_34:                              # %for.inc67
                                        #   in Loop: Header=BB38_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_24
.LBB38_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB38_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB38_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB38_36 Depth=1
	vmovsd	.LCPI38_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI38_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB38_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_36
.LBB38_39:                              # %for.end98
	cmpl	$1646198614, -20(%rbp)  # imm = 0x621EFF56
	jne	.LBB38_41
.LBB38_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_40
.Lfunc_end38:
	.size	create_context_memory.31, .Lfunc_end38-create_context_memory.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.32
.LCPI39_0:
	.quad	4607182418800017408     # double 1
.LCPI39_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI39_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI39_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.32
	.p2align	4, 0x90
	.type	XRate.32,@function
XRate.32:                               # @XRate.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$22430652, -36(%rbp)    # imm = 0x15643BC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB39_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB39_3
.LBB39_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB39_3:                               # %cond.end
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI39_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI39_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI39_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB39_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB39_6
.LBB39_5:                               # %cond.false6
	vmovsd	.LCPI39_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI39_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI39_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB39_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB39_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB39_9
.LBB39_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB39_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB39_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB39_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB39_13
.LBB39_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB39_13:                              # %cond.end26
	jmp	.LBB39_15
.LBB39_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB39_15
.LBB39_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB39_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB39_18
.LBB39_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB39_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$22430652, -36(%rbp)    # imm = 0x15643BC
	jne	.LBB39_20
.LBB39_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB39_19
.Lfunc_end39:
	.size	XRate.32, .Lfunc_end39-XRate.32
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.33        # -- Begin function init_contexts.33
	.p2align	4, 0x90
	.type	init_contexts.33,@function
init_contexts.33:                       # @init_contexts.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1524944264, -28(%rbp)  # imm = 0x5AE4CD88
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB40_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_3:                               # %for.cond2
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB40_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_7
.LBB40_6:                               # %if.else
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_7:                               # %if.end
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_3
.LBB40_9:                               # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_10
.LBB40_10:                              # %for.inc28
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_1
.LBB40_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB40_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB40_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB40_12 Depth=1
	movl	$0, -4(%rbp)
.LBB40_14:                              # %for.cond34
                                        #   Parent Loop BB40_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB40_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_18
.LBB40_17:                              # %if.else52
                                        #   in Loop: Header=BB40_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_18:                              # %if.end66
                                        #   in Loop: Header=BB40_14 Depth=2
	jmp	.LBB40_19
.LBB40_19:                              # %for.inc67
                                        #   in Loop: Header=BB40_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_14
.LBB40_20:                              # %for.end69
                                        #   in Loop: Header=BB40_12 Depth=1
	jmp	.LBB40_21
.LBB40_21:                              # %for.inc70
                                        #   in Loop: Header=BB40_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_12
.LBB40_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB40_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB40_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	$0, -4(%rbp)
.LBB40_25:                              # %for.cond76
                                        #   Parent Loop BB40_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB40_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB40_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB40_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_29
.LBB40_28:                              # %if.else94
                                        #   in Loop: Header=BB40_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_29:                              # %if.end108
                                        #   in Loop: Header=BB40_25 Depth=2
	jmp	.LBB40_30
.LBB40_30:                              # %for.inc109
                                        #   in Loop: Header=BB40_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_25
.LBB40_31:                              # %for.end111
                                        #   in Loop: Header=BB40_23 Depth=1
	jmp	.LBB40_32
.LBB40_32:                              # %for.inc112
                                        #   in Loop: Header=BB40_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_23
.LBB40_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB40_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB40_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB40_34 Depth=1
	movl	$0, -4(%rbp)
.LBB40_36:                              # %for.cond118
                                        #   Parent Loop BB40_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB40_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB40_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB40_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_40
.LBB40_39:                              # %if.else136
                                        #   in Loop: Header=BB40_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_40:                              # %if.end150
                                        #   in Loop: Header=BB40_36 Depth=2
	jmp	.LBB40_41
.LBB40_41:                              # %for.inc151
                                        #   in Loop: Header=BB40_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_36
.LBB40_42:                              # %for.end153
                                        #   in Loop: Header=BB40_34 Depth=1
	jmp	.LBB40_43
.LBB40_43:                              # %for.inc154
                                        #   in Loop: Header=BB40_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_34
.LBB40_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB40_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB40_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB40_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_49
.LBB40_48:                              # %if.else172
                                        #   in Loop: Header=BB40_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_49:                              # %if.end183
                                        #   in Loop: Header=BB40_45 Depth=1
	jmp	.LBB40_50
.LBB40_50:                              # %for.inc184
                                        #   in Loop: Header=BB40_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_45
.LBB40_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB40_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB40_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB40_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_56
.LBB40_55:                              # %if.else202
                                        #   in Loop: Header=BB40_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_56:                              # %if.end213
                                        #   in Loop: Header=BB40_52 Depth=1
	jmp	.LBB40_57
.LBB40_57:                              # %for.inc214
                                        #   in Loop: Header=BB40_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_52
.LBB40_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB40_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB40_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB40_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB40_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_63
.LBB40_62:                              # %if.else232
                                        #   in Loop: Header=BB40_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_63:                              # %if.end243
                                        #   in Loop: Header=BB40_59 Depth=1
	jmp	.LBB40_64
.LBB40_64:                              # %for.inc244
                                        #   in Loop: Header=BB40_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_59
.LBB40_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB40_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB40_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB40_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB40_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_70
.LBB40_69:                              # %if.else262
                                        #   in Loop: Header=BB40_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_70:                              # %if.end273
                                        #   in Loop: Header=BB40_66 Depth=1
	jmp	.LBB40_71
.LBB40_71:                              # %for.inc274
                                        #   in Loop: Header=BB40_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_66
.LBB40_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB40_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB40_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB40_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB40_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_77
.LBB40_76:                              # %if.else292
                                        #   in Loop: Header=BB40_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_77:                              # %if.end303
                                        #   in Loop: Header=BB40_73 Depth=1
	jmp	.LBB40_78
.LBB40_78:                              # %for.inc304
                                        #   in Loop: Header=BB40_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_73
.LBB40_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB40_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB40_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB40_80 Depth=1
	movl	$0, -4(%rbp)
.LBB40_82:                              # %for.cond310
                                        #   Parent Loop BB40_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB40_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB40_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_86
.LBB40_85:                              # %if.else328
                                        #   in Loop: Header=BB40_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_86:                              # %if.end342
                                        #   in Loop: Header=BB40_82 Depth=2
	jmp	.LBB40_87
.LBB40_87:                              # %for.inc343
                                        #   in Loop: Header=BB40_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_82
.LBB40_88:                              # %for.end345
                                        #   in Loop: Header=BB40_80 Depth=1
	jmp	.LBB40_89
.LBB40_89:                              # %for.inc346
                                        #   in Loop: Header=BB40_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_80
.LBB40_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB40_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB40_91 Depth=1
	movl	$0, -4(%rbp)
.LBB40_93:                              # %for.cond352
                                        #   Parent Loop BB40_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB40_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB40_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB40_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_97
.LBB40_96:                              # %if.else370
                                        #   in Loop: Header=BB40_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_97:                              # %if.end384
                                        #   in Loop: Header=BB40_93 Depth=2
	jmp	.LBB40_98
.LBB40_98:                              # %for.inc385
                                        #   in Loop: Header=BB40_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_93
.LBB40_99:                              # %for.end387
                                        #   in Loop: Header=BB40_91 Depth=1
	jmp	.LBB40_100
.LBB40_100:                             # %for.inc388
                                        #   in Loop: Header=BB40_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_91
.LBB40_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB40_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB40_102 Depth=1
	movl	$0, -4(%rbp)
.LBB40_104:                             # %for.cond394
                                        #   Parent Loop BB40_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB40_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB40_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB40_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_108
.LBB40_107:                             # %if.else412
                                        #   in Loop: Header=BB40_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_108:                             # %if.end426
                                        #   in Loop: Header=BB40_104 Depth=2
	jmp	.LBB40_109
.LBB40_109:                             # %for.inc427
                                        #   in Loop: Header=BB40_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_104
.LBB40_110:                             # %for.end429
                                        #   in Loop: Header=BB40_102 Depth=1
	jmp	.LBB40_111
.LBB40_111:                             # %for.inc430
                                        #   in Loop: Header=BB40_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_102
.LBB40_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB40_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB40_113 Depth=1
	movl	$0, -4(%rbp)
.LBB40_115:                             # %for.cond436
                                        #   Parent Loop BB40_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB40_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB40_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB40_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_119
.LBB40_118:                             # %if.else454
                                        #   in Loop: Header=BB40_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_119:                             # %if.end468
                                        #   in Loop: Header=BB40_115 Depth=2
	jmp	.LBB40_120
.LBB40_120:                             # %for.inc469
                                        #   in Loop: Header=BB40_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_115
.LBB40_121:                             # %for.end471
                                        #   in Loop: Header=BB40_113 Depth=1
	jmp	.LBB40_122
.LBB40_122:                             # %for.inc472
                                        #   in Loop: Header=BB40_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_113
.LBB40_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB40_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB40_124 Depth=1
	movl	$0, -4(%rbp)
.LBB40_126:                             # %for.cond478
                                        #   Parent Loop BB40_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB40_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB40_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB40_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_130
.LBB40_129:                             # %if.else496
                                        #   in Loop: Header=BB40_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_130:                             # %if.end510
                                        #   in Loop: Header=BB40_126 Depth=2
	jmp	.LBB40_131
.LBB40_131:                             # %for.inc511
                                        #   in Loop: Header=BB40_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_126
.LBB40_132:                             # %for.end513
                                        #   in Loop: Header=BB40_124 Depth=1
	jmp	.LBB40_133
.LBB40_133:                             # %for.inc514
                                        #   in Loop: Header=BB40_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_124
.LBB40_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB40_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	$0, -4(%rbp)
.LBB40_137:                             # %for.cond520
                                        #   Parent Loop BB40_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB40_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB40_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB40_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_141
.LBB40_140:                             # %if.else538
                                        #   in Loop: Header=BB40_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_141:                             # %if.end552
                                        #   in Loop: Header=BB40_137 Depth=2
	jmp	.LBB40_142
.LBB40_142:                             # %for.inc553
                                        #   in Loop: Header=BB40_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_137
.LBB40_143:                             # %for.end555
                                        #   in Loop: Header=BB40_135 Depth=1
	jmp	.LBB40_144
.LBB40_144:                             # %for.inc556
                                        #   in Loop: Header=BB40_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_135
.LBB40_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB40_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB40_146 Depth=1
	movl	$0, -4(%rbp)
.LBB40_148:                             # %for.cond562
                                        #   Parent Loop BB40_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB40_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB40_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB40_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_152
.LBB40_151:                             # %if.else580
                                        #   in Loop: Header=BB40_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_152:                             # %if.end594
                                        #   in Loop: Header=BB40_148 Depth=2
	jmp	.LBB40_153
.LBB40_153:                             # %for.inc595
                                        #   in Loop: Header=BB40_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_148
.LBB40_154:                             # %for.end597
                                        #   in Loop: Header=BB40_146 Depth=1
	jmp	.LBB40_155
.LBB40_155:                             # %for.inc598
                                        #   in Loop: Header=BB40_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_146
.LBB40_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB40_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB40_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB40_157 Depth=1
	movl	$0, -4(%rbp)
.LBB40_159:                             # %for.cond604
                                        #   Parent Loop BB40_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB40_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB40_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB40_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB40_163
.LBB40_162:                             # %if.else622
                                        #   in Loop: Header=BB40_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB40_163:                             # %if.end636
                                        #   in Loop: Header=BB40_159 Depth=2
	jmp	.LBB40_164
.LBB40_164:                             # %for.inc637
                                        #   in Loop: Header=BB40_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_159
.LBB40_165:                             # %for.end639
                                        #   in Loop: Header=BB40_157 Depth=1
	jmp	.LBB40_166
.LBB40_166:                             # %for.inc640
                                        #   in Loop: Header=BB40_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_157
.LBB40_167:                             # %for.end642
	cmpl	$1524944264, -28(%rbp)  # imm = 0x5AE4CD88
	jne	.LBB40_169
.LBB40_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_168
.Lfunc_end40:
	.size	init_contexts.33, .Lfunc_end40-init_contexts.33
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.34        # -- Begin function init_contexts.34
	.p2align	4, 0x90
	.type	init_contexts.34,@function
init_contexts.34:                       # @init_contexts.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$439991011, -28(%rbp)   # imm = 0x1A39BAE3
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB41_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	$0, -4(%rbp)
.LBB41_3:                               # %for.cond2
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB41_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_7
.LBB41_6:                               # %if.else
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_7:                               # %if.end
                                        #   in Loop: Header=BB41_3 Depth=2
	jmp	.LBB41_8
.LBB41_8:                               # %for.inc
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_3
.LBB41_9:                               # %for.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_10
.LBB41_10:                              # %for.inc28
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_1
.LBB41_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB41_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB41_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB41_12 Depth=1
	movl	$0, -4(%rbp)
.LBB41_14:                              # %for.cond34
                                        #   Parent Loop BB41_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB41_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_18
.LBB41_17:                              # %if.else52
                                        #   in Loop: Header=BB41_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_18:                              # %if.end66
                                        #   in Loop: Header=BB41_14 Depth=2
	jmp	.LBB41_19
.LBB41_19:                              # %for.inc67
                                        #   in Loop: Header=BB41_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_14
.LBB41_20:                              # %for.end69
                                        #   in Loop: Header=BB41_12 Depth=1
	jmp	.LBB41_21
.LBB41_21:                              # %for.inc70
                                        #   in Loop: Header=BB41_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_12
.LBB41_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB41_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB41_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	$0, -4(%rbp)
.LBB41_25:                              # %for.cond76
                                        #   Parent Loop BB41_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB41_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_29
.LBB41_28:                              # %if.else94
                                        #   in Loop: Header=BB41_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_29:                              # %if.end108
                                        #   in Loop: Header=BB41_25 Depth=2
	jmp	.LBB41_30
.LBB41_30:                              # %for.inc109
                                        #   in Loop: Header=BB41_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_25
.LBB41_31:                              # %for.end111
                                        #   in Loop: Header=BB41_23 Depth=1
	jmp	.LBB41_32
.LBB41_32:                              # %for.inc112
                                        #   in Loop: Header=BB41_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_23
.LBB41_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB41_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB41_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB41_34 Depth=1
	movl	$0, -4(%rbp)
.LBB41_36:                              # %for.cond118
                                        #   Parent Loop BB41_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB41_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB41_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB41_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_40
.LBB41_39:                              # %if.else136
                                        #   in Loop: Header=BB41_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_40:                              # %if.end150
                                        #   in Loop: Header=BB41_36 Depth=2
	jmp	.LBB41_41
.LBB41_41:                              # %for.inc151
                                        #   in Loop: Header=BB41_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_36
.LBB41_42:                              # %for.end153
                                        #   in Loop: Header=BB41_34 Depth=1
	jmp	.LBB41_43
.LBB41_43:                              # %for.inc154
                                        #   in Loop: Header=BB41_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_34
.LBB41_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB41_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB41_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB41_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB41_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_49
.LBB41_48:                              # %if.else172
                                        #   in Loop: Header=BB41_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_49:                              # %if.end183
                                        #   in Loop: Header=BB41_45 Depth=1
	jmp	.LBB41_50
.LBB41_50:                              # %for.inc184
                                        #   in Loop: Header=BB41_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_45
.LBB41_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB41_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB41_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB41_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB41_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_56
.LBB41_55:                              # %if.else202
                                        #   in Loop: Header=BB41_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_56:                              # %if.end213
                                        #   in Loop: Header=BB41_52 Depth=1
	jmp	.LBB41_57
.LBB41_57:                              # %for.inc214
                                        #   in Loop: Header=BB41_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_52
.LBB41_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB41_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB41_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB41_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB41_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_63
.LBB41_62:                              # %if.else232
                                        #   in Loop: Header=BB41_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_63:                              # %if.end243
                                        #   in Loop: Header=BB41_59 Depth=1
	jmp	.LBB41_64
.LBB41_64:                              # %for.inc244
                                        #   in Loop: Header=BB41_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_59
.LBB41_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB41_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB41_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB41_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB41_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_70
.LBB41_69:                              # %if.else262
                                        #   in Loop: Header=BB41_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_70:                              # %if.end273
                                        #   in Loop: Header=BB41_66 Depth=1
	jmp	.LBB41_71
.LBB41_71:                              # %for.inc274
                                        #   in Loop: Header=BB41_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_66
.LBB41_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB41_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB41_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB41_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB41_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_77
.LBB41_76:                              # %if.else292
                                        #   in Loop: Header=BB41_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_77:                              # %if.end303
                                        #   in Loop: Header=BB41_73 Depth=1
	jmp	.LBB41_78
.LBB41_78:                              # %for.inc304
                                        #   in Loop: Header=BB41_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_73
.LBB41_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB41_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB41_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	$0, -4(%rbp)
.LBB41_82:                              # %for.cond310
                                        #   Parent Loop BB41_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB41_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB41_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_86
.LBB41_85:                              # %if.else328
                                        #   in Loop: Header=BB41_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_86:                              # %if.end342
                                        #   in Loop: Header=BB41_82 Depth=2
	jmp	.LBB41_87
.LBB41_87:                              # %for.inc343
                                        #   in Loop: Header=BB41_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_82
.LBB41_88:                              # %for.end345
                                        #   in Loop: Header=BB41_80 Depth=1
	jmp	.LBB41_89
.LBB41_89:                              # %for.inc346
                                        #   in Loop: Header=BB41_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_80
.LBB41_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB41_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB41_91 Depth=1
	movl	$0, -4(%rbp)
.LBB41_93:                              # %for.cond352
                                        #   Parent Loop BB41_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB41_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB41_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB41_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_97
.LBB41_96:                              # %if.else370
                                        #   in Loop: Header=BB41_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_97:                              # %if.end384
                                        #   in Loop: Header=BB41_93 Depth=2
	jmp	.LBB41_98
.LBB41_98:                              # %for.inc385
                                        #   in Loop: Header=BB41_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_93
.LBB41_99:                              # %for.end387
                                        #   in Loop: Header=BB41_91 Depth=1
	jmp	.LBB41_100
.LBB41_100:                             # %for.inc388
                                        #   in Loop: Header=BB41_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_91
.LBB41_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB41_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB41_102 Depth=1
	movl	$0, -4(%rbp)
.LBB41_104:                             # %for.cond394
                                        #   Parent Loop BB41_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB41_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB41_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_108
.LBB41_107:                             # %if.else412
                                        #   in Loop: Header=BB41_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_108:                             # %if.end426
                                        #   in Loop: Header=BB41_104 Depth=2
	jmp	.LBB41_109
.LBB41_109:                             # %for.inc427
                                        #   in Loop: Header=BB41_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_104
.LBB41_110:                             # %for.end429
                                        #   in Loop: Header=BB41_102 Depth=1
	jmp	.LBB41_111
.LBB41_111:                             # %for.inc430
                                        #   in Loop: Header=BB41_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_102
.LBB41_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB41_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB41_113 Depth=1
	movl	$0, -4(%rbp)
.LBB41_115:                             # %for.cond436
                                        #   Parent Loop BB41_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB41_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB41_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_119
.LBB41_118:                             # %if.else454
                                        #   in Loop: Header=BB41_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_119:                             # %if.end468
                                        #   in Loop: Header=BB41_115 Depth=2
	jmp	.LBB41_120
.LBB41_120:                             # %for.inc469
                                        #   in Loop: Header=BB41_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_115
.LBB41_121:                             # %for.end471
                                        #   in Loop: Header=BB41_113 Depth=1
	jmp	.LBB41_122
.LBB41_122:                             # %for.inc472
                                        #   in Loop: Header=BB41_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_113
.LBB41_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB41_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB41_124 Depth=1
	movl	$0, -4(%rbp)
.LBB41_126:                             # %for.cond478
                                        #   Parent Loop BB41_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB41_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB41_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB41_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_130
.LBB41_129:                             # %if.else496
                                        #   in Loop: Header=BB41_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_130:                             # %if.end510
                                        #   in Loop: Header=BB41_126 Depth=2
	jmp	.LBB41_131
.LBB41_131:                             # %for.inc511
                                        #   in Loop: Header=BB41_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_126
.LBB41_132:                             # %for.end513
                                        #   in Loop: Header=BB41_124 Depth=1
	jmp	.LBB41_133
.LBB41_133:                             # %for.inc514
                                        #   in Loop: Header=BB41_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_124
.LBB41_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB41_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	$0, -4(%rbp)
.LBB41_137:                             # %for.cond520
                                        #   Parent Loop BB41_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB41_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB41_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB41_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_141
.LBB41_140:                             # %if.else538
                                        #   in Loop: Header=BB41_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_141:                             # %if.end552
                                        #   in Loop: Header=BB41_137 Depth=2
	jmp	.LBB41_142
.LBB41_142:                             # %for.inc553
                                        #   in Loop: Header=BB41_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_137
.LBB41_143:                             # %for.end555
                                        #   in Loop: Header=BB41_135 Depth=1
	jmp	.LBB41_144
.LBB41_144:                             # %for.inc556
                                        #   in Loop: Header=BB41_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_135
.LBB41_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB41_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB41_146 Depth=1
	movl	$0, -4(%rbp)
.LBB41_148:                             # %for.cond562
                                        #   Parent Loop BB41_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB41_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB41_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_152
.LBB41_151:                             # %if.else580
                                        #   in Loop: Header=BB41_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_152:                             # %if.end594
                                        #   in Loop: Header=BB41_148 Depth=2
	jmp	.LBB41_153
.LBB41_153:                             # %for.inc595
                                        #   in Loop: Header=BB41_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_148
.LBB41_154:                             # %for.end597
                                        #   in Loop: Header=BB41_146 Depth=1
	jmp	.LBB41_155
.LBB41_155:                             # %for.inc598
                                        #   in Loop: Header=BB41_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_146
.LBB41_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB41_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB41_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	$0, -4(%rbp)
.LBB41_159:                             # %for.cond604
                                        #   Parent Loop BB41_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB41_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB41_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB41_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB41_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB41_163
.LBB41_162:                             # %if.else622
                                        #   in Loop: Header=BB41_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB41_163:                             # %if.end636
                                        #   in Loop: Header=BB41_159 Depth=2
	jmp	.LBB41_164
.LBB41_164:                             # %for.inc637
                                        #   in Loop: Header=BB41_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_159
.LBB41_165:                             # %for.end639
                                        #   in Loop: Header=BB41_157 Depth=1
	jmp	.LBB41_166
.LBB41_166:                             # %for.inc640
                                        #   in Loop: Header=BB41_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_157
.LBB41_167:                             # %for.end642
	cmpl	$439991011, -28(%rbp)   # imm = 0x1A39BAE3
	jne	.LBB41_169
.LBB41_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_168
.Lfunc_end41:
	.size	init_contexts.34, .Lfunc_end41-init_contexts.34
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.35
.LCPI42_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.35
	.p2align	4, 0x90
	.type	GetCtxModelNumber.35,@function
GetCtxModelNumber.35:                   # @GetCtxModelNumber.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI42_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$713989056, -44(%rbp)   # imm = 0x2A8E9BC0
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
                                        #       Child Loop BB42_5 Depth 3
                                        #     Child Loop BB42_14 Depth 2
                                        #       Child Loop BB42_16 Depth 3
                                        #     Child Loop BB42_25 Depth 2
                                        #       Child Loop BB42_27 Depth 3
                                        #     Child Loop BB42_36 Depth 2
                                        #       Child Loop BB42_38 Depth 3
                                        #     Child Loop BB42_47 Depth 2
                                        #     Child Loop BB42_54 Depth 2
                                        #     Child Loop BB42_61 Depth 2
                                        #     Child Loop BB42_68 Depth 2
                                        #     Child Loop BB42_75 Depth 2
                                        #     Child Loop BB42_82 Depth 2
                                        #       Child Loop BB42_84 Depth 3
                                        #     Child Loop BB42_93 Depth 2
                                        #       Child Loop BB42_95 Depth 3
                                        #     Child Loop BB42_104 Depth 2
                                        #       Child Loop BB42_106 Depth 3
                                        #     Child Loop BB42_115 Depth 2
                                        #       Child Loop BB42_117 Depth 3
                                        #     Child Loop BB42_126 Depth 2
                                        #       Child Loop BB42_128 Depth 3
                                        #     Child Loop BB42_137 Depth 2
                                        #       Child Loop BB42_139 Depth 3
                                        #     Child Loop BB42_148 Depth 2
                                        #       Child Loop BB42_150 Depth 3
                                        #     Child Loop BB42_159 Depth 2
                                        #       Child Loop BB42_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB42_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB42_3:                               # %for.cond2
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	$0, -4(%rbp)
.LBB42_5:                               # %for.cond5
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB42_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_9
.LBB42_8:                               # %if.else
                                        #   in Loop: Header=BB42_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_9:                               # %if.end
                                        #   in Loop: Header=BB42_5 Depth=3
	jmp	.LBB42_10
.LBB42_10:                              # %for.inc
                                        #   in Loop: Header=BB42_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_5
.LBB42_11:                              # %for.end
                                        #   in Loop: Header=BB42_3 Depth=2
	jmp	.LBB42_12
.LBB42_12:                              # %for.inc33
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_3
.LBB42_13:                              # %for.end35
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_14:                              # %for.cond36
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	$0, -4(%rbp)
.LBB42_16:                              # %for.cond39
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB42_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_20
.LBB42_19:                              # %if.else58
                                        #   in Loop: Header=BB42_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_20:                              # %if.end73
                                        #   in Loop: Header=BB42_16 Depth=3
	jmp	.LBB42_21
.LBB42_21:                              # %for.inc74
                                        #   in Loop: Header=BB42_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_16
.LBB42_22:                              # %for.end76
                                        #   in Loop: Header=BB42_14 Depth=2
	jmp	.LBB42_23
.LBB42_23:                              # %for.inc77
                                        #   in Loop: Header=BB42_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_14
.LBB42_24:                              # %for.end79
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_25:                              # %for.cond80
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	$0, -4(%rbp)
.LBB42_27:                              # %for.cond83
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB42_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_31
.LBB42_30:                              # %if.else102
                                        #   in Loop: Header=BB42_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_31:                              # %if.end117
                                        #   in Loop: Header=BB42_27 Depth=3
	jmp	.LBB42_32
.LBB42_32:                              # %for.inc118
                                        #   in Loop: Header=BB42_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_27
.LBB42_33:                              # %for.end120
                                        #   in Loop: Header=BB42_25 Depth=2
	jmp	.LBB42_34
.LBB42_34:                              # %for.inc121
                                        #   in Loop: Header=BB42_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_25
.LBB42_35:                              # %for.end123
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_36:                              # %for.cond124
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB42_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	$0, -4(%rbp)
.LBB42_38:                              # %for.cond127
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB42_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_42
.LBB42_41:                              # %if.else146
                                        #   in Loop: Header=BB42_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_42:                              # %if.end161
                                        #   in Loop: Header=BB42_38 Depth=3
	jmp	.LBB42_43
.LBB42_43:                              # %for.inc162
                                        #   in Loop: Header=BB42_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_38
.LBB42_44:                              # %for.end164
                                        #   in Loop: Header=BB42_36 Depth=2
	jmp	.LBB42_45
.LBB42_45:                              # %for.inc165
                                        #   in Loop: Header=BB42_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_36
.LBB42_46:                              # %for.end167
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_47:                              # %for.cond168
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_51
.LBB42_50:                              # %if.else184
                                        #   in Loop: Header=BB42_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_51:                              # %if.end196
                                        #   in Loop: Header=BB42_47 Depth=2
	jmp	.LBB42_52
.LBB42_52:                              # %for.inc197
                                        #   in Loop: Header=BB42_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_47
.LBB42_53:                              # %for.end199
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_54:                              # %for.cond200
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_58
.LBB42_57:                              # %if.else216
                                        #   in Loop: Header=BB42_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_58:                              # %if.end228
                                        #   in Loop: Header=BB42_54 Depth=2
	jmp	.LBB42_59
.LBB42_59:                              # %for.inc229
                                        #   in Loop: Header=BB42_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_54
.LBB42_60:                              # %for.end231
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_61:                              # %for.cond232
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB42_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_65
.LBB42_64:                              # %if.else248
                                        #   in Loop: Header=BB42_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_65:                              # %if.end260
                                        #   in Loop: Header=BB42_61 Depth=2
	jmp	.LBB42_66
.LBB42_66:                              # %for.inc261
                                        #   in Loop: Header=BB42_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_61
.LBB42_67:                              # %for.end263
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_68:                              # %for.cond264
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB42_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_72
.LBB42_71:                              # %if.else280
                                        #   in Loop: Header=BB42_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_72:                              # %if.end292
                                        #   in Loop: Header=BB42_68 Depth=2
	jmp	.LBB42_73
.LBB42_73:                              # %for.inc293
                                        #   in Loop: Header=BB42_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_68
.LBB42_74:                              # %for.end295
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_75:                              # %for.cond296
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_79
.LBB42_78:                              # %if.else312
                                        #   in Loop: Header=BB42_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_79:                              # %if.end324
                                        #   in Loop: Header=BB42_75 Depth=2
	jmp	.LBB42_80
.LBB42_80:                              # %for.inc325
                                        #   in Loop: Header=BB42_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_75
.LBB42_81:                              # %for.end327
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_82:                              # %for.cond328
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB42_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	$0, -4(%rbp)
.LBB42_84:                              # %for.cond331
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_88
.LBB42_87:                              # %if.else350
                                        #   in Loop: Header=BB42_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_88:                              # %if.end365
                                        #   in Loop: Header=BB42_84 Depth=3
	jmp	.LBB42_89
.LBB42_89:                              # %for.inc366
                                        #   in Loop: Header=BB42_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_84
.LBB42_90:                              # %for.end368
                                        #   in Loop: Header=BB42_82 Depth=2
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc369
                                        #   in Loop: Header=BB42_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_82
.LBB42_92:                              # %for.end371
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_93:                              # %for.cond372
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	$0, -4(%rbp)
.LBB42_95:                              # %for.cond375
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB42_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_99
.LBB42_98:                              # %if.else394
                                        #   in Loop: Header=BB42_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_99:                              # %if.end409
                                        #   in Loop: Header=BB42_95 Depth=3
	jmp	.LBB42_100
.LBB42_100:                             # %for.inc410
                                        #   in Loop: Header=BB42_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_95
.LBB42_101:                             # %for.end412
                                        #   in Loop: Header=BB42_93 Depth=2
	jmp	.LBB42_102
.LBB42_102:                             # %for.inc413
                                        #   in Loop: Header=BB42_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_93
.LBB42_103:                             # %for.end415
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_104:                             # %for.cond416
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	$0, -4(%rbp)
.LBB42_106:                             # %for.cond419
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_110
.LBB42_109:                             # %if.else438
                                        #   in Loop: Header=BB42_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_110:                             # %if.end453
                                        #   in Loop: Header=BB42_106 Depth=3
	jmp	.LBB42_111
.LBB42_111:                             # %for.inc454
                                        #   in Loop: Header=BB42_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_106
.LBB42_112:                             # %for.end456
                                        #   in Loop: Header=BB42_104 Depth=2
	jmp	.LBB42_113
.LBB42_113:                             # %for.inc457
                                        #   in Loop: Header=BB42_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_104
.LBB42_114:                             # %for.end459
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_115:                             # %for.cond460
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	$0, -4(%rbp)
.LBB42_117:                             # %for.cond463
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_121
.LBB42_120:                             # %if.else482
                                        #   in Loop: Header=BB42_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_121:                             # %if.end497
                                        #   in Loop: Header=BB42_117 Depth=3
	jmp	.LBB42_122
.LBB42_122:                             # %for.inc498
                                        #   in Loop: Header=BB42_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_117
.LBB42_123:                             # %for.end500
                                        #   in Loop: Header=BB42_115 Depth=2
	jmp	.LBB42_124
.LBB42_124:                             # %for.inc501
                                        #   in Loop: Header=BB42_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_115
.LBB42_125:                             # %for.end503
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_126:                             # %for.cond504
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	$0, -4(%rbp)
.LBB42_128:                             # %for.cond507
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_132
.LBB42_131:                             # %if.else526
                                        #   in Loop: Header=BB42_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_132:                             # %if.end541
                                        #   in Loop: Header=BB42_128 Depth=3
	jmp	.LBB42_133
.LBB42_133:                             # %for.inc542
                                        #   in Loop: Header=BB42_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_128
.LBB42_134:                             # %for.end544
                                        #   in Loop: Header=BB42_126 Depth=2
	jmp	.LBB42_135
.LBB42_135:                             # %for.inc545
                                        #   in Loop: Header=BB42_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_126
.LBB42_136:                             # %for.end547
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_137:                             # %for.cond548
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	$0, -4(%rbp)
.LBB42_139:                             # %for.cond551
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB42_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_143
.LBB42_142:                             # %if.else570
                                        #   in Loop: Header=BB42_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_143:                             # %if.end585
                                        #   in Loop: Header=BB42_139 Depth=3
	jmp	.LBB42_144
.LBB42_144:                             # %for.inc586
                                        #   in Loop: Header=BB42_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_139
.LBB42_145:                             # %for.end588
                                        #   in Loop: Header=BB42_137 Depth=2
	jmp	.LBB42_146
.LBB42_146:                             # %for.inc589
                                        #   in Loop: Header=BB42_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_137
.LBB42_147:                             # %for.end591
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_148:                             # %for.cond592
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	$0, -4(%rbp)
.LBB42_150:                             # %for.cond595
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_154
.LBB42_153:                             # %if.else614
                                        #   in Loop: Header=BB42_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_154:                             # %if.end629
                                        #   in Loop: Header=BB42_150 Depth=3
	jmp	.LBB42_155
.LBB42_155:                             # %for.inc630
                                        #   in Loop: Header=BB42_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_150
.LBB42_156:                             # %for.end632
                                        #   in Loop: Header=BB42_148 Depth=2
	jmp	.LBB42_157
.LBB42_157:                             # %for.inc633
                                        #   in Loop: Header=BB42_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_148
.LBB42_158:                             # %for.end635
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -8(%rbp)
.LBB42_159:                             # %for.cond636
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB42_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	$0, -4(%rbp)
.LBB42_161:                             # %for.cond639
                                        #   Parent Loop BB42_1 Depth=1
                                        #     Parent Loop BB42_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB42_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB42_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB42_165
.LBB42_164:                             # %if.else658
                                        #   in Loop: Header=BB42_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB42_165:                             # %if.end673
                                        #   in Loop: Header=BB42_161 Depth=3
	jmp	.LBB42_166
.LBB42_166:                             # %for.inc674
                                        #   in Loop: Header=BB42_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_161
.LBB42_167:                             # %for.end676
                                        #   in Loop: Header=BB42_159 Depth=2
	jmp	.LBB42_168
.LBB42_168:                             # %for.inc677
                                        #   in Loop: Header=BB42_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_159
.LBB42_169:                             # %for.end679
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB42_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB42_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB42_171:                             # %if.end682
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_172
.LBB42_172:                             # %for.inc683
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_1
.LBB42_173:                             # %for.end685
	cmpl	$713989056, -44(%rbp)   # imm = 0x2A8E9BC0
	jne	.LBB42_175
.LBB42_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_174
.Lfunc_end42:
	.size	GetCtxModelNumber.35, .Lfunc_end42-GetCtxModelNumber.35
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.36
.LCPI43_0:
	.quad	4611686018427387904     # double 2
.LCPI43_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.36
	.p2align	4, 0x90
	.type	create_context_memory.36,@function
create_context_memory.36:               # @create_context_memory.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$482697469, -20(%rbp)   # imm = 0x1CC560FD
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB43_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB43_3
.LBB43_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB43_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB43_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB43_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB43_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB43_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB43_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB43_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB43_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB43_11:                              # %if.end10
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB43_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB43_13:                              # %if.end16
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	$0, -8(%rbp)
.LBB43_14:                              # %for.cond17
                                        #   Parent Loop BB43_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB43_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB43_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB43_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB43_17:                              # %if.end28
                                        #   in Loop: Header=BB43_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB43_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB43_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB43_19:                              # %if.end39
                                        #   in Loop: Header=BB43_14 Depth=2
	jmp	.LBB43_20
.LBB43_20:                              # %for.inc
                                        #   in Loop: Header=BB43_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_14
.LBB43_21:                              # %for.end
                                        #   in Loop: Header=BB43_8 Depth=1
	jmp	.LBB43_22
.LBB43_22:                              # %for.inc40
                                        #   in Loop: Header=BB43_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_8
.LBB43_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB43_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_26 Depth 2
                                        #       Child Loop BB43_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB43_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB43_24 Depth=1
	movl	$0, -8(%rbp)
.LBB43_26:                              # %for.cond47
                                        #   Parent Loop BB43_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB43_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB43_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB43_26 Depth=2
	movl	$0, -12(%rbp)
.LBB43_28:                              # %for.cond51
                                        #   Parent Loop BB43_24 Depth=1
                                        #     Parent Loop BB43_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB43_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB43_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB43_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_28
.LBB43_31:                              # %for.end63
                                        #   in Loop: Header=BB43_26 Depth=2
	jmp	.LBB43_32
.LBB43_32:                              # %for.inc64
                                        #   in Loop: Header=BB43_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_26
.LBB43_33:                              # %for.end66
                                        #   in Loop: Header=BB43_24 Depth=1
	jmp	.LBB43_34
.LBB43_34:                              # %for.inc67
                                        #   in Loop: Header=BB43_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_24
.LBB43_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB43_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB43_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB43_36 Depth=1
	vmovsd	.LCPI43_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI43_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB43_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_36
.LBB43_39:                              # %for.end98
	cmpl	$482697469, -20(%rbp)   # imm = 0x1CC560FD
	jne	.LBB43_41
.LBB43_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_40
.Lfunc_end43:
	.size	create_context_memory.36, .Lfunc_end43-create_context_memory.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.37
.LCPI44_0:
	.quad	4607182418800017408     # double 1
.LCPI44_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI44_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI44_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.37
	.p2align	4, 0x90
	.type	XRate.37,@function
XRate.37:                               # @XRate.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1577894801, -36(%rbp)  # imm = 0x5E0CC391
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB44_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB44_3
.LBB44_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB44_3:                               # %cond.end
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI44_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI44_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI44_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB44_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI44_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB44_6
.LBB44_5:                               # %cond.false6
	vmovsd	.LCPI44_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI44_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI44_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB44_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB44_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB44_9
.LBB44_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB44_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB44_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB44_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB44_13
.LBB44_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB44_13:                              # %cond.end26
	jmp	.LBB44_15
.LBB44_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB44_15
.LBB44_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB44_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB44_18
.LBB44_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB44_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1577894801, -36(%rbp)  # imm = 0x5E0CC391
	jne	.LBB44_20
.LBB44_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB44_19
.Lfunc_end44:
	.size	XRate.37, .Lfunc_end44-XRate.37
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.38       # -- Begin function store_contexts.38
	.p2align	4, 0x90
	.type	store_contexts.38,@function
store_contexts.38:                      # @store_contexts.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$74109145, -16(%rbp)    # imm = 0x46AD0D9
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -8(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB45_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB45_3
.LBB45_2:                               # %if.else
	jmp	.LBB45_3
.LBB45_3:                               # %if.end
	cmpl	$74109145, -16(%rbp)    # imm = 0x46AD0D9
	jne	.LBB45_5
.LBB45_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_4
.Lfunc_end45:
	.size	store_contexts.38, .Lfunc_end45-store_contexts.38
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.39        # -- Begin function init_contexts.39
	.p2align	4, 0x90
	.type	init_contexts.39,@function
init_contexts.39:                       # @init_contexts.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$610188596, -28(%rbp)   # imm = 0x245EBD34
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB46_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	$0, -4(%rbp)
.LBB46_3:                               # %for.cond2
                                        #   Parent Loop BB46_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB46_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_7
.LBB46_6:                               # %if.else
                                        #   in Loop: Header=BB46_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_7:                               # %if.end
                                        #   in Loop: Header=BB46_3 Depth=2
	jmp	.LBB46_8
.LBB46_8:                               # %for.inc
                                        #   in Loop: Header=BB46_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_3
.LBB46_9:                               # %for.end
                                        #   in Loop: Header=BB46_1 Depth=1
	jmp	.LBB46_10
.LBB46_10:                              # %for.inc28
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_1
.LBB46_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB46_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB46_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB46_12 Depth=1
	movl	$0, -4(%rbp)
.LBB46_14:                              # %for.cond34
                                        #   Parent Loop BB46_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB46_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_18
.LBB46_17:                              # %if.else52
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_18:                              # %if.end66
                                        #   in Loop: Header=BB46_14 Depth=2
	jmp	.LBB46_19
.LBB46_19:                              # %for.inc67
                                        #   in Loop: Header=BB46_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_14
.LBB46_20:                              # %for.end69
                                        #   in Loop: Header=BB46_12 Depth=1
	jmp	.LBB46_21
.LBB46_21:                              # %for.inc70
                                        #   in Loop: Header=BB46_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_12
.LBB46_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB46_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB46_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	$0, -4(%rbp)
.LBB46_25:                              # %for.cond76
                                        #   Parent Loop BB46_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB46_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_29
.LBB46_28:                              # %if.else94
                                        #   in Loop: Header=BB46_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_29:                              # %if.end108
                                        #   in Loop: Header=BB46_25 Depth=2
	jmp	.LBB46_30
.LBB46_30:                              # %for.inc109
                                        #   in Loop: Header=BB46_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_25
.LBB46_31:                              # %for.end111
                                        #   in Loop: Header=BB46_23 Depth=1
	jmp	.LBB46_32
.LBB46_32:                              # %for.inc112
                                        #   in Loop: Header=BB46_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_23
.LBB46_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB46_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB46_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	$0, -4(%rbp)
.LBB46_36:                              # %for.cond118
                                        #   Parent Loop BB46_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB46_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_40
.LBB46_39:                              # %if.else136
                                        #   in Loop: Header=BB46_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_40:                              # %if.end150
                                        #   in Loop: Header=BB46_36 Depth=2
	jmp	.LBB46_41
.LBB46_41:                              # %for.inc151
                                        #   in Loop: Header=BB46_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_36
.LBB46_42:                              # %for.end153
                                        #   in Loop: Header=BB46_34 Depth=1
	jmp	.LBB46_43
.LBB46_43:                              # %for.inc154
                                        #   in Loop: Header=BB46_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_34
.LBB46_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB46_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB46_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB46_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_49
.LBB46_48:                              # %if.else172
                                        #   in Loop: Header=BB46_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_49:                              # %if.end183
                                        #   in Loop: Header=BB46_45 Depth=1
	jmp	.LBB46_50
.LBB46_50:                              # %for.inc184
                                        #   in Loop: Header=BB46_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_45
.LBB46_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB46_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_56
.LBB46_55:                              # %if.else202
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_56:                              # %if.end213
                                        #   in Loop: Header=BB46_52 Depth=1
	jmp	.LBB46_57
.LBB46_57:                              # %for.inc214
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_52
.LBB46_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB46_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB46_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB46_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB46_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_63
.LBB46_62:                              # %if.else232
                                        #   in Loop: Header=BB46_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_63:                              # %if.end243
                                        #   in Loop: Header=BB46_59 Depth=1
	jmp	.LBB46_64
.LBB46_64:                              # %for.inc244
                                        #   in Loop: Header=BB46_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_59
.LBB46_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB46_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB46_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_70
.LBB46_69:                              # %if.else262
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_70:                              # %if.end273
                                        #   in Loop: Header=BB46_66 Depth=1
	jmp	.LBB46_71
.LBB46_71:                              # %for.inc274
                                        #   in Loop: Header=BB46_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_66
.LBB46_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB46_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB46_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB46_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_77
.LBB46_76:                              # %if.else292
                                        #   in Loop: Header=BB46_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_77:                              # %if.end303
                                        #   in Loop: Header=BB46_73 Depth=1
	jmp	.LBB46_78
.LBB46_78:                              # %for.inc304
                                        #   in Loop: Header=BB46_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_73
.LBB46_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB46_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB46_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB46_80 Depth=1
	movl	$0, -4(%rbp)
.LBB46_82:                              # %for.cond310
                                        #   Parent Loop BB46_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB46_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB46_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_86
.LBB46_85:                              # %if.else328
                                        #   in Loop: Header=BB46_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_86:                              # %if.end342
                                        #   in Loop: Header=BB46_82 Depth=2
	jmp	.LBB46_87
.LBB46_87:                              # %for.inc343
                                        #   in Loop: Header=BB46_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_82
.LBB46_88:                              # %for.end345
                                        #   in Loop: Header=BB46_80 Depth=1
	jmp	.LBB46_89
.LBB46_89:                              # %for.inc346
                                        #   in Loop: Header=BB46_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_80
.LBB46_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB46_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB46_91 Depth=1
	movl	$0, -4(%rbp)
.LBB46_93:                              # %for.cond352
                                        #   Parent Loop BB46_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB46_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB46_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_97
.LBB46_96:                              # %if.else370
                                        #   in Loop: Header=BB46_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_97:                              # %if.end384
                                        #   in Loop: Header=BB46_93 Depth=2
	jmp	.LBB46_98
.LBB46_98:                              # %for.inc385
                                        #   in Loop: Header=BB46_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_93
.LBB46_99:                              # %for.end387
                                        #   in Loop: Header=BB46_91 Depth=1
	jmp	.LBB46_100
.LBB46_100:                             # %for.inc388
                                        #   in Loop: Header=BB46_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_91
.LBB46_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB46_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB46_102 Depth=1
	movl	$0, -4(%rbp)
.LBB46_104:                             # %for.cond394
                                        #   Parent Loop BB46_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB46_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB46_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_108
.LBB46_107:                             # %if.else412
                                        #   in Loop: Header=BB46_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_108:                             # %if.end426
                                        #   in Loop: Header=BB46_104 Depth=2
	jmp	.LBB46_109
.LBB46_109:                             # %for.inc427
                                        #   in Loop: Header=BB46_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_104
.LBB46_110:                             # %for.end429
                                        #   in Loop: Header=BB46_102 Depth=1
	jmp	.LBB46_111
.LBB46_111:                             # %for.inc430
                                        #   in Loop: Header=BB46_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_102
.LBB46_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB46_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB46_113 Depth=1
	movl	$0, -4(%rbp)
.LBB46_115:                             # %for.cond436
                                        #   Parent Loop BB46_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB46_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB46_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_119
.LBB46_118:                             # %if.else454
                                        #   in Loop: Header=BB46_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_119:                             # %if.end468
                                        #   in Loop: Header=BB46_115 Depth=2
	jmp	.LBB46_120
.LBB46_120:                             # %for.inc469
                                        #   in Loop: Header=BB46_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_115
.LBB46_121:                             # %for.end471
                                        #   in Loop: Header=BB46_113 Depth=1
	jmp	.LBB46_122
.LBB46_122:                             # %for.inc472
                                        #   in Loop: Header=BB46_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_113
.LBB46_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB46_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB46_124 Depth=1
	movl	$0, -4(%rbp)
.LBB46_126:                             # %for.cond478
                                        #   Parent Loop BB46_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB46_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_130
.LBB46_129:                             # %if.else496
                                        #   in Loop: Header=BB46_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_130:                             # %if.end510
                                        #   in Loop: Header=BB46_126 Depth=2
	jmp	.LBB46_131
.LBB46_131:                             # %for.inc511
                                        #   in Loop: Header=BB46_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_126
.LBB46_132:                             # %for.end513
                                        #   in Loop: Header=BB46_124 Depth=1
	jmp	.LBB46_133
.LBB46_133:                             # %for.inc514
                                        #   in Loop: Header=BB46_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_124
.LBB46_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB46_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB46_135 Depth=1
	movl	$0, -4(%rbp)
.LBB46_137:                             # %for.cond520
                                        #   Parent Loop BB46_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB46_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB46_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB46_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_141
.LBB46_140:                             # %if.else538
                                        #   in Loop: Header=BB46_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_141:                             # %if.end552
                                        #   in Loop: Header=BB46_137 Depth=2
	jmp	.LBB46_142
.LBB46_142:                             # %for.inc553
                                        #   in Loop: Header=BB46_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_137
.LBB46_143:                             # %for.end555
                                        #   in Loop: Header=BB46_135 Depth=1
	jmp	.LBB46_144
.LBB46_144:                             # %for.inc556
                                        #   in Loop: Header=BB46_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_135
.LBB46_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB46_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB46_146 Depth=1
	movl	$0, -4(%rbp)
.LBB46_148:                             # %for.cond562
                                        #   Parent Loop BB46_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB46_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB46_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_152
.LBB46_151:                             # %if.else580
                                        #   in Loop: Header=BB46_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_152:                             # %if.end594
                                        #   in Loop: Header=BB46_148 Depth=2
	jmp	.LBB46_153
.LBB46_153:                             # %for.inc595
                                        #   in Loop: Header=BB46_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_148
.LBB46_154:                             # %for.end597
                                        #   in Loop: Header=BB46_146 Depth=1
	jmp	.LBB46_155
.LBB46_155:                             # %for.inc598
                                        #   in Loop: Header=BB46_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_146
.LBB46_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB46_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB46_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB46_157 Depth=1
	movl	$0, -4(%rbp)
.LBB46_159:                             # %for.cond604
                                        #   Parent Loop BB46_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB46_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB46_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB46_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB46_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB46_163
.LBB46_162:                             # %if.else622
                                        #   in Loop: Header=BB46_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB46_163:                             # %if.end636
                                        #   in Loop: Header=BB46_159 Depth=2
	jmp	.LBB46_164
.LBB46_164:                             # %for.inc637
                                        #   in Loop: Header=BB46_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_159
.LBB46_165:                             # %for.end639
                                        #   in Loop: Header=BB46_157 Depth=1
	jmp	.LBB46_166
.LBB46_166:                             # %for.inc640
                                        #   in Loop: Header=BB46_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_157
.LBB46_167:                             # %for.end642
	cmpl	$610188596, -28(%rbp)   # imm = 0x245EBD34
	jne	.LBB46_169
.LBB46_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_168
.Lfunc_end46:
	.size	init_contexts.39, .Lfunc_end46-init_contexts.39
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.40        # -- Begin function init_contexts.40
	.p2align	4, 0x90
	.type	init_contexts.40,@function
init_contexts.40:                       # @init_contexts.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$739784587, -28(%rbp)   # imm = 0x2C18378B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB47_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -4(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB47_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_7
.LBB47_6:                               # %if.else
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_7:                               # %if.end
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_8
.LBB47_8:                               # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_3
.LBB47_9:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_10
.LBB47_10:                              # %for.inc28
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_1
.LBB47_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB47_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB47_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB47_12 Depth=1
	movl	$0, -4(%rbp)
.LBB47_14:                              # %for.cond34
                                        #   Parent Loop BB47_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB47_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB47_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB47_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_18
.LBB47_17:                              # %if.else52
                                        #   in Loop: Header=BB47_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_18:                              # %if.end66
                                        #   in Loop: Header=BB47_14 Depth=2
	jmp	.LBB47_19
.LBB47_19:                              # %for.inc67
                                        #   in Loop: Header=BB47_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_14
.LBB47_20:                              # %for.end69
                                        #   in Loop: Header=BB47_12 Depth=1
	jmp	.LBB47_21
.LBB47_21:                              # %for.inc70
                                        #   in Loop: Header=BB47_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_12
.LBB47_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB47_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB47_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB47_23 Depth=1
	movl	$0, -4(%rbp)
.LBB47_25:                              # %for.cond76
                                        #   Parent Loop BB47_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB47_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB47_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB47_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_29
.LBB47_28:                              # %if.else94
                                        #   in Loop: Header=BB47_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_29:                              # %if.end108
                                        #   in Loop: Header=BB47_25 Depth=2
	jmp	.LBB47_30
.LBB47_30:                              # %for.inc109
                                        #   in Loop: Header=BB47_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_25
.LBB47_31:                              # %for.end111
                                        #   in Loop: Header=BB47_23 Depth=1
	jmp	.LBB47_32
.LBB47_32:                              # %for.inc112
                                        #   in Loop: Header=BB47_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_23
.LBB47_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB47_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB47_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB47_34 Depth=1
	movl	$0, -4(%rbp)
.LBB47_36:                              # %for.cond118
                                        #   Parent Loop BB47_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB47_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB47_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB47_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_40
.LBB47_39:                              # %if.else136
                                        #   in Loop: Header=BB47_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_40:                              # %if.end150
                                        #   in Loop: Header=BB47_36 Depth=2
	jmp	.LBB47_41
.LBB47_41:                              # %for.inc151
                                        #   in Loop: Header=BB47_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_36
.LBB47_42:                              # %for.end153
                                        #   in Loop: Header=BB47_34 Depth=1
	jmp	.LBB47_43
.LBB47_43:                              # %for.inc154
                                        #   in Loop: Header=BB47_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_34
.LBB47_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB47_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB47_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB47_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_49
.LBB47_48:                              # %if.else172
                                        #   in Loop: Header=BB47_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_49:                              # %if.end183
                                        #   in Loop: Header=BB47_45 Depth=1
	jmp	.LBB47_50
.LBB47_50:                              # %for.inc184
                                        #   in Loop: Header=BB47_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_45
.LBB47_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB47_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB47_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB47_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_56
.LBB47_55:                              # %if.else202
                                        #   in Loop: Header=BB47_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_56:                              # %if.end213
                                        #   in Loop: Header=BB47_52 Depth=1
	jmp	.LBB47_57
.LBB47_57:                              # %for.inc214
                                        #   in Loop: Header=BB47_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_52
.LBB47_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB47_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB47_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB47_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB47_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_63
.LBB47_62:                              # %if.else232
                                        #   in Loop: Header=BB47_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_63:                              # %if.end243
                                        #   in Loop: Header=BB47_59 Depth=1
	jmp	.LBB47_64
.LBB47_64:                              # %for.inc244
                                        #   in Loop: Header=BB47_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_59
.LBB47_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB47_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB47_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB47_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB47_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_70
.LBB47_69:                              # %if.else262
                                        #   in Loop: Header=BB47_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_70:                              # %if.end273
                                        #   in Loop: Header=BB47_66 Depth=1
	jmp	.LBB47_71
.LBB47_71:                              # %for.inc274
                                        #   in Loop: Header=BB47_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_66
.LBB47_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB47_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB47_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB47_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB47_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_77
.LBB47_76:                              # %if.else292
                                        #   in Loop: Header=BB47_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_77:                              # %if.end303
                                        #   in Loop: Header=BB47_73 Depth=1
	jmp	.LBB47_78
.LBB47_78:                              # %for.inc304
                                        #   in Loop: Header=BB47_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_73
.LBB47_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB47_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB47_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB47_80 Depth=1
	movl	$0, -4(%rbp)
.LBB47_82:                              # %for.cond310
                                        #   Parent Loop BB47_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB47_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB47_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_86
.LBB47_85:                              # %if.else328
                                        #   in Loop: Header=BB47_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_86:                              # %if.end342
                                        #   in Loop: Header=BB47_82 Depth=2
	jmp	.LBB47_87
.LBB47_87:                              # %for.inc343
                                        #   in Loop: Header=BB47_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_82
.LBB47_88:                              # %for.end345
                                        #   in Loop: Header=BB47_80 Depth=1
	jmp	.LBB47_89
.LBB47_89:                              # %for.inc346
                                        #   in Loop: Header=BB47_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_80
.LBB47_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB47_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB47_91 Depth=1
	movl	$0, -4(%rbp)
.LBB47_93:                              # %for.cond352
                                        #   Parent Loop BB47_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB47_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB47_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB47_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_97
.LBB47_96:                              # %if.else370
                                        #   in Loop: Header=BB47_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_97:                              # %if.end384
                                        #   in Loop: Header=BB47_93 Depth=2
	jmp	.LBB47_98
.LBB47_98:                              # %for.inc385
                                        #   in Loop: Header=BB47_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_93
.LBB47_99:                              # %for.end387
                                        #   in Loop: Header=BB47_91 Depth=1
	jmp	.LBB47_100
.LBB47_100:                             # %for.inc388
                                        #   in Loop: Header=BB47_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_91
.LBB47_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB47_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB47_102 Depth=1
	movl	$0, -4(%rbp)
.LBB47_104:                             # %for.cond394
                                        #   Parent Loop BB47_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB47_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB47_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_108
.LBB47_107:                             # %if.else412
                                        #   in Loop: Header=BB47_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_108:                             # %if.end426
                                        #   in Loop: Header=BB47_104 Depth=2
	jmp	.LBB47_109
.LBB47_109:                             # %for.inc427
                                        #   in Loop: Header=BB47_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_104
.LBB47_110:                             # %for.end429
                                        #   in Loop: Header=BB47_102 Depth=1
	jmp	.LBB47_111
.LBB47_111:                             # %for.inc430
                                        #   in Loop: Header=BB47_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_102
.LBB47_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB47_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB47_113 Depth=1
	movl	$0, -4(%rbp)
.LBB47_115:                             # %for.cond436
                                        #   Parent Loop BB47_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB47_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB47_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_119
.LBB47_118:                             # %if.else454
                                        #   in Loop: Header=BB47_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_119:                             # %if.end468
                                        #   in Loop: Header=BB47_115 Depth=2
	jmp	.LBB47_120
.LBB47_120:                             # %for.inc469
                                        #   in Loop: Header=BB47_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_115
.LBB47_121:                             # %for.end471
                                        #   in Loop: Header=BB47_113 Depth=1
	jmp	.LBB47_122
.LBB47_122:                             # %for.inc472
                                        #   in Loop: Header=BB47_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_113
.LBB47_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB47_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB47_124 Depth=1
	movl	$0, -4(%rbp)
.LBB47_126:                             # %for.cond478
                                        #   Parent Loop BB47_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB47_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB47_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB47_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_130
.LBB47_129:                             # %if.else496
                                        #   in Loop: Header=BB47_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_130:                             # %if.end510
                                        #   in Loop: Header=BB47_126 Depth=2
	jmp	.LBB47_131
.LBB47_131:                             # %for.inc511
                                        #   in Loop: Header=BB47_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_126
.LBB47_132:                             # %for.end513
                                        #   in Loop: Header=BB47_124 Depth=1
	jmp	.LBB47_133
.LBB47_133:                             # %for.inc514
                                        #   in Loop: Header=BB47_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_124
.LBB47_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB47_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	$0, -4(%rbp)
.LBB47_137:                             # %for.cond520
                                        #   Parent Loop BB47_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB47_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_141
.LBB47_140:                             # %if.else538
                                        #   in Loop: Header=BB47_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_141:                             # %if.end552
                                        #   in Loop: Header=BB47_137 Depth=2
	jmp	.LBB47_142
.LBB47_142:                             # %for.inc553
                                        #   in Loop: Header=BB47_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_137
.LBB47_143:                             # %for.end555
                                        #   in Loop: Header=BB47_135 Depth=1
	jmp	.LBB47_144
.LBB47_144:                             # %for.inc556
                                        #   in Loop: Header=BB47_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_135
.LBB47_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB47_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB47_146 Depth=1
	movl	$0, -4(%rbp)
.LBB47_148:                             # %for.cond562
                                        #   Parent Loop BB47_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB47_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB47_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_152
.LBB47_151:                             # %if.else580
                                        #   in Loop: Header=BB47_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_152:                             # %if.end594
                                        #   in Loop: Header=BB47_148 Depth=2
	jmp	.LBB47_153
.LBB47_153:                             # %for.inc595
                                        #   in Loop: Header=BB47_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_148
.LBB47_154:                             # %for.end597
                                        #   in Loop: Header=BB47_146 Depth=1
	jmp	.LBB47_155
.LBB47_155:                             # %for.inc598
                                        #   in Loop: Header=BB47_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_146
.LBB47_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB47_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB47_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	$0, -4(%rbp)
.LBB47_159:                             # %for.cond604
                                        #   Parent Loop BB47_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB47_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB47_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB47_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB47_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB47_163
.LBB47_162:                             # %if.else622
                                        #   in Loop: Header=BB47_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB47_163:                             # %if.end636
                                        #   in Loop: Header=BB47_159 Depth=2
	jmp	.LBB47_164
.LBB47_164:                             # %for.inc637
                                        #   in Loop: Header=BB47_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_159
.LBB47_165:                             # %for.end639
                                        #   in Loop: Header=BB47_157 Depth=1
	jmp	.LBB47_166
.LBB47_166:                             # %for.inc640
                                        #   in Loop: Header=BB47_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_157
.LBB47_167:                             # %for.end642
	cmpl	$739784587, -28(%rbp)   # imm = 0x2C18378B
	jne	.LBB47_169
.LBB47_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_168
.Lfunc_end47:
	.size	init_contexts.40, .Lfunc_end47-init_contexts.40
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.41
.LCPI48_0:
	.quad	4611686018427387904     # double 2
.LCPI48_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.41
	.p2align	4, 0x90
	.type	create_context_memory.41,@function
create_context_memory.41:               # @create_context_memory.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1054399475, -20(%rbp)  # imm = 0x3ED8DBF3
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB48_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB48_3
.LBB48_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB48_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB48_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB48_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB48_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB48_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB48_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB48_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB48_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB48_11:                              # %if.end10
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB48_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB48_13:                              # %if.end16
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	$0, -8(%rbp)
.LBB48_14:                              # %for.cond17
                                        #   Parent Loop BB48_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB48_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB48_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB48_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB48_17:                              # %if.end28
                                        #   in Loop: Header=BB48_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB48_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB48_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB48_19:                              # %if.end39
                                        #   in Loop: Header=BB48_14 Depth=2
	jmp	.LBB48_20
.LBB48_20:                              # %for.inc
                                        #   in Loop: Header=BB48_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_14
.LBB48_21:                              # %for.end
                                        #   in Loop: Header=BB48_8 Depth=1
	jmp	.LBB48_22
.LBB48_22:                              # %for.inc40
                                        #   in Loop: Header=BB48_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_8
.LBB48_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB48_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_26 Depth 2
                                        #       Child Loop BB48_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB48_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB48_24 Depth=1
	movl	$0, -8(%rbp)
.LBB48_26:                              # %for.cond47
                                        #   Parent Loop BB48_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB48_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB48_26 Depth=2
	movl	$0, -12(%rbp)
.LBB48_28:                              # %for.cond51
                                        #   Parent Loop BB48_24 Depth=1
                                        #     Parent Loop BB48_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB48_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB48_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB48_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_28
.LBB48_31:                              # %for.end63
                                        #   in Loop: Header=BB48_26 Depth=2
	jmp	.LBB48_32
.LBB48_32:                              # %for.inc64
                                        #   in Loop: Header=BB48_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_26
.LBB48_33:                              # %for.end66
                                        #   in Loop: Header=BB48_24 Depth=1
	jmp	.LBB48_34
.LBB48_34:                              # %for.inc67
                                        #   in Loop: Header=BB48_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_24
.LBB48_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB48_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB48_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB48_36 Depth=1
	vmovsd	.LCPI48_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI48_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB48_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_36
.LBB48_39:                              # %for.end98
	cmpl	$1054399475, -20(%rbp)  # imm = 0x3ED8DBF3
	jne	.LBB48_41
.LBB48_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_40
.Lfunc_end48:
	.size	create_context_memory.41, .Lfunc_end48-create_context_memory.41
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.42       # -- Begin function store_contexts.42
	.p2align	4, 0x90
	.type	store_contexts.42,@function
store_contexts.42:                      # @store_contexts.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1101397470, -16(%rbp)  # imm = 0x41A5FDDE
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -12(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB49_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-12(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB49_3
.LBB49_2:                               # %if.else
	jmp	.LBB49_3
.LBB49_3:                               # %if.end
	cmpl	$1101397470, -16(%rbp)  # imm = 0x41A5FDDE
	jne	.LBB49_5
.LBB49_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_4
.Lfunc_end49:
	.size	store_contexts.42, .Lfunc_end49-store_contexts.42
	.cfi_endproc
                                        # -- End function
	.globl	store_contexts.43       # -- Begin function store_contexts.43
	.p2align	4, 0x90
	.type	store_contexts.43,@function
store_contexts.43:                      # @store_contexts.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$357090857, -16(%rbp)   # imm = 0x1548C629
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	je	.LBB50_2
# %bb.1:                                # %if.then
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	$1, (%rax,%rcx,4)
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rsi
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rdx
	callq	GetCtxModelNumber
	jmp	.LBB50_3
.LBB50_2:                               # %if.else
	jmp	.LBB50_3
.LBB50_3:                               # %if.end
	cmpl	$357090857, -16(%rbp)   # imm = 0x1548C629
	jne	.LBB50_5
.LBB50_4:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_4
.Lfunc_end50:
	.size	store_contexts.43, .Lfunc_end50-store_contexts.43
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.44
.LCPI51_0:
	.quad	4607182418800017408     # double 1
.LCPI51_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI51_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI51_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.44
	.p2align	4, 0x90
	.type	XRate.44,@function
XRate.44:                               # @XRate.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$935948271, -32(%rbp)   # imm = 0x37C96FEF
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB51_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB51_3
.LBB51_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB51_3:                               # %cond.end
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI51_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI51_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI51_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB51_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB51_6
.LBB51_5:                               # %cond.false6
	vmovsd	.LCPI51_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI51_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI51_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB51_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB51_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB51_9
.LBB51_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB51_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB51_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB51_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB51_13
.LBB51_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB51_13:                              # %cond.end26
	jmp	.LBB51_15
.LBB51_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB51_15
.LBB51_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB51_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB51_18
.LBB51_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB51_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$935948271, -32(%rbp)   # imm = 0x37C96FEF
	jne	.LBB51_20
.LBB51_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB51_19
.Lfunc_end51:
	.size	XRate.44, .Lfunc_end51-XRate.44
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.45
.LCPI52_0:
	.quad	4607182418800017408     # double 1
.LCPI52_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI52_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI52_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.45
	.p2align	4, 0x90
	.type	XRate.45,@function
XRate.45:                               # @XRate.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1454586613, -32(%rbp)  # imm = 0x56B33AF5
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB52_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB52_3
.LBB52_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB52_3:                               # %cond.end
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI52_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI52_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB52_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI52_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB52_6
.LBB52_5:                               # %cond.false6
	vmovsd	.LCPI52_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI52_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI52_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB52_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB52_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB52_9
.LBB52_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB52_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB52_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB52_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB52_13
.LBB52_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB52_13:                              # %cond.end26
	jmp	.LBB52_15
.LBB52_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB52_15
.LBB52_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB52_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB52_18
.LBB52_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB52_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1454586613, -32(%rbp)  # imm = 0x56B33AF5
	jne	.LBB52_20
.LBB52_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB52_19
.Lfunc_end52:
	.size	XRate.45, .Lfunc_end52-XRate.45
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.46    # -- Begin function SetCtxModelNumber.46
	.p2align	4, 0x90
	.type	SetCtxModelNumber.46,@function
SetCtxModelNumber.46:                   # @SetCtxModelNumber.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1720075228, -16(%rbp)  # imm = 0x668643DC
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB53_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB53_11
.LBB53_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB53_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB53_11
.LBB53_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB53_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB53_11
.LBB53_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB53_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB53_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB53_10
.LBB53_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB53_10:                              # %if.end38
	jmp	.LBB53_11
.LBB53_11:                              # %if.end39
	cmpl	$1720075228, -16(%rbp)  # imm = 0x668643DC
	jne	.LBB53_13
.LBB53_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_12
.Lfunc_end53:
	.size	SetCtxModelNumber.46, .Lfunc_end53-SetCtxModelNumber.46
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.47
.LCPI54_0:
	.quad	4607182418800017408     # double 1
.LCPI54_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI54_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI54_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.47
	.p2align	4, 0x90
	.type	XRate.47,@function
XRate.47:                               # @XRate.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1973153275, -36(%rbp)  # imm = 0x759BEDFB
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB54_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB54_3
.LBB54_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB54_3:                               # %cond.end
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI54_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI54_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI54_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB54_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI54_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB54_6
.LBB54_5:                               # %cond.false6
	vmovsd	.LCPI54_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI54_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI54_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB54_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB54_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB54_9
.LBB54_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB54_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB54_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB54_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB54_13
.LBB54_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB54_13:                              # %cond.end26
	jmp	.LBB54_15
.LBB54_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB54_15
.LBB54_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB54_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB54_18
.LBB54_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB54_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1973153275, -36(%rbp)  # imm = 0x759BEDFB
	jne	.LBB54_20
.LBB54_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB54_19
.Lfunc_end54:
	.size	XRate.47, .Lfunc_end54-XRate.47
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.48
.LCPI55_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.48
	.p2align	4, 0x90
	.type	GetCtxModelNumber.48,@function
GetCtxModelNumber.48:                   # @GetCtxModelNumber.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$192986319, -44(%rbp)   # imm = 0xB80BCCF
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_3 Depth 2
                                        #       Child Loop BB55_5 Depth 3
                                        #     Child Loop BB55_14 Depth 2
                                        #       Child Loop BB55_16 Depth 3
                                        #     Child Loop BB55_25 Depth 2
                                        #       Child Loop BB55_27 Depth 3
                                        #     Child Loop BB55_36 Depth 2
                                        #       Child Loop BB55_38 Depth 3
                                        #     Child Loop BB55_47 Depth 2
                                        #     Child Loop BB55_54 Depth 2
                                        #     Child Loop BB55_61 Depth 2
                                        #     Child Loop BB55_68 Depth 2
                                        #     Child Loop BB55_75 Depth 2
                                        #     Child Loop BB55_82 Depth 2
                                        #       Child Loop BB55_84 Depth 3
                                        #     Child Loop BB55_93 Depth 2
                                        #       Child Loop BB55_95 Depth 3
                                        #     Child Loop BB55_104 Depth 2
                                        #       Child Loop BB55_106 Depth 3
                                        #     Child Loop BB55_115 Depth 2
                                        #       Child Loop BB55_117 Depth 3
                                        #     Child Loop BB55_126 Depth 2
                                        #       Child Loop BB55_128 Depth 3
                                        #     Child Loop BB55_137 Depth 2
                                        #       Child Loop BB55_139 Depth 3
                                        #     Child Loop BB55_148 Depth 2
                                        #       Child Loop BB55_150 Depth 3
                                        #     Child Loop BB55_159 Depth 2
                                        #       Child Loop BB55_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB55_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB55_3:                               # %for.cond2
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB55_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	$0, -4(%rbp)
.LBB55_5:                               # %for.cond5
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB55_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_9
.LBB55_8:                               # %if.else
                                        #   in Loop: Header=BB55_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_9:                               # %if.end
                                        #   in Loop: Header=BB55_5 Depth=3
	jmp	.LBB55_10
.LBB55_10:                              # %for.inc
                                        #   in Loop: Header=BB55_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_5
.LBB55_11:                              # %for.end
                                        #   in Loop: Header=BB55_3 Depth=2
	jmp	.LBB55_12
.LBB55_12:                              # %for.inc33
                                        #   in Loop: Header=BB55_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_3
.LBB55_13:                              # %for.end35
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_14:                              # %for.cond36
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB55_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	$0, -4(%rbp)
.LBB55_16:                              # %for.cond39
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB55_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB55_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB55_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_20
.LBB55_19:                              # %if.else58
                                        #   in Loop: Header=BB55_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_20:                              # %if.end73
                                        #   in Loop: Header=BB55_16 Depth=3
	jmp	.LBB55_21
.LBB55_21:                              # %for.inc74
                                        #   in Loop: Header=BB55_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_16
.LBB55_22:                              # %for.end76
                                        #   in Loop: Header=BB55_14 Depth=2
	jmp	.LBB55_23
.LBB55_23:                              # %for.inc77
                                        #   in Loop: Header=BB55_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_14
.LBB55_24:                              # %for.end79
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_25:                              # %for.cond80
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB55_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB55_25 Depth=2
	movl	$0, -4(%rbp)
.LBB55_27:                              # %for.cond83
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB55_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB55_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB55_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_31
.LBB55_30:                              # %if.else102
                                        #   in Loop: Header=BB55_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_31:                              # %if.end117
                                        #   in Loop: Header=BB55_27 Depth=3
	jmp	.LBB55_32
.LBB55_32:                              # %for.inc118
                                        #   in Loop: Header=BB55_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_27
.LBB55_33:                              # %for.end120
                                        #   in Loop: Header=BB55_25 Depth=2
	jmp	.LBB55_34
.LBB55_34:                              # %for.inc121
                                        #   in Loop: Header=BB55_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_25
.LBB55_35:                              # %for.end123
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_36:                              # %for.cond124
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB55_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	$0, -4(%rbp)
.LBB55_38:                              # %for.cond127
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB55_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB55_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB55_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_42
.LBB55_41:                              # %if.else146
                                        #   in Loop: Header=BB55_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_42:                              # %if.end161
                                        #   in Loop: Header=BB55_38 Depth=3
	jmp	.LBB55_43
.LBB55_43:                              # %for.inc162
                                        #   in Loop: Header=BB55_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_38
.LBB55_44:                              # %for.end164
                                        #   in Loop: Header=BB55_36 Depth=2
	jmp	.LBB55_45
.LBB55_45:                              # %for.inc165
                                        #   in Loop: Header=BB55_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_36
.LBB55_46:                              # %for.end167
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_47:                              # %for.cond168
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_51
.LBB55_50:                              # %if.else184
                                        #   in Loop: Header=BB55_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_51:                              # %if.end196
                                        #   in Loop: Header=BB55_47 Depth=2
	jmp	.LBB55_52
.LBB55_52:                              # %for.inc197
                                        #   in Loop: Header=BB55_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_47
.LBB55_53:                              # %for.end199
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_54:                              # %for.cond200
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_58
.LBB55_57:                              # %if.else216
                                        #   in Loop: Header=BB55_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_58:                              # %if.end228
                                        #   in Loop: Header=BB55_54 Depth=2
	jmp	.LBB55_59
.LBB55_59:                              # %for.inc229
                                        #   in Loop: Header=BB55_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_54
.LBB55_60:                              # %for.end231
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_61:                              # %for.cond232
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB55_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_65
.LBB55_64:                              # %if.else248
                                        #   in Loop: Header=BB55_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_65:                              # %if.end260
                                        #   in Loop: Header=BB55_61 Depth=2
	jmp	.LBB55_66
.LBB55_66:                              # %for.inc261
                                        #   in Loop: Header=BB55_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_61
.LBB55_67:                              # %for.end263
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_68:                              # %for.cond264
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB55_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB55_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB55_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_72
.LBB55_71:                              # %if.else280
                                        #   in Loop: Header=BB55_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_72:                              # %if.end292
                                        #   in Loop: Header=BB55_68 Depth=2
	jmp	.LBB55_73
.LBB55_73:                              # %for.inc293
                                        #   in Loop: Header=BB55_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_68
.LBB55_74:                              # %for.end295
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -4(%rbp)
.LBB55_75:                              # %for.cond296
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB55_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB55_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB55_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_79
.LBB55_78:                              # %if.else312
                                        #   in Loop: Header=BB55_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_79:                              # %if.end324
                                        #   in Loop: Header=BB55_75 Depth=2
	jmp	.LBB55_80
.LBB55_80:                              # %for.inc325
                                        #   in Loop: Header=BB55_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_75
.LBB55_81:                              # %for.end327
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_82:                              # %for.cond328
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB55_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB55_82 Depth=2
	movl	$0, -4(%rbp)
.LBB55_84:                              # %for.cond331
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB55_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB55_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB55_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_88
.LBB55_87:                              # %if.else350
                                        #   in Loop: Header=BB55_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_88:                              # %if.end365
                                        #   in Loop: Header=BB55_84 Depth=3
	jmp	.LBB55_89
.LBB55_89:                              # %for.inc366
                                        #   in Loop: Header=BB55_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_84
.LBB55_90:                              # %for.end368
                                        #   in Loop: Header=BB55_82 Depth=2
	jmp	.LBB55_91
.LBB55_91:                              # %for.inc369
                                        #   in Loop: Header=BB55_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_82
.LBB55_92:                              # %for.end371
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_93:                              # %for.cond372
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB55_93 Depth=2
	movl	$0, -4(%rbp)
.LBB55_95:                              # %for.cond375
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB55_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB55_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB55_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_99
.LBB55_98:                              # %if.else394
                                        #   in Loop: Header=BB55_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_99:                              # %if.end409
                                        #   in Loop: Header=BB55_95 Depth=3
	jmp	.LBB55_100
.LBB55_100:                             # %for.inc410
                                        #   in Loop: Header=BB55_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_95
.LBB55_101:                             # %for.end412
                                        #   in Loop: Header=BB55_93 Depth=2
	jmp	.LBB55_102
.LBB55_102:                             # %for.inc413
                                        #   in Loop: Header=BB55_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_93
.LBB55_103:                             # %for.end415
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_104:                             # %for.cond416
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB55_104 Depth=2
	movl	$0, -4(%rbp)
.LBB55_106:                             # %for.cond419
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB55_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB55_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_110
.LBB55_109:                             # %if.else438
                                        #   in Loop: Header=BB55_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_110:                             # %if.end453
                                        #   in Loop: Header=BB55_106 Depth=3
	jmp	.LBB55_111
.LBB55_111:                             # %for.inc454
                                        #   in Loop: Header=BB55_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_106
.LBB55_112:                             # %for.end456
                                        #   in Loop: Header=BB55_104 Depth=2
	jmp	.LBB55_113
.LBB55_113:                             # %for.inc457
                                        #   in Loop: Header=BB55_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_104
.LBB55_114:                             # %for.end459
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_115:                             # %for.cond460
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB55_115 Depth=2
	movl	$0, -4(%rbp)
.LBB55_117:                             # %for.cond463
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB55_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB55_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_121
.LBB55_120:                             # %if.else482
                                        #   in Loop: Header=BB55_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_121:                             # %if.end497
                                        #   in Loop: Header=BB55_117 Depth=3
	jmp	.LBB55_122
.LBB55_122:                             # %for.inc498
                                        #   in Loop: Header=BB55_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_117
.LBB55_123:                             # %for.end500
                                        #   in Loop: Header=BB55_115 Depth=2
	jmp	.LBB55_124
.LBB55_124:                             # %for.inc501
                                        #   in Loop: Header=BB55_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_115
.LBB55_125:                             # %for.end503
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_126:                             # %for.cond504
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB55_126 Depth=2
	movl	$0, -4(%rbp)
.LBB55_128:                             # %for.cond507
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB55_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB55_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB55_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_132
.LBB55_131:                             # %if.else526
                                        #   in Loop: Header=BB55_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_132:                             # %if.end541
                                        #   in Loop: Header=BB55_128 Depth=3
	jmp	.LBB55_133
.LBB55_133:                             # %for.inc542
                                        #   in Loop: Header=BB55_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_128
.LBB55_134:                             # %for.end544
                                        #   in Loop: Header=BB55_126 Depth=2
	jmp	.LBB55_135
.LBB55_135:                             # %for.inc545
                                        #   in Loop: Header=BB55_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_126
.LBB55_136:                             # %for.end547
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_137:                             # %for.cond548
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB55_137 Depth=2
	movl	$0, -4(%rbp)
.LBB55_139:                             # %for.cond551
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB55_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB55_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB55_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_143
.LBB55_142:                             # %if.else570
                                        #   in Loop: Header=BB55_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_143:                             # %if.end585
                                        #   in Loop: Header=BB55_139 Depth=3
	jmp	.LBB55_144
.LBB55_144:                             # %for.inc586
                                        #   in Loop: Header=BB55_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_139
.LBB55_145:                             # %for.end588
                                        #   in Loop: Header=BB55_137 Depth=2
	jmp	.LBB55_146
.LBB55_146:                             # %for.inc589
                                        #   in Loop: Header=BB55_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_137
.LBB55_147:                             # %for.end591
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_148:                             # %for.cond592
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB55_148 Depth=2
	movl	$0, -4(%rbp)
.LBB55_150:                             # %for.cond595
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB55_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB55_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_154
.LBB55_153:                             # %if.else614
                                        #   in Loop: Header=BB55_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_154:                             # %if.end629
                                        #   in Loop: Header=BB55_150 Depth=3
	jmp	.LBB55_155
.LBB55_155:                             # %for.inc630
                                        #   in Loop: Header=BB55_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_150
.LBB55_156:                             # %for.end632
                                        #   in Loop: Header=BB55_148 Depth=2
	jmp	.LBB55_157
.LBB55_157:                             # %for.inc633
                                        #   in Loop: Header=BB55_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_148
.LBB55_158:                             # %for.end635
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	$0, -8(%rbp)
.LBB55_159:                             # %for.cond636
                                        #   Parent Loop BB55_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB55_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB55_159 Depth=2
	movl	$0, -4(%rbp)
.LBB55_161:                             # %for.cond639
                                        #   Parent Loop BB55_1 Depth=1
                                        #     Parent Loop BB55_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB55_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB55_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB55_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB55_165
.LBB55_164:                             # %if.else658
                                        #   in Loop: Header=BB55_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB55_165:                             # %if.end673
                                        #   in Loop: Header=BB55_161 Depth=3
	jmp	.LBB55_166
.LBB55_166:                             # %for.inc674
                                        #   in Loop: Header=BB55_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_161
.LBB55_167:                             # %for.end676
                                        #   in Loop: Header=BB55_159 Depth=2
	jmp	.LBB55_168
.LBB55_168:                             # %for.inc677
                                        #   in Loop: Header=BB55_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_159
.LBB55_169:                             # %for.end679
                                        #   in Loop: Header=BB55_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB55_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB55_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB55_171:                             # %if.end682
                                        #   in Loop: Header=BB55_1 Depth=1
	jmp	.LBB55_172
.LBB55_172:                             # %for.inc683
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_1
.LBB55_173:                             # %for.end685
	cmpl	$192986319, -44(%rbp)   # imm = 0xB80BCCF
	jne	.LBB55_175
.LBB55_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_174
.Lfunc_end55:
	.size	GetCtxModelNumber.48, .Lfunc_end55-GetCtxModelNumber.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.49
.LCPI56_0:
	.quad	4607182418800017408     # double 1
.LCPI56_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI56_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI56_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.49
	.p2align	4, 0x90
	.type	XRate.49,@function
XRate.49:                               # @XRate.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$634682422, -36(%rbp)   # imm = 0x25D47C36
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB56_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB56_3
.LBB56_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB56_3:                               # %cond.end
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI56_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI56_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB56_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI56_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB56_6
.LBB56_5:                               # %cond.false6
	vmovsd	.LCPI56_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI56_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI56_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB56_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB56_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB56_9
.LBB56_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB56_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB56_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB56_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB56_13
.LBB56_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB56_13:                              # %cond.end26
	jmp	.LBB56_15
.LBB56_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB56_15
.LBB56_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB56_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB56_18
.LBB56_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB56_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$634682422, -36(%rbp)   # imm = 0x25D47C36
	jne	.LBB56_20
.LBB56_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB56_19
.Lfunc_end56:
	.size	XRate.49, .Lfunc_end56-XRate.49
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.50    # -- Begin function SetCtxModelNumber.50
	.p2align	4, 0x90
	.type	SetCtxModelNumber.50,@function
SetCtxModelNumber.50:                   # @SetCtxModelNumber.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$718764109, -16(%rbp)   # imm = 0x2AD7784D
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB57_11
.LBB57_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB57_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB57_11
.LBB57_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB57_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB57_11
.LBB57_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB57_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB57_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB57_10
.LBB57_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB57_10:                              # %if.end38
	jmp	.LBB57_11
.LBB57_11:                              # %if.end39
	cmpl	$718764109, -16(%rbp)   # imm = 0x2AD7784D
	jne	.LBB57_13
.LBB57_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_12
.Lfunc_end57:
	.size	SetCtxModelNumber.50, .Lfunc_end57-SetCtxModelNumber.50
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.51        # -- Begin function init_contexts.51
	.p2align	4, 0x90
	.type	init_contexts.51,@function
init_contexts.51:                       # @init_contexts.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1507216725, -28(%rbp)  # imm = 0x59D64D55
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB58_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	$0, -4(%rbp)
.LBB58_3:                               # %for.cond2
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB58_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_7
.LBB58_6:                               # %if.else
                                        #   in Loop: Header=BB58_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_7:                               # %if.end
                                        #   in Loop: Header=BB58_3 Depth=2
	jmp	.LBB58_8
.LBB58_8:                               # %for.inc
                                        #   in Loop: Header=BB58_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_3
.LBB58_9:                               # %for.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_10
.LBB58_10:                              # %for.inc28
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_1
.LBB58_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB58_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	$0, -4(%rbp)
.LBB58_14:                              # %for.cond34
                                        #   Parent Loop BB58_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB58_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_18
.LBB58_17:                              # %if.else52
                                        #   in Loop: Header=BB58_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_18:                              # %if.end66
                                        #   in Loop: Header=BB58_14 Depth=2
	jmp	.LBB58_19
.LBB58_19:                              # %for.inc67
                                        #   in Loop: Header=BB58_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_14
.LBB58_20:                              # %for.end69
                                        #   in Loop: Header=BB58_12 Depth=1
	jmp	.LBB58_21
.LBB58_21:                              # %for.inc70
                                        #   in Loop: Header=BB58_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_12
.LBB58_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB58_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	$0, -4(%rbp)
.LBB58_25:                              # %for.cond76
                                        #   Parent Loop BB58_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB58_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_29
.LBB58_28:                              # %if.else94
                                        #   in Loop: Header=BB58_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_29:                              # %if.end108
                                        #   in Loop: Header=BB58_25 Depth=2
	jmp	.LBB58_30
.LBB58_30:                              # %for.inc109
                                        #   in Loop: Header=BB58_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_25
.LBB58_31:                              # %for.end111
                                        #   in Loop: Header=BB58_23 Depth=1
	jmp	.LBB58_32
.LBB58_32:                              # %for.inc112
                                        #   in Loop: Header=BB58_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_23
.LBB58_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB58_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB58_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	$0, -4(%rbp)
.LBB58_36:                              # %for.cond118
                                        #   Parent Loop BB58_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB58_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_40
.LBB58_39:                              # %if.else136
                                        #   in Loop: Header=BB58_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_40:                              # %if.end150
                                        #   in Loop: Header=BB58_36 Depth=2
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc151
                                        #   in Loop: Header=BB58_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_36
.LBB58_42:                              # %for.end153
                                        #   in Loop: Header=BB58_34 Depth=1
	jmp	.LBB58_43
.LBB58_43:                              # %for.inc154
                                        #   in Loop: Header=BB58_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_34
.LBB58_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB58_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_49
.LBB58_48:                              # %if.else172
                                        #   in Loop: Header=BB58_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_49:                              # %if.end183
                                        #   in Loop: Header=BB58_45 Depth=1
	jmp	.LBB58_50
.LBB58_50:                              # %for.inc184
                                        #   in Loop: Header=BB58_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_45
.LBB58_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB58_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_56
.LBB58_55:                              # %if.else202
                                        #   in Loop: Header=BB58_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_56:                              # %if.end213
                                        #   in Loop: Header=BB58_52 Depth=1
	jmp	.LBB58_57
.LBB58_57:                              # %for.inc214
                                        #   in Loop: Header=BB58_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_52
.LBB58_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB58_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB58_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_63
.LBB58_62:                              # %if.else232
                                        #   in Loop: Header=BB58_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_63:                              # %if.end243
                                        #   in Loop: Header=BB58_59 Depth=1
	jmp	.LBB58_64
.LBB58_64:                              # %for.inc244
                                        #   in Loop: Header=BB58_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_59
.LBB58_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB58_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB58_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_70
.LBB58_69:                              # %if.else262
                                        #   in Loop: Header=BB58_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_70:                              # %if.end273
                                        #   in Loop: Header=BB58_66 Depth=1
	jmp	.LBB58_71
.LBB58_71:                              # %for.inc274
                                        #   in Loop: Header=BB58_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_66
.LBB58_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB58_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB58_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_77
.LBB58_76:                              # %if.else292
                                        #   in Loop: Header=BB58_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_77:                              # %if.end303
                                        #   in Loop: Header=BB58_73 Depth=1
	jmp	.LBB58_78
.LBB58_78:                              # %for.inc304
                                        #   in Loop: Header=BB58_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_73
.LBB58_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB58_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB58_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB58_80 Depth=1
	movl	$0, -4(%rbp)
.LBB58_82:                              # %for.cond310
                                        #   Parent Loop BB58_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_86
.LBB58_85:                              # %if.else328
                                        #   in Loop: Header=BB58_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_86:                              # %if.end342
                                        #   in Loop: Header=BB58_82 Depth=2
	jmp	.LBB58_87
.LBB58_87:                              # %for.inc343
                                        #   in Loop: Header=BB58_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_82
.LBB58_88:                              # %for.end345
                                        #   in Loop: Header=BB58_80 Depth=1
	jmp	.LBB58_89
.LBB58_89:                              # %for.inc346
                                        #   in Loop: Header=BB58_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_80
.LBB58_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB58_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB58_91 Depth=1
	movl	$0, -4(%rbp)
.LBB58_93:                              # %for.cond352
                                        #   Parent Loop BB58_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB58_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_97
.LBB58_96:                              # %if.else370
                                        #   in Loop: Header=BB58_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_97:                              # %if.end384
                                        #   in Loop: Header=BB58_93 Depth=2
	jmp	.LBB58_98
.LBB58_98:                              # %for.inc385
                                        #   in Loop: Header=BB58_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_93
.LBB58_99:                              # %for.end387
                                        #   in Loop: Header=BB58_91 Depth=1
	jmp	.LBB58_100
.LBB58_100:                             # %for.inc388
                                        #   in Loop: Header=BB58_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_91
.LBB58_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB58_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB58_102 Depth=1
	movl	$0, -4(%rbp)
.LBB58_104:                             # %for.cond394
                                        #   Parent Loop BB58_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_108
.LBB58_107:                             # %if.else412
                                        #   in Loop: Header=BB58_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_108:                             # %if.end426
                                        #   in Loop: Header=BB58_104 Depth=2
	jmp	.LBB58_109
.LBB58_109:                             # %for.inc427
                                        #   in Loop: Header=BB58_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_104
.LBB58_110:                             # %for.end429
                                        #   in Loop: Header=BB58_102 Depth=1
	jmp	.LBB58_111
.LBB58_111:                             # %for.inc430
                                        #   in Loop: Header=BB58_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_102
.LBB58_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB58_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB58_113 Depth=1
	movl	$0, -4(%rbp)
.LBB58_115:                             # %for.cond436
                                        #   Parent Loop BB58_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_119
.LBB58_118:                             # %if.else454
                                        #   in Loop: Header=BB58_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_119:                             # %if.end468
                                        #   in Loop: Header=BB58_115 Depth=2
	jmp	.LBB58_120
.LBB58_120:                             # %for.inc469
                                        #   in Loop: Header=BB58_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_115
.LBB58_121:                             # %for.end471
                                        #   in Loop: Header=BB58_113 Depth=1
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc472
                                        #   in Loop: Header=BB58_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_113
.LBB58_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB58_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	$0, -4(%rbp)
.LBB58_126:                             # %for.cond478
                                        #   Parent Loop BB58_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB58_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_130
.LBB58_129:                             # %if.else496
                                        #   in Loop: Header=BB58_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_130:                             # %if.end510
                                        #   in Loop: Header=BB58_126 Depth=2
	jmp	.LBB58_131
.LBB58_131:                             # %for.inc511
                                        #   in Loop: Header=BB58_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_126
.LBB58_132:                             # %for.end513
                                        #   in Loop: Header=BB58_124 Depth=1
	jmp	.LBB58_133
.LBB58_133:                             # %for.inc514
                                        #   in Loop: Header=BB58_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_124
.LBB58_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB58_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	$0, -4(%rbp)
.LBB58_137:                             # %for.cond520
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB58_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_141
.LBB58_140:                             # %if.else538
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_141:                             # %if.end552
                                        #   in Loop: Header=BB58_137 Depth=2
	jmp	.LBB58_142
.LBB58_142:                             # %for.inc553
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_137
.LBB58_143:                             # %for.end555
                                        #   in Loop: Header=BB58_135 Depth=1
	jmp	.LBB58_144
.LBB58_144:                             # %for.inc556
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_135
.LBB58_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB58_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB58_146 Depth=1
	movl	$0, -4(%rbp)
.LBB58_148:                             # %for.cond562
                                        #   Parent Loop BB58_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_152
.LBB58_151:                             # %if.else580
                                        #   in Loop: Header=BB58_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_152:                             # %if.end594
                                        #   in Loop: Header=BB58_148 Depth=2
	jmp	.LBB58_153
.LBB58_153:                             # %for.inc595
                                        #   in Loop: Header=BB58_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_148
.LBB58_154:                             # %for.end597
                                        #   in Loop: Header=BB58_146 Depth=1
	jmp	.LBB58_155
.LBB58_155:                             # %for.inc598
                                        #   in Loop: Header=BB58_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_146
.LBB58_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB58_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB58_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB58_157 Depth=1
	movl	$0, -4(%rbp)
.LBB58_159:                             # %for.cond604
                                        #   Parent Loop BB58_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB58_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB58_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB58_163
.LBB58_162:                             # %if.else622
                                        #   in Loop: Header=BB58_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB58_163:                             # %if.end636
                                        #   in Loop: Header=BB58_159 Depth=2
	jmp	.LBB58_164
.LBB58_164:                             # %for.inc637
                                        #   in Loop: Header=BB58_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_159
.LBB58_165:                             # %for.end639
                                        #   in Loop: Header=BB58_157 Depth=1
	jmp	.LBB58_166
.LBB58_166:                             # %for.inc640
                                        #   in Loop: Header=BB58_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB58_157
.LBB58_167:                             # %for.end642
	cmpl	$1507216725, -28(%rbp)  # imm = 0x59D64D55
	jne	.LBB58_169
.LBB58_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_168
.Lfunc_end58:
	.size	init_contexts.51, .Lfunc_end58-init_contexts.51
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.52
.LCPI59_0:
	.quad	4607182418800017408     # double 1
.LCPI59_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI59_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI59_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.52
	.p2align	4, 0x90
	.type	XRate.52,@function
XRate.52:                               # @XRate.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1484239195, -32(%rbp)  # imm = 0x5877B15B
	movq	%rdi, -16(%rbp)
	movq	%rsi, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB59_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB59_3
.LBB59_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB59_3:                               # %cond.end
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI59_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI59_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI59_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB59_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI59_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB59_6
.LBB59_5:                               # %cond.false6
	vmovsd	.LCPI59_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI59_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI59_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB59_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -48(%rbp)
	movq	-56(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-56(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB59_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB59_9
.LBB59_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB59_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB59_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB59_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB59_13
.LBB59_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB59_13:                              # %cond.end26
	jmp	.LBB59_15
.LBB59_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB59_15
.LBB59_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB59_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB59_18
.LBB59_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB59_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1484239195, -32(%rbp)  # imm = 0x5877B15B
	jne	.LBB59_20
.LBB59_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB59_19
.Lfunc_end59:
	.size	XRate.52, .Lfunc_end59-XRate.52
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.53
.LCPI60_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.53
	.p2align	4, 0x90
	.type	GetCtxModelNumber.53,@function
GetCtxModelNumber.53:                   # @GetCtxModelNumber.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI60_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1442975678, -44(%rbp)  # imm = 0x56020FBE
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB60_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_3 Depth 2
                                        #       Child Loop BB60_5 Depth 3
                                        #     Child Loop BB60_14 Depth 2
                                        #       Child Loop BB60_16 Depth 3
                                        #     Child Loop BB60_25 Depth 2
                                        #       Child Loop BB60_27 Depth 3
                                        #     Child Loop BB60_36 Depth 2
                                        #       Child Loop BB60_38 Depth 3
                                        #     Child Loop BB60_47 Depth 2
                                        #     Child Loop BB60_54 Depth 2
                                        #     Child Loop BB60_61 Depth 2
                                        #     Child Loop BB60_68 Depth 2
                                        #     Child Loop BB60_75 Depth 2
                                        #     Child Loop BB60_82 Depth 2
                                        #       Child Loop BB60_84 Depth 3
                                        #     Child Loop BB60_93 Depth 2
                                        #       Child Loop BB60_95 Depth 3
                                        #     Child Loop BB60_104 Depth 2
                                        #       Child Loop BB60_106 Depth 3
                                        #     Child Loop BB60_115 Depth 2
                                        #       Child Loop BB60_117 Depth 3
                                        #     Child Loop BB60_126 Depth 2
                                        #       Child Loop BB60_128 Depth 3
                                        #     Child Loop BB60_137 Depth 2
                                        #       Child Loop BB60_139 Depth 3
                                        #     Child Loop BB60_148 Depth 2
                                        #       Child Loop BB60_150 Depth 3
                                        #     Child Loop BB60_159 Depth 2
                                        #       Child Loop BB60_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB60_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB60_3:                               # %for.cond2
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	$0, -4(%rbp)
.LBB60_5:                               # %for.cond5
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB60_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_9
.LBB60_8:                               # %if.else
                                        #   in Loop: Header=BB60_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_9:                               # %if.end
                                        #   in Loop: Header=BB60_5 Depth=3
	jmp	.LBB60_10
.LBB60_10:                              # %for.inc
                                        #   in Loop: Header=BB60_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_5
.LBB60_11:                              # %for.end
                                        #   in Loop: Header=BB60_3 Depth=2
	jmp	.LBB60_12
.LBB60_12:                              # %for.inc33
                                        #   in Loop: Header=BB60_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_3
.LBB60_13:                              # %for.end35
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_14:                              # %for.cond36
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	$0, -4(%rbp)
.LBB60_16:                              # %for.cond39
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB60_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_20
.LBB60_19:                              # %if.else58
                                        #   in Loop: Header=BB60_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_20:                              # %if.end73
                                        #   in Loop: Header=BB60_16 Depth=3
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc74
                                        #   in Loop: Header=BB60_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_16
.LBB60_22:                              # %for.end76
                                        #   in Loop: Header=BB60_14 Depth=2
	jmp	.LBB60_23
.LBB60_23:                              # %for.inc77
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_14
.LBB60_24:                              # %for.end79
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_25:                              # %for.cond80
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	$0, -4(%rbp)
.LBB60_27:                              # %for.cond83
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB60_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_31
.LBB60_30:                              # %if.else102
                                        #   in Loop: Header=BB60_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_31:                              # %if.end117
                                        #   in Loop: Header=BB60_27 Depth=3
	jmp	.LBB60_32
.LBB60_32:                              # %for.inc118
                                        #   in Loop: Header=BB60_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_27
.LBB60_33:                              # %for.end120
                                        #   in Loop: Header=BB60_25 Depth=2
	jmp	.LBB60_34
.LBB60_34:                              # %for.inc121
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_25
.LBB60_35:                              # %for.end123
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_36:                              # %for.cond124
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB60_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	$0, -4(%rbp)
.LBB60_38:                              # %for.cond127
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB60_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_42
.LBB60_41:                              # %if.else146
                                        #   in Loop: Header=BB60_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_42:                              # %if.end161
                                        #   in Loop: Header=BB60_38 Depth=3
	jmp	.LBB60_43
.LBB60_43:                              # %for.inc162
                                        #   in Loop: Header=BB60_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_38
.LBB60_44:                              # %for.end164
                                        #   in Loop: Header=BB60_36 Depth=2
	jmp	.LBB60_45
.LBB60_45:                              # %for.inc165
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_36
.LBB60_46:                              # %for.end167
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_47:                              # %for.cond168
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_51
.LBB60_50:                              # %if.else184
                                        #   in Loop: Header=BB60_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_51:                              # %if.end196
                                        #   in Loop: Header=BB60_47 Depth=2
	jmp	.LBB60_52
.LBB60_52:                              # %for.inc197
                                        #   in Loop: Header=BB60_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_47
.LBB60_53:                              # %for.end199
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_54:                              # %for.cond200
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_58
.LBB60_57:                              # %if.else216
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_58:                              # %if.end228
                                        #   in Loop: Header=BB60_54 Depth=2
	jmp	.LBB60_59
.LBB60_59:                              # %for.inc229
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_54
.LBB60_60:                              # %for.end231
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_61:                              # %for.cond232
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB60_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_65
.LBB60_64:                              # %if.else248
                                        #   in Loop: Header=BB60_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_65:                              # %if.end260
                                        #   in Loop: Header=BB60_61 Depth=2
	jmp	.LBB60_66
.LBB60_66:                              # %for.inc261
                                        #   in Loop: Header=BB60_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_61
.LBB60_67:                              # %for.end263
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_68:                              # %for.cond264
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB60_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_72
.LBB60_71:                              # %if.else280
                                        #   in Loop: Header=BB60_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_72:                              # %if.end292
                                        #   in Loop: Header=BB60_68 Depth=2
	jmp	.LBB60_73
.LBB60_73:                              # %for.inc293
                                        #   in Loop: Header=BB60_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_68
.LBB60_74:                              # %for.end295
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -4(%rbp)
.LBB60_75:                              # %for.cond296
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB60_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_79
.LBB60_78:                              # %if.else312
                                        #   in Loop: Header=BB60_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_79:                              # %if.end324
                                        #   in Loop: Header=BB60_75 Depth=2
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc325
                                        #   in Loop: Header=BB60_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_75
.LBB60_81:                              # %for.end327
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_82:                              # %for.cond328
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB60_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	$0, -4(%rbp)
.LBB60_84:                              # %for.cond331
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_88
.LBB60_87:                              # %if.else350
                                        #   in Loop: Header=BB60_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_88:                              # %if.end365
                                        #   in Loop: Header=BB60_84 Depth=3
	jmp	.LBB60_89
.LBB60_89:                              # %for.inc366
                                        #   in Loop: Header=BB60_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_84
.LBB60_90:                              # %for.end368
                                        #   in Loop: Header=BB60_82 Depth=2
	jmp	.LBB60_91
.LBB60_91:                              # %for.inc369
                                        #   in Loop: Header=BB60_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_82
.LBB60_92:                              # %for.end371
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_93:                              # %for.cond372
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	$0, -4(%rbp)
.LBB60_95:                              # %for.cond375
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB60_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_99
.LBB60_98:                              # %if.else394
                                        #   in Loop: Header=BB60_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_99:                              # %if.end409
                                        #   in Loop: Header=BB60_95 Depth=3
	jmp	.LBB60_100
.LBB60_100:                             # %for.inc410
                                        #   in Loop: Header=BB60_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_95
.LBB60_101:                             # %for.end412
                                        #   in Loop: Header=BB60_93 Depth=2
	jmp	.LBB60_102
.LBB60_102:                             # %for.inc413
                                        #   in Loop: Header=BB60_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_93
.LBB60_103:                             # %for.end415
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_104:                             # %for.cond416
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	$0, -4(%rbp)
.LBB60_106:                             # %for.cond419
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_110
.LBB60_109:                             # %if.else438
                                        #   in Loop: Header=BB60_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_110:                             # %if.end453
                                        #   in Loop: Header=BB60_106 Depth=3
	jmp	.LBB60_111
.LBB60_111:                             # %for.inc454
                                        #   in Loop: Header=BB60_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_106
.LBB60_112:                             # %for.end456
                                        #   in Loop: Header=BB60_104 Depth=2
	jmp	.LBB60_113
.LBB60_113:                             # %for.inc457
                                        #   in Loop: Header=BB60_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_104
.LBB60_114:                             # %for.end459
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_115:                             # %for.cond460
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	$0, -4(%rbp)
.LBB60_117:                             # %for.cond463
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_121
.LBB60_120:                             # %if.else482
                                        #   in Loop: Header=BB60_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_121:                             # %if.end497
                                        #   in Loop: Header=BB60_117 Depth=3
	jmp	.LBB60_122
.LBB60_122:                             # %for.inc498
                                        #   in Loop: Header=BB60_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_117
.LBB60_123:                             # %for.end500
                                        #   in Loop: Header=BB60_115 Depth=2
	jmp	.LBB60_124
.LBB60_124:                             # %for.inc501
                                        #   in Loop: Header=BB60_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_115
.LBB60_125:                             # %for.end503
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_126:                             # %for.cond504
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	$0, -4(%rbp)
.LBB60_128:                             # %for.cond507
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_132
.LBB60_131:                             # %if.else526
                                        #   in Loop: Header=BB60_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_132:                             # %if.end541
                                        #   in Loop: Header=BB60_128 Depth=3
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc542
                                        #   in Loop: Header=BB60_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_128
.LBB60_134:                             # %for.end544
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_135
.LBB60_135:                             # %for.inc545
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_126
.LBB60_136:                             # %for.end547
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_137:                             # %for.cond548
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	$0, -4(%rbp)
.LBB60_139:                             # %for.cond551
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB60_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_143
.LBB60_142:                             # %if.else570
                                        #   in Loop: Header=BB60_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_143:                             # %if.end585
                                        #   in Loop: Header=BB60_139 Depth=3
	jmp	.LBB60_144
.LBB60_144:                             # %for.inc586
                                        #   in Loop: Header=BB60_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_139
.LBB60_145:                             # %for.end588
                                        #   in Loop: Header=BB60_137 Depth=2
	jmp	.LBB60_146
.LBB60_146:                             # %for.inc589
                                        #   in Loop: Header=BB60_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_137
.LBB60_147:                             # %for.end591
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_148:                             # %for.cond592
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	$0, -4(%rbp)
.LBB60_150:                             # %for.cond595
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_154
.LBB60_153:                             # %if.else614
                                        #   in Loop: Header=BB60_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_154:                             # %if.end629
                                        #   in Loop: Header=BB60_150 Depth=3
	jmp	.LBB60_155
.LBB60_155:                             # %for.inc630
                                        #   in Loop: Header=BB60_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_150
.LBB60_156:                             # %for.end632
                                        #   in Loop: Header=BB60_148 Depth=2
	jmp	.LBB60_157
.LBB60_157:                             # %for.inc633
                                        #   in Loop: Header=BB60_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_148
.LBB60_158:                             # %for.end635
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	$0, -8(%rbp)
.LBB60_159:                             # %for.cond636
                                        #   Parent Loop BB60_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB60_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	$0, -4(%rbp)
.LBB60_161:                             # %for.cond639
                                        #   Parent Loop BB60_1 Depth=1
                                        #     Parent Loop BB60_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB60_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB60_165
.LBB60_164:                             # %if.else658
                                        #   in Loop: Header=BB60_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB60_165:                             # %if.end673
                                        #   in Loop: Header=BB60_161 Depth=3
	jmp	.LBB60_166
.LBB60_166:                             # %for.inc674
                                        #   in Loop: Header=BB60_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_161
.LBB60_167:                             # %for.end676
                                        #   in Loop: Header=BB60_159 Depth=2
	jmp	.LBB60_168
.LBB60_168:                             # %for.inc677
                                        #   in Loop: Header=BB60_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_159
.LBB60_169:                             # %for.end679
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB60_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB60_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB60_171:                             # %if.end682
                                        #   in Loop: Header=BB60_1 Depth=1
	jmp	.LBB60_172
.LBB60_172:                             # %for.inc683
                                        #   in Loop: Header=BB60_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_1
.LBB60_173:                             # %for.end685
	cmpl	$1442975678, -44(%rbp)  # imm = 0x56020FBE
	jne	.LBB60_175
.LBB60_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_174
.Lfunc_end60:
	.size	GetCtxModelNumber.53, .Lfunc_end60-GetCtxModelNumber.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.54
.LCPI61_0:
	.quad	4607182418800017408     # double 1
.LCPI61_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI61_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI61_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.54
	.p2align	4, 0x90
	.type	XRate.54,@function
XRate.54:                               # @XRate.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1961379902, -36(%rbp)  # imm = 0x74E8483E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB61_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB61_3
.LBB61_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB61_3:                               # %cond.end
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI61_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB61_6
.LBB61_5:                               # %cond.false6
	vmovsd	.LCPI61_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI61_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI61_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB61_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB61_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB61_9
.LBB61_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB61_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB61_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB61_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB61_13
.LBB61_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB61_13:                              # %cond.end26
	jmp	.LBB61_15
.LBB61_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB61_15
.LBB61_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB61_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB61_18
.LBB61_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB61_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1961379902, -36(%rbp)  # imm = 0x74E8483E
	jne	.LBB61_20
.LBB61_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB61_19
.Lfunc_end61:
	.size	XRate.54, .Lfunc_end61-XRate.54
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.55
.LCPI62_0:
	.quad	4611686018427387904     # double 2
.LCPI62_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.55
	.p2align	4, 0x90
	.type	create_context_memory.55,@function
create_context_memory.55:               # @create_context_memory.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$64868578, -20(%rbp)    # imm = 0x3DDD0E2
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB62_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB62_3
.LBB62_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB62_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB62_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB62_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB62_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB62_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB62_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_11:                              # %if.end10
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB62_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_13:                              # %if.end16
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	$0, -8(%rbp)
.LBB62_14:                              # %for.cond17
                                        #   Parent Loop BB62_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB62_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB62_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB62_17:                              # %if.end28
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB62_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB62_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_19:                              # %if.end39
                                        #   in Loop: Header=BB62_14 Depth=2
	jmp	.LBB62_20
.LBB62_20:                              # %for.inc
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_14
.LBB62_21:                              # %for.end
                                        #   in Loop: Header=BB62_8 Depth=1
	jmp	.LBB62_22
.LBB62_22:                              # %for.inc40
                                        #   in Loop: Header=BB62_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_8
.LBB62_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB62_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_26 Depth 2
                                        #       Child Loop BB62_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB62_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB62_24 Depth=1
	movl	$0, -8(%rbp)
.LBB62_26:                              # %for.cond47
                                        #   Parent Loop BB62_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB62_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB62_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB62_26 Depth=2
	movl	$0, -12(%rbp)
.LBB62_28:                              # %for.cond51
                                        #   Parent Loop BB62_24 Depth=1
                                        #     Parent Loop BB62_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB62_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB62_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB62_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_28
.LBB62_31:                              # %for.end63
                                        #   in Loop: Header=BB62_26 Depth=2
	jmp	.LBB62_32
.LBB62_32:                              # %for.inc64
                                        #   in Loop: Header=BB62_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_26
.LBB62_33:                              # %for.end66
                                        #   in Loop: Header=BB62_24 Depth=1
	jmp	.LBB62_34
.LBB62_34:                              # %for.inc67
                                        #   in Loop: Header=BB62_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_24
.LBB62_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB62_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB62_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB62_36 Depth=1
	vmovsd	.LCPI62_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI62_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB62_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_36
.LBB62_39:                              # %for.end98
	cmpl	$64868578, -20(%rbp)    # imm = 0x3DDD0E2
	jne	.LBB62_41
.LBB62_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_40
.Lfunc_end62:
	.size	create_context_memory.55, .Lfunc_end62-create_context_memory.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.56
.LCPI63_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.56
	.p2align	4, 0x90
	.type	GetCtxModelNumber.56,@function
GetCtxModelNumber.56:                   # @GetCtxModelNumber.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI63_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1880436310, -48(%rbp)  # imm = 0x70152E56
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
                                        #       Child Loop BB63_5 Depth 3
                                        #     Child Loop BB63_14 Depth 2
                                        #       Child Loop BB63_16 Depth 3
                                        #     Child Loop BB63_25 Depth 2
                                        #       Child Loop BB63_27 Depth 3
                                        #     Child Loop BB63_36 Depth 2
                                        #       Child Loop BB63_38 Depth 3
                                        #     Child Loop BB63_47 Depth 2
                                        #     Child Loop BB63_54 Depth 2
                                        #     Child Loop BB63_61 Depth 2
                                        #     Child Loop BB63_68 Depth 2
                                        #     Child Loop BB63_75 Depth 2
                                        #     Child Loop BB63_82 Depth 2
                                        #       Child Loop BB63_84 Depth 3
                                        #     Child Loop BB63_93 Depth 2
                                        #       Child Loop BB63_95 Depth 3
                                        #     Child Loop BB63_104 Depth 2
                                        #       Child Loop BB63_106 Depth 3
                                        #     Child Loop BB63_115 Depth 2
                                        #       Child Loop BB63_117 Depth 3
                                        #     Child Loop BB63_126 Depth 2
                                        #       Child Loop BB63_128 Depth 3
                                        #     Child Loop BB63_137 Depth 2
                                        #       Child Loop BB63_139 Depth 3
                                        #     Child Loop BB63_148 Depth 2
                                        #       Child Loop BB63_150 Depth 3
                                        #     Child Loop BB63_159 Depth 2
                                        #       Child Loop BB63_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB63_3:                               # %for.cond2
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB63_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	$0, -4(%rbp)
.LBB63_5:                               # %for.cond5
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB63_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_9
.LBB63_8:                               # %if.else
                                        #   in Loop: Header=BB63_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_9:                               # %if.end
                                        #   in Loop: Header=BB63_5 Depth=3
	jmp	.LBB63_10
.LBB63_10:                              # %for.inc
                                        #   in Loop: Header=BB63_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_5
.LBB63_11:                              # %for.end
                                        #   in Loop: Header=BB63_3 Depth=2
	jmp	.LBB63_12
.LBB63_12:                              # %for.inc33
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_3
.LBB63_13:                              # %for.end35
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_14:                              # %for.cond36
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB63_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	$0, -4(%rbp)
.LBB63_16:                              # %for.cond39
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB63_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB63_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB63_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_20
.LBB63_19:                              # %if.else58
                                        #   in Loop: Header=BB63_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_20:                              # %if.end73
                                        #   in Loop: Header=BB63_16 Depth=3
	jmp	.LBB63_21
.LBB63_21:                              # %for.inc74
                                        #   in Loop: Header=BB63_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_16
.LBB63_22:                              # %for.end76
                                        #   in Loop: Header=BB63_14 Depth=2
	jmp	.LBB63_23
.LBB63_23:                              # %for.inc77
                                        #   in Loop: Header=BB63_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_14
.LBB63_24:                              # %for.end79
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_25:                              # %for.cond80
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB63_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	$0, -4(%rbp)
.LBB63_27:                              # %for.cond83
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB63_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB63_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB63_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_31
.LBB63_30:                              # %if.else102
                                        #   in Loop: Header=BB63_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_31:                              # %if.end117
                                        #   in Loop: Header=BB63_27 Depth=3
	jmp	.LBB63_32
.LBB63_32:                              # %for.inc118
                                        #   in Loop: Header=BB63_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_27
.LBB63_33:                              # %for.end120
                                        #   in Loop: Header=BB63_25 Depth=2
	jmp	.LBB63_34
.LBB63_34:                              # %for.inc121
                                        #   in Loop: Header=BB63_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_25
.LBB63_35:                              # %for.end123
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_36:                              # %for.cond124
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB63_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	$0, -4(%rbp)
.LBB63_38:                              # %for.cond127
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB63_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB63_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB63_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_42
.LBB63_41:                              # %if.else146
                                        #   in Loop: Header=BB63_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_42:                              # %if.end161
                                        #   in Loop: Header=BB63_38 Depth=3
	jmp	.LBB63_43
.LBB63_43:                              # %for.inc162
                                        #   in Loop: Header=BB63_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_38
.LBB63_44:                              # %for.end164
                                        #   in Loop: Header=BB63_36 Depth=2
	jmp	.LBB63_45
.LBB63_45:                              # %for.inc165
                                        #   in Loop: Header=BB63_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_36
.LBB63_46:                              # %for.end167
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_47:                              # %for.cond168
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_51
.LBB63_50:                              # %if.else184
                                        #   in Loop: Header=BB63_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_51:                              # %if.end196
                                        #   in Loop: Header=BB63_47 Depth=2
	jmp	.LBB63_52
.LBB63_52:                              # %for.inc197
                                        #   in Loop: Header=BB63_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_47
.LBB63_53:                              # %for.end199
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_54:                              # %for.cond200
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_58
.LBB63_57:                              # %if.else216
                                        #   in Loop: Header=BB63_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_58:                              # %if.end228
                                        #   in Loop: Header=BB63_54 Depth=2
	jmp	.LBB63_59
.LBB63_59:                              # %for.inc229
                                        #   in Loop: Header=BB63_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_54
.LBB63_60:                              # %for.end231
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_61:                              # %for.cond232
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB63_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB63_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB63_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_65
.LBB63_64:                              # %if.else248
                                        #   in Loop: Header=BB63_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_65:                              # %if.end260
                                        #   in Loop: Header=BB63_61 Depth=2
	jmp	.LBB63_66
.LBB63_66:                              # %for.inc261
                                        #   in Loop: Header=BB63_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_61
.LBB63_67:                              # %for.end263
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_68:                              # %for.cond264
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB63_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB63_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB63_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_72
.LBB63_71:                              # %if.else280
                                        #   in Loop: Header=BB63_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_72:                              # %if.end292
                                        #   in Loop: Header=BB63_68 Depth=2
	jmp	.LBB63_73
.LBB63_73:                              # %for.inc293
                                        #   in Loop: Header=BB63_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_68
.LBB63_74:                              # %for.end295
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -4(%rbp)
.LBB63_75:                              # %for.cond296
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB63_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB63_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB63_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_79
.LBB63_78:                              # %if.else312
                                        #   in Loop: Header=BB63_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_79:                              # %if.end324
                                        #   in Loop: Header=BB63_75 Depth=2
	jmp	.LBB63_80
.LBB63_80:                              # %for.inc325
                                        #   in Loop: Header=BB63_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_75
.LBB63_81:                              # %for.end327
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_82:                              # %for.cond328
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB63_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	$0, -4(%rbp)
.LBB63_84:                              # %for.cond331
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB63_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_88
.LBB63_87:                              # %if.else350
                                        #   in Loop: Header=BB63_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_88:                              # %if.end365
                                        #   in Loop: Header=BB63_84 Depth=3
	jmp	.LBB63_89
.LBB63_89:                              # %for.inc366
                                        #   in Loop: Header=BB63_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_84
.LBB63_90:                              # %for.end368
                                        #   in Loop: Header=BB63_82 Depth=2
	jmp	.LBB63_91
.LBB63_91:                              # %for.inc369
                                        #   in Loop: Header=BB63_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_82
.LBB63_92:                              # %for.end371
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_93:                              # %for.cond372
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB63_93 Depth=2
	movl	$0, -4(%rbp)
.LBB63_95:                              # %for.cond375
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB63_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB63_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB63_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_99
.LBB63_98:                              # %if.else394
                                        #   in Loop: Header=BB63_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_99:                              # %if.end409
                                        #   in Loop: Header=BB63_95 Depth=3
	jmp	.LBB63_100
.LBB63_100:                             # %for.inc410
                                        #   in Loop: Header=BB63_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_95
.LBB63_101:                             # %for.end412
                                        #   in Loop: Header=BB63_93 Depth=2
	jmp	.LBB63_102
.LBB63_102:                             # %for.inc413
                                        #   in Loop: Header=BB63_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_93
.LBB63_103:                             # %for.end415
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_104:                             # %for.cond416
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB63_104 Depth=2
	movl	$0, -4(%rbp)
.LBB63_106:                             # %for.cond419
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB63_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB63_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_110
.LBB63_109:                             # %if.else438
                                        #   in Loop: Header=BB63_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_110:                             # %if.end453
                                        #   in Loop: Header=BB63_106 Depth=3
	jmp	.LBB63_111
.LBB63_111:                             # %for.inc454
                                        #   in Loop: Header=BB63_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_106
.LBB63_112:                             # %for.end456
                                        #   in Loop: Header=BB63_104 Depth=2
	jmp	.LBB63_113
.LBB63_113:                             # %for.inc457
                                        #   in Loop: Header=BB63_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_104
.LBB63_114:                             # %for.end459
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_115:                             # %for.cond460
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	$0, -4(%rbp)
.LBB63_117:                             # %for.cond463
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_121
.LBB63_120:                             # %if.else482
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_121:                             # %if.end497
                                        #   in Loop: Header=BB63_117 Depth=3
	jmp	.LBB63_122
.LBB63_122:                             # %for.inc498
                                        #   in Loop: Header=BB63_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_117
.LBB63_123:                             # %for.end500
                                        #   in Loop: Header=BB63_115 Depth=2
	jmp	.LBB63_124
.LBB63_124:                             # %for.inc501
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_115
.LBB63_125:                             # %for.end503
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_126:                             # %for.cond504
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB63_126 Depth=2
	movl	$0, -4(%rbp)
.LBB63_128:                             # %for.cond507
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB63_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB63_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB63_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_132
.LBB63_131:                             # %if.else526
                                        #   in Loop: Header=BB63_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_132:                             # %if.end541
                                        #   in Loop: Header=BB63_128 Depth=3
	jmp	.LBB63_133
.LBB63_133:                             # %for.inc542
                                        #   in Loop: Header=BB63_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_128
.LBB63_134:                             # %for.end544
                                        #   in Loop: Header=BB63_126 Depth=2
	jmp	.LBB63_135
.LBB63_135:                             # %for.inc545
                                        #   in Loop: Header=BB63_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_126
.LBB63_136:                             # %for.end547
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_137:                             # %for.cond548
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB63_137 Depth=2
	movl	$0, -4(%rbp)
.LBB63_139:                             # %for.cond551
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB63_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB63_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB63_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_143
.LBB63_142:                             # %if.else570
                                        #   in Loop: Header=BB63_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_143:                             # %if.end585
                                        #   in Loop: Header=BB63_139 Depth=3
	jmp	.LBB63_144
.LBB63_144:                             # %for.inc586
                                        #   in Loop: Header=BB63_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_139
.LBB63_145:                             # %for.end588
                                        #   in Loop: Header=BB63_137 Depth=2
	jmp	.LBB63_146
.LBB63_146:                             # %for.inc589
                                        #   in Loop: Header=BB63_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_137
.LBB63_147:                             # %for.end591
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_148:                             # %for.cond592
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB63_148 Depth=2
	movl	$0, -4(%rbp)
.LBB63_150:                             # %for.cond595
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB63_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB63_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_154
.LBB63_153:                             # %if.else614
                                        #   in Loop: Header=BB63_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_154:                             # %if.end629
                                        #   in Loop: Header=BB63_150 Depth=3
	jmp	.LBB63_155
.LBB63_155:                             # %for.inc630
                                        #   in Loop: Header=BB63_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_150
.LBB63_156:                             # %for.end632
                                        #   in Loop: Header=BB63_148 Depth=2
	jmp	.LBB63_157
.LBB63_157:                             # %for.inc633
                                        #   in Loop: Header=BB63_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_148
.LBB63_158:                             # %for.end635
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -8(%rbp)
.LBB63_159:                             # %for.cond636
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB63_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB63_159 Depth=2
	movl	$0, -4(%rbp)
.LBB63_161:                             # %for.cond639
                                        #   Parent Loop BB63_1 Depth=1
                                        #     Parent Loop BB63_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB63_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB63_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB63_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB63_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB63_165
.LBB63_164:                             # %if.else658
                                        #   in Loop: Header=BB63_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB63_165:                             # %if.end673
                                        #   in Loop: Header=BB63_161 Depth=3
	jmp	.LBB63_166
.LBB63_166:                             # %for.inc674
                                        #   in Loop: Header=BB63_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_161
.LBB63_167:                             # %for.end676
                                        #   in Loop: Header=BB63_159 Depth=2
	jmp	.LBB63_168
.LBB63_168:                             # %for.inc677
                                        #   in Loop: Header=BB63_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_159
.LBB63_169:                             # %for.end679
                                        #   in Loop: Header=BB63_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB63_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB63_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB63_171:                             # %if.end682
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_172
.LBB63_172:                             # %for.inc683
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_1
.LBB63_173:                             # %for.end685
	cmpl	$1880436310, -48(%rbp)  # imm = 0x70152E56
	jne	.LBB63_175
.LBB63_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_174
.Lfunc_end63:
	.size	GetCtxModelNumber.56, .Lfunc_end63-GetCtxModelNumber.56
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.57    # -- Begin function SetCtxModelNumber.57
	.p2align	4, 0x90
	.type	SetCtxModelNumber.57,@function
SetCtxModelNumber.57:                   # @SetCtxModelNumber.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$149959161, -16(%rbp)   # imm = 0x8F031F9
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB64_11
.LBB64_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB64_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB64_11
.LBB64_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB64_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB64_11
.LBB64_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB64_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB64_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB64_10
.LBB64_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB64_10:                              # %if.end38
	jmp	.LBB64_11
.LBB64_11:                              # %if.end39
	cmpl	$149959161, -16(%rbp)   # imm = 0x8F031F9
	jne	.LBB64_13
.LBB64_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_12
.Lfunc_end64:
	.size	SetCtxModelNumber.57, .Lfunc_end64-SetCtxModelNumber.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.58
.LCPI65_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.58
	.p2align	4, 0x90
	.type	GetCtxModelNumber.58,@function
GetCtxModelNumber.58:                   # @GetCtxModelNumber.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI65_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1972492197, -44(%rbp)  # imm = 0x7591D7A5
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB65_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_3 Depth 2
                                        #       Child Loop BB65_5 Depth 3
                                        #     Child Loop BB65_14 Depth 2
                                        #       Child Loop BB65_16 Depth 3
                                        #     Child Loop BB65_25 Depth 2
                                        #       Child Loop BB65_27 Depth 3
                                        #     Child Loop BB65_36 Depth 2
                                        #       Child Loop BB65_38 Depth 3
                                        #     Child Loop BB65_47 Depth 2
                                        #     Child Loop BB65_54 Depth 2
                                        #     Child Loop BB65_61 Depth 2
                                        #     Child Loop BB65_68 Depth 2
                                        #     Child Loop BB65_75 Depth 2
                                        #     Child Loop BB65_82 Depth 2
                                        #       Child Loop BB65_84 Depth 3
                                        #     Child Loop BB65_93 Depth 2
                                        #       Child Loop BB65_95 Depth 3
                                        #     Child Loop BB65_104 Depth 2
                                        #       Child Loop BB65_106 Depth 3
                                        #     Child Loop BB65_115 Depth 2
                                        #       Child Loop BB65_117 Depth 3
                                        #     Child Loop BB65_126 Depth 2
                                        #       Child Loop BB65_128 Depth 3
                                        #     Child Loop BB65_137 Depth 2
                                        #       Child Loop BB65_139 Depth 3
                                        #     Child Loop BB65_148 Depth 2
                                        #       Child Loop BB65_150 Depth 3
                                        #     Child Loop BB65_159 Depth 2
                                        #       Child Loop BB65_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB65_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB65_3:                               # %for.cond2
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	$0, -4(%rbp)
.LBB65_5:                               # %for.cond5
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB65_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_9
.LBB65_8:                               # %if.else
                                        #   in Loop: Header=BB65_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_9:                               # %if.end
                                        #   in Loop: Header=BB65_5 Depth=3
	jmp	.LBB65_10
.LBB65_10:                              # %for.inc
                                        #   in Loop: Header=BB65_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_5
.LBB65_11:                              # %for.end
                                        #   in Loop: Header=BB65_3 Depth=2
	jmp	.LBB65_12
.LBB65_12:                              # %for.inc33
                                        #   in Loop: Header=BB65_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_3
.LBB65_13:                              # %for.end35
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_14:                              # %for.cond36
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	$0, -4(%rbp)
.LBB65_16:                              # %for.cond39
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB65_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_20
.LBB65_19:                              # %if.else58
                                        #   in Loop: Header=BB65_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_20:                              # %if.end73
                                        #   in Loop: Header=BB65_16 Depth=3
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc74
                                        #   in Loop: Header=BB65_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_16
.LBB65_22:                              # %for.end76
                                        #   in Loop: Header=BB65_14 Depth=2
	jmp	.LBB65_23
.LBB65_23:                              # %for.inc77
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_14
.LBB65_24:                              # %for.end79
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_25:                              # %for.cond80
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	$0, -4(%rbp)
.LBB65_27:                              # %for.cond83
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB65_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_31
.LBB65_30:                              # %if.else102
                                        #   in Loop: Header=BB65_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_31:                              # %if.end117
                                        #   in Loop: Header=BB65_27 Depth=3
	jmp	.LBB65_32
.LBB65_32:                              # %for.inc118
                                        #   in Loop: Header=BB65_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_27
.LBB65_33:                              # %for.end120
                                        #   in Loop: Header=BB65_25 Depth=2
	jmp	.LBB65_34
.LBB65_34:                              # %for.inc121
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_25
.LBB65_35:                              # %for.end123
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_36:                              # %for.cond124
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB65_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	$0, -4(%rbp)
.LBB65_38:                              # %for.cond127
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB65_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_42
.LBB65_41:                              # %if.else146
                                        #   in Loop: Header=BB65_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_42:                              # %if.end161
                                        #   in Loop: Header=BB65_38 Depth=3
	jmp	.LBB65_43
.LBB65_43:                              # %for.inc162
                                        #   in Loop: Header=BB65_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_38
.LBB65_44:                              # %for.end164
                                        #   in Loop: Header=BB65_36 Depth=2
	jmp	.LBB65_45
.LBB65_45:                              # %for.inc165
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_36
.LBB65_46:                              # %for.end167
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_47:                              # %for.cond168
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_51
.LBB65_50:                              # %if.else184
                                        #   in Loop: Header=BB65_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_51:                              # %if.end196
                                        #   in Loop: Header=BB65_47 Depth=2
	jmp	.LBB65_52
.LBB65_52:                              # %for.inc197
                                        #   in Loop: Header=BB65_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_47
.LBB65_53:                              # %for.end199
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_54:                              # %for.cond200
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_58
.LBB65_57:                              # %if.else216
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_58:                              # %if.end228
                                        #   in Loop: Header=BB65_54 Depth=2
	jmp	.LBB65_59
.LBB65_59:                              # %for.inc229
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_54
.LBB65_60:                              # %for.end231
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_61:                              # %for.cond232
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB65_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_65
.LBB65_64:                              # %if.else248
                                        #   in Loop: Header=BB65_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_65:                              # %if.end260
                                        #   in Loop: Header=BB65_61 Depth=2
	jmp	.LBB65_66
.LBB65_66:                              # %for.inc261
                                        #   in Loop: Header=BB65_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_61
.LBB65_67:                              # %for.end263
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_68:                              # %for.cond264
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB65_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_72
.LBB65_71:                              # %if.else280
                                        #   in Loop: Header=BB65_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_72:                              # %if.end292
                                        #   in Loop: Header=BB65_68 Depth=2
	jmp	.LBB65_73
.LBB65_73:                              # %for.inc293
                                        #   in Loop: Header=BB65_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_68
.LBB65_74:                              # %for.end295
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -4(%rbp)
.LBB65_75:                              # %for.cond296
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB65_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_79
.LBB65_78:                              # %if.else312
                                        #   in Loop: Header=BB65_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_79:                              # %if.end324
                                        #   in Loop: Header=BB65_75 Depth=2
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc325
                                        #   in Loop: Header=BB65_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_75
.LBB65_81:                              # %for.end327
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_82:                              # %for.cond328
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB65_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	$0, -4(%rbp)
.LBB65_84:                              # %for.cond331
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_88
.LBB65_87:                              # %if.else350
                                        #   in Loop: Header=BB65_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_88:                              # %if.end365
                                        #   in Loop: Header=BB65_84 Depth=3
	jmp	.LBB65_89
.LBB65_89:                              # %for.inc366
                                        #   in Loop: Header=BB65_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_84
.LBB65_90:                              # %for.end368
                                        #   in Loop: Header=BB65_82 Depth=2
	jmp	.LBB65_91
.LBB65_91:                              # %for.inc369
                                        #   in Loop: Header=BB65_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_82
.LBB65_92:                              # %for.end371
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_93:                              # %for.cond372
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	$0, -4(%rbp)
.LBB65_95:                              # %for.cond375
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB65_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_99
.LBB65_98:                              # %if.else394
                                        #   in Loop: Header=BB65_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_99:                              # %if.end409
                                        #   in Loop: Header=BB65_95 Depth=3
	jmp	.LBB65_100
.LBB65_100:                             # %for.inc410
                                        #   in Loop: Header=BB65_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_95
.LBB65_101:                             # %for.end412
                                        #   in Loop: Header=BB65_93 Depth=2
	jmp	.LBB65_102
.LBB65_102:                             # %for.inc413
                                        #   in Loop: Header=BB65_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_93
.LBB65_103:                             # %for.end415
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_104:                             # %for.cond416
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	$0, -4(%rbp)
.LBB65_106:                             # %for.cond419
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_110
.LBB65_109:                             # %if.else438
                                        #   in Loop: Header=BB65_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_110:                             # %if.end453
                                        #   in Loop: Header=BB65_106 Depth=3
	jmp	.LBB65_111
.LBB65_111:                             # %for.inc454
                                        #   in Loop: Header=BB65_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_106
.LBB65_112:                             # %for.end456
                                        #   in Loop: Header=BB65_104 Depth=2
	jmp	.LBB65_113
.LBB65_113:                             # %for.inc457
                                        #   in Loop: Header=BB65_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_104
.LBB65_114:                             # %for.end459
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_115:                             # %for.cond460
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	$0, -4(%rbp)
.LBB65_117:                             # %for.cond463
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_121
.LBB65_120:                             # %if.else482
                                        #   in Loop: Header=BB65_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_121:                             # %if.end497
                                        #   in Loop: Header=BB65_117 Depth=3
	jmp	.LBB65_122
.LBB65_122:                             # %for.inc498
                                        #   in Loop: Header=BB65_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_117
.LBB65_123:                             # %for.end500
                                        #   in Loop: Header=BB65_115 Depth=2
	jmp	.LBB65_124
.LBB65_124:                             # %for.inc501
                                        #   in Loop: Header=BB65_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_115
.LBB65_125:                             # %for.end503
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_126:                             # %for.cond504
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	$0, -4(%rbp)
.LBB65_128:                             # %for.cond507
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_132
.LBB65_131:                             # %if.else526
                                        #   in Loop: Header=BB65_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_132:                             # %if.end541
                                        #   in Loop: Header=BB65_128 Depth=3
	jmp	.LBB65_133
.LBB65_133:                             # %for.inc542
                                        #   in Loop: Header=BB65_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_128
.LBB65_134:                             # %for.end544
                                        #   in Loop: Header=BB65_126 Depth=2
	jmp	.LBB65_135
.LBB65_135:                             # %for.inc545
                                        #   in Loop: Header=BB65_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_126
.LBB65_136:                             # %for.end547
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_137:                             # %for.cond548
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	$0, -4(%rbp)
.LBB65_139:                             # %for.cond551
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB65_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_143
.LBB65_142:                             # %if.else570
                                        #   in Loop: Header=BB65_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_143:                             # %if.end585
                                        #   in Loop: Header=BB65_139 Depth=3
	jmp	.LBB65_144
.LBB65_144:                             # %for.inc586
                                        #   in Loop: Header=BB65_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_139
.LBB65_145:                             # %for.end588
                                        #   in Loop: Header=BB65_137 Depth=2
	jmp	.LBB65_146
.LBB65_146:                             # %for.inc589
                                        #   in Loop: Header=BB65_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_137
.LBB65_147:                             # %for.end591
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_148:                             # %for.cond592
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	$0, -4(%rbp)
.LBB65_150:                             # %for.cond595
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_154
.LBB65_153:                             # %if.else614
                                        #   in Loop: Header=BB65_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_154:                             # %if.end629
                                        #   in Loop: Header=BB65_150 Depth=3
	jmp	.LBB65_155
.LBB65_155:                             # %for.inc630
                                        #   in Loop: Header=BB65_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_150
.LBB65_156:                             # %for.end632
                                        #   in Loop: Header=BB65_148 Depth=2
	jmp	.LBB65_157
.LBB65_157:                             # %for.inc633
                                        #   in Loop: Header=BB65_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_148
.LBB65_158:                             # %for.end635
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	$0, -8(%rbp)
.LBB65_159:                             # %for.cond636
                                        #   Parent Loop BB65_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB65_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	$0, -4(%rbp)
.LBB65_161:                             # %for.cond639
                                        #   Parent Loop BB65_1 Depth=1
                                        #     Parent Loop BB65_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB65_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB65_165
.LBB65_164:                             # %if.else658
                                        #   in Loop: Header=BB65_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB65_165:                             # %if.end673
                                        #   in Loop: Header=BB65_161 Depth=3
	jmp	.LBB65_166
.LBB65_166:                             # %for.inc674
                                        #   in Loop: Header=BB65_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_161
.LBB65_167:                             # %for.end676
                                        #   in Loop: Header=BB65_159 Depth=2
	jmp	.LBB65_168
.LBB65_168:                             # %for.inc677
                                        #   in Loop: Header=BB65_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_159
.LBB65_169:                             # %for.end679
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB65_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB65_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB65_171:                             # %if.end682
                                        #   in Loop: Header=BB65_1 Depth=1
	jmp	.LBB65_172
.LBB65_172:                             # %for.inc683
                                        #   in Loop: Header=BB65_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_1
.LBB65_173:                             # %for.end685
	cmpl	$1972492197, -44(%rbp)  # imm = 0x7591D7A5
	jne	.LBB65_175
.LBB65_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_174
.Lfunc_end65:
	.size	GetCtxModelNumber.58, .Lfunc_end65-GetCtxModelNumber.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.59
.LCPI66_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.59
	.p2align	4, 0x90
	.type	GetCtxModelNumber.59,@function
GetCtxModelNumber.59:                   # @GetCtxModelNumber.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI66_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$190423972, -44(%rbp)   # imm = 0xB59A3A4
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
                                        #       Child Loop BB66_5 Depth 3
                                        #     Child Loop BB66_14 Depth 2
                                        #       Child Loop BB66_16 Depth 3
                                        #     Child Loop BB66_25 Depth 2
                                        #       Child Loop BB66_27 Depth 3
                                        #     Child Loop BB66_36 Depth 2
                                        #       Child Loop BB66_38 Depth 3
                                        #     Child Loop BB66_47 Depth 2
                                        #     Child Loop BB66_54 Depth 2
                                        #     Child Loop BB66_61 Depth 2
                                        #     Child Loop BB66_68 Depth 2
                                        #     Child Loop BB66_75 Depth 2
                                        #     Child Loop BB66_82 Depth 2
                                        #       Child Loop BB66_84 Depth 3
                                        #     Child Loop BB66_93 Depth 2
                                        #       Child Loop BB66_95 Depth 3
                                        #     Child Loop BB66_104 Depth 2
                                        #       Child Loop BB66_106 Depth 3
                                        #     Child Loop BB66_115 Depth 2
                                        #       Child Loop BB66_117 Depth 3
                                        #     Child Loop BB66_126 Depth 2
                                        #       Child Loop BB66_128 Depth 3
                                        #     Child Loop BB66_137 Depth 2
                                        #       Child Loop BB66_139 Depth 3
                                        #     Child Loop BB66_148 Depth 2
                                        #       Child Loop BB66_150 Depth 3
                                        #     Child Loop BB66_159 Depth 2
                                        #       Child Loop BB66_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB66_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB66_3:                               # %for.cond2
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB66_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	$0, -4(%rbp)
.LBB66_5:                               # %for.cond5
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB66_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_9
.LBB66_8:                               # %if.else
                                        #   in Loop: Header=BB66_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_9:                               # %if.end
                                        #   in Loop: Header=BB66_5 Depth=3
	jmp	.LBB66_10
.LBB66_10:                              # %for.inc
                                        #   in Loop: Header=BB66_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_5
.LBB66_11:                              # %for.end
                                        #   in Loop: Header=BB66_3 Depth=2
	jmp	.LBB66_12
.LBB66_12:                              # %for.inc33
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_3
.LBB66_13:                              # %for.end35
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_14:                              # %for.cond36
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB66_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB66_14 Depth=2
	movl	$0, -4(%rbp)
.LBB66_16:                              # %for.cond39
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB66_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB66_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB66_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_20
.LBB66_19:                              # %if.else58
                                        #   in Loop: Header=BB66_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_20:                              # %if.end73
                                        #   in Loop: Header=BB66_16 Depth=3
	jmp	.LBB66_21
.LBB66_21:                              # %for.inc74
                                        #   in Loop: Header=BB66_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_16
.LBB66_22:                              # %for.end76
                                        #   in Loop: Header=BB66_14 Depth=2
	jmp	.LBB66_23
.LBB66_23:                              # %for.inc77
                                        #   in Loop: Header=BB66_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_14
.LBB66_24:                              # %for.end79
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_25:                              # %for.cond80
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB66_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB66_25 Depth=2
	movl	$0, -4(%rbp)
.LBB66_27:                              # %for.cond83
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB66_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB66_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB66_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_31
.LBB66_30:                              # %if.else102
                                        #   in Loop: Header=BB66_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_31:                              # %if.end117
                                        #   in Loop: Header=BB66_27 Depth=3
	jmp	.LBB66_32
.LBB66_32:                              # %for.inc118
                                        #   in Loop: Header=BB66_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_27
.LBB66_33:                              # %for.end120
                                        #   in Loop: Header=BB66_25 Depth=2
	jmp	.LBB66_34
.LBB66_34:                              # %for.inc121
                                        #   in Loop: Header=BB66_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_25
.LBB66_35:                              # %for.end123
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_36:                              # %for.cond124
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB66_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB66_36 Depth=2
	movl	$0, -4(%rbp)
.LBB66_38:                              # %for.cond127
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB66_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB66_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB66_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_42
.LBB66_41:                              # %if.else146
                                        #   in Loop: Header=BB66_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_42:                              # %if.end161
                                        #   in Loop: Header=BB66_38 Depth=3
	jmp	.LBB66_43
.LBB66_43:                              # %for.inc162
                                        #   in Loop: Header=BB66_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_38
.LBB66_44:                              # %for.end164
                                        #   in Loop: Header=BB66_36 Depth=2
	jmp	.LBB66_45
.LBB66_45:                              # %for.inc165
                                        #   in Loop: Header=BB66_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_36
.LBB66_46:                              # %for.end167
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_47:                              # %for.cond168
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB66_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB66_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_51
.LBB66_50:                              # %if.else184
                                        #   in Loop: Header=BB66_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_51:                              # %if.end196
                                        #   in Loop: Header=BB66_47 Depth=2
	jmp	.LBB66_52
.LBB66_52:                              # %for.inc197
                                        #   in Loop: Header=BB66_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_47
.LBB66_53:                              # %for.end199
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_54:                              # %for.cond200
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB66_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB66_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_58
.LBB66_57:                              # %if.else216
                                        #   in Loop: Header=BB66_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_58:                              # %if.end228
                                        #   in Loop: Header=BB66_54 Depth=2
	jmp	.LBB66_59
.LBB66_59:                              # %for.inc229
                                        #   in Loop: Header=BB66_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_54
.LBB66_60:                              # %for.end231
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_61:                              # %for.cond232
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB66_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_65
.LBB66_64:                              # %if.else248
                                        #   in Loop: Header=BB66_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_65:                              # %if.end260
                                        #   in Loop: Header=BB66_61 Depth=2
	jmp	.LBB66_66
.LBB66_66:                              # %for.inc261
                                        #   in Loop: Header=BB66_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_61
.LBB66_67:                              # %for.end263
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_68:                              # %for.cond264
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB66_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB66_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB66_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_72
.LBB66_71:                              # %if.else280
                                        #   in Loop: Header=BB66_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_72:                              # %if.end292
                                        #   in Loop: Header=BB66_68 Depth=2
	jmp	.LBB66_73
.LBB66_73:                              # %for.inc293
                                        #   in Loop: Header=BB66_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_68
.LBB66_74:                              # %for.end295
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_75:                              # %for.cond296
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB66_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB66_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB66_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_79
.LBB66_78:                              # %if.else312
                                        #   in Loop: Header=BB66_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_79:                              # %if.end324
                                        #   in Loop: Header=BB66_75 Depth=2
	jmp	.LBB66_80
.LBB66_80:                              # %for.inc325
                                        #   in Loop: Header=BB66_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_75
.LBB66_81:                              # %for.end327
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_82:                              # %for.cond328
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB66_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	$0, -4(%rbp)
.LBB66_84:                              # %for.cond331
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB66_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_88
.LBB66_87:                              # %if.else350
                                        #   in Loop: Header=BB66_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_88:                              # %if.end365
                                        #   in Loop: Header=BB66_84 Depth=3
	jmp	.LBB66_89
.LBB66_89:                              # %for.inc366
                                        #   in Loop: Header=BB66_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_84
.LBB66_90:                              # %for.end368
                                        #   in Loop: Header=BB66_82 Depth=2
	jmp	.LBB66_91
.LBB66_91:                              # %for.inc369
                                        #   in Loop: Header=BB66_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_82
.LBB66_92:                              # %for.end371
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_93:                              # %for.cond372
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	$0, -4(%rbp)
.LBB66_95:                              # %for.cond375
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB66_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB66_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB66_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_99
.LBB66_98:                              # %if.else394
                                        #   in Loop: Header=BB66_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_99:                              # %if.end409
                                        #   in Loop: Header=BB66_95 Depth=3
	jmp	.LBB66_100
.LBB66_100:                             # %for.inc410
                                        #   in Loop: Header=BB66_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_95
.LBB66_101:                             # %for.end412
                                        #   in Loop: Header=BB66_93 Depth=2
	jmp	.LBB66_102
.LBB66_102:                             # %for.inc413
                                        #   in Loop: Header=BB66_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_93
.LBB66_103:                             # %for.end415
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_104:                             # %for.cond416
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB66_104 Depth=2
	movl	$0, -4(%rbp)
.LBB66_106:                             # %for.cond419
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB66_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB66_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_110
.LBB66_109:                             # %if.else438
                                        #   in Loop: Header=BB66_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_110:                             # %if.end453
                                        #   in Loop: Header=BB66_106 Depth=3
	jmp	.LBB66_111
.LBB66_111:                             # %for.inc454
                                        #   in Loop: Header=BB66_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_106
.LBB66_112:                             # %for.end456
                                        #   in Loop: Header=BB66_104 Depth=2
	jmp	.LBB66_113
.LBB66_113:                             # %for.inc457
                                        #   in Loop: Header=BB66_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_104
.LBB66_114:                             # %for.end459
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_115:                             # %for.cond460
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	$0, -4(%rbp)
.LBB66_117:                             # %for.cond463
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_121
.LBB66_120:                             # %if.else482
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_121:                             # %if.end497
                                        #   in Loop: Header=BB66_117 Depth=3
	jmp	.LBB66_122
.LBB66_122:                             # %for.inc498
                                        #   in Loop: Header=BB66_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_117
.LBB66_123:                             # %for.end500
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_124
.LBB66_124:                             # %for.inc501
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_115
.LBB66_125:                             # %for.end503
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_126:                             # %for.cond504
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB66_126 Depth=2
	movl	$0, -4(%rbp)
.LBB66_128:                             # %for.cond507
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB66_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB66_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB66_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_132
.LBB66_131:                             # %if.else526
                                        #   in Loop: Header=BB66_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_132:                             # %if.end541
                                        #   in Loop: Header=BB66_128 Depth=3
	jmp	.LBB66_133
.LBB66_133:                             # %for.inc542
                                        #   in Loop: Header=BB66_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_128
.LBB66_134:                             # %for.end544
                                        #   in Loop: Header=BB66_126 Depth=2
	jmp	.LBB66_135
.LBB66_135:                             # %for.inc545
                                        #   in Loop: Header=BB66_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_126
.LBB66_136:                             # %for.end547
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_137:                             # %for.cond548
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	$0, -4(%rbp)
.LBB66_139:                             # %for.cond551
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB66_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB66_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB66_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_143
.LBB66_142:                             # %if.else570
                                        #   in Loop: Header=BB66_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_143:                             # %if.end585
                                        #   in Loop: Header=BB66_139 Depth=3
	jmp	.LBB66_144
.LBB66_144:                             # %for.inc586
                                        #   in Loop: Header=BB66_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_139
.LBB66_145:                             # %for.end588
                                        #   in Loop: Header=BB66_137 Depth=2
	jmp	.LBB66_146
.LBB66_146:                             # %for.inc589
                                        #   in Loop: Header=BB66_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_137
.LBB66_147:                             # %for.end591
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_148:                             # %for.cond592
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB66_148 Depth=2
	movl	$0, -4(%rbp)
.LBB66_150:                             # %for.cond595
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB66_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB66_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_154
.LBB66_153:                             # %if.else614
                                        #   in Loop: Header=BB66_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_154:                             # %if.end629
                                        #   in Loop: Header=BB66_150 Depth=3
	jmp	.LBB66_155
.LBB66_155:                             # %for.inc630
                                        #   in Loop: Header=BB66_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_150
.LBB66_156:                             # %for.end632
                                        #   in Loop: Header=BB66_148 Depth=2
	jmp	.LBB66_157
.LBB66_157:                             # %for.inc633
                                        #   in Loop: Header=BB66_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_148
.LBB66_158:                             # %for.end635
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -8(%rbp)
.LBB66_159:                             # %for.cond636
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB66_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB66_159 Depth=2
	movl	$0, -4(%rbp)
.LBB66_161:                             # %for.cond639
                                        #   Parent Loop BB66_1 Depth=1
                                        #     Parent Loop BB66_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB66_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB66_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB66_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB66_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB66_165
.LBB66_164:                             # %if.else658
                                        #   in Loop: Header=BB66_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB66_165:                             # %if.end673
                                        #   in Loop: Header=BB66_161 Depth=3
	jmp	.LBB66_166
.LBB66_166:                             # %for.inc674
                                        #   in Loop: Header=BB66_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_161
.LBB66_167:                             # %for.end676
                                        #   in Loop: Header=BB66_159 Depth=2
	jmp	.LBB66_168
.LBB66_168:                             # %for.inc677
                                        #   in Loop: Header=BB66_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_159
.LBB66_169:                             # %for.end679
                                        #   in Loop: Header=BB66_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB66_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB66_171:                             # %if.end682
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_172
.LBB66_172:                             # %for.inc683
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_1
.LBB66_173:                             # %for.end685
	cmpl	$190423972, -44(%rbp)   # imm = 0xB59A3A4
	jne	.LBB66_175
.LBB66_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_174
.Lfunc_end66:
	.size	GetCtxModelNumber.59, .Lfunc_end66-GetCtxModelNumber.59
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.60    # -- Begin function SetCtxModelNumber.60
	.p2align	4, 0x90
	.type	SetCtxModelNumber.60,@function
SetCtxModelNumber.60:                   # @SetCtxModelNumber.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$933746469, -16(%rbp)   # imm = 0x37A7D725
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB67_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB67_11
.LBB67_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB67_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB67_11
.LBB67_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB67_11
.LBB67_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB67_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB67_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB67_10
.LBB67_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB67_10:                              # %if.end38
	jmp	.LBB67_11
.LBB67_11:                              # %if.end39
	cmpl	$933746469, -16(%rbp)   # imm = 0x37A7D725
	jne	.LBB67_13
.LBB67_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_12
.Lfunc_end67:
	.size	SetCtxModelNumber.60, .Lfunc_end67-SetCtxModelNumber.60
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.61        # -- Begin function init_contexts.61
	.p2align	4, 0x90
	.type	init_contexts.61,@function
init_contexts.61:                       # @init_contexts.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1964097851, -28(%rbp)  # imm = 0x7511C13B
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB68_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB68_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	$0, -4(%rbp)
.LBB68_3:                               # %for.cond2
                                        #   Parent Loop BB68_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB68_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_7
.LBB68_6:                               # %if.else
                                        #   in Loop: Header=BB68_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_7:                               # %if.end
                                        #   in Loop: Header=BB68_3 Depth=2
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc
                                        #   in Loop: Header=BB68_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_3
.LBB68_9:                               # %for.end
                                        #   in Loop: Header=BB68_1 Depth=1
	jmp	.LBB68_10
.LBB68_10:                              # %for.inc28
                                        #   in Loop: Header=BB68_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_1
.LBB68_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB68_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB68_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB68_12 Depth=1
	movl	$0, -4(%rbp)
.LBB68_14:                              # %for.cond34
                                        #   Parent Loop BB68_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB68_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_18
.LBB68_17:                              # %if.else52
                                        #   in Loop: Header=BB68_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_18:                              # %if.end66
                                        #   in Loop: Header=BB68_14 Depth=2
	jmp	.LBB68_19
.LBB68_19:                              # %for.inc67
                                        #   in Loop: Header=BB68_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_14
.LBB68_20:                              # %for.end69
                                        #   in Loop: Header=BB68_12 Depth=1
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc70
                                        #   in Loop: Header=BB68_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_12
.LBB68_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB68_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB68_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	$0, -4(%rbp)
.LBB68_25:                              # %for.cond76
                                        #   Parent Loop BB68_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB68_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_29
.LBB68_28:                              # %if.else94
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_29:                              # %if.end108
                                        #   in Loop: Header=BB68_25 Depth=2
	jmp	.LBB68_30
.LBB68_30:                              # %for.inc109
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_25
.LBB68_31:                              # %for.end111
                                        #   in Loop: Header=BB68_23 Depth=1
	jmp	.LBB68_32
.LBB68_32:                              # %for.inc112
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_23
.LBB68_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB68_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB68_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	$0, -4(%rbp)
.LBB68_36:                              # %for.cond118
                                        #   Parent Loop BB68_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB68_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB68_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB68_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_40
.LBB68_39:                              # %if.else136
                                        #   in Loop: Header=BB68_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_40:                              # %if.end150
                                        #   in Loop: Header=BB68_36 Depth=2
	jmp	.LBB68_41
.LBB68_41:                              # %for.inc151
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_36
.LBB68_42:                              # %for.end153
                                        #   in Loop: Header=BB68_34 Depth=1
	jmp	.LBB68_43
.LBB68_43:                              # %for.inc154
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_34
.LBB68_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB68_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB68_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_49
.LBB68_48:                              # %if.else172
                                        #   in Loop: Header=BB68_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_49:                              # %if.end183
                                        #   in Loop: Header=BB68_45 Depth=1
	jmp	.LBB68_50
.LBB68_50:                              # %for.inc184
                                        #   in Loop: Header=BB68_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_45
.LBB68_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB68_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB68_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB68_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB68_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_56
.LBB68_55:                              # %if.else202
                                        #   in Loop: Header=BB68_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_56:                              # %if.end213
                                        #   in Loop: Header=BB68_52 Depth=1
	jmp	.LBB68_57
.LBB68_57:                              # %for.inc214
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_52
.LBB68_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB68_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB68_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB68_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB68_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_63
.LBB68_62:                              # %if.else232
                                        #   in Loop: Header=BB68_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_63:                              # %if.end243
                                        #   in Loop: Header=BB68_59 Depth=1
	jmp	.LBB68_64
.LBB68_64:                              # %for.inc244
                                        #   in Loop: Header=BB68_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_59
.LBB68_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB68_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB68_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB68_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB68_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_70
.LBB68_69:                              # %if.else262
                                        #   in Loop: Header=BB68_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_70:                              # %if.end273
                                        #   in Loop: Header=BB68_66 Depth=1
	jmp	.LBB68_71
.LBB68_71:                              # %for.inc274
                                        #   in Loop: Header=BB68_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_66
.LBB68_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB68_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB68_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB68_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB68_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_77
.LBB68_76:                              # %if.else292
                                        #   in Loop: Header=BB68_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_77:                              # %if.end303
                                        #   in Loop: Header=BB68_73 Depth=1
	jmp	.LBB68_78
.LBB68_78:                              # %for.inc304
                                        #   in Loop: Header=BB68_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_73
.LBB68_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB68_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB68_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB68_80 Depth=1
	movl	$0, -4(%rbp)
.LBB68_82:                              # %for.cond310
                                        #   Parent Loop BB68_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB68_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB68_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_86
.LBB68_85:                              # %if.else328
                                        #   in Loop: Header=BB68_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_86:                              # %if.end342
                                        #   in Loop: Header=BB68_82 Depth=2
	jmp	.LBB68_87
.LBB68_87:                              # %for.inc343
                                        #   in Loop: Header=BB68_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_82
.LBB68_88:                              # %for.end345
                                        #   in Loop: Header=BB68_80 Depth=1
	jmp	.LBB68_89
.LBB68_89:                              # %for.inc346
                                        #   in Loop: Header=BB68_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_80
.LBB68_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB68_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB68_91 Depth=1
	movl	$0, -4(%rbp)
.LBB68_93:                              # %for.cond352
                                        #   Parent Loop BB68_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB68_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB68_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB68_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_97
.LBB68_96:                              # %if.else370
                                        #   in Loop: Header=BB68_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_97:                              # %if.end384
                                        #   in Loop: Header=BB68_93 Depth=2
	jmp	.LBB68_98
.LBB68_98:                              # %for.inc385
                                        #   in Loop: Header=BB68_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_93
.LBB68_99:                              # %for.end387
                                        #   in Loop: Header=BB68_91 Depth=1
	jmp	.LBB68_100
.LBB68_100:                             # %for.inc388
                                        #   in Loop: Header=BB68_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_91
.LBB68_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB68_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB68_102 Depth=1
	movl	$0, -4(%rbp)
.LBB68_104:                             # %for.cond394
                                        #   Parent Loop BB68_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB68_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB68_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_108
.LBB68_107:                             # %if.else412
                                        #   in Loop: Header=BB68_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_108:                             # %if.end426
                                        #   in Loop: Header=BB68_104 Depth=2
	jmp	.LBB68_109
.LBB68_109:                             # %for.inc427
                                        #   in Loop: Header=BB68_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_104
.LBB68_110:                             # %for.end429
                                        #   in Loop: Header=BB68_102 Depth=1
	jmp	.LBB68_111
.LBB68_111:                             # %for.inc430
                                        #   in Loop: Header=BB68_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_102
.LBB68_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB68_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB68_113 Depth=1
	movl	$0, -4(%rbp)
.LBB68_115:                             # %for.cond436
                                        #   Parent Loop BB68_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB68_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB68_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_119
.LBB68_118:                             # %if.else454
                                        #   in Loop: Header=BB68_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_119:                             # %if.end468
                                        #   in Loop: Header=BB68_115 Depth=2
	jmp	.LBB68_120
.LBB68_120:                             # %for.inc469
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_115
.LBB68_121:                             # %for.end471
                                        #   in Loop: Header=BB68_113 Depth=1
	jmp	.LBB68_122
.LBB68_122:                             # %for.inc472
                                        #   in Loop: Header=BB68_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_113
.LBB68_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB68_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB68_124 Depth=1
	movl	$0, -4(%rbp)
.LBB68_126:                             # %for.cond478
                                        #   Parent Loop BB68_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB68_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB68_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB68_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_130
.LBB68_129:                             # %if.else496
                                        #   in Loop: Header=BB68_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_130:                             # %if.end510
                                        #   in Loop: Header=BB68_126 Depth=2
	jmp	.LBB68_131
.LBB68_131:                             # %for.inc511
                                        #   in Loop: Header=BB68_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_126
.LBB68_132:                             # %for.end513
                                        #   in Loop: Header=BB68_124 Depth=1
	jmp	.LBB68_133
.LBB68_133:                             # %for.inc514
                                        #   in Loop: Header=BB68_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_124
.LBB68_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB68_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	$0, -4(%rbp)
.LBB68_137:                             # %for.cond520
                                        #   Parent Loop BB68_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB68_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB68_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB68_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_141
.LBB68_140:                             # %if.else538
                                        #   in Loop: Header=BB68_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_141:                             # %if.end552
                                        #   in Loop: Header=BB68_137 Depth=2
	jmp	.LBB68_142
.LBB68_142:                             # %for.inc553
                                        #   in Loop: Header=BB68_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_137
.LBB68_143:                             # %for.end555
                                        #   in Loop: Header=BB68_135 Depth=1
	jmp	.LBB68_144
.LBB68_144:                             # %for.inc556
                                        #   in Loop: Header=BB68_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_135
.LBB68_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB68_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB68_146 Depth=1
	movl	$0, -4(%rbp)
.LBB68_148:                             # %for.cond562
                                        #   Parent Loop BB68_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB68_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB68_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_152
.LBB68_151:                             # %if.else580
                                        #   in Loop: Header=BB68_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_152:                             # %if.end594
                                        #   in Loop: Header=BB68_148 Depth=2
	jmp	.LBB68_153
.LBB68_153:                             # %for.inc595
                                        #   in Loop: Header=BB68_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_148
.LBB68_154:                             # %for.end597
                                        #   in Loop: Header=BB68_146 Depth=1
	jmp	.LBB68_155
.LBB68_155:                             # %for.inc598
                                        #   in Loop: Header=BB68_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_146
.LBB68_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB68_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB68_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB68_157 Depth=1
	movl	$0, -4(%rbp)
.LBB68_159:                             # %for.cond604
                                        #   Parent Loop BB68_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB68_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB68_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB68_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB68_163
.LBB68_162:                             # %if.else622
                                        #   in Loop: Header=BB68_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB68_163:                             # %if.end636
                                        #   in Loop: Header=BB68_159 Depth=2
	jmp	.LBB68_164
.LBB68_164:                             # %for.inc637
                                        #   in Loop: Header=BB68_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_159
.LBB68_165:                             # %for.end639
                                        #   in Loop: Header=BB68_157 Depth=1
	jmp	.LBB68_166
.LBB68_166:                             # %for.inc640
                                        #   in Loop: Header=BB68_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_157
.LBB68_167:                             # %for.end642
	cmpl	$1964097851, -28(%rbp)  # imm = 0x7511C13B
	jne	.LBB68_169
.LBB68_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_168
.Lfunc_end68:
	.size	init_contexts.61, .Lfunc_end68-init_contexts.61
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.62
.LCPI69_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.62
	.p2align	4, 0x90
	.type	GetCtxModelNumber.62,@function
GetCtxModelNumber.62:                   # @GetCtxModelNumber.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI69_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$98262784, -48(%rbp)    # imm = 0x5DB5F00
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_3 Depth 2
                                        #       Child Loop BB69_5 Depth 3
                                        #     Child Loop BB69_14 Depth 2
                                        #       Child Loop BB69_16 Depth 3
                                        #     Child Loop BB69_25 Depth 2
                                        #       Child Loop BB69_27 Depth 3
                                        #     Child Loop BB69_36 Depth 2
                                        #       Child Loop BB69_38 Depth 3
                                        #     Child Loop BB69_47 Depth 2
                                        #     Child Loop BB69_54 Depth 2
                                        #     Child Loop BB69_61 Depth 2
                                        #     Child Loop BB69_68 Depth 2
                                        #     Child Loop BB69_75 Depth 2
                                        #     Child Loop BB69_82 Depth 2
                                        #       Child Loop BB69_84 Depth 3
                                        #     Child Loop BB69_93 Depth 2
                                        #       Child Loop BB69_95 Depth 3
                                        #     Child Loop BB69_104 Depth 2
                                        #       Child Loop BB69_106 Depth 3
                                        #     Child Loop BB69_115 Depth 2
                                        #       Child Loop BB69_117 Depth 3
                                        #     Child Loop BB69_126 Depth 2
                                        #       Child Loop BB69_128 Depth 3
                                        #     Child Loop BB69_137 Depth 2
                                        #       Child Loop BB69_139 Depth 3
                                        #     Child Loop BB69_148 Depth 2
                                        #       Child Loop BB69_150 Depth 3
                                        #     Child Loop BB69_159 Depth 2
                                        #       Child Loop BB69_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB69_3:                               # %for.cond2
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB69_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	$0, -4(%rbp)
.LBB69_5:                               # %for.cond5
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB69_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_9
.LBB69_8:                               # %if.else
                                        #   in Loop: Header=BB69_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_9:                               # %if.end
                                        #   in Loop: Header=BB69_5 Depth=3
	jmp	.LBB69_10
.LBB69_10:                              # %for.inc
                                        #   in Loop: Header=BB69_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_5
.LBB69_11:                              # %for.end
                                        #   in Loop: Header=BB69_3 Depth=2
	jmp	.LBB69_12
.LBB69_12:                              # %for.inc33
                                        #   in Loop: Header=BB69_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_3
.LBB69_13:                              # %for.end35
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_14:                              # %for.cond36
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB69_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB69_14 Depth=2
	movl	$0, -4(%rbp)
.LBB69_16:                              # %for.cond39
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB69_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB69_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB69_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_20
.LBB69_19:                              # %if.else58
                                        #   in Loop: Header=BB69_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_20:                              # %if.end73
                                        #   in Loop: Header=BB69_16 Depth=3
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc74
                                        #   in Loop: Header=BB69_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_16
.LBB69_22:                              # %for.end76
                                        #   in Loop: Header=BB69_14 Depth=2
	jmp	.LBB69_23
.LBB69_23:                              # %for.inc77
                                        #   in Loop: Header=BB69_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_14
.LBB69_24:                              # %for.end79
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_25:                              # %for.cond80
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB69_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	$0, -4(%rbp)
.LBB69_27:                              # %for.cond83
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB69_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB69_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB69_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_31
.LBB69_30:                              # %if.else102
                                        #   in Loop: Header=BB69_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_31:                              # %if.end117
                                        #   in Loop: Header=BB69_27 Depth=3
	jmp	.LBB69_32
.LBB69_32:                              # %for.inc118
                                        #   in Loop: Header=BB69_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_27
.LBB69_33:                              # %for.end120
                                        #   in Loop: Header=BB69_25 Depth=2
	jmp	.LBB69_34
.LBB69_34:                              # %for.inc121
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_25
.LBB69_35:                              # %for.end123
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_36:                              # %for.cond124
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB69_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	$0, -4(%rbp)
.LBB69_38:                              # %for.cond127
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB69_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB69_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB69_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_42
.LBB69_41:                              # %if.else146
                                        #   in Loop: Header=BB69_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_42:                              # %if.end161
                                        #   in Loop: Header=BB69_38 Depth=3
	jmp	.LBB69_43
.LBB69_43:                              # %for.inc162
                                        #   in Loop: Header=BB69_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_38
.LBB69_44:                              # %for.end164
                                        #   in Loop: Header=BB69_36 Depth=2
	jmp	.LBB69_45
.LBB69_45:                              # %for.inc165
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_36
.LBB69_46:                              # %for.end167
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_47:                              # %for.cond168
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB69_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB69_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_51
.LBB69_50:                              # %if.else184
                                        #   in Loop: Header=BB69_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_51:                              # %if.end196
                                        #   in Loop: Header=BB69_47 Depth=2
	jmp	.LBB69_52
.LBB69_52:                              # %for.inc197
                                        #   in Loop: Header=BB69_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_47
.LBB69_53:                              # %for.end199
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_54:                              # %for.cond200
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_58
.LBB69_57:                              # %if.else216
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_58:                              # %if.end228
                                        #   in Loop: Header=BB69_54 Depth=2
	jmp	.LBB69_59
.LBB69_59:                              # %for.inc229
                                        #   in Loop: Header=BB69_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_54
.LBB69_60:                              # %for.end231
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond232
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB69_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_65
.LBB69_64:                              # %if.else248
                                        #   in Loop: Header=BB69_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_65:                              # %if.end260
                                        #   in Loop: Header=BB69_61 Depth=2
	jmp	.LBB69_66
.LBB69_66:                              # %for.inc261
                                        #   in Loop: Header=BB69_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_67:                              # %for.end263
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_68:                              # %for.cond264
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB69_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_72
.LBB69_71:                              # %if.else280
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_72:                              # %if.end292
                                        #   in Loop: Header=BB69_68 Depth=2
	jmp	.LBB69_73
.LBB69_73:                              # %for.inc293
                                        #   in Loop: Header=BB69_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_68
.LBB69_74:                              # %for.end295
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -4(%rbp)
.LBB69_75:                              # %for.cond296
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB69_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB69_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_79
.LBB69_78:                              # %if.else312
                                        #   in Loop: Header=BB69_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_79:                              # %if.end324
                                        #   in Loop: Header=BB69_75 Depth=2
	jmp	.LBB69_80
.LBB69_80:                              # %for.inc325
                                        #   in Loop: Header=BB69_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_75
.LBB69_81:                              # %for.end327
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_82:                              # %for.cond328
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB69_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB69_82 Depth=2
	movl	$0, -4(%rbp)
.LBB69_84:                              # %for.cond331
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB69_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB69_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB69_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_88
.LBB69_87:                              # %if.else350
                                        #   in Loop: Header=BB69_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_88:                              # %if.end365
                                        #   in Loop: Header=BB69_84 Depth=3
	jmp	.LBB69_89
.LBB69_89:                              # %for.inc366
                                        #   in Loop: Header=BB69_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_84
.LBB69_90:                              # %for.end368
                                        #   in Loop: Header=BB69_82 Depth=2
	jmp	.LBB69_91
.LBB69_91:                              # %for.inc369
                                        #   in Loop: Header=BB69_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_82
.LBB69_92:                              # %for.end371
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_93:                              # %for.cond372
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB69_93 Depth=2
	movl	$0, -4(%rbp)
.LBB69_95:                              # %for.cond375
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB69_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB69_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB69_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_99
.LBB69_98:                              # %if.else394
                                        #   in Loop: Header=BB69_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_99:                              # %if.end409
                                        #   in Loop: Header=BB69_95 Depth=3
	jmp	.LBB69_100
.LBB69_100:                             # %for.inc410
                                        #   in Loop: Header=BB69_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_95
.LBB69_101:                             # %for.end412
                                        #   in Loop: Header=BB69_93 Depth=2
	jmp	.LBB69_102
.LBB69_102:                             # %for.inc413
                                        #   in Loop: Header=BB69_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_93
.LBB69_103:                             # %for.end415
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_104:                             # %for.cond416
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB69_104 Depth=2
	movl	$0, -4(%rbp)
.LBB69_106:                             # %for.cond419
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB69_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB69_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_110
.LBB69_109:                             # %if.else438
                                        #   in Loop: Header=BB69_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_110:                             # %if.end453
                                        #   in Loop: Header=BB69_106 Depth=3
	jmp	.LBB69_111
.LBB69_111:                             # %for.inc454
                                        #   in Loop: Header=BB69_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_106
.LBB69_112:                             # %for.end456
                                        #   in Loop: Header=BB69_104 Depth=2
	jmp	.LBB69_113
.LBB69_113:                             # %for.inc457
                                        #   in Loop: Header=BB69_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_104
.LBB69_114:                             # %for.end459
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_115:                             # %for.cond460
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB69_115 Depth=2
	movl	$0, -4(%rbp)
.LBB69_117:                             # %for.cond463
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB69_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB69_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_121
.LBB69_120:                             # %if.else482
                                        #   in Loop: Header=BB69_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_121:                             # %if.end497
                                        #   in Loop: Header=BB69_117 Depth=3
	jmp	.LBB69_122
.LBB69_122:                             # %for.inc498
                                        #   in Loop: Header=BB69_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_117
.LBB69_123:                             # %for.end500
                                        #   in Loop: Header=BB69_115 Depth=2
	jmp	.LBB69_124
.LBB69_124:                             # %for.inc501
                                        #   in Loop: Header=BB69_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_115
.LBB69_125:                             # %for.end503
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_126:                             # %for.cond504
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB69_126 Depth=2
	movl	$0, -4(%rbp)
.LBB69_128:                             # %for.cond507
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB69_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB69_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB69_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_132
.LBB69_131:                             # %if.else526
                                        #   in Loop: Header=BB69_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_132:                             # %if.end541
                                        #   in Loop: Header=BB69_128 Depth=3
	jmp	.LBB69_133
.LBB69_133:                             # %for.inc542
                                        #   in Loop: Header=BB69_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_128
.LBB69_134:                             # %for.end544
                                        #   in Loop: Header=BB69_126 Depth=2
	jmp	.LBB69_135
.LBB69_135:                             # %for.inc545
                                        #   in Loop: Header=BB69_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_126
.LBB69_136:                             # %for.end547
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_137:                             # %for.cond548
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB69_137 Depth=2
	movl	$0, -4(%rbp)
.LBB69_139:                             # %for.cond551
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB69_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB69_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB69_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_143
.LBB69_142:                             # %if.else570
                                        #   in Loop: Header=BB69_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_143:                             # %if.end585
                                        #   in Loop: Header=BB69_139 Depth=3
	jmp	.LBB69_144
.LBB69_144:                             # %for.inc586
                                        #   in Loop: Header=BB69_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_139
.LBB69_145:                             # %for.end588
                                        #   in Loop: Header=BB69_137 Depth=2
	jmp	.LBB69_146
.LBB69_146:                             # %for.inc589
                                        #   in Loop: Header=BB69_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_137
.LBB69_147:                             # %for.end591
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_148:                             # %for.cond592
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB69_148 Depth=2
	movl	$0, -4(%rbp)
.LBB69_150:                             # %for.cond595
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB69_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB69_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_154
.LBB69_153:                             # %if.else614
                                        #   in Loop: Header=BB69_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_154:                             # %if.end629
                                        #   in Loop: Header=BB69_150 Depth=3
	jmp	.LBB69_155
.LBB69_155:                             # %for.inc630
                                        #   in Loop: Header=BB69_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_150
.LBB69_156:                             # %for.end632
                                        #   in Loop: Header=BB69_148 Depth=2
	jmp	.LBB69_157
.LBB69_157:                             # %for.inc633
                                        #   in Loop: Header=BB69_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_148
.LBB69_158:                             # %for.end635
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	$0, -8(%rbp)
.LBB69_159:                             # %for.cond636
                                        #   Parent Loop BB69_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB69_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB69_159 Depth=2
	movl	$0, -4(%rbp)
.LBB69_161:                             # %for.cond639
                                        #   Parent Loop BB69_1 Depth=1
                                        #     Parent Loop BB69_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB69_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB69_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB69_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB69_165
.LBB69_164:                             # %if.else658
                                        #   in Loop: Header=BB69_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB69_165:                             # %if.end673
                                        #   in Loop: Header=BB69_161 Depth=3
	jmp	.LBB69_166
.LBB69_166:                             # %for.inc674
                                        #   in Loop: Header=BB69_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_161
.LBB69_167:                             # %for.end676
                                        #   in Loop: Header=BB69_159 Depth=2
	jmp	.LBB69_168
.LBB69_168:                             # %for.inc677
                                        #   in Loop: Header=BB69_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_159
.LBB69_169:                             # %for.end679
                                        #   in Loop: Header=BB69_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB69_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB69_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB69_171:                             # %if.end682
                                        #   in Loop: Header=BB69_1 Depth=1
	jmp	.LBB69_172
.LBB69_172:                             # %for.inc683
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_1
.LBB69_173:                             # %for.end685
	cmpl	$98262784, -48(%rbp)    # imm = 0x5DB5F00
	jne	.LBB69_175
.LBB69_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_174
.Lfunc_end69:
	.size	GetCtxModelNumber.62, .Lfunc_end69-GetCtxModelNumber.62
	.cfi_endproc
                                        # -- End function
	.globl	SetCtxModelNumber.63    # -- Begin function SetCtxModelNumber.63
	.p2align	4, 0x90
	.type	SetCtxModelNumber.63,@function
SetCtxModelNumber.63:                   # @SetCtxModelNumber.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1961547492, -16(%rbp)  # imm = 0x74EAD6E4
	movq	img, %rax
	movl	72444(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movl	12(%rax), %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	$0, 72520(%rax)
	jmp	.LBB70_11
.LBB70_2:                               # %if.end
	movq	input, %rax
	cmpl	$0, 3212(%rax)
	jne	.LBB70_4
# %bb.3:                                # %if.then3
	movq	input, %rax
	movl	3216(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB70_11
.LBB70_4:                               # %if.end6
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB70_6
# %bb.5:                                # %if.then11
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB70_11
.LBB70_6:                               # %if.else
	cmpl	$0, -4(%rbp)
	je	.LBB70_9
# %bb.7:                                # %land.lhs.true
	movq	initialized, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$0, (%rax,%rcx,4)
	je	.LBB70_9
# %bb.8:                                # %if.then27
	movq	model_number, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movl	%eax, 72520(%rcx)
	jmp	.LBB70_10
.LBB70_9:                               # %if.else36
	movq	img, %rax
	movl	$0, 72520(%rax)
.LBB70_10:                              # %if.end38
	jmp	.LBB70_11
.LBB70_11:                              # %if.end39
	cmpl	$1961547492, -16(%rbp)  # imm = 0x74EAD6E4
	jne	.LBB70_13
.LBB70_12:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_13:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_12
.Lfunc_end70:
	.size	SetCtxModelNumber.63, .Lfunc_end70-SetCtxModelNumber.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.64
.LCPI71_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.64
	.p2align	4, 0x90
	.type	GetCtxModelNumber.64,@function
GetCtxModelNumber.64:                   # @GetCtxModelNumber.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1911807293, -44(%rbp)  # imm = 0x71F3DD3D
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
                                        #       Child Loop BB71_5 Depth 3
                                        #     Child Loop BB71_14 Depth 2
                                        #       Child Loop BB71_16 Depth 3
                                        #     Child Loop BB71_25 Depth 2
                                        #       Child Loop BB71_27 Depth 3
                                        #     Child Loop BB71_36 Depth 2
                                        #       Child Loop BB71_38 Depth 3
                                        #     Child Loop BB71_47 Depth 2
                                        #     Child Loop BB71_54 Depth 2
                                        #     Child Loop BB71_61 Depth 2
                                        #     Child Loop BB71_68 Depth 2
                                        #     Child Loop BB71_75 Depth 2
                                        #     Child Loop BB71_82 Depth 2
                                        #       Child Loop BB71_84 Depth 3
                                        #     Child Loop BB71_93 Depth 2
                                        #       Child Loop BB71_95 Depth 3
                                        #     Child Loop BB71_104 Depth 2
                                        #       Child Loop BB71_106 Depth 3
                                        #     Child Loop BB71_115 Depth 2
                                        #       Child Loop BB71_117 Depth 3
                                        #     Child Loop BB71_126 Depth 2
                                        #       Child Loop BB71_128 Depth 3
                                        #     Child Loop BB71_137 Depth 2
                                        #       Child Loop BB71_139 Depth 3
                                        #     Child Loop BB71_148 Depth 2
                                        #       Child Loop BB71_150 Depth 3
                                        #     Child Loop BB71_159 Depth 2
                                        #       Child Loop BB71_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB71_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB71_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$0, -4(%rbp)
.LBB71_5:                               # %for.cond5
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB71_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB71_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB71_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_9
.LBB71_8:                               # %if.else
                                        #   in Loop: Header=BB71_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_9:                               # %if.end
                                        #   in Loop: Header=BB71_5 Depth=3
	jmp	.LBB71_10
.LBB71_10:                              # %for.inc
                                        #   in Loop: Header=BB71_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_5
.LBB71_11:                              # %for.end
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_12
.LBB71_12:                              # %for.inc33
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_3
.LBB71_13:                              # %for.end35
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_14:                              # %for.cond36
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB71_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	$0, -4(%rbp)
.LBB71_16:                              # %for.cond39
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB71_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB71_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB71_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_20
.LBB71_19:                              # %if.else58
                                        #   in Loop: Header=BB71_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_20:                              # %if.end73
                                        #   in Loop: Header=BB71_16 Depth=3
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc74
                                        #   in Loop: Header=BB71_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_16
.LBB71_22:                              # %for.end76
                                        #   in Loop: Header=BB71_14 Depth=2
	jmp	.LBB71_23
.LBB71_23:                              # %for.inc77
                                        #   in Loop: Header=BB71_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_14
.LBB71_24:                              # %for.end79
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_25:                              # %for.cond80
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB71_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	$0, -4(%rbp)
.LBB71_27:                              # %for.cond83
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB71_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB71_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB71_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_31
.LBB71_30:                              # %if.else102
                                        #   in Loop: Header=BB71_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_31:                              # %if.end117
                                        #   in Loop: Header=BB71_27 Depth=3
	jmp	.LBB71_32
.LBB71_32:                              # %for.inc118
                                        #   in Loop: Header=BB71_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_27
.LBB71_33:                              # %for.end120
                                        #   in Loop: Header=BB71_25 Depth=2
	jmp	.LBB71_34
.LBB71_34:                              # %for.inc121
                                        #   in Loop: Header=BB71_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_25
.LBB71_35:                              # %for.end123
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_36:                              # %for.cond124
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB71_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB71_36 Depth=2
	movl	$0, -4(%rbp)
.LBB71_38:                              # %for.cond127
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB71_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB71_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB71_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_42
.LBB71_41:                              # %if.else146
                                        #   in Loop: Header=BB71_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_42:                              # %if.end161
                                        #   in Loop: Header=BB71_38 Depth=3
	jmp	.LBB71_43
.LBB71_43:                              # %for.inc162
                                        #   in Loop: Header=BB71_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_38
.LBB71_44:                              # %for.end164
                                        #   in Loop: Header=BB71_36 Depth=2
	jmp	.LBB71_45
.LBB71_45:                              # %for.inc165
                                        #   in Loop: Header=BB71_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_36
.LBB71_46:                              # %for.end167
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_47:                              # %for.cond168
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_51
.LBB71_50:                              # %if.else184
                                        #   in Loop: Header=BB71_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_51:                              # %if.end196
                                        #   in Loop: Header=BB71_47 Depth=2
	jmp	.LBB71_52
.LBB71_52:                              # %for.inc197
                                        #   in Loop: Header=BB71_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_47
.LBB71_53:                              # %for.end199
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_54:                              # %for.cond200
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB71_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB71_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_58
.LBB71_57:                              # %if.else216
                                        #   in Loop: Header=BB71_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_58:                              # %if.end228
                                        #   in Loop: Header=BB71_54 Depth=2
	jmp	.LBB71_59
.LBB71_59:                              # %for.inc229
                                        #   in Loop: Header=BB71_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_54
.LBB71_60:                              # %for.end231
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_61:                              # %for.cond232
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB71_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_65
.LBB71_64:                              # %if.else248
                                        #   in Loop: Header=BB71_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_65:                              # %if.end260
                                        #   in Loop: Header=BB71_61 Depth=2
	jmp	.LBB71_66
.LBB71_66:                              # %for.inc261
                                        #   in Loop: Header=BB71_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_61
.LBB71_67:                              # %for.end263
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_68:                              # %for.cond264
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB71_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB71_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB71_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_72
.LBB71_71:                              # %if.else280
                                        #   in Loop: Header=BB71_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_72:                              # %if.end292
                                        #   in Loop: Header=BB71_68 Depth=2
	jmp	.LBB71_73
.LBB71_73:                              # %for.inc293
                                        #   in Loop: Header=BB71_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_68
.LBB71_74:                              # %for.end295
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -4(%rbp)
.LBB71_75:                              # %for.cond296
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB71_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB71_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_79
.LBB71_78:                              # %if.else312
                                        #   in Loop: Header=BB71_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_79:                              # %if.end324
                                        #   in Loop: Header=BB71_75 Depth=2
	jmp	.LBB71_80
.LBB71_80:                              # %for.inc325
                                        #   in Loop: Header=BB71_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_75
.LBB71_81:                              # %for.end327
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_82:                              # %for.cond328
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB71_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB71_82 Depth=2
	movl	$0, -4(%rbp)
.LBB71_84:                              # %for.cond331
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB71_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB71_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB71_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_88
.LBB71_87:                              # %if.else350
                                        #   in Loop: Header=BB71_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_88:                              # %if.end365
                                        #   in Loop: Header=BB71_84 Depth=3
	jmp	.LBB71_89
.LBB71_89:                              # %for.inc366
                                        #   in Loop: Header=BB71_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_84
.LBB71_90:                              # %for.end368
                                        #   in Loop: Header=BB71_82 Depth=2
	jmp	.LBB71_91
.LBB71_91:                              # %for.inc369
                                        #   in Loop: Header=BB71_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_82
.LBB71_92:                              # %for.end371
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_93:                              # %for.cond372
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	$0, -4(%rbp)
.LBB71_95:                              # %for.cond375
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB71_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB71_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB71_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_99
.LBB71_98:                              # %if.else394
                                        #   in Loop: Header=BB71_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_99:                              # %if.end409
                                        #   in Loop: Header=BB71_95 Depth=3
	jmp	.LBB71_100
.LBB71_100:                             # %for.inc410
                                        #   in Loop: Header=BB71_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_95
.LBB71_101:                             # %for.end412
                                        #   in Loop: Header=BB71_93 Depth=2
	jmp	.LBB71_102
.LBB71_102:                             # %for.inc413
                                        #   in Loop: Header=BB71_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_93
.LBB71_103:                             # %for.end415
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_104:                             # %for.cond416
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB71_104 Depth=2
	movl	$0, -4(%rbp)
.LBB71_106:                             # %for.cond419
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB71_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB71_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_110
.LBB71_109:                             # %if.else438
                                        #   in Loop: Header=BB71_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_110:                             # %if.end453
                                        #   in Loop: Header=BB71_106 Depth=3
	jmp	.LBB71_111
.LBB71_111:                             # %for.inc454
                                        #   in Loop: Header=BB71_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_106
.LBB71_112:                             # %for.end456
                                        #   in Loop: Header=BB71_104 Depth=2
	jmp	.LBB71_113
.LBB71_113:                             # %for.inc457
                                        #   in Loop: Header=BB71_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_104
.LBB71_114:                             # %for.end459
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_115:                             # %for.cond460
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB71_115 Depth=2
	movl	$0, -4(%rbp)
.LBB71_117:                             # %for.cond463
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB71_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB71_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_121
.LBB71_120:                             # %if.else482
                                        #   in Loop: Header=BB71_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_121:                             # %if.end497
                                        #   in Loop: Header=BB71_117 Depth=3
	jmp	.LBB71_122
.LBB71_122:                             # %for.inc498
                                        #   in Loop: Header=BB71_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_117
.LBB71_123:                             # %for.end500
                                        #   in Loop: Header=BB71_115 Depth=2
	jmp	.LBB71_124
.LBB71_124:                             # %for.inc501
                                        #   in Loop: Header=BB71_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_115
.LBB71_125:                             # %for.end503
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_126:                             # %for.cond504
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	$0, -4(%rbp)
.LBB71_128:                             # %for.cond507
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB71_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_132
.LBB71_131:                             # %if.else526
                                        #   in Loop: Header=BB71_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_132:                             # %if.end541
                                        #   in Loop: Header=BB71_128 Depth=3
	jmp	.LBB71_133
.LBB71_133:                             # %for.inc542
                                        #   in Loop: Header=BB71_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_128
.LBB71_134:                             # %for.end544
                                        #   in Loop: Header=BB71_126 Depth=2
	jmp	.LBB71_135
.LBB71_135:                             # %for.inc545
                                        #   in Loop: Header=BB71_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_126
.LBB71_136:                             # %for.end547
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_137:                             # %for.cond548
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB71_137 Depth=2
	movl	$0, -4(%rbp)
.LBB71_139:                             # %for.cond551
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB71_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB71_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB71_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_143
.LBB71_142:                             # %if.else570
                                        #   in Loop: Header=BB71_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_143:                             # %if.end585
                                        #   in Loop: Header=BB71_139 Depth=3
	jmp	.LBB71_144
.LBB71_144:                             # %for.inc586
                                        #   in Loop: Header=BB71_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_139
.LBB71_145:                             # %for.end588
                                        #   in Loop: Header=BB71_137 Depth=2
	jmp	.LBB71_146
.LBB71_146:                             # %for.inc589
                                        #   in Loop: Header=BB71_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_137
.LBB71_147:                             # %for.end591
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_148:                             # %for.cond592
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB71_148 Depth=2
	movl	$0, -4(%rbp)
.LBB71_150:                             # %for.cond595
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB71_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB71_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_154
.LBB71_153:                             # %if.else614
                                        #   in Loop: Header=BB71_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_154:                             # %if.end629
                                        #   in Loop: Header=BB71_150 Depth=3
	jmp	.LBB71_155
.LBB71_155:                             # %for.inc630
                                        #   in Loop: Header=BB71_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_150
.LBB71_156:                             # %for.end632
                                        #   in Loop: Header=BB71_148 Depth=2
	jmp	.LBB71_157
.LBB71_157:                             # %for.inc633
                                        #   in Loop: Header=BB71_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_148
.LBB71_158:                             # %for.end635
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_159:                             # %for.cond636
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB71_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB71_159 Depth=2
	movl	$0, -4(%rbp)
.LBB71_161:                             # %for.cond639
                                        #   Parent Loop BB71_1 Depth=1
                                        #     Parent Loop BB71_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB71_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB71_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB71_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB71_165
.LBB71_164:                             # %if.else658
                                        #   in Loop: Header=BB71_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB71_165:                             # %if.end673
                                        #   in Loop: Header=BB71_161 Depth=3
	jmp	.LBB71_166
.LBB71_166:                             # %for.inc674
                                        #   in Loop: Header=BB71_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_161
.LBB71_167:                             # %for.end676
                                        #   in Loop: Header=BB71_159 Depth=2
	jmp	.LBB71_168
.LBB71_168:                             # %for.inc677
                                        #   in Loop: Header=BB71_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_159
.LBB71_169:                             # %for.end679
                                        #   in Loop: Header=BB71_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB71_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB71_171:                             # %if.end682
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_172
.LBB71_172:                             # %for.inc683
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_1
.LBB71_173:                             # %for.end685
	cmpl	$1911807293, -44(%rbp)  # imm = 0x71F3DD3D
	jne	.LBB71_175
.LBB71_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_174
.Lfunc_end71:
	.size	GetCtxModelNumber.64, .Lfunc_end71-GetCtxModelNumber.64
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.65
.LCPI72_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.65
	.p2align	4, 0x90
	.type	GetCtxModelNumber.65,@function
GetCtxModelNumber.65:                   # @GetCtxModelNumber.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI72_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1145679143, -48(%rbp)  # imm = 0x4449AD27
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB72_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_3 Depth 2
                                        #       Child Loop BB72_5 Depth 3
                                        #     Child Loop BB72_14 Depth 2
                                        #       Child Loop BB72_16 Depth 3
                                        #     Child Loop BB72_25 Depth 2
                                        #       Child Loop BB72_27 Depth 3
                                        #     Child Loop BB72_36 Depth 2
                                        #       Child Loop BB72_38 Depth 3
                                        #     Child Loop BB72_47 Depth 2
                                        #     Child Loop BB72_54 Depth 2
                                        #     Child Loop BB72_61 Depth 2
                                        #     Child Loop BB72_68 Depth 2
                                        #     Child Loop BB72_75 Depth 2
                                        #     Child Loop BB72_82 Depth 2
                                        #       Child Loop BB72_84 Depth 3
                                        #     Child Loop BB72_93 Depth 2
                                        #       Child Loop BB72_95 Depth 3
                                        #     Child Loop BB72_104 Depth 2
                                        #       Child Loop BB72_106 Depth 3
                                        #     Child Loop BB72_115 Depth 2
                                        #       Child Loop BB72_117 Depth 3
                                        #     Child Loop BB72_126 Depth 2
                                        #       Child Loop BB72_128 Depth 3
                                        #     Child Loop BB72_137 Depth 2
                                        #       Child Loop BB72_139 Depth 3
                                        #     Child Loop BB72_148 Depth 2
                                        #       Child Loop BB72_150 Depth 3
                                        #     Child Loop BB72_159 Depth 2
                                        #       Child Loop BB72_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB72_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB72_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB72_3:                               # %for.cond2
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB72_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	$0, -4(%rbp)
.LBB72_5:                               # %for.cond5
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB72_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_9
.LBB72_8:                               # %if.else
                                        #   in Loop: Header=BB72_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_9:                               # %if.end
                                        #   in Loop: Header=BB72_5 Depth=3
	jmp	.LBB72_10
.LBB72_10:                              # %for.inc
                                        #   in Loop: Header=BB72_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_5
.LBB72_11:                              # %for.end
                                        #   in Loop: Header=BB72_3 Depth=2
	jmp	.LBB72_12
.LBB72_12:                              # %for.inc33
                                        #   in Loop: Header=BB72_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_3
.LBB72_13:                              # %for.end35
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_14:                              # %for.cond36
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB72_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	$0, -4(%rbp)
.LBB72_16:                              # %for.cond39
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB72_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB72_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB72_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_20
.LBB72_19:                              # %if.else58
                                        #   in Loop: Header=BB72_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_20:                              # %if.end73
                                        #   in Loop: Header=BB72_16 Depth=3
	jmp	.LBB72_21
.LBB72_21:                              # %for.inc74
                                        #   in Loop: Header=BB72_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_16
.LBB72_22:                              # %for.end76
                                        #   in Loop: Header=BB72_14 Depth=2
	jmp	.LBB72_23
.LBB72_23:                              # %for.inc77
                                        #   in Loop: Header=BB72_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_14
.LBB72_24:                              # %for.end79
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_25:                              # %for.cond80
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB72_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB72_25 Depth=2
	movl	$0, -4(%rbp)
.LBB72_27:                              # %for.cond83
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB72_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB72_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB72_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_31
.LBB72_30:                              # %if.else102
                                        #   in Loop: Header=BB72_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_31:                              # %if.end117
                                        #   in Loop: Header=BB72_27 Depth=3
	jmp	.LBB72_32
.LBB72_32:                              # %for.inc118
                                        #   in Loop: Header=BB72_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_27
.LBB72_33:                              # %for.end120
                                        #   in Loop: Header=BB72_25 Depth=2
	jmp	.LBB72_34
.LBB72_34:                              # %for.inc121
                                        #   in Loop: Header=BB72_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_25
.LBB72_35:                              # %for.end123
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_36:                              # %for.cond124
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB72_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB72_36 Depth=2
	movl	$0, -4(%rbp)
.LBB72_38:                              # %for.cond127
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB72_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB72_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB72_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_42
.LBB72_41:                              # %if.else146
                                        #   in Loop: Header=BB72_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_42:                              # %if.end161
                                        #   in Loop: Header=BB72_38 Depth=3
	jmp	.LBB72_43
.LBB72_43:                              # %for.inc162
                                        #   in Loop: Header=BB72_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_38
.LBB72_44:                              # %for.end164
                                        #   in Loop: Header=BB72_36 Depth=2
	jmp	.LBB72_45
.LBB72_45:                              # %for.inc165
                                        #   in Loop: Header=BB72_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_36
.LBB72_46:                              # %for.end167
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_47:                              # %for.cond168
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB72_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB72_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_51
.LBB72_50:                              # %if.else184
                                        #   in Loop: Header=BB72_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_51:                              # %if.end196
                                        #   in Loop: Header=BB72_47 Depth=2
	jmp	.LBB72_52
.LBB72_52:                              # %for.inc197
                                        #   in Loop: Header=BB72_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_47
.LBB72_53:                              # %for.end199
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_54:                              # %for.cond200
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB72_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB72_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_58
.LBB72_57:                              # %if.else216
                                        #   in Loop: Header=BB72_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_58:                              # %if.end228
                                        #   in Loop: Header=BB72_54 Depth=2
	jmp	.LBB72_59
.LBB72_59:                              # %for.inc229
                                        #   in Loop: Header=BB72_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_54
.LBB72_60:                              # %for.end231
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_61:                              # %for.cond232
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB72_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_65
.LBB72_64:                              # %if.else248
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_65:                              # %if.end260
                                        #   in Loop: Header=BB72_61 Depth=2
	jmp	.LBB72_66
.LBB72_66:                              # %for.inc261
                                        #   in Loop: Header=BB72_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_61
.LBB72_67:                              # %for.end263
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_68:                              # %for.cond264
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB72_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB72_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB72_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_72
.LBB72_71:                              # %if.else280
                                        #   in Loop: Header=BB72_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_72:                              # %if.end292
                                        #   in Loop: Header=BB72_68 Depth=2
	jmp	.LBB72_73
.LBB72_73:                              # %for.inc293
                                        #   in Loop: Header=BB72_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_68
.LBB72_74:                              # %for.end295
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -4(%rbp)
.LBB72_75:                              # %for.cond296
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB72_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB72_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB72_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_79
.LBB72_78:                              # %if.else312
                                        #   in Loop: Header=BB72_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_79:                              # %if.end324
                                        #   in Loop: Header=BB72_75 Depth=2
	jmp	.LBB72_80
.LBB72_80:                              # %for.inc325
                                        #   in Loop: Header=BB72_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_75
.LBB72_81:                              # %for.end327
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_82:                              # %for.cond328
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB72_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB72_82 Depth=2
	movl	$0, -4(%rbp)
.LBB72_84:                              # %for.cond331
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB72_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB72_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB72_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_88
.LBB72_87:                              # %if.else350
                                        #   in Loop: Header=BB72_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_88:                              # %if.end365
                                        #   in Loop: Header=BB72_84 Depth=3
	jmp	.LBB72_89
.LBB72_89:                              # %for.inc366
                                        #   in Loop: Header=BB72_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_84
.LBB72_90:                              # %for.end368
                                        #   in Loop: Header=BB72_82 Depth=2
	jmp	.LBB72_91
.LBB72_91:                              # %for.inc369
                                        #   in Loop: Header=BB72_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_82
.LBB72_92:                              # %for.end371
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_93:                              # %for.cond372
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB72_93 Depth=2
	movl	$0, -4(%rbp)
.LBB72_95:                              # %for.cond375
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB72_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB72_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB72_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_99
.LBB72_98:                              # %if.else394
                                        #   in Loop: Header=BB72_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_99:                              # %if.end409
                                        #   in Loop: Header=BB72_95 Depth=3
	jmp	.LBB72_100
.LBB72_100:                             # %for.inc410
                                        #   in Loop: Header=BB72_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_95
.LBB72_101:                             # %for.end412
                                        #   in Loop: Header=BB72_93 Depth=2
	jmp	.LBB72_102
.LBB72_102:                             # %for.inc413
                                        #   in Loop: Header=BB72_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_93
.LBB72_103:                             # %for.end415
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_104:                             # %for.cond416
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB72_104 Depth=2
	movl	$0, -4(%rbp)
.LBB72_106:                             # %for.cond419
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB72_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB72_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_110
.LBB72_109:                             # %if.else438
                                        #   in Loop: Header=BB72_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_110:                             # %if.end453
                                        #   in Loop: Header=BB72_106 Depth=3
	jmp	.LBB72_111
.LBB72_111:                             # %for.inc454
                                        #   in Loop: Header=BB72_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_106
.LBB72_112:                             # %for.end456
                                        #   in Loop: Header=BB72_104 Depth=2
	jmp	.LBB72_113
.LBB72_113:                             # %for.inc457
                                        #   in Loop: Header=BB72_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_104
.LBB72_114:                             # %for.end459
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_115:                             # %for.cond460
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB72_115 Depth=2
	movl	$0, -4(%rbp)
.LBB72_117:                             # %for.cond463
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB72_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB72_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_121
.LBB72_120:                             # %if.else482
                                        #   in Loop: Header=BB72_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_121:                             # %if.end497
                                        #   in Loop: Header=BB72_117 Depth=3
	jmp	.LBB72_122
.LBB72_122:                             # %for.inc498
                                        #   in Loop: Header=BB72_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_117
.LBB72_123:                             # %for.end500
                                        #   in Loop: Header=BB72_115 Depth=2
	jmp	.LBB72_124
.LBB72_124:                             # %for.inc501
                                        #   in Loop: Header=BB72_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_115
.LBB72_125:                             # %for.end503
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_126:                             # %for.cond504
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB72_126 Depth=2
	movl	$0, -4(%rbp)
.LBB72_128:                             # %for.cond507
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB72_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB72_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB72_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_132
.LBB72_131:                             # %if.else526
                                        #   in Loop: Header=BB72_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_132:                             # %if.end541
                                        #   in Loop: Header=BB72_128 Depth=3
	jmp	.LBB72_133
.LBB72_133:                             # %for.inc542
                                        #   in Loop: Header=BB72_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_128
.LBB72_134:                             # %for.end544
                                        #   in Loop: Header=BB72_126 Depth=2
	jmp	.LBB72_135
.LBB72_135:                             # %for.inc545
                                        #   in Loop: Header=BB72_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_126
.LBB72_136:                             # %for.end547
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_137:                             # %for.cond548
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB72_137 Depth=2
	movl	$0, -4(%rbp)
.LBB72_139:                             # %for.cond551
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB72_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB72_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB72_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_143
.LBB72_142:                             # %if.else570
                                        #   in Loop: Header=BB72_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_143:                             # %if.end585
                                        #   in Loop: Header=BB72_139 Depth=3
	jmp	.LBB72_144
.LBB72_144:                             # %for.inc586
                                        #   in Loop: Header=BB72_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_139
.LBB72_145:                             # %for.end588
                                        #   in Loop: Header=BB72_137 Depth=2
	jmp	.LBB72_146
.LBB72_146:                             # %for.inc589
                                        #   in Loop: Header=BB72_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_137
.LBB72_147:                             # %for.end591
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_148:                             # %for.cond592
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB72_148 Depth=2
	movl	$0, -4(%rbp)
.LBB72_150:                             # %for.cond595
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB72_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB72_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_154
.LBB72_153:                             # %if.else614
                                        #   in Loop: Header=BB72_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_154:                             # %if.end629
                                        #   in Loop: Header=BB72_150 Depth=3
	jmp	.LBB72_155
.LBB72_155:                             # %for.inc630
                                        #   in Loop: Header=BB72_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_150
.LBB72_156:                             # %for.end632
                                        #   in Loop: Header=BB72_148 Depth=2
	jmp	.LBB72_157
.LBB72_157:                             # %for.inc633
                                        #   in Loop: Header=BB72_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_148
.LBB72_158:                             # %for.end635
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	$0, -8(%rbp)
.LBB72_159:                             # %for.cond636
                                        #   Parent Loop BB72_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB72_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB72_159 Depth=2
	movl	$0, -4(%rbp)
.LBB72_161:                             # %for.cond639
                                        #   Parent Loop BB72_1 Depth=1
                                        #     Parent Loop BB72_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB72_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB72_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB72_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB72_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB72_165
.LBB72_164:                             # %if.else658
                                        #   in Loop: Header=BB72_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB72_165:                             # %if.end673
                                        #   in Loop: Header=BB72_161 Depth=3
	jmp	.LBB72_166
.LBB72_166:                             # %for.inc674
                                        #   in Loop: Header=BB72_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_161
.LBB72_167:                             # %for.end676
                                        #   in Loop: Header=BB72_159 Depth=2
	jmp	.LBB72_168
.LBB72_168:                             # %for.inc677
                                        #   in Loop: Header=BB72_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_159
.LBB72_169:                             # %for.end679
                                        #   in Loop: Header=BB72_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB72_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB72_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB72_171:                             # %if.end682
                                        #   in Loop: Header=BB72_1 Depth=1
	jmp	.LBB72_172
.LBB72_172:                             # %for.inc683
                                        #   in Loop: Header=BB72_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_1
.LBB72_173:                             # %for.end685
	cmpl	$1145679143, -48(%rbp)  # imm = 0x4449AD27
	jne	.LBB72_175
.LBB72_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_174
.Lfunc_end72:
	.size	GetCtxModelNumber.65, .Lfunc_end72-GetCtxModelNumber.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.66
.LCPI73_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.66
	.p2align	4, 0x90
	.type	GetCtxModelNumber.66,@function
GetCtxModelNumber.66:                   # @GetCtxModelNumber.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI73_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$46811766, -44(%rbp)    # imm = 0x2CA4A76
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -48(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
                                        #       Child Loop BB73_5 Depth 3
                                        #     Child Loop BB73_14 Depth 2
                                        #       Child Loop BB73_16 Depth 3
                                        #     Child Loop BB73_25 Depth 2
                                        #       Child Loop BB73_27 Depth 3
                                        #     Child Loop BB73_36 Depth 2
                                        #       Child Loop BB73_38 Depth 3
                                        #     Child Loop BB73_47 Depth 2
                                        #     Child Loop BB73_54 Depth 2
                                        #     Child Loop BB73_61 Depth 2
                                        #     Child Loop BB73_68 Depth 2
                                        #     Child Loop BB73_75 Depth 2
                                        #     Child Loop BB73_82 Depth 2
                                        #       Child Loop BB73_84 Depth 3
                                        #     Child Loop BB73_93 Depth 2
                                        #       Child Loop BB73_95 Depth 3
                                        #     Child Loop BB73_104 Depth 2
                                        #       Child Loop BB73_106 Depth 3
                                        #     Child Loop BB73_115 Depth 2
                                        #       Child Loop BB73_117 Depth 3
                                        #     Child Loop BB73_126 Depth 2
                                        #       Child Loop BB73_128 Depth 3
                                        #     Child Loop BB73_137 Depth 2
                                        #       Child Loop BB73_139 Depth 3
                                        #     Child Loop BB73_148 Depth 2
                                        #       Child Loop BB73_150 Depth 3
                                        #     Child Loop BB73_159 Depth 2
                                        #       Child Loop BB73_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB73_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB73_3:                               # %for.cond2
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB73_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	$0, -4(%rbp)
.LBB73_5:                               # %for.cond5
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB73_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB73_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB73_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_9
.LBB73_8:                               # %if.else
                                        #   in Loop: Header=BB73_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_9:                               # %if.end
                                        #   in Loop: Header=BB73_5 Depth=3
	jmp	.LBB73_10
.LBB73_10:                              # %for.inc
                                        #   in Loop: Header=BB73_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_5
.LBB73_11:                              # %for.end
                                        #   in Loop: Header=BB73_3 Depth=2
	jmp	.LBB73_12
.LBB73_12:                              # %for.inc33
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_13:                              # %for.end35
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_14:                              # %for.cond36
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB73_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	$0, -4(%rbp)
.LBB73_16:                              # %for.cond39
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB73_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB73_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB73_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_20
.LBB73_19:                              # %if.else58
                                        #   in Loop: Header=BB73_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_20:                              # %if.end73
                                        #   in Loop: Header=BB73_16 Depth=3
	jmp	.LBB73_21
.LBB73_21:                              # %for.inc74
                                        #   in Loop: Header=BB73_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_16
.LBB73_22:                              # %for.end76
                                        #   in Loop: Header=BB73_14 Depth=2
	jmp	.LBB73_23
.LBB73_23:                              # %for.inc77
                                        #   in Loop: Header=BB73_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_14
.LBB73_24:                              # %for.end79
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_25:                              # %for.cond80
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB73_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	$0, -4(%rbp)
.LBB73_27:                              # %for.cond83
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB73_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB73_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB73_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_31
.LBB73_30:                              # %if.else102
                                        #   in Loop: Header=BB73_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_31:                              # %if.end117
                                        #   in Loop: Header=BB73_27 Depth=3
	jmp	.LBB73_32
.LBB73_32:                              # %for.inc118
                                        #   in Loop: Header=BB73_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_27
.LBB73_33:                              # %for.end120
                                        #   in Loop: Header=BB73_25 Depth=2
	jmp	.LBB73_34
.LBB73_34:                              # %for.inc121
                                        #   in Loop: Header=BB73_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_25
.LBB73_35:                              # %for.end123
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_36:                              # %for.cond124
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB73_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	$0, -4(%rbp)
.LBB73_38:                              # %for.cond127
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB73_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB73_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB73_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_42
.LBB73_41:                              # %if.else146
                                        #   in Loop: Header=BB73_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_42:                              # %if.end161
                                        #   in Loop: Header=BB73_38 Depth=3
	jmp	.LBB73_43
.LBB73_43:                              # %for.inc162
                                        #   in Loop: Header=BB73_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_38
.LBB73_44:                              # %for.end164
                                        #   in Loop: Header=BB73_36 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc165
                                        #   in Loop: Header=BB73_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_36
.LBB73_46:                              # %for.end167
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_47:                              # %for.cond168
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_51
.LBB73_50:                              # %if.else184
                                        #   in Loop: Header=BB73_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_51:                              # %if.end196
                                        #   in Loop: Header=BB73_47 Depth=2
	jmp	.LBB73_52
.LBB73_52:                              # %for.inc197
                                        #   in Loop: Header=BB73_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_47
.LBB73_53:                              # %for.end199
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_54:                              # %for.cond200
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB73_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB73_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_58
.LBB73_57:                              # %if.else216
                                        #   in Loop: Header=BB73_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_58:                              # %if.end228
                                        #   in Loop: Header=BB73_54 Depth=2
	jmp	.LBB73_59
.LBB73_59:                              # %for.inc229
                                        #   in Loop: Header=BB73_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_54
.LBB73_60:                              # %for.end231
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond232
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB73_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_65
.LBB73_64:                              # %if.else248
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_65:                              # %if.end260
                                        #   in Loop: Header=BB73_61 Depth=2
	jmp	.LBB73_66
.LBB73_66:                              # %for.inc261
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_67:                              # %for.end263
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_68:                              # %for.cond264
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB73_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB73_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB73_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_72
.LBB73_71:                              # %if.else280
                                        #   in Loop: Header=BB73_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_72:                              # %if.end292
                                        #   in Loop: Header=BB73_68 Depth=2
	jmp	.LBB73_73
.LBB73_73:                              # %for.inc293
                                        #   in Loop: Header=BB73_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_68
.LBB73_74:                              # %for.end295
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond296
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB73_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB73_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_79
.LBB73_78:                              # %if.else312
                                        #   in Loop: Header=BB73_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_79:                              # %if.end324
                                        #   in Loop: Header=BB73_75 Depth=2
	jmp	.LBB73_80
.LBB73_80:                              # %for.inc325
                                        #   in Loop: Header=BB73_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_81:                              # %for.end327
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_82:                              # %for.cond328
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB73_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	$0, -4(%rbp)
.LBB73_84:                              # %for.cond331
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB73_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB73_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB73_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_88
.LBB73_87:                              # %if.else350
                                        #   in Loop: Header=BB73_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_88:                              # %if.end365
                                        #   in Loop: Header=BB73_84 Depth=3
	jmp	.LBB73_89
.LBB73_89:                              # %for.inc366
                                        #   in Loop: Header=BB73_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_84
.LBB73_90:                              # %for.end368
                                        #   in Loop: Header=BB73_82 Depth=2
	jmp	.LBB73_91
.LBB73_91:                              # %for.inc369
                                        #   in Loop: Header=BB73_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_82
.LBB73_92:                              # %for.end371
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_93:                              # %for.cond372
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	$0, -4(%rbp)
.LBB73_95:                              # %for.cond375
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB73_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB73_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB73_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_99
.LBB73_98:                              # %if.else394
                                        #   in Loop: Header=BB73_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_99:                              # %if.end409
                                        #   in Loop: Header=BB73_95 Depth=3
	jmp	.LBB73_100
.LBB73_100:                             # %for.inc410
                                        #   in Loop: Header=BB73_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_95
.LBB73_101:                             # %for.end412
                                        #   in Loop: Header=BB73_93 Depth=2
	jmp	.LBB73_102
.LBB73_102:                             # %for.inc413
                                        #   in Loop: Header=BB73_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_93
.LBB73_103:                             # %for.end415
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_104:                             # %for.cond416
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	$0, -4(%rbp)
.LBB73_106:                             # %for.cond419
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB73_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB73_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_110
.LBB73_109:                             # %if.else438
                                        #   in Loop: Header=BB73_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_110:                             # %if.end453
                                        #   in Loop: Header=BB73_106 Depth=3
	jmp	.LBB73_111
.LBB73_111:                             # %for.inc454
                                        #   in Loop: Header=BB73_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_106
.LBB73_112:                             # %for.end456
                                        #   in Loop: Header=BB73_104 Depth=2
	jmp	.LBB73_113
.LBB73_113:                             # %for.inc457
                                        #   in Loop: Header=BB73_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_104
.LBB73_114:                             # %for.end459
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_115:                             # %for.cond460
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	$0, -4(%rbp)
.LBB73_117:                             # %for.cond463
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB73_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB73_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_121
.LBB73_120:                             # %if.else482
                                        #   in Loop: Header=BB73_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_121:                             # %if.end497
                                        #   in Loop: Header=BB73_117 Depth=3
	jmp	.LBB73_122
.LBB73_122:                             # %for.inc498
                                        #   in Loop: Header=BB73_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_117
.LBB73_123:                             # %for.end500
                                        #   in Loop: Header=BB73_115 Depth=2
	jmp	.LBB73_124
.LBB73_124:                             # %for.inc501
                                        #   in Loop: Header=BB73_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_115
.LBB73_125:                             # %for.end503
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_126:                             # %for.cond504
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	$0, -4(%rbp)
.LBB73_128:                             # %for.cond507
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB73_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB73_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB73_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_132
.LBB73_131:                             # %if.else526
                                        #   in Loop: Header=BB73_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_132:                             # %if.end541
                                        #   in Loop: Header=BB73_128 Depth=3
	jmp	.LBB73_133
.LBB73_133:                             # %for.inc542
                                        #   in Loop: Header=BB73_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_128
.LBB73_134:                             # %for.end544
                                        #   in Loop: Header=BB73_126 Depth=2
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc545
                                        #   in Loop: Header=BB73_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_126
.LBB73_136:                             # %for.end547
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_137:                             # %for.cond548
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	$0, -4(%rbp)
.LBB73_139:                             # %for.cond551
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB73_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB73_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB73_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_143
.LBB73_142:                             # %if.else570
                                        #   in Loop: Header=BB73_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_143:                             # %if.end585
                                        #   in Loop: Header=BB73_139 Depth=3
	jmp	.LBB73_144
.LBB73_144:                             # %for.inc586
                                        #   in Loop: Header=BB73_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_139
.LBB73_145:                             # %for.end588
                                        #   in Loop: Header=BB73_137 Depth=2
	jmp	.LBB73_146
.LBB73_146:                             # %for.inc589
                                        #   in Loop: Header=BB73_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_137
.LBB73_147:                             # %for.end591
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_148:                             # %for.cond592
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	$0, -4(%rbp)
.LBB73_150:                             # %for.cond595
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB73_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB73_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_154
.LBB73_153:                             # %if.else614
                                        #   in Loop: Header=BB73_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_154:                             # %if.end629
                                        #   in Loop: Header=BB73_150 Depth=3
	jmp	.LBB73_155
.LBB73_155:                             # %for.inc630
                                        #   in Loop: Header=BB73_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_150
.LBB73_156:                             # %for.end632
                                        #   in Loop: Header=BB73_148 Depth=2
	jmp	.LBB73_157
.LBB73_157:                             # %for.inc633
                                        #   in Loop: Header=BB73_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_148
.LBB73_158:                             # %for.end635
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_159:                             # %for.cond636
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB73_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	$0, -4(%rbp)
.LBB73_161:                             # %for.cond639
                                        #   Parent Loop BB73_1 Depth=1
                                        #     Parent Loop BB73_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB73_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB73_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB73_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB73_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB73_165
.LBB73_164:                             # %if.else658
                                        #   in Loop: Header=BB73_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB73_165:                             # %if.end673
                                        #   in Loop: Header=BB73_161 Depth=3
	jmp	.LBB73_166
.LBB73_166:                             # %for.inc674
                                        #   in Loop: Header=BB73_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_161
.LBB73_167:                             # %for.end676
                                        #   in Loop: Header=BB73_159 Depth=2
	jmp	.LBB73_168
.LBB73_168:                             # %for.inc677
                                        #   in Loop: Header=BB73_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_159
.LBB73_169:                             # %for.end679
                                        #   in Loop: Header=BB73_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB73_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB73_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB73_171:                             # %if.end682
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_172
.LBB73_172:                             # %for.inc683
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_1
.LBB73_173:                             # %for.end685
	cmpl	$46811766, -44(%rbp)    # imm = 0x2CA4A76
	jne	.LBB73_175
.LBB73_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_174
.Lfunc_end73:
	.size	GetCtxModelNumber.66, .Lfunc_end73-GetCtxModelNumber.66
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.67
.LCPI74_0:
	.quad	4607182418800017408     # double 1
.LCPI74_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI74_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI74_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.67
	.p2align	4, 0x90
	.type	XRate.67,@function
XRate.67:                               # @XRate.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$71083472, -32(%rbp)    # imm = 0x43CA5D0
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB74_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB74_3
.LBB74_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB74_3:                               # %cond.end
	vmovsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI74_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI74_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI74_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB74_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI74_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB74_6
.LBB74_5:                               # %cond.false6
	vmovsd	.LCPI74_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI74_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI74_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB74_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB74_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB74_9
.LBB74_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB74_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB74_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB74_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB74_13
.LBB74_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB74_13:                              # %cond.end26
	jmp	.LBB74_15
.LBB74_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB74_15
.LBB74_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB74_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB74_18
.LBB74_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB74_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$71083472, -32(%rbp)    # imm = 0x43CA5D0
	jne	.LBB74_20
.LBB74_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB74_19
.Lfunc_end74:
	.size	XRate.67, .Lfunc_end74-XRate.67
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.68
.LCPI75_0:
	.quad	4611686018427387904     # double 2
.LCPI75_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.68
	.p2align	4, 0x90
	.type	create_context_memory.68,@function
create_context_memory.68:               # @create_context_memory.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$134442311, -20(%rbp)   # imm = 0x8036D47
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB75_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB75_3
.LBB75_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB75_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB75_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB75_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB75_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB75_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB75_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_11:                              # %if.end10
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB75_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_13:                              # %if.end16
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	$0, -8(%rbp)
.LBB75_14:                              # %for.cond17
                                        #   Parent Loop BB75_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB75_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB75_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB75_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB75_17:                              # %if.end28
                                        #   in Loop: Header=BB75_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB75_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB75_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB75_19:                              # %if.end39
                                        #   in Loop: Header=BB75_14 Depth=2
	jmp	.LBB75_20
.LBB75_20:                              # %for.inc
                                        #   in Loop: Header=BB75_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_14
.LBB75_21:                              # %for.end
                                        #   in Loop: Header=BB75_8 Depth=1
	jmp	.LBB75_22
.LBB75_22:                              # %for.inc40
                                        #   in Loop: Header=BB75_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_8
.LBB75_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB75_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_26 Depth 2
                                        #       Child Loop BB75_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB75_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	$0, -8(%rbp)
.LBB75_26:                              # %for.cond47
                                        #   Parent Loop BB75_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB75_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	$0, -12(%rbp)
.LBB75_28:                              # %for.cond51
                                        #   Parent Loop BB75_24 Depth=1
                                        #     Parent Loop BB75_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB75_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB75_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB75_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_28
.LBB75_31:                              # %for.end63
                                        #   in Loop: Header=BB75_26 Depth=2
	jmp	.LBB75_32
.LBB75_32:                              # %for.inc64
                                        #   in Loop: Header=BB75_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_26
.LBB75_33:                              # %for.end66
                                        #   in Loop: Header=BB75_24 Depth=1
	jmp	.LBB75_34
.LBB75_34:                              # %for.inc67
                                        #   in Loop: Header=BB75_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_24
.LBB75_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB75_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB75_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB75_36 Depth=1
	vmovsd	.LCPI75_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB75_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_36
.LBB75_39:                              # %for.end98
	cmpl	$134442311, -20(%rbp)   # imm = 0x8036D47
	jne	.LBB75_41
.LBB75_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_40
.Lfunc_end75:
	.size	create_context_memory.68, .Lfunc_end75-create_context_memory.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.69
.LCPI76_0:
	.quad	4611686018427387904     # double 2
.LCPI76_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.69
	.p2align	4, 0x90
	.type	create_context_memory.69,@function
create_context_memory.69:               # @create_context_memory.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$48379179, -20(%rbp)    # imm = 0x2E2352B
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB76_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB76_3
.LBB76_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB76_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB76_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB76_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB76_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB76_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB76_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB76_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB76_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB76_11:                              # %if.end10
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB76_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB76_13:                              # %if.end16
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	$0, -8(%rbp)
.LBB76_14:                              # %for.cond17
                                        #   Parent Loop BB76_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB76_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB76_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB76_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB76_17:                              # %if.end28
                                        #   in Loop: Header=BB76_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB76_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB76_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB76_19:                              # %if.end39
                                        #   in Loop: Header=BB76_14 Depth=2
	jmp	.LBB76_20
.LBB76_20:                              # %for.inc
                                        #   in Loop: Header=BB76_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_14
.LBB76_21:                              # %for.end
                                        #   in Loop: Header=BB76_8 Depth=1
	jmp	.LBB76_22
.LBB76_22:                              # %for.inc40
                                        #   in Loop: Header=BB76_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_8
.LBB76_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB76_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_26 Depth 2
                                        #       Child Loop BB76_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB76_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB76_24 Depth=1
	movl	$0, -8(%rbp)
.LBB76_26:                              # %for.cond47
                                        #   Parent Loop BB76_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB76_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB76_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB76_26 Depth=2
	movl	$0, -12(%rbp)
.LBB76_28:                              # %for.cond51
                                        #   Parent Loop BB76_24 Depth=1
                                        #     Parent Loop BB76_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB76_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB76_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB76_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_28
.LBB76_31:                              # %for.end63
                                        #   in Loop: Header=BB76_26 Depth=2
	jmp	.LBB76_32
.LBB76_32:                              # %for.inc64
                                        #   in Loop: Header=BB76_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_26
.LBB76_33:                              # %for.end66
                                        #   in Loop: Header=BB76_24 Depth=1
	jmp	.LBB76_34
.LBB76_34:                              # %for.inc67
                                        #   in Loop: Header=BB76_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_24
.LBB76_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB76_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB76_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB76_36 Depth=1
	vmovsd	.LCPI76_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB76_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_36
.LBB76_39:                              # %for.end98
	cmpl	$48379179, -20(%rbp)    # imm = 0x2E2352B
	jne	.LBB76_41
.LBB76_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_40
.Lfunc_end76:
	.size	create_context_memory.69, .Lfunc_end76-create_context_memory.69
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function GetCtxModelNumber.70
.LCPI77_0:
	.quad	5055640609639927018     # double 1.0E+30
	.text
	.globl	GetCtxModelNumber.70
	.p2align	4, 0x90
	.type	GetCtxModelNumber.70,@function
GetCtxModelNumber.70:                   # @GetCtxModelNumber.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	vmovsd	.LCPI77_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1189832047, -48(%rbp)  # imm = 0x46EB656F
	movq	%rdi, -64(%rbp)
	movq	%rsi, -40(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	movl	$3, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -44(%rbp)
	vmovsd	%xmm0, -56(%rbp)
	movl	$0, -12(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB77_3 Depth 2
                                        #       Child Loop BB77_5 Depth 3
                                        #     Child Loop BB77_14 Depth 2
                                        #       Child Loop BB77_16 Depth 3
                                        #     Child Loop BB77_25 Depth 2
                                        #       Child Loop BB77_27 Depth 3
                                        #     Child Loop BB77_36 Depth 2
                                        #       Child Loop BB77_38 Depth 3
                                        #     Child Loop BB77_47 Depth 2
                                        #     Child Loop BB77_54 Depth 2
                                        #     Child Loop BB77_61 Depth 2
                                        #     Child Loop BB77_68 Depth 2
                                        #     Child Loop BB77_75 Depth 2
                                        #     Child Loop BB77_82 Depth 2
                                        #       Child Loop BB77_84 Depth 3
                                        #     Child Loop BB77_93 Depth 2
                                        #       Child Loop BB77_95 Depth 3
                                        #     Child Loop BB77_104 Depth 2
                                        #       Child Loop BB77_106 Depth 3
                                        #     Child Loop BB77_115 Depth 2
                                        #       Child Loop BB77_117 Depth 3
                                        #     Child Loop BB77_126 Depth 2
                                        #       Child Loop BB77_128 Depth 3
                                        #     Child Loop BB77_137 Depth 2
                                        #       Child Loop BB77_139 Depth 3
                                        #     Child Loop BB77_148 Depth 2
                                        #       Child Loop BB77_150 Depth 3
                                        #     Child Loop BB77_159 Depth 2
                                        #       Child Loop BB77_161 Depth 3
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB77_173
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB77_3:                               # %for.cond2
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_5 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_13
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	$0, -4(%rbp)
.LBB77_5:                               # %for.cond5
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_3 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$11, -4(%rbp)
	jge	.LBB77_11
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_8
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_9
.LBB77_8:                               # %if.else
                                        #   in Loop: Header=BB77_5 Depth=3
	movq	-40(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_9:                               # %if.end
                                        #   in Loop: Header=BB77_5 Depth=3
	jmp	.LBB77_10
.LBB77_10:                              # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_5
.LBB77_11:                              # %for.end
                                        #   in Loop: Header=BB77_3 Depth=2
	jmp	.LBB77_12
.LBB77_12:                              # %for.inc33
                                        #   in Loop: Header=BB77_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_3
.LBB77_13:                              # %for.end35
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_14:                              # %for.cond36
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_16 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_24
# %bb.15:                               # %for.body38
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	$0, -4(%rbp)
.LBB77_16:                              # %for.cond39
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_14 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$9, -4(%rbp)
	jge	.LBB77_22
# %bb.17:                               # %for.body41
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_19
# %bb.18:                               # %if.then44
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_20
.LBB77_19:                              # %if.else58
                                        #   in Loop: Header=BB77_16 Depth=3
	movq	-40(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_20:                              # %if.end73
                                        #   in Loop: Header=BB77_16 Depth=3
	jmp	.LBB77_21
.LBB77_21:                              # %for.inc74
                                        #   in Loop: Header=BB77_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_16
.LBB77_22:                              # %for.end76
                                        #   in Loop: Header=BB77_14 Depth=2
	jmp	.LBB77_23
.LBB77_23:                              # %for.inc77
                                        #   in Loop: Header=BB77_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_14
.LBB77_24:                              # %for.end79
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_25:                              # %for.cond80
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_27 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_35
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	$0, -4(%rbp)
.LBB77_27:                              # %for.cond83
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_25 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$10, -4(%rbp)
	jge	.LBB77_33
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_30
# %bb.29:                               # %if.then88
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_31
.LBB77_30:                              # %if.else102
                                        #   in Loop: Header=BB77_27 Depth=3
	movq	-40(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_31:                              # %if.end117
                                        #   in Loop: Header=BB77_27 Depth=3
	jmp	.LBB77_32
.LBB77_32:                              # %for.inc118
                                        #   in Loop: Header=BB77_27 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_27
.LBB77_33:                              # %for.end120
                                        #   in Loop: Header=BB77_25 Depth=2
	jmp	.LBB77_34
.LBB77_34:                              # %for.inc121
                                        #   in Loop: Header=BB77_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_25
.LBB77_35:                              # %for.end123
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_36:                              # %for.cond124
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_38 Depth 3
	cmpl	$2, -8(%rbp)
	jge	.LBB77_46
# %bb.37:                               # %for.body126
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	$0, -4(%rbp)
.LBB77_38:                              # %for.cond127
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_36 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$6, -4(%rbp)
	jge	.LBB77_44
# %bb.39:                               # %for.body129
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_41
# %bb.40:                               # %if.then132
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_42
.LBB77_41:                              # %if.else146
                                        #   in Loop: Header=BB77_38 Depth=3
	movq	-40(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_42:                              # %if.end161
                                        #   in Loop: Header=BB77_38 Depth=3
	jmp	.LBB77_43
.LBB77_43:                              # %for.inc162
                                        #   in Loop: Header=BB77_38 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_38
.LBB77_44:                              # %for.end164
                                        #   in Loop: Header=BB77_36 Depth=2
	jmp	.LBB77_45
.LBB77_45:                              # %for.inc165
                                        #   in Loop: Header=BB77_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_36
.LBB77_46:                              # %for.end167
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_47:                              # %for.cond168
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_53
# %bb.48:                               # %for.body170
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_50
# %bb.49:                               # %if.then173
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_51
.LBB77_50:                              # %if.else184
                                        #   in Loop: Header=BB77_47 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_51:                              # %if.end196
                                        #   in Loop: Header=BB77_47 Depth=2
	jmp	.LBB77_52
.LBB77_52:                              # %for.inc197
                                        #   in Loop: Header=BB77_47 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_47
.LBB77_53:                              # %for.end199
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_54:                              # %for.cond200
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_60
# %bb.55:                               # %for.body202
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_57
# %bb.56:                               # %if.then205
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_58
.LBB77_57:                              # %if.else216
                                        #   in Loop: Header=BB77_54 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_58:                              # %if.end228
                                        #   in Loop: Header=BB77_54 Depth=2
	jmp	.LBB77_59
.LBB77_59:                              # %for.inc229
                                        #   in Loop: Header=BB77_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_54
.LBB77_60:                              # %for.end231
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_61:                              # %for.cond232
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$3, -4(%rbp)
	jge	.LBB77_67
# %bb.62:                               # %for.body234
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_64
# %bb.63:                               # %if.then237
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_65
.LBB77_64:                              # %if.else248
                                        #   in Loop: Header=BB77_61 Depth=2
	movq	-40(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_65:                              # %if.end260
                                        #   in Loop: Header=BB77_61 Depth=2
	jmp	.LBB77_66
.LBB77_66:                              # %for.inc261
                                        #   in Loop: Header=BB77_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_61
.LBB77_67:                              # %for.end263
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_68:                              # %for.cond264
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$2, -4(%rbp)
	jge	.LBB77_74
# %bb.69:                               # %for.body266
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_71
# %bb.70:                               # %if.then269
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_72
.LBB77_71:                              # %if.else280
                                        #   in Loop: Header=BB77_68 Depth=2
	movq	-32(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_72:                              # %if.end292
                                        #   in Loop: Header=BB77_68 Depth=2
	jmp	.LBB77_73
.LBB77_73:                              # %for.inc293
                                        #   in Loop: Header=BB77_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_68
.LBB77_74:                              # %for.end295
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -4(%rbp)
.LBB77_75:                              # %for.cond296
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB77_81
# %bb.76:                               # %for.body298
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_78
# %bb.77:                               # %if.then301
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_79
.LBB77_78:                              # %if.else312
                                        #   in Loop: Header=BB77_75 Depth=2
	movq	-32(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_79:                              # %if.end324
                                        #   in Loop: Header=BB77_75 Depth=2
	jmp	.LBB77_80
.LBB77_80:                              # %for.inc325
                                        #   in Loop: Header=BB77_75 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_75
.LBB77_81:                              # %for.end327
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_82:                              # %for.cond328
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_84 Depth 3
	cmpl	$3, -8(%rbp)
	jge	.LBB77_92
# %bb.83:                               # %for.body330
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	$0, -4(%rbp)
.LBB77_84:                              # %for.cond331
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_82 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_90
# %bb.85:                               # %for.body333
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_87
# %bb.86:                               # %if.then336
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_88
.LBB77_87:                              # %if.else350
                                        #   in Loop: Header=BB77_84 Depth=3
	movq	-32(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_88:                              # %if.end365
                                        #   in Loop: Header=BB77_84 Depth=3
	jmp	.LBB77_89
.LBB77_89:                              # %for.inc366
                                        #   in Loop: Header=BB77_84 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_84
.LBB77_90:                              # %for.end368
                                        #   in Loop: Header=BB77_82 Depth=2
	jmp	.LBB77_91
.LBB77_91:                              # %for.inc369
                                        #   in Loop: Header=BB77_82 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_82
.LBB77_92:                              # %for.end371
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_93:                              # %for.cond372
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_95 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_103
# %bb.94:                               # %for.body374
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	$0, -4(%rbp)
.LBB77_95:                              # %for.cond375
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_93 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -4(%rbp)
	jge	.LBB77_101
# %bb.96:                               # %for.body377
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_98
# %bb.97:                               # %if.then380
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_99
.LBB77_98:                              # %if.else394
                                        #   in Loop: Header=BB77_95 Depth=3
	movq	-32(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_99:                              # %if.end409
                                        #   in Loop: Header=BB77_95 Depth=3
	jmp	.LBB77_100
.LBB77_100:                             # %for.inc410
                                        #   in Loop: Header=BB77_95 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_95
.LBB77_101:                             # %for.end412
                                        #   in Loop: Header=BB77_93 Depth=2
	jmp	.LBB77_102
.LBB77_102:                             # %for.inc413
                                        #   in Loop: Header=BB77_93 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_93
.LBB77_103:                             # %for.end415
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_104:                             # %for.cond416
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_106 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_114
# %bb.105:                              # %for.body418
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	$0, -4(%rbp)
.LBB77_106:                             # %for.cond419
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_104 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_112
# %bb.107:                              # %for.body421
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_109
# %bb.108:                              # %if.then424
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_110
.LBB77_109:                             # %if.else438
                                        #   in Loop: Header=BB77_106 Depth=3
	movq	-32(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_110:                             # %if.end453
                                        #   in Loop: Header=BB77_106 Depth=3
	jmp	.LBB77_111
.LBB77_111:                             # %for.inc454
                                        #   in Loop: Header=BB77_106 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_106
.LBB77_112:                             # %for.end456
                                        #   in Loop: Header=BB77_104 Depth=2
	jmp	.LBB77_113
.LBB77_113:                             # %for.inc457
                                        #   in Loop: Header=BB77_104 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_104
.LBB77_114:                             # %for.end459
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_115:                             # %for.cond460
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_117 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_125
# %bb.116:                              # %for.body462
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	$0, -4(%rbp)
.LBB77_117:                             # %for.cond463
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_123
# %bb.118:                              # %for.body465
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_120
# %bb.119:                              # %if.then468
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_121
.LBB77_120:                             # %if.else482
                                        #   in Loop: Header=BB77_117 Depth=3
	movq	-32(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_121:                             # %if.end497
                                        #   in Loop: Header=BB77_117 Depth=3
	jmp	.LBB77_122
.LBB77_122:                             # %for.inc498
                                        #   in Loop: Header=BB77_117 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_117
.LBB77_123:                             # %for.end500
                                        #   in Loop: Header=BB77_115 Depth=2
	jmp	.LBB77_124
.LBB77_124:                             # %for.inc501
                                        #   in Loop: Header=BB77_115 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_115
.LBB77_125:                             # %for.end503
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_126:                             # %for.cond504
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_128 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_136
# %bb.127:                              # %for.body506
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	$0, -4(%rbp)
.LBB77_128:                             # %for.cond507
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_134
# %bb.129:                              # %for.body509
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_131
# %bb.130:                              # %if.then512
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_132
.LBB77_131:                             # %if.else526
                                        #   in Loop: Header=BB77_128 Depth=3
	movq	-32(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_132:                             # %if.end541
                                        #   in Loop: Header=BB77_128 Depth=3
	jmp	.LBB77_133
.LBB77_133:                             # %for.inc542
                                        #   in Loop: Header=BB77_128 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_128
.LBB77_134:                             # %for.end544
                                        #   in Loop: Header=BB77_126 Depth=2
	jmp	.LBB77_135
.LBB77_135:                             # %for.inc545
                                        #   in Loop: Header=BB77_126 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_126
.LBB77_136:                             # %for.end547
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_137:                             # %for.cond548
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_139 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_147
# %bb.138:                              # %for.body550
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	$0, -4(%rbp)
.LBB77_139:                             # %for.cond551
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_137 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$5, -4(%rbp)
	jge	.LBB77_145
# %bb.140:                              # %for.body553
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_142
# %bb.141:                              # %if.then556
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_143
.LBB77_142:                             # %if.else570
                                        #   in Loop: Header=BB77_139 Depth=3
	movq	-32(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_143:                             # %if.end585
                                        #   in Loop: Header=BB77_139 Depth=3
	jmp	.LBB77_144
.LBB77_144:                             # %for.inc586
                                        #   in Loop: Header=BB77_139 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_139
.LBB77_145:                             # %for.end588
                                        #   in Loop: Header=BB77_137 Depth=2
	jmp	.LBB77_146
.LBB77_146:                             # %for.inc589
                                        #   in Loop: Header=BB77_137 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_137
.LBB77_147:                             # %for.end591
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_148:                             # %for.cond592
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_150 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_158
# %bb.149:                              # %for.body594
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	$0, -4(%rbp)
.LBB77_150:                             # %for.cond595
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_148 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_156
# %bb.151:                              # %for.body597
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_153
# %bb.152:                              # %if.then600
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_154
.LBB77_153:                             # %if.else614
                                        #   in Loop: Header=BB77_150 Depth=3
	movq	-32(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_154:                             # %if.end629
                                        #   in Loop: Header=BB77_150 Depth=3
	jmp	.LBB77_155
.LBB77_155:                             # %for.inc630
                                        #   in Loop: Header=BB77_150 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_150
.LBB77_156:                             # %for.end632
                                        #   in Loop: Header=BB77_148 Depth=2
	jmp	.LBB77_157
.LBB77_157:                             # %for.inc633
                                        #   in Loop: Header=BB77_148 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_148
.LBB77_158:                             # %for.end635
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	$0, -8(%rbp)
.LBB77_159:                             # %for.cond636
                                        #   Parent Loop BB77_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB77_161 Depth 3
	cmpl	$10, -8(%rbp)
	jge	.LBB77_169
# %bb.160:                              # %for.body638
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	$0, -4(%rbp)
.LBB77_161:                             # %for.cond639
                                        #   Parent Loop BB77_1 Depth=1
                                        #     Parent Loop BB77_159 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$15, -4(%rbp)
	jge	.LBB77_167
# %bb.162:                              # %for.body641
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB77_164
# %bb.163:                              # %if.then644
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	jmp	.LBB77_165
.LBB77_164:                             # %if.else658
                                        #   in Loop: Header=BB77_161 Depth=3
	movq	-32(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movslq	-12(%rbp), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	XRate
	vaddsd	-24(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
.LBB77_165:                             # %if.end673
                                        #   in Loop: Header=BB77_161 Depth=3
	jmp	.LBB77_166
.LBB77_166:                             # %for.inc674
                                        #   in Loop: Header=BB77_161 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_161
.LBB77_167:                             # %for.end676
                                        #   in Loop: Header=BB77_159 Depth=2
	jmp	.LBB77_168
.LBB77_168:                             # %for.inc677
                                        #   in Loop: Header=BB77_159 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB77_159
.LBB77_169:                             # %for.end679
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB77_171
# %bb.170:                              # %if.then681
                                        #   in Loop: Header=BB77_1 Depth=1
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	vmovsd	%xmm0, -56(%rbp)
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB77_171:                             # %if.end682
                                        #   in Loop: Header=BB77_1 Depth=1
	jmp	.LBB77_172
.LBB77_172:                             # %for.inc683
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_1
.LBB77_173:                             # %for.end685
	cmpl	$1189832047, -48(%rbp)  # imm = 0x46EB656F
	jne	.LBB77_175
.LBB77_174:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_175:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_174
.Lfunc_end77:
	.size	GetCtxModelNumber.70, .Lfunc_end77-GetCtxModelNumber.70
	.cfi_endproc
                                        # -- End function
	.globl	init_contexts.71        # -- Begin function init_contexts.71
	.p2align	4, 0x90
	.type	init_contexts.71,@function
init_contexts.71:                       # @init_contexts.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$50655390, -28(%rbp)    # imm = 0x304F09E
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	32(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	40(%rax), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_3 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB78_11
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	$0, -4(%rbp)
.LBB78_3:                               # %for.cond2
                                        #   Parent Loop BB78_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$11, -4(%rbp)
	jge	.LBB78_9
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_7
.LBB78_6:                               # %if.else
                                        #   in Loop: Header=BB78_3 Depth=2
	movq	-24(%rbp), %rdi
	movslq	-8(%rbp), %rax
	imulq	$176, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$264, %rax, %rax        # imm = 0x108
	movabsq	$INIT_MB_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$88, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_7:                               # %if.end
                                        #   in Loop: Header=BB78_3 Depth=2
	jmp	.LBB78_8
.LBB78_8:                               # %for.inc
                                        #   in Loop: Header=BB78_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_3
.LBB78_9:                               # %for.end
                                        #   in Loop: Header=BB78_1 Depth=1
	jmp	.LBB78_10
.LBB78_10:                              # %for.inc28
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_1
.LBB78_11:                              # %for.end30
	movl	$0, -8(%rbp)
.LBB78_12:                              # %for.cond31
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_14 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB78_22
# %bb.13:                               # %for.body33
                                        #   in Loop: Header=BB78_12 Depth=1
	movl	$0, -4(%rbp)
.LBB78_14:                              # %for.cond34
                                        #   Parent Loop BB78_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$9, -4(%rbp)
	jge	.LBB78_20
# %bb.15:                               # %for.body36
                                        #   in Loop: Header=BB78_14 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_17
# %bb.16:                               # %if.then39
                                        #   in Loop: Header=BB78_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_18
.LBB78_17:                              # %if.else52
                                        #   in Loop: Header=BB78_14 Depth=2
	movq	-24(%rbp), %rdi
	addq	$528, %rdi              # imm = 0x210
	movslq	-8(%rbp), %rax
	imulq	$144, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$144, %rax, %rax
	movabsq	$INIT_B8_TYPE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$72, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_18:                              # %if.end66
                                        #   in Loop: Header=BB78_14 Depth=2
	jmp	.LBB78_19
.LBB78_19:                              # %for.inc67
                                        #   in Loop: Header=BB78_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_14
.LBB78_20:                              # %for.end69
                                        #   in Loop: Header=BB78_12 Depth=1
	jmp	.LBB78_21
.LBB78_21:                              # %for.inc70
                                        #   in Loop: Header=BB78_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_12
.LBB78_22:                              # %for.end72
	movl	$0, -8(%rbp)
.LBB78_23:                              # %for.cond73
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_25 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB78_33
# %bb.24:                               # %for.body75
                                        #   in Loop: Header=BB78_23 Depth=1
	movl	$0, -4(%rbp)
.LBB78_25:                              # %for.cond76
                                        #   Parent Loop BB78_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$10, -4(%rbp)
	jge	.LBB78_31
# %bb.26:                               # %for.body78
                                        #   in Loop: Header=BB78_25 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_28
# %bb.27:                               # %if.then81
                                        #   in Loop: Header=BB78_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_29
.LBB78_28:                              # %if.else94
                                        #   in Loop: Header=BB78_25 Depth=2
	movq	-24(%rbp), %rdi
	addq	$816, %rdi              # imm = 0x330
	movslq	-8(%rbp), %rax
	imulq	$160, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$160, %rax, %rax
	movabsq	$INIT_MV_RES_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_29:                              # %if.end108
                                        #   in Loop: Header=BB78_25 Depth=2
	jmp	.LBB78_30
.LBB78_30:                              # %for.inc109
                                        #   in Loop: Header=BB78_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_25
.LBB78_31:                              # %for.end111
                                        #   in Loop: Header=BB78_23 Depth=1
	jmp	.LBB78_32
.LBB78_32:                              # %for.inc112
                                        #   in Loop: Header=BB78_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_23
.LBB78_33:                              # %for.end114
	movl	$0, -8(%rbp)
.LBB78_34:                              # %for.cond115
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_36 Depth 2
	cmpl	$2, -8(%rbp)
	jge	.LBB78_44
# %bb.35:                               # %for.body117
                                        #   in Loop: Header=BB78_34 Depth=1
	movl	$0, -4(%rbp)
.LBB78_36:                              # %for.cond118
                                        #   Parent Loop BB78_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$6, -4(%rbp)
	jge	.LBB78_42
# %bb.37:                               # %for.body120
                                        #   in Loop: Header=BB78_36 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_39
# %bb.38:                               # %if.then123
                                        #   in Loop: Header=BB78_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_40
.LBB78_39:                              # %if.else136
                                        #   in Loop: Header=BB78_36 Depth=2
	movq	-24(%rbp), %rdi
	addq	$1136, %rdi             # imm = 0x470
	movslq	-8(%rbp), %rax
	imulq	$96, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_REF_NO_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$48, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_40:                              # %if.end150
                                        #   in Loop: Header=BB78_36 Depth=2
	jmp	.LBB78_41
.LBB78_41:                              # %for.inc151
                                        #   in Loop: Header=BB78_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_36
.LBB78_42:                              # %for.end153
                                        #   in Loop: Header=BB78_34 Depth=1
	jmp	.LBB78_43
.LBB78_43:                              # %for.inc154
                                        #   in Loop: Header=BB78_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_34
.LBB78_44:                              # %for.end156
	movl	$0, -4(%rbp)
.LBB78_45:                              # %for.cond157
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_51
# %bb.46:                               # %for.body159
                                        #   in Loop: Header=BB78_45 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_48
# %bb.47:                               # %if.then162
                                        #   in Loop: Header=BB78_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_49
.LBB78_48:                              # %if.else172
                                        #   in Loop: Header=BB78_45 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1328, %rdi             # imm = 0x530
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_DELTA_QP_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_49:                              # %if.end183
                                        #   in Loop: Header=BB78_45 Depth=1
	jmp	.LBB78_50
.LBB78_50:                              # %for.inc184
                                        #   in Loop: Header=BB78_45 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_45
.LBB78_51:                              # %for.end186
	movl	$0, -4(%rbp)
.LBB78_52:                              # %for.cond187
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_58
# %bb.53:                               # %for.body189
                                        #   in Loop: Header=BB78_52 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_55
# %bb.54:                               # %if.then192
                                        #   in Loop: Header=BB78_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_56
.LBB78_55:                              # %if.else202
                                        #   in Loop: Header=BB78_52 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1392, %rdi             # imm = 0x570
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_MB_AFF_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_56:                              # %if.end213
                                        #   in Loop: Header=BB78_52 Depth=1
	jmp	.LBB78_57
.LBB78_57:                              # %for.inc214
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_52
.LBB78_58:                              # %for.end216
	movl	$0, -4(%rbp)
.LBB78_59:                              # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$3, -4(%rbp)
	jge	.LBB78_65
# %bb.60:                               # %for.body219
                                        #   in Loop: Header=BB78_59 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_62
# %bb.61:                               # %if.then222
                                        #   in Loop: Header=BB78_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_63
.LBB78_62:                              # %if.else232
                                        #   in Loop: Header=BB78_59 Depth=1
	movq	-24(%rbp), %rdi
	addq	$1456, %rdi             # imm = 0x5B0
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$24, %rax, %rax
	movabsq	$INIT_TRANSFORM_SIZE_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_63:                              # %if.end243
                                        #   in Loop: Header=BB78_59 Depth=1
	jmp	.LBB78_64
.LBB78_64:                              # %for.inc244
                                        #   in Loop: Header=BB78_59 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_59
.LBB78_65:                              # %for.end246
	movl	$0, -4(%rbp)
.LBB78_66:                              # %for.cond247
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -4(%rbp)
	jge	.LBB78_72
# %bb.67:                               # %for.body249
                                        #   in Loop: Header=BB78_66 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_69
# %bb.68:                               # %if.then252
                                        #   in Loop: Header=BB78_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_70
.LBB78_69:                              # %if.else262
                                        #   in Loop: Header=BB78_66 Depth=1
	movq	-16(%rbp), %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$4, %rax
	movabsq	$INIT_IPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_70:                              # %if.end273
                                        #   in Loop: Header=BB78_66 Depth=1
	jmp	.LBB78_71
.LBB78_71:                              # %for.inc274
                                        #   in Loop: Header=BB78_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_66
.LBB78_72:                              # %for.end276
	movl	$0, -4(%rbp)
.LBB78_73:                              # %for.cond277
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB78_79
# %bb.74:                               # %for.body279
                                        #   in Loop: Header=BB78_73 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_76
# %bb.75:                               # %if.then282
                                        #   in Loop: Header=BB78_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_I, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_77
.LBB78_76:                              # %if.else292
                                        #   in Loop: Header=BB78_73 Depth=1
	movq	-16(%rbp), %rdi
	addq	$32, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$5, %rax
	movabsq	$INIT_CIPR_P, %rsi
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_77:                              # %if.end303
                                        #   in Loop: Header=BB78_73 Depth=1
	jmp	.LBB78_78
.LBB78_78:                              # %for.inc304
                                        #   in Loop: Header=BB78_73 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_73
.LBB78_79:                              # %for.end306
	movl	$0, -8(%rbp)
.LBB78_80:                              # %for.cond307
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_82 Depth 2
	cmpl	$3, -8(%rbp)
	jge	.LBB78_90
# %bb.81:                               # %for.body309
                                        #   in Loop: Header=BB78_80 Depth=1
	movl	$0, -4(%rbp)
.LBB78_82:                              # %for.cond310
                                        #   Parent Loop BB78_80 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_88
# %bb.83:                               # %for.body312
                                        #   in Loop: Header=BB78_82 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_85
# %bb.84:                               # %if.then315
                                        #   in Loop: Header=BB78_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_86
.LBB78_85:                              # %if.else328
                                        #   in Loop: Header=BB78_82 Depth=2
	movq	-16(%rbp), %rdi
	addq	$96, %rdi
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$96, %rax, %rax
	movabsq	$INIT_CBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_86:                              # %if.end342
                                        #   in Loop: Header=BB78_82 Depth=2
	jmp	.LBB78_87
.LBB78_87:                              # %for.inc343
                                        #   in Loop: Header=BB78_82 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_82
.LBB78_88:                              # %for.end345
                                        #   in Loop: Header=BB78_80 Depth=1
	jmp	.LBB78_89
.LBB78_89:                              # %for.inc346
                                        #   in Loop: Header=BB78_80 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_80
.LBB78_90:                              # %for.end348
	movl	$0, -8(%rbp)
.LBB78_91:                              # %for.cond349
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_93 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_101
# %bb.92:                               # %for.body351
                                        #   in Loop: Header=BB78_91 Depth=1
	movl	$0, -4(%rbp)
.LBB78_93:                              # %for.cond352
                                        #   Parent Loop BB78_91 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB78_99
# %bb.94:                               # %for.body354
                                        #   in Loop: Header=BB78_93 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_96
# %bb.95:                               # %if.then357
                                        #   in Loop: Header=BB78_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_97
.LBB78_96:                              # %if.else370
                                        #   in Loop: Header=BB78_93 Depth=2
	movq	-16(%rbp), %rdi
	addq	$288, %rdi              # imm = 0x120
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	shlq	$8, %rax
	movabsq	$INIT_BCBP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_97:                              # %if.end384
                                        #   in Loop: Header=BB78_93 Depth=2
	jmp	.LBB78_98
.LBB78_98:                              # %for.inc385
                                        #   in Loop: Header=BB78_93 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_93
.LBB78_99:                              # %for.end387
                                        #   in Loop: Header=BB78_91 Depth=1
	jmp	.LBB78_100
.LBB78_100:                             # %for.inc388
                                        #   in Loop: Header=BB78_91 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_91
.LBB78_101:                             # %for.end390
	movl	$0, -8(%rbp)
.LBB78_102:                             # %for.cond391
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_104 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_112
# %bb.103:                              # %for.body393
                                        #   in Loop: Header=BB78_102 Depth=1
	movl	$0, -4(%rbp)
.LBB78_104:                             # %for.cond394
                                        #   Parent Loop BB78_102 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB78_110
# %bb.105:                              # %for.body396
                                        #   in Loop: Header=BB78_104 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_107
# %bb.106:                              # %if.then399
                                        #   in Loop: Header=BB78_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_108
.LBB78_107:                             # %if.else412
                                        #   in Loop: Header=BB78_104 Depth=2
	movq	-16(%rbp), %rdi
	addq	$928, %rdi              # imm = 0x3A0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_108:                             # %if.end426
                                        #   in Loop: Header=BB78_104 Depth=2
	jmp	.LBB78_109
.LBB78_109:                             # %for.inc427
                                        #   in Loop: Header=BB78_104 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_104
.LBB78_110:                             # %for.end429
                                        #   in Loop: Header=BB78_102 Depth=1
	jmp	.LBB78_111
.LBB78_111:                             # %for.inc430
                                        #   in Loop: Header=BB78_102 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_102
.LBB78_112:                             # %for.end432
	movl	$0, -8(%rbp)
.LBB78_113:                             # %for.cond433
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_115 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_123
# %bb.114:                              # %for.body435
                                        #   in Loop: Header=BB78_113 Depth=1
	movl	$0, -4(%rbp)
.LBB78_115:                             # %for.cond436
                                        #   Parent Loop BB78_113 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB78_121
# %bb.116:                              # %for.body438
                                        #   in Loop: Header=BB78_115 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_118
# %bb.117:                              # %if.then441
                                        #   in Loop: Header=BB78_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_119
.LBB78_118:                             # %if.else454
                                        #   in Loop: Header=BB78_115 Depth=2
	movq	-16(%rbp), %rdi
	addq	$3328, %rdi             # imm = 0xD00
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_119:                             # %if.end468
                                        #   in Loop: Header=BB78_115 Depth=2
	jmp	.LBB78_120
.LBB78_120:                             # %for.inc469
                                        #   in Loop: Header=BB78_115 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_115
.LBB78_121:                             # %for.end471
                                        #   in Loop: Header=BB78_113 Depth=1
	jmp	.LBB78_122
.LBB78_122:                             # %for.inc472
                                        #   in Loop: Header=BB78_113 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_113
.LBB78_123:                             # %for.end474
	movl	$0, -8(%rbp)
.LBB78_124:                             # %for.cond475
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_126 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_134
# %bb.125:                              # %for.body477
                                        #   in Loop: Header=BB78_124 Depth=1
	movl	$0, -4(%rbp)
.LBB78_126:                             # %for.cond478
                                        #   Parent Loop BB78_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB78_132
# %bb.127:                              # %for.body480
                                        #   in Loop: Header=BB78_126 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_129
# %bb.128:                              # %if.then483
                                        #   in Loop: Header=BB78_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_130
.LBB78_129:                             # %if.else496
                                        #   in Loop: Header=BB78_126 Depth=2
	movq	-16(%rbp), %rdi
	addq	$5728, %rdi             # imm = 0x1660
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ONE_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_130:                             # %if.end510
                                        #   in Loop: Header=BB78_126 Depth=2
	jmp	.LBB78_131
.LBB78_131:                             # %for.inc511
                                        #   in Loop: Header=BB78_126 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_126
.LBB78_132:                             # %for.end513
                                        #   in Loop: Header=BB78_124 Depth=1
	jmp	.LBB78_133
.LBB78_133:                             # %for.inc514
                                        #   in Loop: Header=BB78_124 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_124
.LBB78_134:                             # %for.end516
	movl	$0, -8(%rbp)
.LBB78_135:                             # %for.cond517
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_137 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_145
# %bb.136:                              # %for.body519
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	$0, -4(%rbp)
.LBB78_137:                             # %for.cond520
                                        #   Parent Loop BB78_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$5, -4(%rbp)
	jge	.LBB78_143
# %bb.138:                              # %for.body522
                                        #   in Loop: Header=BB78_137 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_140
# %bb.139:                              # %if.then525
                                        #   in Loop: Header=BB78_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_141
.LBB78_140:                             # %if.else538
                                        #   in Loop: Header=BB78_137 Depth=2
	movq	-16(%rbp), %rdi
	addq	$6528, %rdi             # imm = 0x1980
	movslq	-8(%rbp), %rax
	imulq	$80, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$320, %rax, %rax        # imm = 0x140
	movabsq	$INIT_ABS_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$40, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_141:                             # %if.end552
                                        #   in Loop: Header=BB78_137 Depth=2
	jmp	.LBB78_142
.LBB78_142:                             # %for.inc553
                                        #   in Loop: Header=BB78_137 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_137
.LBB78_143:                             # %for.end555
                                        #   in Loop: Header=BB78_135 Depth=1
	jmp	.LBB78_144
.LBB78_144:                             # %for.inc556
                                        #   in Loop: Header=BB78_135 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_135
.LBB78_145:                             # %for.end558
	movl	$0, -8(%rbp)
.LBB78_146:                             # %for.cond559
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_148 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_156
# %bb.147:                              # %for.body561
                                        #   in Loop: Header=BB78_146 Depth=1
	movl	$0, -4(%rbp)
.LBB78_148:                             # %for.cond562
                                        #   Parent Loop BB78_146 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB78_154
# %bb.149:                              # %for.body564
                                        #   in Loop: Header=BB78_148 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_151
# %bb.150:                              # %if.then567
                                        #   in Loop: Header=BB78_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_152
.LBB78_151:                             # %if.else580
                                        #   in Loop: Header=BB78_148 Depth=2
	movq	-16(%rbp), %rdi
	addq	$7328, %rdi             # imm = 0x1CA0
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_MAP_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_152:                             # %if.end594
                                        #   in Loop: Header=BB78_148 Depth=2
	jmp	.LBB78_153
.LBB78_153:                             # %for.inc595
                                        #   in Loop: Header=BB78_148 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_148
.LBB78_154:                             # %for.end597
                                        #   in Loop: Header=BB78_146 Depth=1
	jmp	.LBB78_155
.LBB78_155:                             # %for.inc598
                                        #   in Loop: Header=BB78_146 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_146
.LBB78_156:                             # %for.end600
	movl	$0, -8(%rbp)
.LBB78_157:                             # %for.cond601
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_159 Depth 2
	cmpl	$10, -8(%rbp)
	jge	.LBB78_167
# %bb.158:                              # %for.body603
                                        #   in Loop: Header=BB78_157 Depth=1
	movl	$0, -4(%rbp)
.LBB78_159:                             # %for.cond604
                                        #   Parent Loop BB78_157 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$15, -4(%rbp)
	jge	.LBB78_165
# %bb.160:                              # %for.body606
                                        #   in Loop: Header=BB78_159 Depth=2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_162
# %bb.161:                              # %if.then609
                                        #   in Loop: Header=BB78_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_I, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
	jmp	.LBB78_163
.LBB78_162:                             # %if.else622
                                        #   in Loop: Header=BB78_159 Depth=2
	movq	-16(%rbp), %rdi
	addq	$9728, %rdi             # imm = 0x2600
	movslq	-8(%rbp), %rax
	imulq	$240, %rax, %rax
	addq	%rax, %rdi
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movq	img, %rax
	movslq	72520(%rax), %rax
	imulq	$960, %rax, %rax        # imm = 0x3C0
	movabsq	$INIT_FLD_LAST_P, %rsi
	addq	%rax, %rsi
	movslq	-8(%rbp), %rax
	imulq	$120, %rax, %rax
	addq	%rax, %rsi
	movslq	-4(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rsi
	callq	biari_init_context
.LBB78_163:                             # %if.end636
                                        #   in Loop: Header=BB78_159 Depth=2
	jmp	.LBB78_164
.LBB78_164:                             # %for.inc637
                                        #   in Loop: Header=BB78_159 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_159
.LBB78_165:                             # %for.end639
                                        #   in Loop: Header=BB78_157 Depth=1
	jmp	.LBB78_166
.LBB78_166:                             # %for.inc640
                                        #   in Loop: Header=BB78_157 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB78_157
.LBB78_167:                             # %for.end642
	cmpl	$50655390, -28(%rbp)    # imm = 0x304F09E
	jne	.LBB78_169
.LBB78_168:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_169:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_168
.Lfunc_end78:
	.size	init_contexts.71, .Lfunc_end78-init_contexts.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.72
.LCPI79_0:
	.quad	4611686018427387904     # double 2
.LCPI79_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.72
	.p2align	4, 0x90
	.type	create_context_memory.72,@function
create_context_memory.72:               # @create_context_memory.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$858795772, -20(%rbp)   # imm = 0x33302EFC
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB79_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB79_3
.LBB79_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB79_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB79_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB79_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB79_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB79_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB79_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_11:                              # %if.end10
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB79_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_13:                              # %if.end16
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	$0, -8(%rbp)
.LBB79_14:                              # %for.cond17
                                        #   Parent Loop BB79_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB79_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB79_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB79_17:                              # %if.end28
                                        #   in Loop: Header=BB79_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB79_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB79_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB79_19:                              # %if.end39
                                        #   in Loop: Header=BB79_14 Depth=2
	jmp	.LBB79_20
.LBB79_20:                              # %for.inc
                                        #   in Loop: Header=BB79_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_14
.LBB79_21:                              # %for.end
                                        #   in Loop: Header=BB79_8 Depth=1
	jmp	.LBB79_22
.LBB79_22:                              # %for.inc40
                                        #   in Loop: Header=BB79_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_8
.LBB79_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB79_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_26 Depth 2
                                        #       Child Loop BB79_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB79_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	$0, -8(%rbp)
.LBB79_26:                              # %for.cond47
                                        #   Parent Loop BB79_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB79_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB79_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	$0, -12(%rbp)
.LBB79_28:                              # %for.cond51
                                        #   Parent Loop BB79_24 Depth=1
                                        #     Parent Loop BB79_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB79_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB79_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB79_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB79_28
.LBB79_31:                              # %for.end63
                                        #   in Loop: Header=BB79_26 Depth=2
	jmp	.LBB79_32
.LBB79_32:                              # %for.inc64
                                        #   in Loop: Header=BB79_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_26
.LBB79_33:                              # %for.end66
                                        #   in Loop: Header=BB79_24 Depth=1
	jmp	.LBB79_34
.LBB79_34:                              # %for.inc67
                                        #   in Loop: Header=BB79_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_24
.LBB79_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB79_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB79_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB79_36 Depth=1
	vmovsd	.LCPI79_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI79_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB79_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_36
.LBB79_39:                              # %for.end98
	cmpl	$858795772, -20(%rbp)   # imm = 0x33302EFC
	jne	.LBB79_41
.LBB79_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_40
.Lfunc_end79:
	.size	create_context_memory.72, .Lfunc_end79-create_context_memory.72
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.73
.LCPI80_0:
	.quad	4611686018427387904     # double 2
.LCPI80_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.73
	.p2align	4, 0x90
	.type	create_context_memory.73,@function
create_context_memory.73:               # @create_context_memory.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$257810111, -20(%rbp)   # imm = 0xF5DDEBF
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB80_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB80_3
.LBB80_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB80_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB80_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB80_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB80_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB80_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_11:                              # %if.end10
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB80_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_13:                              # %if.end16
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	$0, -8(%rbp)
.LBB80_14:                              # %for.cond17
                                        #   Parent Loop BB80_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB80_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB80_17:                              # %if.end28
                                        #   in Loop: Header=BB80_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB80_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB80_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB80_19:                              # %if.end39
                                        #   in Loop: Header=BB80_14 Depth=2
	jmp	.LBB80_20
.LBB80_20:                              # %for.inc
                                        #   in Loop: Header=BB80_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_14
.LBB80_21:                              # %for.end
                                        #   in Loop: Header=BB80_8 Depth=1
	jmp	.LBB80_22
.LBB80_22:                              # %for.inc40
                                        #   in Loop: Header=BB80_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_8
.LBB80_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB80_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_26 Depth 2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB80_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$0, -8(%rbp)
.LBB80_26:                              # %for.cond47
                                        #   Parent Loop BB80_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB80_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB80_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	$0, -12(%rbp)
.LBB80_28:                              # %for.cond51
                                        #   Parent Loop BB80_24 Depth=1
                                        #     Parent Loop BB80_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB80_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB80_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB80_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_28
.LBB80_31:                              # %for.end63
                                        #   in Loop: Header=BB80_26 Depth=2
	jmp	.LBB80_32
.LBB80_32:                              # %for.inc64
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_26
.LBB80_33:                              # %for.end66
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_34
.LBB80_34:                              # %for.inc67
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB80_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB80_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB80_36 Depth=1
	vmovsd	.LCPI80_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI80_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB80_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_36
.LBB80_39:                              # %for.end98
	cmpl	$257810111, -20(%rbp)   # imm = 0xF5DDEBF
	jne	.LBB80_41
.LBB80_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_40
.Lfunc_end80:
	.size	create_context_memory.73, .Lfunc_end80-create_context_memory.73
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.74
.LCPI81_0:
	.quad	4607182418800017408     # double 1
.LCPI81_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI81_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI81_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.74
	.p2align	4, 0x90
	.type	XRate.74,@function
XRate.74:                               # @XRate.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1203084462, -32(%rbp)  # imm = 0x47B59CAE
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB81_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB81_3
.LBB81_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB81_3:                               # %cond.end
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI81_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI81_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI81_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB81_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI81_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB81_6
.LBB81_5:                               # %cond.false6
	vmovsd	.LCPI81_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI81_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI81_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB81_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-36(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB81_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB81_9
.LBB81_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB81_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB81_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB81_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB81_13
.LBB81_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB81_13:                              # %cond.end26
	jmp	.LBB81_15
.LBB81_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB81_15
.LBB81_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB81_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB81_18
.LBB81_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB81_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1203084462, -32(%rbp)  # imm = 0x47B59CAE
	jne	.LBB81_20
.LBB81_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB81_19
.Lfunc_end81:
	.size	XRate.74, .Lfunc_end81-XRate.74
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.75
.LCPI82_0:
	.quad	4607182418800017408     # double 1
.LCPI82_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI82_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI82_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.75
	.p2align	4, 0x90
	.type	XRate.75,@function
XRate.75:                               # @XRate.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1267734252, -36(%rbp)  # imm = 0x4B9016EC
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB82_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB82_3
.LBB82_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB82_3:                               # %cond.end
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI82_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI82_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI82_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB82_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI82_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB82_6
.LBB82_5:                               # %cond.false6
	vmovsd	.LCPI82_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-24(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI82_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI82_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB82_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB82_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB82_9
.LBB82_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB82_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB82_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB82_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB82_13
.LBB82_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB82_13:                              # %cond.end26
	jmp	.LBB82_15
.LBB82_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB82_15
.LBB82_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-24(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB82_17
# %bb.16:                               # %cond.true32
	movq	-24(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB82_18
.LBB82_17:                              # %cond.false35
	movq	-24(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB82_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-16(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -16(%rbp)
	vmovsd	-16(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1267734252, -36(%rbp)  # imm = 0x4B9016EC
	jne	.LBB82_20
.LBB82_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB82_19
.Lfunc_end82:
	.size	XRate.75, .Lfunc_end82-XRate.75
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.76
.LCPI83_0:
	.quad	4607182418800017408     # double 1
.LCPI83_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI83_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI83_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.76
	.p2align	4, 0x90
	.type	XRate.76,@function
XRate.76:                               # @XRate.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$621596125, -36(%rbp)   # imm = 0x250CCDDD
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB83_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB83_3
.LBB83_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB83_3:                               # %cond.end
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI83_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI83_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB83_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI83_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB83_6
.LBB83_5:                               # %cond.false6
	vmovsd	.LCPI83_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI83_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI83_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB83_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB83_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB83_9
.LBB83_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB83_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB83_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB83_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB83_13
.LBB83_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB83_13:                              # %cond.end26
	jmp	.LBB83_15
.LBB83_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB83_15
.LBB83_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB83_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB83_18
.LBB83_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB83_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$621596125, -36(%rbp)   # imm = 0x250CCDDD
	jne	.LBB83_20
.LBB83_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB83_19
.Lfunc_end83:
	.size	XRate.76, .Lfunc_end83-XRate.76
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function XRate.77
.LCPI84_0:
	.quad	4607182418800017408     # double 1
.LCPI84_1:
	.quad	4629700416936869888     # double 32
	.section	.rodata.cst16,"aM",@progbits,16
	.p2align	4
.LCPI84_2:
	.long	1127219200              # 0x43300000
	.long	1160773632              # 0x45300000
	.long	0                       # 0x0
	.long	0                       # 0x0
.LCPI84_3:
	.quad	4841369599423283200     # double 4503599627370496
	.quad	4985484787499139072     # double 1.9342813113834067E+25
	.text
	.globl	XRate.77
	.p2align	4, 0x90
	.type	XRate.77,@function
XRate.77:                               # @XRate.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	xorl	%eax, %eax
	movl	$1988956160, -36(%rbp)  # imm = 0x768D1000
	movq	%rdi, -16(%rbp)
	movq	%rsi, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	movq	img, %rcx
	cmpl	40(%rcx), %eax
	jle	.LBB84_2
# %bb.1:                                # %cond.true
	xorl	%eax, %eax
	jmp	.LBB84_3
.LBB84_2:                               # %cond.false
	movq	img, %rax
	movl	40(%rax), %eax
.LBB84_3:                               # %cond.end
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI84_1(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm2          # xmm2 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm3  # xmm3 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm3, %xmm2, %xmm2 # xmm2 = xmm2[0],xmm3[0],xmm2[1],xmm3[1]
	vmovapd	.LCPI84_3(%rip), %xmm3  # xmm3 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm3, %xmm2, %xmm2
	vhaddpd	%xmm2, %xmm2, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB84_5
# %bb.4:                                # %cond.true5
	vmovsd	.LCPI84_0(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB84_6
.LBB84_5:                               # %cond.false6
	vmovsd	.LCPI84_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	-16(%rbp), %rax
	vmovq	8(%rax), %xmm1          # xmm1 = mem[0],zero
	vmovdqa	.LCPI84_2(%rip), %xmm2  # xmm2 = [1127219200,1160773632,0,0]
	vpunpckldq	%xmm2, %xmm1, %xmm1 # xmm1 = xmm1[0],xmm2[0],xmm1[1],xmm2[1]
	vmovapd	.LCPI84_3(%rip), %xmm2  # xmm2 = [4.503599627370496E+15,1.9342813113834067E+25]
	vsubpd	%xmm2, %xmm1, %xmm1
	vhaddpd	%xmm1, %xmm1, %xmm1
	vdivsd	%xmm0, %xmm1, %xmm0
.LBB84_6:                               # %cond.end10
	xorl	%eax, %eax
	vmovsd	%xmm0, -56(%rbp)
	movq	-48(%rbp), %rcx
	movl	(%rcx), %ecx
	imull	-32(%rbp), %ecx
	sarl	$4, %ecx
	movq	-48(%rbp), %rdx
	addl	4(%rdx), %ecx
	movl	%ecx, -4(%rbp)
	cmpl	-4(%rbp), %eax
	jle	.LBB84_8
# %bb.7:                                # %cond.true15
	xorl	%eax, %eax
	jmp	.LBB84_9
.LBB84_8:                               # %cond.false16
	movl	-4(%rbp), %eax
.LBB84_9:                               # %cond.end17
	cmpl	$127, %eax
	jge	.LBB84_14
# %bb.10:                               # %cond.true21
	xorl	%eax, %eax
	cmpl	-4(%rbp), %eax
	jle	.LBB84_12
# %bb.11:                               # %cond.true24
	xorl	%eax, %eax
	jmp	.LBB84_13
.LBB84_12:                              # %cond.false25
	movl	-4(%rbp), %eax
.LBB84_13:                              # %cond.end26
	jmp	.LBB84_15
.LBB84_14:                              # %cond.false28
	movl	$127, %eax
	jmp	.LBB84_15
.LBB84_15:                              # %cond.end29
	movl	%eax, -4(%rbp)
	movq	-16(%rbp), %rax
	movzbl	2(%rax), %eax
	cmpl	$0, %eax
	je	.LBB84_17
# %bb.16:                               # %cond.true32
	movq	-16(%rbp), %rax
	movzwl	(%rax), %eax
	addl	$64, %eax
	jmp	.LBB84_18
.LBB84_17:                              # %cond.false35
	movq	-16(%rbp), %rax
	movzwl	(%rax), %ecx
	movl	$63, %eax
	subl	%ecx, %eax
.LBB84_18:                              # %cond.end38
	movl	%eax, -28(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movslq	-28(%rbp), %rax
	vmulsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-56(%rbp), %xmm0        # xmm0 = mem[0],zero
	movl	$127, %eax
	movl	$127, %ecx
	subl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	vmulsd	probability(,%rcx,8), %xmm0, %xmm0
	subl	-4(%rbp), %eax
	cltq
	vmulsd	entropy(,%rax,8), %xmm0, %xmm0
	vmovsd	-24(%rbp), %xmm1        # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -24(%rbp)
	vmovsd	-24(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1988956160, -36(%rbp)  # imm = 0x768D1000
	jne	.LBB84_20
.LBB84_19:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -64(%rbp)        # 8-byte Spill
	callq	detect_breach
	vmovsd	-64(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB84_19
.Lfunc_end84:
	.size	XRate.77, .Lfunc_end84-XRate.77
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.78
.LCPI85_0:
	.quad	4611686018427387904     # double 2
.LCPI85_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.78
	.p2align	4, 0x90
	.type	create_context_memory.78,@function
create_context_memory.78:               # @create_context_memory.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1636241784, -20(%rbp)  # imm = 0x61871178
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB85_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB85_3
.LBB85_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB85_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB85_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB85_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB85_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB85_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB85_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_11:                              # %if.end10
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB85_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_13:                              # %if.end16
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	$0, -8(%rbp)
.LBB85_14:                              # %for.cond17
                                        #   Parent Loop BB85_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB85_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB85_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB85_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB85_17:                              # %if.end28
                                        #   in Loop: Header=BB85_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB85_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB85_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB85_19:                              # %if.end39
                                        #   in Loop: Header=BB85_14 Depth=2
	jmp	.LBB85_20
.LBB85_20:                              # %for.inc
                                        #   in Loop: Header=BB85_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_14
.LBB85_21:                              # %for.end
                                        #   in Loop: Header=BB85_8 Depth=1
	jmp	.LBB85_22
.LBB85_22:                              # %for.inc40
                                        #   in Loop: Header=BB85_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_8
.LBB85_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB85_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_26 Depth 2
                                        #       Child Loop BB85_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB85_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB85_24 Depth=1
	movl	$0, -8(%rbp)
.LBB85_26:                              # %for.cond47
                                        #   Parent Loop BB85_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB85_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB85_26 Depth=2
	movl	$0, -12(%rbp)
.LBB85_28:                              # %for.cond51
                                        #   Parent Loop BB85_24 Depth=1
                                        #     Parent Loop BB85_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB85_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB85_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB85_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_28
.LBB85_31:                              # %for.end63
                                        #   in Loop: Header=BB85_26 Depth=2
	jmp	.LBB85_32
.LBB85_32:                              # %for.inc64
                                        #   in Loop: Header=BB85_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_26
.LBB85_33:                              # %for.end66
                                        #   in Loop: Header=BB85_24 Depth=1
	jmp	.LBB85_34
.LBB85_34:                              # %for.inc67
                                        #   in Loop: Header=BB85_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_24
.LBB85_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB85_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB85_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB85_36 Depth=1
	vmovsd	.LCPI85_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB85_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_36
.LBB85_39:                              # %for.end98
	cmpl	$1636241784, -20(%rbp)  # imm = 0x61871178
	jne	.LBB85_41
.LBB85_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_40
.Lfunc_end85:
	.size	create_context_memory.78, .Lfunc_end85-create_context_memory.78
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.79
.LCPI86_0:
	.quad	4611686018427387904     # double 2
.LCPI86_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.79
	.p2align	4, 0x90
	.type	create_context_memory.79,@function
create_context_memory.79:               # @create_context_memory.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1613865140, -20(%rbp)  # imm = 0x6031A0B4
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB86_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB86_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB86_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB86_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB86_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB86_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_11:                              # %if.end10
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB86_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_13:                              # %if.end16
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	$0, -8(%rbp)
.LBB86_14:                              # %for.cond17
                                        #   Parent Loop BB86_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB86_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB86_17:                              # %if.end28
                                        #   in Loop: Header=BB86_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB86_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB86_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB86_19:                              # %if.end39
                                        #   in Loop: Header=BB86_14 Depth=2
	jmp	.LBB86_20
.LBB86_20:                              # %for.inc
                                        #   in Loop: Header=BB86_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_14
.LBB86_21:                              # %for.end
                                        #   in Loop: Header=BB86_8 Depth=1
	jmp	.LBB86_22
.LBB86_22:                              # %for.inc40
                                        #   in Loop: Header=BB86_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_8
.LBB86_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB86_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_26 Depth 2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB86_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	$0, -8(%rbp)
.LBB86_26:                              # %for.cond47
                                        #   Parent Loop BB86_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB86_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	$0, -12(%rbp)
.LBB86_28:                              # %for.cond51
                                        #   Parent Loop BB86_24 Depth=1
                                        #     Parent Loop BB86_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB86_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB86_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB86_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_28
.LBB86_31:                              # %for.end63
                                        #   in Loop: Header=BB86_26 Depth=2
	jmp	.LBB86_32
.LBB86_32:                              # %for.inc64
                                        #   in Loop: Header=BB86_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_26
.LBB86_33:                              # %for.end66
                                        #   in Loop: Header=BB86_24 Depth=1
	jmp	.LBB86_34
.LBB86_34:                              # %for.inc67
                                        #   in Loop: Header=BB86_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_24
.LBB86_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB86_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB86_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB86_36 Depth=1
	vmovsd	.LCPI86_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI86_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB86_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_36
.LBB86_39:                              # %for.end98
	cmpl	$1613865140, -20(%rbp)  # imm = 0x6031A0B4
	jne	.LBB86_41
.LBB86_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_40
.Lfunc_end86:
	.size	create_context_memory.79, .Lfunc_end86-create_context_memory.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.80
.LCPI87_0:
	.quad	4611686018427387904     # double 2
.LCPI87_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.80
	.p2align	4, 0x90
	.type	create_context_memory.80,@function
create_context_memory.80:               # @create_context_memory.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1725556761, -20(%rbp)  # imm = 0x66D9E819
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB87_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB87_3
.LBB87_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB87_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB87_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB87_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB87_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB87_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB87_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB87_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB87_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB87_11:                              # %if.end10
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB87_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB87_13:                              # %if.end16
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	$0, -8(%rbp)
.LBB87_14:                              # %for.cond17
                                        #   Parent Loop BB87_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB87_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB87_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB87_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB87_17:                              # %if.end28
                                        #   in Loop: Header=BB87_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB87_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB87_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB87_19:                              # %if.end39
                                        #   in Loop: Header=BB87_14 Depth=2
	jmp	.LBB87_20
.LBB87_20:                              # %for.inc
                                        #   in Loop: Header=BB87_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_14
.LBB87_21:                              # %for.end
                                        #   in Loop: Header=BB87_8 Depth=1
	jmp	.LBB87_22
.LBB87_22:                              # %for.inc40
                                        #   in Loop: Header=BB87_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_8
.LBB87_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB87_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_26 Depth 2
                                        #       Child Loop BB87_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB87_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB87_24 Depth=1
	movl	$0, -8(%rbp)
.LBB87_26:                              # %for.cond47
                                        #   Parent Loop BB87_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB87_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB87_26 Depth=2
	movl	$0, -12(%rbp)
.LBB87_28:                              # %for.cond51
                                        #   Parent Loop BB87_24 Depth=1
                                        #     Parent Loop BB87_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB87_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB87_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB87_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_28
.LBB87_31:                              # %for.end63
                                        #   in Loop: Header=BB87_26 Depth=2
	jmp	.LBB87_32
.LBB87_32:                              # %for.inc64
                                        #   in Loop: Header=BB87_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_26
.LBB87_33:                              # %for.end66
                                        #   in Loop: Header=BB87_24 Depth=1
	jmp	.LBB87_34
.LBB87_34:                              # %for.inc67
                                        #   in Loop: Header=BB87_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_24
.LBB87_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB87_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB87_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB87_36 Depth=1
	vmovsd	.LCPI87_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB87_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_36
.LBB87_39:                              # %for.end98
	cmpl	$1725556761, -20(%rbp)  # imm = 0x66D9E819
	jne	.LBB87_41
.LBB87_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_40
.Lfunc_end87:
	.size	create_context_memory.80, .Lfunc_end87-create_context_memory.80
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.81
.LCPI88_0:
	.quad	4611686018427387904     # double 2
.LCPI88_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.81
	.p2align	4, 0x90
	.type	create_context_memory.81,@function
create_context_memory.81:               # @create_context_memory.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1440704392, -20(%rbp)  # imm = 0x55DF6788
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB88_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB88_3
.LBB88_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB88_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB88_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB88_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB88_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB88_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB88_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_11:                              # %if.end10
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB88_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_13:                              # %if.end16
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	$0, -8(%rbp)
.LBB88_14:                              # %for.cond17
                                        #   Parent Loop BB88_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB88_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB88_17:                              # %if.end28
                                        #   in Loop: Header=BB88_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB88_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB88_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB88_19:                              # %if.end39
                                        #   in Loop: Header=BB88_14 Depth=2
	jmp	.LBB88_20
.LBB88_20:                              # %for.inc
                                        #   in Loop: Header=BB88_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_14
.LBB88_21:                              # %for.end
                                        #   in Loop: Header=BB88_8 Depth=1
	jmp	.LBB88_22
.LBB88_22:                              # %for.inc40
                                        #   in Loop: Header=BB88_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_8
.LBB88_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB88_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_26 Depth 2
                                        #       Child Loop BB88_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB88_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	$0, -8(%rbp)
.LBB88_26:                              # %for.cond47
                                        #   Parent Loop BB88_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB88_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	$0, -12(%rbp)
.LBB88_28:                              # %for.cond51
                                        #   Parent Loop BB88_24 Depth=1
                                        #     Parent Loop BB88_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB88_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB88_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB88_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_28
.LBB88_31:                              # %for.end63
                                        #   in Loop: Header=BB88_26 Depth=2
	jmp	.LBB88_32
.LBB88_32:                              # %for.inc64
                                        #   in Loop: Header=BB88_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_26
.LBB88_33:                              # %for.end66
                                        #   in Loop: Header=BB88_24 Depth=1
	jmp	.LBB88_34
.LBB88_34:                              # %for.inc67
                                        #   in Loop: Header=BB88_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_24
.LBB88_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB88_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB88_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB88_36 Depth=1
	vmovsd	.LCPI88_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI88_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB88_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_36
.LBB88_39:                              # %for.end98
	cmpl	$1440704392, -20(%rbp)  # imm = 0x55DF6788
	jne	.LBB88_41
.LBB88_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_40
.Lfunc_end88:
	.size	create_context_memory.81, .Lfunc_end88-create_context_memory.81
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.82
.LCPI89_0:
	.quad	4611686018427387904     # double 2
.LCPI89_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.82
	.p2align	4, 0x90
	.type	create_context_memory.82,@function
create_context_memory.82:               # @create_context_memory.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$986130986, -20(%rbp)   # imm = 0x3AC72A2A
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB89_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB89_3
.LBB89_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB89_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB89_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB89_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB89_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB89_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_11:                              # %if.end10
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB89_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_13:                              # %if.end16
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	$0, -8(%rbp)
.LBB89_14:                              # %for.cond17
                                        #   Parent Loop BB89_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB89_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB89_17:                              # %if.end28
                                        #   in Loop: Header=BB89_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB89_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB89_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB89_19:                              # %if.end39
                                        #   in Loop: Header=BB89_14 Depth=2
	jmp	.LBB89_20
.LBB89_20:                              # %for.inc
                                        #   in Loop: Header=BB89_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_14
.LBB89_21:                              # %for.end
                                        #   in Loop: Header=BB89_8 Depth=1
	jmp	.LBB89_22
.LBB89_22:                              # %for.inc40
                                        #   in Loop: Header=BB89_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_8
.LBB89_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB89_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_26 Depth 2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB89_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	$0, -8(%rbp)
.LBB89_26:                              # %for.cond47
                                        #   Parent Loop BB89_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB89_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB89_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	$0, -12(%rbp)
.LBB89_28:                              # %for.cond51
                                        #   Parent Loop BB89_24 Depth=1
                                        #     Parent Loop BB89_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB89_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB89_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB89_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_28
.LBB89_31:                              # %for.end63
                                        #   in Loop: Header=BB89_26 Depth=2
	jmp	.LBB89_32
.LBB89_32:                              # %for.inc64
                                        #   in Loop: Header=BB89_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_26
.LBB89_33:                              # %for.end66
                                        #   in Loop: Header=BB89_24 Depth=1
	jmp	.LBB89_34
.LBB89_34:                              # %for.inc67
                                        #   in Loop: Header=BB89_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_24
.LBB89_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB89_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB89_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB89_36 Depth=1
	vmovsd	.LCPI89_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI89_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB89_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_36
.LBB89_39:                              # %for.end98
	cmpl	$986130986, -20(%rbp)   # imm = 0x3AC72A2A
	jne	.LBB89_41
.LBB89_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_40
.Lfunc_end89:
	.size	create_context_memory.82, .Lfunc_end89-create_context_memory.82
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.83
.LCPI90_0:
	.quad	4611686018427387904     # double 2
.LCPI90_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.83
	.p2align	4, 0x90
	.type	create_context_memory.83,@function
create_context_memory.83:               # @create_context_memory.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$395567727, -20(%rbp)   # imm = 0x1793E26F
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB90_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB90_3
.LBB90_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB90_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB90_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB90_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB90_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB90_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_11:                              # %if.end10
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB90_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_13:                              # %if.end16
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	$0, -8(%rbp)
.LBB90_14:                              # %for.cond17
                                        #   Parent Loop BB90_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB90_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB90_17:                              # %if.end28
                                        #   in Loop: Header=BB90_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB90_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB90_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB90_19:                              # %if.end39
                                        #   in Loop: Header=BB90_14 Depth=2
	jmp	.LBB90_20
.LBB90_20:                              # %for.inc
                                        #   in Loop: Header=BB90_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_14
.LBB90_21:                              # %for.end
                                        #   in Loop: Header=BB90_8 Depth=1
	jmp	.LBB90_22
.LBB90_22:                              # %for.inc40
                                        #   in Loop: Header=BB90_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_8
.LBB90_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB90_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_26 Depth 2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB90_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	$0, -8(%rbp)
.LBB90_26:                              # %for.cond47
                                        #   Parent Loop BB90_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB90_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB90_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	$0, -12(%rbp)
.LBB90_28:                              # %for.cond51
                                        #   Parent Loop BB90_24 Depth=1
                                        #     Parent Loop BB90_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB90_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB90_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB90_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_28
.LBB90_31:                              # %for.end63
                                        #   in Loop: Header=BB90_26 Depth=2
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc64
                                        #   in Loop: Header=BB90_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_33:                              # %for.end66
                                        #   in Loop: Header=BB90_24 Depth=1
	jmp	.LBB90_34
.LBB90_34:                              # %for.inc67
                                        #   in Loop: Header=BB90_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_24
.LBB90_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB90_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB90_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB90_36 Depth=1
	vmovsd	.LCPI90_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI90_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB90_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_36
.LBB90_39:                              # %for.end98
	cmpl	$395567727, -20(%rbp)   # imm = 0x1793E26F
	jne	.LBB90_41
.LBB90_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_40
.Lfunc_end90:
	.size	create_context_memory.83, .Lfunc_end90-create_context_memory.83
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function create_context_memory.84
.LCPI91_0:
	.quad	4611686018427387904     # double 2
.LCPI91_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	create_context_memory.84
	.p2align	4, 0x90
	.type	create_context_memory.84,@function
create_context_memory.84:               # @create_context_memory.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1910768309, -20(%rbp)  # imm = 0x71E402B5
	movq	img, %rax
	movl	72488(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	input, %rax
	cmpl	$1, 208(%rax)
	jne	.LBB91_2
# %bb.1:                                # %cond.true
	movq	input, %rax
	movl	212(%rax), %eax
	jmp	.LBB91_3
.LBB91_2:                               # %cond.false
	movl	-16(%rbp), %eax
.LBB91_3:                               # %cond.end
	movl	%eax, num_mb_per_slice
	movl	-16(%rbp), %eax
	addl	num_mb_per_slice, %eax
	subl	$1, %eax
	cltd
	idivl	num_mb_per_slice
	movl	%eax, number_of_slices
	movl	$24, %edi
	callq	malloc
	movq	%rax, initialized
	cmpq	$0, %rax
	jne	.LBB91_5
# %bb.4:                                # %if.then
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_5:                               # %if.end
	movl	$24, %edi
	callq	malloc
	movq	%rax, model_number
	cmpq	$0, %rax
	jne	.LBB91_7
# %bb.6:                                # %if.then4
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_7:                               # %if.end5
	movl	$0, -4(%rbp)
.LBB91_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	cmpl	$3, -4(%rbp)
	jge	.LBB91_23
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_11
# %bb.10:                               # %if.then9
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_11:                              # %if.end10
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$32, %edi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_13
# %bb.12:                               # %if.then15
                                        #   in Loop: Header=BB91_8 Depth=1
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_13:                              # %if.end16
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	$0, -8(%rbp)
.LBB91_14:                              # %for.cond17
                                        #   Parent Loop BB91_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB91_21
# %bb.15:                               # %for.body19
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	initialized, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_17
# %bb.16:                               # %if.then27
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str, %rdi
	callq	no_mem_exit
.LBB91_17:                              # %if.end28
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	number_of_slices, %rdi
	shlq	$2, %rdi
	callq	malloc
	movq	model_number, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpq	$0, %rax
	jne	.LBB91_19
# %bb.18:                               # %if.then38
                                        #   in Loop: Header=BB91_14 Depth=2
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_19:                              # %if.end39
                                        #   in Loop: Header=BB91_14 Depth=2
	jmp	.LBB91_20
.LBB91_20:                              # %for.inc
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_14
.LBB91_21:                              # %for.end
                                        #   in Loop: Header=BB91_8 Depth=1
	jmp	.LBB91_22
.LBB91_22:                              # %for.inc40
                                        #   in Loop: Header=BB91_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_8
.LBB91_23:                              # %for.end42
	movl	$0, -4(%rbp)
.LBB91_24:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_26 Depth 2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB91_35
# %bb.25:                               # %for.body46
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	$0, -8(%rbp)
.LBB91_26:                              # %for.cond47
                                        #   Parent Loop BB91_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB91_28 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB91_33
# %bb.27:                               # %for.body50
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	$0, -12(%rbp)
.LBB91_28:                              # %for.cond51
                                        #   Parent Loop BB91_24 Depth=1
                                        #     Parent Loop BB91_26 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	cmpl	number_of_slices, %eax
	jge	.LBB91_31
# %bb.29:                               # %for.body54
                                        #   in Loop: Header=BB91_28 Depth=3
	movq	initialized, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.30:                               # %for.inc61
                                        #   in Loop: Header=BB91_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_28
.LBB91_31:                              # %for.end63
                                        #   in Loop: Header=BB91_26 Depth=2
	jmp	.LBB91_32
.LBB91_32:                              # %for.inc64
                                        #   in Loop: Header=BB91_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB91_26
.LBB91_33:                              # %for.end66
                                        #   in Loop: Header=BB91_24 Depth=1
	jmp	.LBB91_34
.LBB91_34:                              # %for.inc67
                                        #   in Loop: Header=BB91_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_24
.LBB91_35:                              # %for.end69
	movl	$0, -4(%rbp)
.LBB91_36:                              # %for.cond70
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$64, -4(%rbp)
	jge	.LBB91_39
# %bb.37:                               # %for.body73
                                        #   in Loop: Header=BB91_36 Depth=1
	vmovsd	.LCPI91_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vsubsd	probability(,%rax,8), %xmm0, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, probability(,%rax,8)
	movslq	-4(%rbp), %rax
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-32(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movslq	-4(%rbp), %rax
	vmovsd	%xmm0, entropy(,%rax,8)
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	probability(,%rax,8), %xmm0 # xmm0 = mem[0],zero
	callq	log10
	vmovsd	%xmm0, -40(%rbp)        # 8-byte Spill
	vmovsd	.LCPI91_0(%rip), %xmm0  # xmm0 = mem[0],zero
	callq	log10
	vmovsd	-40(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	vdivsd	%xmm0, %xmm1, %xmm0
	movl	$127, %eax
	subl	-4(%rbp), %eax
	cltq
	vmovsd	%xmm0, entropy(,%rax,8)
# %bb.38:                               # %for.inc96
                                        #   in Loop: Header=BB91_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_36
.LBB91_39:                              # %for.end98
	cmpl	$1910768309, -20(%rbp)  # imm = 0x71E402B5
	jne	.LBB91_41
.LBB91_40:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_40
.Lfunc_end91:
	.size	create_context_memory.84, .Lfunc_end91-create_context_memory.84
	.cfi_endproc
                                        # -- End function
	.type	num_mb_per_slice,@object # @num_mb_per_slice
	.comm	num_mb_per_slice,4,4
	.type	number_of_slices,@object # @number_of_slices
	.comm	number_of_slices,4,4
	.type	initialized,@object     # @initialized
	.comm	initialized,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"create_context_memory: initialized"
	.size	.L.str, 35

	.type	model_number,@object    # @model_number
	.comm	model_number,8,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"create_context_memory: model_number"
	.size	.L.str.1, 36

	.type	probability,@object     # @probability
	.data
	.globl	probability
	.p2align	4
probability:
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	0                       # double 0
	.quad	4602678819172646912     # double 0.5
	.quad	4602221415580092655     # double 0.474609
	.quad	4601787232547217120     # double 0.45050699999999999
	.quad	4601375099138117191     # double 0.42762899999999998
	.quad	4600983880445686771     # double 0.405912
	.quad	4600612549649210819     # double 0.385299
	.quad	4600260061913575785     # double 0.365732
	.quad	4599925480490059176     # double 0.347159
	.quad	4599607904658735518     # double 0.32952999999999999
	.quad	4599306433699679337     # double 0.31279499999999999
	.quad	4599020292993754725     # double 0.29691099999999998
	.quad	4598748671893028756     # double 0.281833
	.quad	4598490831807162540     # double 0.26751999999999998
	.quad	4598246106203411228     # double 0.25393500000000002
	.quad	4597852365495189480     # double 0.241039
	.quad	4597411373019677361     # double 0.228799
	.quad	4596992754427114019     # double 0.21718000000000001
	.quad	4596595392824791865     # double 0.206151
	.quad	4596218207348800331     # double 0.19568199999999999
	.quad	4595860153164025867     # double 0.18574399999999999
	.quad	4595520329550542999     # double 0.176312
	.quad	4595197727702035196     # double 0.16735800000000001
	.quad	4594891518956171021     # double 0.158859
	.quad	4594600874650619039     # double 0.15079200000000001
	.quad	4594324966123047813     # double 0.14313400000000001
	.quad	4594063108826313982     # double 0.13586599999999999
	.quad	4593814510126883131     # double 0.128966
	.quad	4593485495152505952     # double 0.122417
	.quad	4593037513090372154     # double 0.1162
	.quad	4592612301227954341     # double 0.11029899999999999
	.quad	4592208706643747907     # double 0.104698
	.quad	4591825576416248244     # double 0.099380999999999997
	.quad	4591461901739138822     # double 0.094334000000000001
	.quad	4591116673806103109     # double 0.089542999999999998
	.quad	4590789027926012651     # double 0.084996000000000002
	.quad	4590478027350144954     # double 0.080680000000000001
	.quad	4590182807387371563     # double 0.076582999999999998
	.quad	4589902575404158061     # double 0.072693999999999995
	.quad	4589636538766970031     # double 0.069001999999999994
	.quad	4589384048957461132     # double 0.065498000000000001
	.quad	4589120750508846543     # double 0.062171999999999998
	.quad	4588665634744902990     # double 0.059013999999999997
	.quad	4588233865641427726     # double 0.056017999999999998
	.quad	4587823857931351916     # double 0.053172999999999998
	.quad	4587434746923547105     # double 0.050472999999999997
	.quad	4587065235581320611     # double 0.047909
	.quad	4586714603328732054     # double 0.045476000000000003
	.quad	4586381841359464902     # double 0.043166999999999997
	.quad	4586065940867202626     # double 0.040974999999999998
	.quad	4585766037160816770     # double 0.038893999999999998
	.quad	4585481409664366955     # double 0.036919
	.quad	4585211193686724725     # double 0.035043999999999999
	.quad	4584954668651949702     # double 0.033264000000000002
	.quad	4584711258099289581     # double 0.031574999999999999
	.quad	4584296062242443040     # double 0.029971999999999999
	.quad	4583857375609940135     # double 0.02845
	.quad	4583440882716400912     # double 0.027005000000000001
	.quad	4583045430640320763     # double 0.025633
	.quad	4582670442920947386     # double 0.024331999999999999
	.quad	4582314190176023870     # double 0.023095999999999998
	.quad	4581976095944797913     # double 0.021923000000000002
	.quad	4581655295536141057     # double 0.020809999999999999
	.quad	4581350636028548698     # double 0.019753
	.quad	4581061540961268531     # double 0.018749999999999999
	.size	probability, 1024

	.type	entropy,@object         # @entropy
	.comm	entropy,1024,16
	.type	INIT_MB_TYPE_I,@object  # @INIT_MB_TYPE_I
	.section	.rodata,"a",@progbits
	.p2align	4
INIT_MB_TYPE_I:
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	4294967281              # 0xfffffff1
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	74                      # 0x4a
	.long	4294967268              # 0xffffffe4
	.long	127                     # 0x7f
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_I, 264

	.type	INIT_MB_TYPE_P,@object  # @INIT_MB_TYPE_P
	.p2align	4
INIT_MB_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	23                      # 0x17
	.long	33                      # 0x21
	.long	23                      # 0x17
	.long	2                       # 0x2
	.long	21                      # 0x15
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	4294967259              # 0xffffffdb
	.long	118                     # 0x76
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	65                      # 0x41
	.long	1                       # 0x1
	.long	62                      # 0x3e
	.long	26                      # 0x1a
	.long	67                      # 0x43
	.long	16                      # 0x10
	.long	90                      # 0x5a
	.long	9                       # 0x9
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	4294967276              # 0xffffffec
	.long	104                     # 0x68
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	18                      # 0x12
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	43                      # 0x2b
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	16                      # 0x10
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	9                       # 0x9
	.long	4                       # 0x4
	.long	41                      # 0x29
	.long	4294967267              # 0xffffffe3
	.long	118                     # 0x76
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	79                      # 0x4f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	57                      # 0x39
	.long	2                       # 0x2
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	26                      # 0x1a
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967251              # 0xffffffd3
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	101                     # 0x65
	.long	4294967292              # 0xfffffffc
	.long	76                      # 0x4c
	.long	26                      # 0x1a
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	29                      # 0x1d
	.long	16                      # 0x10
	.long	25                      # 0x19
	.long	0                       # 0x0
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	51                      # 0x33
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967269              # 0xffffffe5
	.long	99                      # 0x63
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	4294967292              # 0xfffffffc
	.long	85                      # 0x55
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	5                       # 0x5
	.long	57                      # 0x39
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	37                      # 0x25
	.long	42                      # 0x2a
	.long	12                      # 0xc
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967264              # 0xffffffe0
	.long	127                     # 0x7f
	.long	4294967274              # 0xffffffea
	.long	117                     # 0x75
	.long	4294967294              # 0xfffffffe
	.long	74                      # 0x4a
	.long	20                      # 0x14
	.long	40                      # 0x28
	.long	20                      # 0x14
	.long	10                      # 0xa
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_TYPE_P, 792

	.type	INIT_B8_TYPE_I,@object  # @INIT_B8_TYPE_I
	.p2align	4
INIT_B8_TYPE_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_I, 144

	.type	INIT_B8_TYPE_P,@object  # @INIT_B8_TYPE_P
	.p2align	4
INIT_B8_TYPE_P:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	73                      # 0x49
	.long	17                      # 0x11
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	86                      # 0x56
	.long	4294967279              # 0xffffffef
	.long	95                      # 0x5f
	.long	4294967290              # 0xfffffffa
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	50                      # 0x32
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	10                      # 0xa
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	8                       # 0x8
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	73                      # 0x49
	.long	14                      # 0xe
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967282              # 0xfffffff2
	.long	88                      # 0x58
	.long	4294967290              # 0xfffffffa
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_B8_TYPE_P, 432

	.type	INIT_MV_RES_I,@object   # @INIT_MV_RES_I
	.p2align	4
INIT_MV_RES_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_I, 160

	.type	INIT_MV_RES_P,@object   # @INIT_MV_RES_P
	.p2align	4
INIT_MV_RES_P:
	.long	4294967293              # 0xfffffffd
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	2                       # 0x2
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	4                       # 0x4
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967289              # 0xfffffff9
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967281              # 0xfffffff1
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	116                     # 0x74
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	20                      # 0x14
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	84                      # 0x54
	.long	6                       # 0x6
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	90                      # 0x5a
	.long	4294967295              # 0xffffffff
	.long	101                     # 0x65
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MV_RES_P, 480

	.type	INIT_REF_NO_I,@object   # @INIT_REF_NO_I
	.p2align	4
INIT_REF_NO_I:
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_I, 96

	.type	INIT_REF_NO_P,@object   # @INIT_REF_NO_P
	.p2align	4
INIT_REF_NO_P:
	.long	4294967289              # 0xfffffff9
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	80                      # 0x50
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	77                      # 0x4d
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	86                      # 0x56
	.long	4294967291              # 0xfffffffb
	.long	72                      # 0x48
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	50                      # 0x32
	.long	1                       # 0x1
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_REF_NO_P, 288

	.type	INIT_DELTA_QP_I,@object # @INIT_DELTA_QP_I
	.p2align	4
INIT_DELTA_QP_I:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_I, 32

	.type	INIT_DELTA_QP_P,@object # @INIT_DELTA_QP_P
	.p2align	4
INIT_DELTA_QP_P:
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	63                      # 0x3f
	.size	INIT_DELTA_QP_P, 96

	.type	INIT_MB_AFF_I,@object   # @INIT_MB_AFF_I
	.p2align	4
INIT_MB_AFF_I:
	.long	0                       # 0x0
	.long	11                      # 0xb
	.long	1                       # 0x1
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_I, 32

	.type	INIT_MB_AFF_P,@object   # @INIT_MB_AFF_P
	.p2align	4
INIT_MB_AFF_P:
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	4294967293              # 0xfffffffd
	.long	96                      # 0x60
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	7                       # 0x7
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_MB_AFF_P, 96

	.type	INIT_TRANSFORM_SIZE_I,@object # @INIT_TRANSFORM_SIZE_I
	.p2align	4
INIT_TRANSFORM_SIZE_I:
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	31                      # 0x1f
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	50                      # 0x32
	.size	INIT_TRANSFORM_SIZE_I, 24

	.type	INIT_TRANSFORM_SIZE_P,@object # @INIT_TRANSFORM_SIZE_P
	.p2align	4
INIT_TRANSFORM_SIZE_P:
	.long	12                      # 0xc
	.long	40                      # 0x28
	.long	11                      # 0xb
	.long	51                      # 0x33
	.long	14                      # 0xe
	.long	59                      # 0x3b
	.long	25                      # 0x19
	.long	32                      # 0x20
	.long	21                      # 0x15
	.long	49                      # 0x31
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	50                      # 0x32
	.long	17                      # 0x11
	.long	61                      # 0x3d
	.size	INIT_TRANSFORM_SIZE_P, 72

	.type	INIT_IPR_I,@object      # @INIT_IPR_I
	.p2align	4
INIT_IPR_I:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_I, 16

	.type	INIT_IPR_P,@object      # @INIT_IPR_P
	.p2align	4
INIT_IPR_P:
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.size	INIT_IPR_P, 48

	.type	INIT_CIPR_I,@object     # @INIT_CIPR_I
	.p2align	4
INIT_CIPR_I:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_I, 32

	.type	INIT_CIPR_P,@object     # @INIT_CIPR_P
	.p2align	4
INIT_CIPR_P:
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4                       # 0x4
	.long	86                      # 0x56
	.long	0                       # 0x0
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.size	INIT_CIPR_P, 96

	.type	INIT_CBP_I,@object      # @INIT_CBP_I
	.p2align	4
INIT_CBP_I:
	.long	4294967279              # 0xffffffef
	.long	127                     # 0x7f
	.long	4294967283              # 0xfffffff3
	.long	102                     # 0x66
	.long	0                       # 0x0
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	95                      # 0x5f
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.size	INIT_CBP_I, 96

	.type	INIT_CBP_P,@object      # @INIT_CBP_P
	.p2align	4
INIT_CBP_P:
	.long	4294967269              # 0xffffffe5
	.long	126                     # 0x7e
	.long	4294967268              # 0xffffffe4
	.long	98                      # 0x62
	.long	4294967271              # 0xffffffe7
	.long	101                     # 0x65
	.long	4294967273              # 0xffffffe9
	.long	67                      # 0x43
	.long	4294967268              # 0xffffffe4
	.long	82                      # 0x52
	.long	4294967276              # 0xffffffec
	.long	94                      # 0x5e
	.long	4294967280              # 0xfffffff0
	.long	83                      # 0x53
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	91                      # 0x5b
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967283              # 0xfffffff3
	.long	93                      # 0x5d
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967257              # 0xffffffd9
	.long	127                     # 0x7f
	.long	4294967278              # 0xffffffee
	.long	91                      # 0x5b
	.long	4294967279              # 0xffffffef
	.long	96                      # 0x60
	.long	4294967270              # 0xffffffe6
	.long	81                      # 0x51
	.long	4294967261              # 0xffffffdd
	.long	98                      # 0x62
	.long	4294967272              # 0xffffffe8
	.long	102                     # 0x66
	.long	4294967273              # 0xffffffe9
	.long	97                      # 0x61
	.long	4294967269              # 0xffffffe5
	.long	119                     # 0x77
	.long	4294967272              # 0xffffffe8
	.long	99                      # 0x63
	.long	4294967275              # 0xffffffeb
	.long	110                     # 0x6e
	.long	4294967278              # 0xffffffee
	.long	102                     # 0x66
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967260              # 0xffffffdc
	.long	127                     # 0x7f
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967271              # 0xffffffe7
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	89                      # 0x59
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	4294967282              # 0xfffffff2
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.size	INIT_CBP_P, 288

	.type	INIT_BCBP_I,@object     # @INIT_BCBP_I
	.p2align	4
INIT_BCBP_I:
	.long	4294967279              # 0xffffffef
	.long	123                     # 0x7b
	.long	4294967284              # 0xfffffff4
	.long	115                     # 0x73
	.long	4294967280              # 0xfffffff0
	.long	122                     # 0x7a
	.long	4294967285              # 0xfffffff5
	.long	115                     # 0x73
	.long	4294967284              # 0xfffffff4
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	68                      # 0x44
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967283              # 0xfffffff3
	.long	104                     # 0x68
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	93                      # 0x5d
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967290              # 0xfffffffa
	.long	97                      # 0x61
	.long	4294967289              # 0xfffffff9
	.long	91                      # 0x5b
	.long	4294967276              # 0xffffffec
	.long	127                     # 0x7f
	.long	4294967292              # 0xfffffffc
	.long	56                      # 0x38
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967289              # 0xfffffff9
	.long	76                      # 0x4c
	.long	4294967274              # 0xffffffea
	.long	125                     # 0x7d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_I, 256

	.type	INIT_BCBP_P,@object     # @INIT_BCBP_P
	.p2align	4
INIT_BCBP_P:
	.long	4294967289              # 0xfffffff9
	.long	92                      # 0x5c
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	96                      # 0x60
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	65                      # 0x41
	.long	4294967295              # 0xffffffff
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	126                     # 0x7e
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967288              # 0xfffffff8
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	80                      # 0x50
	.long	4294967291              # 0xfffffffb
	.long	89                      # 0x59
	.long	4294967289              # 0xfffffff9
	.long	94                      # 0x5e
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967281              # 0xfffffff1
	.long	84                      # 0x54
	.long	4294967261              # 0xffffffdd
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967265              # 0xffffffe1
	.long	127                     # 0x7f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	7                       # 0x7
	.long	56                      # 0x38
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	4294967293              # 0xfffffffd
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967289              # 0xfffffff9
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	80                      # 0x50
	.long	5                       # 0x5
	.long	76                      # 0x4c
	.long	2                       # 0x2
	.long	84                      # 0x54
	.long	5                       # 0x5
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	4                       # 0x4
	.long	61                      # 0x3d
	.long	4294967282              # 0xfffffff2
	.long	83                      # 0x53
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	79                      # 0x4f
	.long	4294967285              # 0xfffffff5
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	91                      # 0x5b
	.long	4294967266              # 0xffffffe2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967294              # 0xfffffffe
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	92                      # 0x5c
	.long	4294967290              # 0xfffffffa
	.long	56                      # 0x38
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	4294967288              # 0xfffffff8
	.long	71                      # 0x47
	.long	4294967283              # 0xfffffff3
	.long	98                      # 0x62
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_BCBP_P, 768

	.type	INIT_MAP_I,@object      # @INIT_MAP_I
	.p2align	4
INIT_MAP_I:
	.long	4294967289              # 0xfffffff9
	.long	93                      # 0x5d
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	4294967292              # 0xfffffffc
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	68                      # 0x44
	.long	4294967284              # 0xfffffff4
	.long	84                      # 0x54
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	65                      # 0x41
	.long	8                       # 0x8
	.long	61                      # 0x3d
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	4294967294              # 0xfffffffe
	.long	66                      # 0x42
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967294              # 0xfffffffe
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	7                       # 0x7
	.long	52                      # 0x34
	.long	10                      # 0xa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	1                       # 0x1
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	28                      # 0x1c
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	33                      # 0x21
	.long	14                      # 0xe
	.long	62                      # 0x3e
	.long	4294967279              # 0xffffffef
	.long	120                     # 0x78
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967278              # 0xffffffee
	.long	114                     # 0x72
	.long	4294967285              # 0xfffffff5
	.long	85                      # 0x55
	.long	4294967281              # 0xfffffff1
	.long	92                      # 0x5c
	.long	4294967282              # 0xfffffff2
	.long	89                      # 0x59
	.long	4294967270              # 0xffffffe6
	.long	71                      # 0x47
	.long	4294967281              # 0xfffffff1
	.long	81                      # 0x51
	.long	4294967282              # 0xfffffff2
	.long	80                      # 0x50
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967282              # 0xfffffff2
	.long	70                      # 0x46
	.long	4294967272              # 0xffffffe8
	.long	56                      # 0x38
	.long	4294967273              # 0xffffffe9
	.long	68                      # 0x44
	.long	4294967272              # 0xffffffe8
	.long	50                      # 0x32
	.long	4294967285              # 0xfffffff5
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	108                     # 0x6c
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	4294967283              # 0xfffffff3
	.long	101                     # 0x65
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967284              # 0xfffffff4
	.long	94                      # 0x5e
	.long	4294967286              # 0xfffffff6
	.long	88                      # 0x58
	.long	4294967280              # 0xfffffff0
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967289              # 0xfffffff9
	.long	83                      # 0x53
	.long	4294967283              # 0xfffffff3
	.long	87                      # 0x57
	.long	4294967277              # 0xffffffed
	.long	94                      # 0x5e
	.long	1                       # 0x1
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	18                      # 0x12
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	102                     # 0x66
	.long	4294967281              # 0xfffffff1
	.long	100                     # 0x64
	.long	0                       # 0x0
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	4294967283              # 0xfffffff3
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	21                      # 0x15
	.long	37                      # 0x25
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	9                       # 0x9
	.long	57                      # 0x39
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	12                      # 0xc
	.long	72                      # 0x48
	.size	INIT_MAP_I, 960

	.type	INIT_MAP_P,@object      # @INIT_MAP_P
	.p2align	4
INIT_MAP_P:
	.long	4294967294              # 0xfffffffe
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967295              # 0xffffffff
	.long	75                      # 0x4b
	.long	4294967289              # 0xfffffff9
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	54                      # 0x36
	.long	5                       # 0x5
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	1                       # 0x1
	.long	50                      # 0x32
	.long	6                       # 0x6
	.long	42                      # 0x2a
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	13                      # 0xd
	.long	29                      # 0x1d
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4294967286              # 0xfffffff6
	.long	93                      # 0x5d
	.long	4294967289              # 0xfffffff9
	.long	73                      # 0x49
	.long	4294967294              # 0xfffffffe
	.long	73                      # 0x49
	.long	13                      # 0xd
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	4294967289              # 0xfffffff9
	.long	100                     # 0x64
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967291              # 0xfffffffb
	.long	69                      # 0x45
	.long	4294967287              # 0xfffffff7
	.long	70                      # 0x46
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967286              # 0xfffffff6
	.long	68                      # 0x44
	.long	4294967277              # 0xffffffed
	.long	73                      # 0x49
	.long	4294967284              # 0xfffffff4
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	70                      # 0x46
	.long	4294967281              # 0xfffffff1
	.long	67                      # 0x43
	.long	4294967276              # 0xffffffec
	.long	62                      # 0x3e
	.long	4294967277              # 0xffffffed
	.long	70                      # 0x46
	.long	4294967280              # 0xfffffff0
	.long	66                      # 0x42
	.long	4294967274              # 0xffffffea
	.long	65                      # 0x41
	.long	4294967276              # 0xffffffec
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	53                      # 0x35
	.long	2                       # 0x2
	.long	53                      # 0x35
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	4294967294              # 0xfffffffe
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	56                      # 0x38
	.long	4294967283              # 0xfffffff3
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	69                      # 0x45
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	14                      # 0xe
	.long	39                      # 0x27
	.long	4                       # 0x4
	.long	51                      # 0x33
	.long	13                      # 0xd
	.long	68                      # 0x44
	.long	3                       # 0x3
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	61                      # 0x3d
	.long	9                       # 0x9
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	7                       # 0x7
	.long	50                      # 0x32
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	11                      # 0xb
	.long	48                      # 0x30
	.long	4294967291              # 0xfffffffb
	.long	60                      # 0x3c
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	5                       # 0x5
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	43                      # 0x2b
	.long	4294967295              # 0xffffffff
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967283              # 0xfffffff3
	.long	103                     # 0x67
	.long	4294967283              # 0xfffffff3
	.long	91                      # 0x5b
	.long	4294967287              # 0xfffffff7
	.long	89                      # 0x59
	.long	4294967282              # 0xfffffff2
	.long	92                      # 0x5c
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967284              # 0xfffffff4
	.long	87                      # 0x57
	.long	4294967273              # 0xffffffe9
	.long	110                     # 0x6e
	.long	4294967272              # 0xffffffe8
	.long	105                     # 0x69
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967276              # 0xffffffec
	.long	112                     # 0x70
	.long	4294967279              # 0xffffffef
	.long	99                      # 0x63
	.long	4294967218              # 0xffffffb2
	.long	127                     # 0x7f
	.long	4294967226              # 0xffffffba
	.long	127                     # 0x7f
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967250              # 0xffffffd2
	.long	127                     # 0x7f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	4294967295              # 0xffffffff
	.long	55                      # 0x37
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	4294967262              # 0xffffffde
	.long	119                     # 0x77
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	32                      # 0x20
	.long	20                      # 0x14
	.long	30                      # 0x1e
	.long	22                      # 0x16
	.long	4294967252              # 0xffffffd4
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	60                      # 0x3c
	.long	4294967293              # 0xfffffffd
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	67                      # 0x43
	.long	4294967271              # 0xffffffe7
	.long	84                      # 0x54
	.long	4294967282              # 0xfffffff2
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	65                      # 0x41
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967285              # 0xfffffff5
	.long	70                      # 0x46
	.long	18                      # 0x12
	.long	55                      # 0x37
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	18                      # 0x12
	.long	25                      # 0x19
	.long	9                       # 0x9
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	43                      # 0x2b
	.long	9                       # 0x9
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	46                      # 0x2e
	.long	19                      # 0x13
	.long	38                      # 0x26
	.long	4294967292              # 0xfffffffc
	.long	66                      # 0x42
	.long	15                      # 0xf
	.long	38                      # 0x26
	.long	12                      # 0xc
	.long	42                      # 0x2a
	.long	9                       # 0x9
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	4294967292              # 0xfffffffc
	.long	86                      # 0x56
	.long	4294967284              # 0xfffffff4
	.long	88                      # 0x58
	.long	4294967291              # 0xfffffffb
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	69                      # 0x45
	.long	4294967295              # 0xffffffff
	.long	59                      # 0x3b
	.long	5                       # 0x5
	.long	66                      # 0x42
	.long	4                       # 0x4
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967292              # 0xfffffffc
	.long	44                      # 0x2c
	.long	4294967295              # 0xffffffff
	.long	69                      # 0x45
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967289              # 0xfffffff9
	.long	51                      # 0x33
	.long	4294967292              # 0xfffffffc
	.long	47                      # 0x2f
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967293              # 0xfffffffd
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	53                      # 0x35
	.long	8                       # 0x8
	.long	76                      # 0x4c
	.long	4294967287              # 0xfffffff7
	.long	78                      # 0x4e
	.long	4294967285              # 0xfffffff5
	.long	83                      # 0x53
	.long	9                       # 0x9
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	90                      # 0x5a
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	4294967281              # 0xfffffff1
	.long	72                      # 0x48
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	80                      # 0x50
	.long	4294967275              # 0xffffffeb
	.long	83                      # 0x53
	.long	4294967275              # 0xffffffeb
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	31                      # 0x1f
	.long	4294967271              # 0xffffffe7
	.long	64                      # 0x40
	.long	4294967267              # 0xffffffe3
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	75                      # 0x4b
	.long	17                      # 0x11
	.long	63                      # 0x3f
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967291              # 0xfffffffb
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	27                      # 0x1b
	.long	13                      # 0xd
	.long	91                      # 0x5b
	.long	3                       # 0x3
	.long	65                      # 0x41
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	66                      # 0x42
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4294967293              # 0xfffffffd
	.long	68                      # 0x44
	.long	4294967276              # 0xffffffec
	.long	81                      # 0x51
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	1                       # 0x1
	.long	7                       # 0x7
	.long	4294967293              # 0xfffffffd
	.long	23                      # 0x17
	.long	4294967275              # 0xffffffeb
	.long	74                      # 0x4a
	.long	16                      # 0x10
	.long	66                      # 0x42
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	17                      # 0x11
	.long	37                      # 0x25
	.long	44                      # 0x2c
	.long	4294967278              # 0xffffffee
	.long	50                      # 0x32
	.long	4294967262              # 0xffffffde
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.size	INIT_MAP_P, 2880

	.type	INIT_LAST_I,@object     # @INIT_LAST_I
	.p2align	4
INIT_LAST_I:
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	8                       # 0x8
	.long	25                      # 0x19
	.long	13                      # 0xd
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	9                       # 0x9
	.long	13                      # 0xd
	.long	19                      # 0x13
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	18                      # 0x12
	.long	6                       # 0x6
	.long	29                      # 0x1d
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	7                       # 0x7
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	38                      # 0x26
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	42                      # 0x2a
	.long	13                      # 0xd
	.long	44                      # 0x2c
	.long	16                      # 0x10
	.long	45                      # 0x2d
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	49                      # 0x31
	.long	30                      # 0x1e
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	10                      # 0xa
	.long	55                      # 0x37
	.long	17                      # 0x11
	.long	51                      # 0x33
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	89                      # 0x59
	.long	23                      # 0x17
	.long	4294967283              # 0xfffffff3
	.long	26                      # 0x1a
	.long	4294967283              # 0xfffffff3
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	49                      # 0x31
	.long	4294967282              # 0xfffffff2
	.long	44                      # 0x2c
	.long	3                       # 0x3
	.long	45                      # 0x2d
	.long	6                       # 0x6
	.long	44                      # 0x2c
	.long	34                      # 0x22
	.long	33                      # 0x21
	.long	54                      # 0x36
	.long	19                      # 0x13
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	26                      # 0x1a
	.long	4294967277              # 0xffffffed
	.long	22                      # 0x16
	.long	4294967279              # 0xffffffef
	.long	26                      # 0x1a
	.long	4294967279              # 0xffffffef
	.long	30                      # 0x1e
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967276              # 0xffffffec
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	37                      # 0x25
	.long	4294967269              # 0xffffffe5
	.long	33                      # 0x21
	.long	4294967273              # 0xffffffe9
	.long	40                      # 0x28
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967279              # 0xffffffef
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	41                      # 0x29
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	1                       # 0x1
	.long	41                      # 0x29
	.long	17                      # 0x11
	.long	30                      # 0x1e
	.long	4294967290              # 0xfffffffa
	.long	27                      # 0x1b
	.long	3                       # 0x3
	.long	26                      # 0x1a
	.long	22                      # 0x16
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967280              # 0xfffffff0
	.long	35                      # 0x23
	.long	4294967292              # 0xfffffffc
	.long	38                      # 0x26
	.long	4294967288              # 0xfffffff8
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	37                      # 0x25
	.long	3                       # 0x3
	.long	38                      # 0x26
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	16                      # 0x10
	.long	39                      # 0x27
	.long	22                      # 0x16
	.long	14                      # 0xe
	.long	48                      # 0x30
	.long	27                      # 0x1b
	.long	37                      # 0x25
	.long	21                      # 0x15
	.long	60                      # 0x3c
	.long	12                      # 0xc
	.long	68                      # 0x44
	.long	2                       # 0x2
	.long	97                      # 0x61
	.size	INIT_LAST_I, 960

	.type	INIT_LAST_P,@object     # @INIT_LAST_P
	.p2align	4
INIT_LAST_P:
	.long	11                      # 0xb
	.long	28                      # 0x1c
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	49                      # 0x31
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	2                       # 0x2
	.long	44                      # 0x2c
	.long	2                       # 0x2
	.long	51                      # 0x33
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	2                       # 0x2
	.long	62                      # 0x3e
	.long	6                       # 0x6
	.long	46                      # 0x2e
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	3                       # 0x3
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	6                       # 0x6
	.long	51                      # 0x33
	.long	6                       # 0x6
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	53                      # 0x35
	.long	6                       # 0x6
	.long	52                      # 0x34
	.long	6                       # 0x6
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	45                      # 0x2d
	.long	14                      # 0xe
	.long	36                      # 0x24
	.long	8                       # 0x8
	.long	53                      # 0x35
	.long	4294967295              # 0xffffffff
	.long	82                      # 0x52
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	15                      # 0xf
	.long	46                      # 0x2e
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	4294967295              # 0xffffffff
	.long	84                      # 0x54
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	26                      # 0x1a
	.long	4294967287              # 0xfffffff7
	.long	33                      # 0x21
	.long	4294967287              # 0xfffffff7
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	41                      # 0x29
	.long	4294967294              # 0xfffffffe
	.long	45                      # 0x2d
	.long	3                       # 0x3
	.long	49                      # 0x31
	.long	9                       # 0x9
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	25                      # 0x19
	.long	7                       # 0x7
	.long	30                      # 0x1e
	.long	4294967289              # 0xfffffff9
	.long	28                      # 0x1c
	.long	3                       # 0x3
	.long	28                      # 0x1c
	.long	4                       # 0x4
	.long	32                      # 0x20
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	30                      # 0x1e
	.long	6                       # 0x6
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	30                      # 0x1e
	.long	37                      # 0x25
	.long	20                      # 0x14
	.long	28                      # 0x1c
	.long	34                      # 0x22
	.long	17                      # 0x11
	.long	70                      # 0x46
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	30                      # 0x1e
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	31                      # 0x1f
	.long	23                      # 0x17
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	43                      # 0x2b
	.long	20                      # 0x14
	.long	41                      # 0x29
	.long	11                      # 0xb
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	59                      # 0x3b
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967295              # 0xffffffff
	.long	94                      # 0x5e
	.long	4294967294              # 0xfffffffe
	.long	89                      # 0x59
	.long	4294967287              # 0xfffffff7
	.long	108                     # 0x6c
	.long	4                       # 0x4
	.long	45                      # 0x2d
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	10                      # 0xa
	.long	31                      # 0x1f
	.long	33                      # 0x21
	.long	4294967285              # 0xfffffff5
	.long	52                      # 0x34
	.long	4294967253              # 0xffffffd5
	.long	18                      # 0x12
	.long	15                      # 0xf
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	35                      # 0x23
	.long	4294967274              # 0xffffffea
	.long	38                      # 0x26
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	0                       # 0x0
	.long	39                      # 0x27
	.long	4294967278              # 0xffffffee
	.long	32                      # 0x20
	.long	4294967284              # 0xfffffff4
	.long	102                     # 0x66
	.long	4294967202              # 0xffffffa2
	.zero	8
	.long	56                      # 0x38
	.long	4294967281              # 0xfffffff1
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	10                      # 0xa
	.long	37                      # 0x25
	.long	4294967291              # 0xfffffffb
	.long	51                      # 0x33
	.long	4294967267              # 0xffffffe3
	.long	39                      # 0x27
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967262              # 0xffffffde
	.long	69                      # 0x45
	.long	4294967238              # 0xffffffc6
	.long	67                      # 0x43
	.long	4294967233              # 0xffffffc1
	.long	44                      # 0x2c
	.long	4294967291              # 0xfffffffb
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	4294967267              # 0xffffffe3
	.long	32                      # 0x20
	.long	1                       # 0x1
	.zero	8
	.long	27                      # 0x1b
	.long	36                      # 0x24
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	34                      # 0x22
	.long	4294967266              # 0xffffffe2
	.long	36                      # 0x24
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967269              # 0xffffffe5
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	35                      # 0x23
	.long	4294967280              # 0xfffffff0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	32                      # 0x20
	.long	4294967288              # 0xfffffff8
	.long	37                      # 0x25
	.long	4294967290              # 0xfffffffa
	.long	35                      # 0x23
	.long	0                       # 0x0
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	28                      # 0x1c
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	25                      # 0x19
	.long	29                      # 0x1d
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	75                      # 0x4b
	.long	2                       # 0x2
	.long	72                      # 0x48
	.long	8                       # 0x8
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	14                      # 0xe
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	17                      # 0x11
	.long	35                      # 0x23
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	45                      # 0x2d
	.long	20                      # 0x14
	.long	42                      # 0x2a
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	27                      # 0x1b
	.long	26                      # 0x1a
	.long	16                      # 0x10
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	66                      # 0x42
	.long	16                      # 0x10
	.long	56                      # 0x38
	.long	11                      # 0xb
	.long	73                      # 0x49
	.long	10                      # 0xa
	.long	67                      # 0x43
	.long	4294967286              # 0xfffffff6
	.long	116                     # 0x74
	.long	4                       # 0x4
	.long	39                      # 0x27
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	34                      # 0x22
	.long	11                      # 0xb
	.long	29                      # 0x1d
	.long	8                       # 0x8
	.long	31                      # 0x1f
	.long	6                       # 0x6
	.long	37                      # 0x25
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	3                       # 0x3
	.long	40                      # 0x28
	.long	8                       # 0x8
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	43                      # 0x2b
	.long	13                      # 0xd
	.long	36                      # 0x24
	.long	4                       # 0x4
	.long	47                      # 0x2f
	.long	3                       # 0x3
	.long	55                      # 0x37
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	6                       # 0x6
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	8                       # 0x8
	.long	44                      # 0x2c
	.long	11                      # 0xb
	.long	44                      # 0x2c
	.long	14                      # 0xe
	.long	42                      # 0x2a
	.long	7                       # 0x7
	.long	48                      # 0x30
	.long	4                       # 0x4
	.long	56                      # 0x38
	.long	4                       # 0x4
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	37                      # 0x25
	.long	9                       # 0x9
	.long	49                      # 0x31
	.long	19                      # 0x13
	.long	58                      # 0x3a
	.long	10                      # 0xa
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	20                      # 0x14
	.long	33                      # 0x21
	.long	8                       # 0x8
	.long	63                      # 0x3f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	35                      # 0x23
	.long	4294967278              # 0xffffffee
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	28                      # 0x1c
	.long	4294967293              # 0xfffffffd
	.long	24                      # 0x18
	.long	10                      # 0xa
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	34                      # 0x22
	.long	4294967282              # 0xfffffff2
	.long	52                      # 0x34
	.long	4294967252              # 0xffffffd4
	.long	39                      # 0x27
	.long	4294967272              # 0xffffffe8
	.long	19                      # 0x13
	.long	17                      # 0x11
	.long	31                      # 0x1f
	.long	25                      # 0x19
	.long	36                      # 0x24
	.long	29                      # 0x1d
	.long	24                      # 0x18
	.long	33                      # 0x21
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	22                      # 0x16
	.long	73                      # 0x49
	.long	20                      # 0x14
	.long	34                      # 0x22
	.long	19                      # 0x13
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	19                      # 0x13
	.long	16                      # 0x10
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	21                      # 0x15
	.long	28                      # 0x1c
	.long	25                      # 0x19
	.long	21                      # 0x15
	.long	30                      # 0x1e
	.long	20                      # 0x14
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	93                      # 0x5d
	.long	14                      # 0xe
	.long	56                      # 0x38
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	38                      # 0x26
	.long	4294967272              # 0xffffffe8
	.long	127                     # 0x7f
	.size	INIT_LAST_P, 2880

	.type	INIT_ONE_I,@object      # @INIT_ONE_I
	.p2align	4
INIT_ONE_I:
	.long	4294967293              # 0xfffffffd
	.long	71                      # 0x47
	.long	4294967290              # 0xfffffffa
	.long	42                      # 0x2a
	.long	4294967291              # 0xfffffffb
	.long	50                      # 0x32
	.long	4294967293              # 0xfffffffd
	.long	54                      # 0x36
	.long	4294967294              # 0xfffffffe
	.long	62                      # 0x3e
	.long	4294967291              # 0xfffffffb
	.long	67                      # 0x43
	.long	4294967291              # 0xfffffffb
	.long	27                      # 0x1b
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	46                      # 0x2e
	.long	4294967293              # 0xfffffffd
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	23                      # 0x17
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967281              # 0xfffffff1
	.long	55                      # 0x37
	.long	4294967286              # 0xfffffff6
	.long	60                      # 0x3c
	.long	4294967290              # 0xfffffffa
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967276              # 0xffffffec
	.long	84                      # 0x54
	.long	4294967285              # 0xfffffff5
	.long	79                      # 0x4f
	.long	4294967290              # 0xfffffffa
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967288              # 0xfffffff8
	.long	78                      # 0x4e
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	4294967292              # 0xfffffffc
	.long	48                      # 0x30
	.long	4294967294              # 0xfffffffe
	.long	53                      # 0x35
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_I, 320

	.type	INIT_ONE_P,@object      # @INIT_ONE_P
	.p2align	4
INIT_ONE_P:
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967294              # 0xfffffffe
	.long	44                      # 0x2c
	.long	0                       # 0x0
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	52                      # 0x34
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	77                      # 0x4d
	.long	3                       # 0x3
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	42                      # 0x2a
	.long	0                       # 0x0
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	55                      # 0x37
	.long	4294967290              # 0xfffffffa
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967289              # 0xfffffff9
	.long	42                      # 0x2a
	.long	4294967288              # 0xfffffff8
	.long	45                      # 0x2d
	.long	4294967291              # 0xfffffffb
	.long	48                      # 0x30
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	29                      # 0x1d
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	1                       # 0x1
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	43                      # 0x2b
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	29                      # 0x1d
	.long	5                       # 0x5
	.long	31                      # 0x1f
	.long	7                       # 0x7
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	8                       # 0x8
	.long	5                       # 0x5
	.long	10                      # 0xa
	.long	14                      # 0xe
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967273              # 0xffffffe9
	.long	112                     # 0x70
	.long	4294967281              # 0xfffffff1
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967275              # 0xffffffeb
	.long	101                     # 0x65
	.long	4294967293              # 0xfffffffd
	.long	39                      # 0x27
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	4294967289              # 0xfffffff9
	.long	61                      # 0x3d
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	4294967291              # 0xfffffffb
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	24                      # 0x18
	.long	4294967295              # 0xffffffff
	.long	36                      # 0x24
	.long	4294967294              # 0xfffffffe
	.long	42                      # 0x2a
	.long	4294967294              # 0xfffffffe
	.long	52                      # 0x34
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	76                      # 0x4c
	.long	4294967286              # 0xfffffff6
	.long	44                      # 0x2c
	.long	4294967286              # 0xfffffff6
	.long	52                      # 0x34
	.long	4294967286              # 0xfffffff6
	.long	57                      # 0x39
	.long	4294967287              # 0xfffffff7
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	31                      # 0x1f
	.long	5                       # 0x5
	.long	52                      # 0x34
	.long	3                       # 0x3
	.long	52                      # 0x34
	.long	7                       # 0x7
	.long	4                       # 0x4
	.long	10                      # 0xa
	.long	8                       # 0x8
	.long	17                      # 0x11
	.long	8                       # 0x8
	.long	16                      # 0x10
	.long	19                      # 0x13
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967272              # 0xffffffe8
	.long	115                     # 0x73
	.long	4294967274              # 0xffffffea
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	4294967275              # 0xffffffeb
	.long	100                     # 0x64
	.long	4294967282              # 0xfffffff2
	.long	57                      # 0x39
	.long	4294967284              # 0xfffffff4
	.long	67                      # 0x43
	.long	4294967285              # 0xfffffff5
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967289              # 0xfffffff9
	.long	37                      # 0x25
	.long	4294967288              # 0xfffffff8
	.long	44                      # 0x2c
	.long	4294967285              # 0xfffffff5
	.long	49                      # 0x31
	.long	4294967286              # 0xfffffff6
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967286              # 0xfffffff6
	.long	82                      # 0x52
	.long	4294967288              # 0xfffffff8
	.long	48                      # 0x30
	.long	4294967288              # 0xfffffff8
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967289              # 0xfffffff9
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	79                      # 0x4f
	.long	4294967274              # 0xffffffea
	.long	69                      # 0x45
	.long	4294967280              # 0xfffffff0
	.long	75                      # 0x4b
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	58                      # 0x3a
	.long	4294967283              # 0xfffffff3
	.long	81                      # 0x51
	.long	4294967290              # 0xfffffffa
	.long	38                      # 0x26
	.long	4294967283              # 0xfffffff3
	.long	62                      # 0x3e
	.long	4294967290              # 0xfffffffa
	.long	58                      # 0x3a
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ONE_P, 960

	.type	INIT_ABS_I,@object      # @INIT_ABS_I
	.p2align	4
INIT_ABS_I:
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	1                       # 0x1
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	72                      # 0x48
	.long	4294967295              # 0xffffffff
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	91                      # 0x5b
	.long	4294967280              # 0xfffffff0
	.long	64                      # 0x40
	.long	4294967288              # 0xfffffff8
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	78                      # 0x4e
	.long	4294967290              # 0xfffffffa
	.long	77                      # 0x4d
	.long	4294967286              # 0xfffffff6
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	61                      # 0x3d
	.long	1                       # 0x1
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967287              # 0xfffffff7
	.long	92                      # 0x5c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	88                      # 0x58
	.long	4294967279              # 0xffffffef
	.long	110                     # 0x6e
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	96                      # 0x60
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967277              # 0xffffffed
	.long	117                     # 0x75
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	71                      # 0x47
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967284              # 0xfffffff4
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	90                      # 0x5a
	.long	4294967282              # 0xfffffff2
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_I, 320

	.type	INIT_ABS_P,@object      # @INIT_ABS_P
	.p2align	4
INIT_ABS_P:
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967292              # 0xfffffffc
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	75                      # 0x4b
	.long	4294967288              # 0xfffffff8
	.long	82                      # 0x52
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967290              # 0xfffffffa
	.long	59                      # 0x3b
	.long	4294967289              # 0xfffffff9
	.long	71                      # 0x47
	.long	4294967284              # 0xfffffff4
	.long	83                      # 0x53
	.long	4294967285              # 0xfffffff5
	.long	87                      # 0x57
	.long	4294967266              # 0xffffffe2
	.long	119                     # 0x77
	.long	4294967284              # 0xfffffff4
	.long	56                      # 0x38
	.long	4294967290              # 0xfffffffa
	.long	60                      # 0x3c
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967288              # 0xfffffff8
	.long	76                      # 0x4c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967290              # 0xfffffffa
	.long	55                      # 0x37
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967293              # 0xfffffffd
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	90                      # 0x5a
	.long	4294967294              # 0xfffffffe
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	72                      # 0x48
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	40                      # 0x28
	.long	0                       # 0x0
	.long	58                      # 0x3a
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	79                      # 0x4f
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967285              # 0xfffffff5
	.long	77                      # 0x4d
	.long	4294967287              # 0xfffffff7
	.long	80                      # 0x50
	.long	4294967287              # 0xfffffff7
	.long	84                      # 0x54
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967262              # 0xffffffde
	.long	127                     # 0x7f
	.long	4294967281              # 0xfffffff1
	.long	77                      # 0x4d
	.long	4294967279              # 0xffffffef
	.long	91                      # 0x5b
	.long	4294967271              # 0xffffffe7
	.long	107                     # 0x6b
	.long	4294967271              # 0xffffffe7
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	122                     # 0x7a
	.long	4294967287              # 0xfffffff7
	.long	57                      # 0x39
	.long	4294967290              # 0xfffffffa
	.long	63                      # 0x3f
	.long	4294967292              # 0xfffffffc
	.long	65                      # 0x41
	.long	4294967292              # 0xfffffffc
	.long	67                      # 0x43
	.long	4294967289              # 0xfffffff9
	.long	82                      # 0x52
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	72                      # 0x48
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967292              # 0xfffffffc
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	86                      # 0x56
	.long	4294967294              # 0xfffffffe
	.long	55                      # 0x37
	.long	4294967294              # 0xfffffffe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	73                      # 0x49
	.long	4294967288              # 0xfffffff8
	.long	89                      # 0x59
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	37                      # 0x25
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967291              # 0xfffffffb
	.long	73                      # 0x49
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967292              # 0xfffffffc
	.long	78                      # 0x4e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	89                      # 0x59
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967285              # 0xfffffff5
	.long	92                      # 0x5c
	.long	4294967267              # 0xffffffe3
	.long	127                     # 0x7f
	.long	4294967275              # 0xffffffeb
	.long	85                      # 0x55
	.long	4294967280              # 0xfffffff0
	.long	88                      # 0x58
	.long	4294967273              # 0xffffffe9
	.long	104                     # 0x68
	.long	4294967281              # 0xfffffff1
	.long	98                      # 0x62
	.long	4294967259              # 0xffffffdb
	.long	127                     # 0x7f
	.long	4294967284              # 0xfffffff4
	.long	59                      # 0x3b
	.long	4294967288              # 0xfffffff8
	.long	63                      # 0x3f
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967290              # 0xfffffffa
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	75                      # 0x4b
	.long	4294967286              # 0xfffffff6
	.long	79                      # 0x4f
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967284              # 0xfffffff4
	.long	92                      # 0x5c
	.long	4294967278              # 0xffffffee
	.long	108                     # 0x6c
	.long	4294967283              # 0xfffffff3
	.long	78                      # 0x4e
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967292              # 0xfffffffc
	.long	81                      # 0x51
	.long	4294967283              # 0xfffffff3
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967280              # 0xfffffff0
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	76                      # 0x4c
	.long	4294967283              # 0xfffffff3
	.long	86                      # 0x56
	.long	4294967287              # 0xfffffff7
	.long	83                      # 0x53
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.size	INIT_ABS_P, 960

	.type	INIT_FLD_MAP_I,@object  # @INIT_FLD_MAP_I
	.p2align	4
INIT_FLD_MAP_I:
	.long	4294967290              # 0xfffffffa
	.long	93                      # 0x5d
	.long	4294967290              # 0xfffffffa
	.long	84                      # 0x54
	.long	4294967288              # 0xfffffff8
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	71                      # 0x47
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	4294967294              # 0xfffffffe
	.long	60                      # 0x3c
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967293              # 0xfffffffd
	.long	62                      # 0x3e
	.long	4294967292              # 0xfffffffc
	.long	58                      # 0x3a
	.long	4294967287              # 0xfffffff7
	.long	66                      # 0x42
	.long	4294967295              # 0xffffffff
	.long	79                      # 0x4f
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	4294967289              # 0xfffffff9
	.long	62                      # 0x3e
	.long	15                      # 0xf
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	40                      # 0x28
	.long	16                      # 0x10
	.long	27                      # 0x1b
	.long	12                      # 0xc
	.long	29                      # 0x1d
	.long	1                       # 0x1
	.long	44                      # 0x2c
	.long	20                      # 0x14
	.long	36                      # 0x24
	.long	18                      # 0x12
	.long	32                      # 0x20
	.long	5                       # 0x5
	.long	42                      # 0x2a
	.long	1                       # 0x1
	.long	48                      # 0x30
	.long	10                      # 0xa
	.long	62                      # 0x3e
	.long	17                      # 0x11
	.long	46                      # 0x2e
	.long	9                       # 0x9
	.long	64                      # 0x40
	.long	4294967282              # 0xfffffff2
	.long	106                     # 0x6a
	.long	4294967283              # 0xfffffff3
	.long	97                      # 0x61
	.long	4294967281              # 0xfffffff1
	.long	90                      # 0x5a
	.long	4294967284              # 0xfffffff4
	.long	90                      # 0x5a
	.long	4294967278              # 0xffffffee
	.long	88                      # 0x58
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967287              # 0xfffffff7
	.long	79                      # 0x4f
	.long	4294967282              # 0xfffffff2
	.long	86                      # 0x56
	.long	4294967286              # 0xfffffff6
	.long	73                      # 0x49
	.long	4294967286              # 0xfffffff6
	.long	70                      # 0x46
	.long	4294967286              # 0xfffffff6
	.long	69                      # 0x45
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967287              # 0xfffffff7
	.long	64                      # 0x40
	.long	4294967291              # 0xfffffffb
	.long	58                      # 0x3a
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	104                     # 0x68
	.long	4294967285              # 0xfffffff5
	.long	97                      # 0x61
	.long	4294967280              # 0xfffffff0
	.long	96                      # 0x60
	.long	4294967289              # 0xfffffff9
	.long	88                      # 0x58
	.long	4294967288              # 0xfffffff8
	.long	85                      # 0x55
	.long	4294967289              # 0xfffffff9
	.long	85                      # 0x55
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967283              # 0xfffffff3
	.long	88                      # 0x58
	.long	4                       # 0x4
	.long	66                      # 0x42
	.long	4294967293              # 0xfffffffd
	.long	77                      # 0x4d
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	10                      # 0xa
	.long	58                      # 0x3a
	.long	4294967295              # 0xffffffff
	.long	76                      # 0x4c
	.long	4294967295              # 0xffffffff
	.long	83                      # 0x53
	.long	4294967289              # 0xfffffff9
	.long	99                      # 0x63
	.long	4294967282              # 0xfffffff2
	.long	95                      # 0x5f
	.long	2                       # 0x2
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	74                      # 0x4a
	.long	0                       # 0x0
	.long	70                      # 0x46
	.long	4294967285              # 0xfffffff5
	.long	75                      # 0x4b
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	65                      # 0x41
	.long	4294967282              # 0xfffffff2
	.long	73                      # 0x49
	.long	3                       # 0x3
	.long	62                      # 0x3e
	.long	4                       # 0x4
	.long	62                      # 0x3e
	.long	4294967295              # 0xffffffff
	.long	68                      # 0x44
	.long	4294967283              # 0xfffffff3
	.long	75                      # 0x4b
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	12                      # 0xc
	.long	70                      # 0x46
	.size	INIT_FLD_MAP_I, 960

	.type	INIT_FLD_MAP_P,@object  # @INIT_FLD_MAP_P
	.p2align	4
INIT_FLD_MAP_P:
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967280              # 0xfffffff0
	.long	106                     # 0x6a
	.long	4294967286              # 0xfffffff6
	.long	87                      # 0x57
	.long	4294967275              # 0xffffffeb
	.long	114                     # 0x72
	.long	4294967278              # 0xffffffee
	.long	110                     # 0x6e
	.long	4294967282              # 0xfffffff2
	.long	98                      # 0x62
	.long	4294967274              # 0xffffffea
	.long	110                     # 0x6e
	.long	4294967275              # 0xffffffeb
	.long	106                     # 0x6a
	.long	4294967278              # 0xffffffee
	.long	103                     # 0x67
	.long	4294967275              # 0xffffffeb
	.long	107                     # 0x6b
	.long	4294967273              # 0xffffffe9
	.long	108                     # 0x6c
	.long	4294967270              # 0xffffffe6
	.long	112                     # 0x70
	.long	4294967286              # 0xfffffff6
	.long	96                      # 0x60
	.long	4294967284              # 0xfffffff4
	.long	95                      # 0x5f
	.long	4294967291              # 0xfffffffb
	.long	91                      # 0x5b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967287              # 0xfffffff7
	.long	93                      # 0x5d
	.long	4294967274              # 0xffffffea
	.long	94                      # 0x5e
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	9                       # 0x9
	.long	67                      # 0x43
	.long	4294967292              # 0xfffffffc
	.long	80                      # 0x50
	.long	4294967286              # 0xfffffff6
	.long	85                      # 0x55
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	7                       # 0x7
	.long	60                      # 0x3c
	.long	9                       # 0x9
	.long	58                      # 0x3a
	.long	5                       # 0x5
	.long	61                      # 0x3d
	.long	12                      # 0xc
	.long	50                      # 0x32
	.long	15                      # 0xf
	.long	50                      # 0x32
	.long	18                      # 0x12
	.long	49                      # 0x31
	.long	17                      # 0x11
	.long	54                      # 0x36
	.long	4294967291              # 0xfffffffb
	.long	85                      # 0x55
	.long	4294967290              # 0xfffffffa
	.long	81                      # 0x51
	.long	4294967286              # 0xfffffff6
	.long	77                      # 0x4d
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	4294967279              # 0xffffffef
	.long	80                      # 0x50
	.long	4294967278              # 0xffffffee
	.long	73                      # 0x49
	.long	4294967292              # 0xfffffffc
	.long	74                      # 0x4a
	.long	4294967286              # 0xfffffff6
	.long	83                      # 0x53
	.long	4294967287              # 0xfffffff7
	.long	71                      # 0x47
	.long	4294967287              # 0xfffffff7
	.long	67                      # 0x43
	.long	4294967295              # 0xffffffff
	.long	61                      # 0x3d
	.long	4294967288              # 0xfffffff8
	.long	66                      # 0x42
	.long	4294967282              # 0xfffffff2
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	59                      # 0x3b
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	7                       # 0x7
	.long	46                      # 0x2e
	.long	4294967295              # 0xffffffff
	.long	51                      # 0x33
	.long	7                       # 0x7
	.long	49                      # 0x31
	.long	8                       # 0x8
	.long	52                      # 0x34
	.long	9                       # 0x9
	.long	41                      # 0x29
	.long	6                       # 0x6
	.long	47                      # 0x2f
	.long	2                       # 0x2
	.long	55                      # 0x37
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	6                       # 0x6
	.long	50                      # 0x32
	.long	5                       # 0x5
	.long	53                      # 0x35
	.long	13                      # 0xd
	.long	49                      # 0x31
	.long	4                       # 0x4
	.long	63                      # 0x3f
	.long	6                       # 0x6
	.long	64                      # 0x40
	.long	4294967294              # 0xfffffffe
	.long	69                      # 0x45
	.long	4294967294              # 0xfffffffe
	.long	59                      # 0x3b
	.long	6                       # 0x6
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	10                      # 0xa
	.long	44                      # 0x2c
	.long	9                       # 0x9
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	43                      # 0x2b
	.long	3                       # 0x3
	.long	53                      # 0x35
	.long	14                      # 0xe
	.long	34                      # 0x22
	.long	10                      # 0xa
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	52                      # 0x34
	.long	13                      # 0xd
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	32                      # 0x20
	.long	7                       # 0x7
	.long	44                      # 0x2c
	.long	7                       # 0x7
	.long	38                      # 0x26
	.long	13                      # 0xd
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	26                      # 0x1a
	.long	43                      # 0x2b
	.long	4294967275              # 0xffffffeb
	.long	126                     # 0x7e
	.long	4294967273              # 0xffffffe9
	.long	124                     # 0x7c
	.long	4294967276              # 0xffffffec
	.long	110                     # 0x6e
	.long	4294967270              # 0xffffffe6
	.long	126                     # 0x7e
	.long	4294967271              # 0xffffffe7
	.long	124                     # 0x7c
	.long	4294967279              # 0xffffffef
	.long	105                     # 0x69
	.long	4294967269              # 0xffffffe5
	.long	121                     # 0x79
	.long	4294967269              # 0xffffffe5
	.long	117                     # 0x75
	.long	4294967279              # 0xffffffef
	.long	102                     # 0x66
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967269              # 0xffffffe5
	.long	116                     # 0x74
	.long	4294967263              # 0xffffffdf
	.long	122                     # 0x7a
	.long	4294967286              # 0xfffffff6
	.long	95                      # 0x5f
	.long	4294967282              # 0xfffffff2
	.long	100                     # 0x64
	.long	4294967288              # 0xfffffff8
	.long	95                      # 0x5f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967279              # 0xffffffef
	.long	111                     # 0x6f
	.long	4294967268              # 0xffffffe4
	.long	114                     # 0x72
	.long	4294967290              # 0xfffffffa
	.long	89                      # 0x59
	.long	4294967294              # 0xfffffffe
	.long	80                      # 0x50
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967287              # 0xfffffff7
	.long	85                      # 0x55
	.long	4294967288              # 0xfffffff8
	.long	81                      # 0x51
	.long	4294967295              # 0xffffffff
	.long	72                      # 0x48
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	9                       # 0x9
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	1                       # 0x1
	.long	69                      # 0x45
	.long	7                       # 0x7
	.long	69                      # 0x45
	.long	4294967293              # 0xfffffffd
	.long	81                      # 0x51
	.long	4294967293              # 0xfffffffd
	.long	76                      # 0x4c
	.long	4294967289              # 0xfffffff9
	.long	72                      # 0x48
	.long	4294967290              # 0xfffffffa
	.long	78                      # 0x4e
	.long	4294967284              # 0xfffffff4
	.long	72                      # 0x48
	.long	4294967282              # 0xfffffff2
	.long	68                      # 0x44
	.long	4294967293              # 0xfffffffd
	.long	70                      # 0x46
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967291              # 0xfffffffb
	.long	66                      # 0x42
	.long	4294967291              # 0xfffffffb
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967292              # 0xfffffffc
	.long	61                      # 0x3d
	.long	4294967287              # 0xfffffff7
	.long	60                      # 0x3c
	.long	1                       # 0x1
	.long	54                      # 0x36
	.long	2                       # 0x2
	.long	58                      # 0x3a
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	69                      # 0x45
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967280              # 0xfffffff0
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	61                      # 0x3d
	.long	4294967290              # 0xfffffffa
	.long	67                      # 0x43
	.long	4294967293              # 0xfffffffd
	.long	64                      # 0x40
	.long	2                       # 0x2
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	65                      # 0x41
	.long	4294967293              # 0xfffffffd
	.long	66                      # 0x42
	.long	0                       # 0x0
	.long	62                      # 0x3e
	.long	9                       # 0x9
	.long	51                      # 0x33
	.long	4294967295              # 0xffffffff
	.long	66                      # 0x42
	.long	4294967294              # 0xfffffffe
	.long	71                      # 0x47
	.long	4294967294              # 0xfffffffe
	.long	75                      # 0x4b
	.long	4294967295              # 0xffffffff
	.long	70                      # 0x46
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	16                      # 0x10
	.long	37                      # 0x25
	.long	0                       # 0x0
	.long	47                      # 0x2f
	.long	18                      # 0x12
	.long	35                      # 0x23
	.long	11                      # 0xb
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	10                      # 0xa
	.long	41                      # 0x29
	.long	2                       # 0x2
	.long	48                      # 0x30
	.long	12                      # 0xc
	.long	41                      # 0x29
	.long	13                      # 0xd
	.long	41                      # 0x29
	.long	0                       # 0x0
	.long	59                      # 0x3b
	.long	3                       # 0x3
	.long	50                      # 0x32
	.long	19                      # 0x13
	.long	40                      # 0x28
	.long	3                       # 0x3
	.long	66                      # 0x42
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	4294967274              # 0xffffffea
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	127                     # 0x7f
	.long	4294967271              # 0xffffffe7
	.long	120                     # 0x78
	.long	4294967269              # 0xffffffe5
	.long	127                     # 0x7f
	.long	4294967277              # 0xffffffed
	.long	114                     # 0x72
	.long	4294967273              # 0xffffffe9
	.long	117                     # 0x75
	.long	4294967271              # 0xffffffe7
	.long	118                     # 0x76
	.long	4294967270              # 0xffffffe6
	.long	117                     # 0x75
	.long	4294967272              # 0xffffffe8
	.long	113                     # 0x71
	.long	4294967268              # 0xffffffe4
	.long	118                     # 0x76
	.long	4294967265              # 0xffffffe1
	.long	120                     # 0x78
	.long	4294967259              # 0xffffffdb
	.long	124                     # 0x7c
	.long	4294967286              # 0xfffffff6
	.long	94                      # 0x5e
	.long	4294967281              # 0xfffffff1
	.long	102                     # 0x66
	.long	4294967286              # 0xfffffff6
	.long	99                      # 0x63
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	4294967283              # 0xfffffff3
	.long	106                     # 0x6a
	.long	4294967246              # 0xffffffce
	.long	127                     # 0x7f
	.long	4294967291              # 0xfffffffb
	.long	92                      # 0x5c
	.long	17                      # 0x11
	.long	57                      # 0x39
	.long	4294967291              # 0xfffffffb
	.long	86                      # 0x56
	.long	4294967283              # 0xfffffff3
	.long	94                      # 0x5e
	.long	4294967284              # 0xfffffff4
	.long	91                      # 0x5b
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	0                       # 0x0
	.long	71                      # 0x47
	.long	4294967295              # 0xffffffff
	.long	73                      # 0x49
	.long	4                       # 0x4
	.long	64                      # 0x40
	.long	4294967289              # 0xfffffff9
	.long	81                      # 0x51
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	15                      # 0xf
	.long	57                      # 0x39
	.long	4294967293              # 0xfffffffd
	.long	78                      # 0x4e
	.long	4294967288              # 0xfffffff8
	.long	74                      # 0x4a
	.long	4294967287              # 0xfffffff7
	.long	72                      # 0x48
	.long	4294967286              # 0xfffffff6
	.long	72                      # 0x48
	.long	4294967278              # 0xffffffee
	.long	75                      # 0x4b
	.long	4294967284              # 0xfffffff4
	.long	71                      # 0x47
	.long	4294967285              # 0xfffffff5
	.long	63                      # 0x3f
	.long	4294967291              # 0xfffffffb
	.long	70                      # 0x46
	.long	4294967279              # 0xffffffef
	.long	75                      # 0x4b
	.long	4294967282              # 0xfffffff2
	.long	72                      # 0x48
	.long	4294967280              # 0xfffffff0
	.long	67                      # 0x43
	.long	4294967288              # 0xfffffff8
	.long	53                      # 0x35
	.long	4294967282              # 0xfffffff2
	.long	59                      # 0x3b
	.long	4294967287              # 0xfffffff7
	.long	52                      # 0x34
	.long	4294967285              # 0xfffffff5
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	1                       # 0x1
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967286              # 0xfffffff6
	.long	67                      # 0x43
	.long	1                       # 0x1
	.long	68                      # 0x44
	.long	0                       # 0x0
	.long	77                      # 0x4d
	.long	2                       # 0x2
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	68                      # 0x44
	.long	4294967291              # 0xfffffffb
	.long	78                      # 0x4e
	.long	7                       # 0x7
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	59                      # 0x3b
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	54                      # 0x36
	.long	15                      # 0xf
	.long	44                      # 0x2c
	.long	5                       # 0x5
	.long	60                      # 0x3c
	.long	2                       # 0x2
	.long	70                      # 0x46
	.long	4294967294              # 0xfffffffe
	.long	76                      # 0x4c
	.long	4294967278              # 0xffffffee
	.long	86                      # 0x56
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	5                       # 0x5
	.long	64                      # 0x40
	.long	4294967284              # 0xfffffff4
	.long	70                      # 0x46
	.long	11                      # 0xb
	.long	55                      # 0x37
	.long	5                       # 0x5
	.long	56                      # 0x38
	.long	0                       # 0x0
	.long	69                      # 0x45
	.long	2                       # 0x2
	.long	65                      # 0x41
	.long	4294967290              # 0xfffffffa
	.long	74                      # 0x4a
	.long	5                       # 0x5
	.long	54                      # 0x36
	.long	7                       # 0x7
	.long	54                      # 0x36
	.long	4294967290              # 0xfffffffa
	.long	76                      # 0x4c
	.long	4294967285              # 0xfffffff5
	.long	82                      # 0x52
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	25                      # 0x19
	.long	42                      # 0x2a
	.size	INIT_FLD_MAP_P, 2880

	.type	INIT_FLD_LAST_I,@object # @INIT_FLD_LAST_I
	.p2align	4
INIT_FLD_LAST_I:
	.long	15                      # 0xf
	.long	6                       # 0x6
	.long	6                       # 0x6
	.long	19                      # 0x13
	.long	7                       # 0x7
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	18                      # 0x12
	.long	13                      # 0xd
	.long	13                      # 0xd
	.long	11                      # 0xb
	.long	13                      # 0xd
	.long	15                      # 0xf
	.long	15                      # 0xf
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	23                      # 0x17
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	15                      # 0xf
	.long	20                      # 0x14
	.long	14                      # 0xe
	.long	26                      # 0x1a
	.long	14                      # 0xe
	.long	44                      # 0x2c
	.long	17                      # 0x11
	.long	40                      # 0x28
	.long	17                      # 0x11
	.long	47                      # 0x2f
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	17                      # 0x11
	.long	21                      # 0x15
	.long	21                      # 0x15
	.long	25                      # 0x19
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	27                      # 0x1b
	.long	22                      # 0x16
	.long	29                      # 0x1d
	.long	19                      # 0x13
	.long	35                      # 0x23
	.long	14                      # 0xe
	.long	50                      # 0x32
	.long	10                      # 0xa
	.long	57                      # 0x39
	.long	7                       # 0x7
	.long	63                      # 0x3f
	.long	4294967294              # 0xfffffffe
	.long	77                      # 0x4d
	.long	4294967292              # 0xfffffffc
	.long	82                      # 0x52
	.long	4294967293              # 0xfffffffd
	.long	94                      # 0x5e
	.long	9                       # 0x9
	.long	69                      # 0x45
	.long	4294967284              # 0xfffffff4
	.long	109                     # 0x6d
	.long	21                      # 0x15
	.long	4294967286              # 0xfffffff6
	.long	24                      # 0x18
	.long	4294967285              # 0xfffffff5
	.long	28                      # 0x1c
	.long	4294967288              # 0xfffffff8
	.long	28                      # 0x1c
	.long	4294967295              # 0xffffffff
	.long	29                      # 0x1d
	.long	3                       # 0x3
	.long	29                      # 0x1d
	.long	9                       # 0x9
	.long	35                      # 0x23
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	36                      # 0x24
	.long	14                      # 0xe
	.long	67                      # 0x43
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967261              # 0xffffffdd
	.long	36                      # 0x24
	.long	4294967262              # 0xffffffde
	.long	32                      # 0x20
	.long	4294967270              # 0xffffffe6
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	44                      # 0x2c
	.long	4294967264              # 0xffffffe0
	.long	34                      # 0x22
	.long	4294967278              # 0xffffffee
	.long	34                      # 0x22
	.long	4294967281              # 0xfffffff1
	.long	40                      # 0x28
	.long	4294967281              # 0xfffffff1
	.long	33                      # 0x21
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967291              # 0xfffffffb
	.long	33                      # 0x21
	.long	0                       # 0x0
	.long	38                      # 0x26
	.long	2                       # 0x2
	.long	33                      # 0x21
	.long	13                      # 0xd
	.long	23                      # 0x17
	.long	35                      # 0x23
	.long	13                      # 0xd
	.long	58                      # 0x3a
	.long	29                      # 0x1d
	.long	4294967293              # 0xfffffffd
	.long	26                      # 0x1a
	.long	0                       # 0x0
	.long	22                      # 0x16
	.long	30                      # 0x1e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	31                      # 0x1f
	.long	4294967289              # 0xfffffff9
	.long	35                      # 0x23
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967293              # 0xfffffffd
	.long	34                      # 0x22
	.long	3                       # 0x3
	.long	36                      # 0x24
	.long	4294967295              # 0xffffffff
	.long	34                      # 0x22
	.long	5                       # 0x5
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	35                      # 0x23
	.long	5                       # 0x5
	.long	34                      # 0x22
	.long	12                      # 0xc
	.long	39                      # 0x27
	.long	11                      # 0xb
	.long	30                      # 0x1e
	.long	29                      # 0x1d
	.long	34                      # 0x22
	.long	26                      # 0x1a
	.long	29                      # 0x1d
	.long	39                      # 0x27
	.long	19                      # 0x13
	.long	66                      # 0x42
	.size	INIT_FLD_LAST_I, 960

	.type	INIT_FLD_LAST_P,@object # @INIT_FLD_LAST_P
	.p2align	4
INIT_FLD_LAST_P:
	.long	14                      # 0xe
	.long	11                      # 0xb
	.long	11                      # 0xb
	.long	14                      # 0xe
	.long	9                       # 0x9
	.long	11                      # 0xb
	.long	18                      # 0x12
	.long	11                      # 0xb
	.long	21                      # 0x15
	.long	9                       # 0x9
	.long	23                      # 0x17
	.long	4294967294              # 0xfffffffe
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	32                      # 0x20
	.long	4294967281              # 0xfffffff1
	.long	34                      # 0x22
	.long	4294967275              # 0xffffffeb
	.long	39                      # 0x27
	.long	4294967273              # 0xffffffe9
	.long	42                      # 0x2a
	.long	4294967263              # 0xffffffdf
	.long	41                      # 0x29
	.long	4294967265              # 0xffffffe1
	.long	46                      # 0x2e
	.long	4294967268              # 0xffffffe4
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	21                      # 0x15
	.long	29                      # 0x1d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	45                      # 0x2d
	.long	4294967272              # 0xffffffe8
	.long	53                      # 0x35
	.long	4294967251              # 0xffffffd3
	.long	48                      # 0x30
	.long	4294967270              # 0xffffffe6
	.long	65                      # 0x41
	.long	4294967253              # 0xffffffd5
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	39                      # 0x27
	.long	4294967286              # 0xfffffff6
	.long	30                      # 0x1e
	.long	9                       # 0x9
	.long	18                      # 0x12
	.long	26                      # 0x1a
	.long	20                      # 0x14
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	57                      # 0x39
	.long	4294967282              # 0xfffffff2
	.long	82                      # 0x52
	.long	4294967291              # 0xfffffffb
	.long	75                      # 0x4b
	.long	4294967277              # 0xffffffed
	.long	97                      # 0x61
	.long	4294967261              # 0xffffffdd
	.long	125                     # 0x7d
	.long	21                      # 0x15
	.long	4294967283              # 0xfffffff3
	.long	33                      # 0x21
	.long	4294967282              # 0xfffffff2
	.long	39                      # 0x27
	.long	4294967289              # 0xfffffff9
	.long	46                      # 0x2e
	.long	4294967294              # 0xfffffffe
	.long	51                      # 0x33
	.long	2                       # 0x2
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	61                      # 0x3d
	.long	17                      # 0x11
	.long	55                      # 0x37
	.long	34                      # 0x22
	.long	42                      # 0x2a
	.long	62                      # 0x3e
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	27                      # 0x1b
	.long	0                       # 0x0
	.long	28                      # 0x1c
	.long	0                       # 0x0
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	27                      # 0x1b
	.long	6                       # 0x6
	.long	34                      # 0x22
	.long	8                       # 0x8
	.long	30                      # 0x1e
	.long	10                      # 0xa
	.long	24                      # 0x18
	.long	22                      # 0x16
	.long	33                      # 0x21
	.long	19                      # 0x13
	.long	22                      # 0x16
	.long	32                      # 0x20
	.long	26                      # 0x1a
	.long	31                      # 0x1f
	.long	21                      # 0x15
	.long	41                      # 0x29
	.long	26                      # 0x1a
	.long	44                      # 0x2c
	.long	23                      # 0x17
	.long	47                      # 0x2f
	.long	16                      # 0x10
	.long	65                      # 0x41
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	8                       # 0x8
	.long	60                      # 0x3c
	.long	6                       # 0x6
	.long	63                      # 0x3f
	.long	17                      # 0x11
	.long	65                      # 0x41
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	21                      # 0x15
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	23                      # 0x17
	.long	28                      # 0x1c
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	40                      # 0x28
	.long	24                      # 0x18
	.long	32                      # 0x20
	.long	28                      # 0x1c
	.long	29                      # 0x1d
	.long	23                      # 0x17
	.long	42                      # 0x2a
	.long	19                      # 0x13
	.long	57                      # 0x39
	.long	22                      # 0x16
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	61                      # 0x3d
	.long	11                      # 0xb
	.long	86                      # 0x56
	.long	19                      # 0x13
	.long	4294967290              # 0xfffffffa
	.long	18                      # 0x12
	.long	4294967290              # 0xfffffffa
	.long	14                      # 0xe
	.long	0                       # 0x0
	.long	26                      # 0x1a
	.long	4294967284              # 0xfffffff4
	.long	31                      # 0x1f
	.long	4294967280              # 0xfffffff0
	.long	33                      # 0x21
	.long	4294967271              # 0xffffffe7
	.long	33                      # 0x21
	.long	4294967274              # 0xffffffea
	.long	37                      # 0x25
	.long	4294967268              # 0xffffffe4
	.long	39                      # 0x27
	.long	4294967266              # 0xffffffe2
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	47                      # 0x2f
	.long	4294967254              # 0xffffffd6
	.long	45                      # 0x2d
	.long	4294967260              # 0xffffffdc
	.long	49                      # 0x31
	.long	4294967262              # 0xffffffde
	.long	41                      # 0x29
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	9                       # 0x9
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	69                      # 0x45
	.long	4294967225              # 0xffffffb9
	.long	63                      # 0x3f
	.long	4294967233              # 0xffffffc1
	.long	66                      # 0x42
	.long	4294967232              # 0xffffffc0
	.long	77                      # 0x4d
	.long	4294967222              # 0xffffffb6
	.long	54                      # 0x36
	.long	4294967257              # 0xffffffd9
	.long	52                      # 0x34
	.long	4294967261              # 0xffffffdd
	.long	41                      # 0x29
	.long	4294967286              # 0xfffffff6
	.long	36                      # 0x24
	.long	0                       # 0x0
	.long	40                      # 0x28
	.long	4294967295              # 0xffffffff
	.long	30                      # 0x1e
	.long	14                      # 0xe
	.long	28                      # 0x1c
	.long	26                      # 0x1a
	.long	23                      # 0x17
	.long	37                      # 0x25
	.long	12                      # 0xc
	.long	55                      # 0x37
	.long	11                      # 0xb
	.long	65                      # 0x41
	.long	17                      # 0x11
	.long	4294967286              # 0xfffffff6
	.long	32                      # 0x20
	.long	4294967283              # 0xfffffff3
	.long	42                      # 0x2a
	.long	4294967287              # 0xfffffff7
	.long	49                      # 0x31
	.long	4294967291              # 0xfffffffb
	.long	53                      # 0x35
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	3                       # 0x3
	.long	68                      # 0x44
	.long	10                      # 0xa
	.long	66                      # 0x42
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	57                      # 0x39
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	37                      # 0x25
	.long	4294967263              # 0xffffffdf
	.long	39                      # 0x27
	.long	4294967260              # 0xffffffdc
	.long	40                      # 0x28
	.long	4294967259              # 0xffffffdb
	.long	38                      # 0x26
	.long	4294967266              # 0xffffffe2
	.long	46                      # 0x2e
	.long	4294967263              # 0xffffffdf
	.long	42                      # 0x2a
	.long	4294967266              # 0xffffffe2
	.long	40                      # 0x28
	.long	4294967272              # 0xffffffe8
	.long	49                      # 0x31
	.long	4294967267              # 0xffffffe3
	.long	38                      # 0x26
	.long	4294967284              # 0xfffffff4
	.long	40                      # 0x28
	.long	4294967286              # 0xfffffff6
	.long	38                      # 0x26
	.long	4294967293              # 0xfffffffd
	.long	46                      # 0x2e
	.long	4294967291              # 0xfffffffb
	.long	31                      # 0x1f
	.long	20                      # 0x14
	.long	29                      # 0x1d
	.long	30                      # 0x1e
	.long	25                      # 0x19
	.long	44                      # 0x2c
	.long	12                      # 0xc
	.long	48                      # 0x30
	.long	11                      # 0xb
	.long	49                      # 0x31
	.long	26                      # 0x1a
	.long	45                      # 0x2d
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	22                      # 0x16
	.long	22                      # 0x16
	.long	23                      # 0x17
	.long	22                      # 0x16
	.long	27                      # 0x1b
	.long	21                      # 0x15
	.long	33                      # 0x21
	.long	20                      # 0x14
	.long	26                      # 0x1a
	.long	28                      # 0x1c
	.long	30                      # 0x1e
	.long	24                      # 0x18
	.long	27                      # 0x1b
	.long	34                      # 0x22
	.long	18                      # 0x12
	.long	42                      # 0x2a
	.long	25                      # 0x19
	.long	39                      # 0x27
	.long	18                      # 0x12
	.long	50                      # 0x32
	.long	12                      # 0xc
	.long	70                      # 0x46
	.long	21                      # 0x15
	.long	54                      # 0x36
	.long	14                      # 0xe
	.long	71                      # 0x47
	.long	11                      # 0xb
	.long	83                      # 0x53
	.long	17                      # 0x11
	.long	4294967283              # 0xfffffff3
	.long	16                      # 0x10
	.long	4294967287              # 0xfffffff7
	.long	17                      # 0x11
	.long	4294967284              # 0xfffffff4
	.long	27                      # 0x1b
	.long	4294967275              # 0xffffffeb
	.long	37                      # 0x25
	.long	4294967266              # 0xffffffe2
	.long	41                      # 0x29
	.long	4294967256              # 0xffffffd8
	.long	42                      # 0x2a
	.long	4294967255              # 0xffffffd7
	.long	48                      # 0x30
	.long	4294967249              # 0xffffffd1
	.long	39                      # 0x27
	.long	4294967264              # 0xffffffe0
	.long	46                      # 0x2e
	.long	4294967256              # 0xffffffd8
	.long	52                      # 0x34
	.long	4294967245              # 0xffffffcd
	.long	46                      # 0x2e
	.long	4294967255              # 0xffffffd7
	.long	52                      # 0x34
	.long	4294967257              # 0xffffffd9
	.long	43                      # 0x2b
	.long	4294967277              # 0xffffffed
	.long	32                      # 0x20
	.long	11                      # 0xb
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	61                      # 0x3d
	.long	4294967241              # 0xffffffc9
	.long	56                      # 0x38
	.long	4294967250              # 0xffffffd2
	.long	62                      # 0x3e
	.long	4294967246              # 0xffffffce
	.long	81                      # 0x51
	.long	4294967229              # 0xffffffbd
	.long	45                      # 0x2d
	.long	4294967276              # 0xffffffec
	.long	35                      # 0x23
	.long	4294967294              # 0xfffffffe
	.long	28                      # 0x1c
	.long	15                      # 0xf
	.long	34                      # 0x22
	.long	1                       # 0x1
	.long	39                      # 0x27
	.long	1                       # 0x1
	.long	30                      # 0x1e
	.long	17                      # 0x11
	.long	20                      # 0x14
	.long	38                      # 0x26
	.long	18                      # 0x12
	.long	45                      # 0x2d
	.long	15                      # 0xf
	.long	54                      # 0x36
	.long	0                       # 0x0
	.long	79                      # 0x4f
	.long	9                       # 0x9
	.long	4294967294              # 0xfffffffe
	.long	30                      # 0x1e
	.long	4294967286              # 0xfffffff6
	.long	31                      # 0x1f
	.long	4294967292              # 0xfffffffc
	.long	33                      # 0x21
	.long	4294967295              # 0xffffffff
	.long	33                      # 0x21
	.long	7                       # 0x7
	.long	31                      # 0x1f
	.long	12                      # 0xc
	.long	37                      # 0x25
	.long	23                      # 0x17
	.long	31                      # 0x1f
	.long	38                      # 0x26
	.long	20                      # 0x14
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	36                      # 0x24
	.long	4294967280              # 0xfffffff0
	.long	37                      # 0x25
	.long	4294967282              # 0xfffffff2
	.long	37                      # 0x25
	.long	4294967279              # 0xffffffef
	.long	32                      # 0x20
	.long	1                       # 0x1
	.long	34                      # 0x22
	.long	15                      # 0xf
	.long	29                      # 0x1d
	.long	15                      # 0xf
	.long	24                      # 0x18
	.long	25                      # 0x19
	.long	34                      # 0x22
	.long	22                      # 0x16
	.long	31                      # 0x1f
	.long	16                      # 0x10
	.long	35                      # 0x23
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	28                      # 0x1c
	.long	33                      # 0x21
	.long	41                      # 0x29
	.long	36                      # 0x24
	.long	28                      # 0x1c
	.long	27                      # 0x1b
	.long	47                      # 0x2f
	.long	21                      # 0x15
	.long	62                      # 0x3e
	.long	18                      # 0x12
	.long	31                      # 0x1f
	.long	19                      # 0x13
	.long	26                      # 0x1a
	.long	36                      # 0x24
	.long	24                      # 0x18
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	0                       # 0x0
	.long	64                      # 0x40
	.long	24                      # 0x18
	.long	23                      # 0x17
	.long	27                      # 0x1b
	.long	16                      # 0x10
	.long	24                      # 0x18
	.long	30                      # 0x1e
	.long	31                      # 0x1f
	.long	29                      # 0x1d
	.long	22                      # 0x16
	.long	41                      # 0x29
	.long	22                      # 0x16
	.long	42                      # 0x2a
	.long	16                      # 0x10
	.long	60                      # 0x3c
	.long	15                      # 0xf
	.long	52                      # 0x34
	.long	14                      # 0xe
	.long	60                      # 0x3c
	.long	3                       # 0x3
	.long	78                      # 0x4e
	.long	4294967280              # 0xfffffff0
	.long	123                     # 0x7b
	.long	21                      # 0x15
	.long	53                      # 0x35
	.long	22                      # 0x16
	.long	56                      # 0x38
	.long	25                      # 0x19
	.long	61                      # 0x3d
	.size	INIT_FLD_LAST_P, 2880

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
