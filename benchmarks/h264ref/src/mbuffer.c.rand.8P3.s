	.text
	.file	"mbuffer.c"
	.globl	dump_dpb                # -- Begin function dump_dpb
	.p2align	4, 0x90
	.type	dump_dpb,@function
dump_dpb:                               # @dump_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	dump_dpb, .Lfunc_end0-dump_dpb
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize              # -- Begin function getDpbSize
	.p2align	4, 0x90
	.type	getDpbSize,@function
getDpbSize:                             # @getDpbSize
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB1_2
# %bb.1:                                # %func_getDpbSize.2
	callq	getDpbSize.2
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_getDpbSize.87
	.cfi_def_cfa %rbp, 16
	callq	getDpbSize.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	getDpbSize, .Lfunc_end1-getDpbSize
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb                # -- Begin function init_dpb
	.p2align	4, 0x90
	.type	init_dpb,@function
init_dpb:                               # @init_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_init_dpb.16
	callq	init_dpb.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_init_dpb.90
	.cfi_def_cfa %rbp, 16
	callq	init_dpb.90
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	init_dpb, .Lfunc_end2-init_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_dpb                # -- Begin function free_dpb
	.p2align	4, 0x90
	.type	free_dpb,@function
free_dpb:                               # @free_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	cmpq	$0, dpb
	je	.LBB3_6
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB3_2:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB3_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB3_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB3_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_2
.LBB3_5:                                # %for.end
	movq	dpb, %rdi
	callq	free
	movq	$0, dpb
.LBB3_6:                                # %if.end
	cmpq	$0, dpb+8
	je	.LBB3_8
# %bb.7:                                # %if.then2
	movq	dpb+8, %rdi
	callq	free
.LBB3_8:                                # %if.end3
	cmpq	$0, dpb+16
	je	.LBB3_10
# %bb.9:                                # %if.then5
	movq	dpb+16, %rdi
	callq	free
.LBB3_10:                               # %if.end6
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movl	$0, -4(%rbp)
.LBB3_11:                               # %for.cond7
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB3_16
# %bb.12:                               # %for.body9
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	cmpq	$0, listX(,%rax,8)
	je	.LBB3_14
# %bb.13:                               # %if.then13
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	movq	listX(,%rax,8), %rdi
	callq	free
	movl	-4(%rbp), %eax
	movq	$0, listX(,%rax,8)
.LBB3_14:                               # %if.end18
                                        #   in Loop: Header=BB3_11 Depth=1
	jmp	.LBB3_15
.LBB3_15:                               # %for.inc19
                                        #   in Loop: Header=BB3_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB3_11
.LBB3_16:                               # %for.end21
	movl	$0, dpb+48
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end3:
	.size	free_dpb, .Lfunc_end3-free_dpb
	.cfi_endproc
                                        # -- End function
	.globl	free_frame_store        # -- Begin function free_frame_store
	.p2align	4, 0x90
	.type	free_frame_store,@function
free_frame_store:                       # @free_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB4_8
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 40(%rax)
	je	.LBB4_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
.LBB4_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 48(%rax)
	je	.LBB4_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
.LBB4_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 56(%rax)
	je	.LBB4_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
.LBB4_7:                                # %if.end14
	movq	-8(%rbp), %rdi
	callq	free
.LBB4_8:                                # %if.end15
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	free_frame_store, .Lfunc_end4-free_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_frame_store       # -- Begin function alloc_frame_store
	.p2align	4, 0x90
	.type	alloc_frame_store,@function
alloc_frame_store:                      # @alloc_frame_store
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1, %edi
	movl	$64, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -8(%rbp)
	cmpq	-8(%rbp), %rcx
	jne	.LBB5_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.6, %rdi
	callq	no_mem_exit
.LBB5_2:                                # %if.end
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-8(%rbp), %rax
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end5:
	.size	alloc_frame_store, .Lfunc_end5-alloc_frame_store
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture  # -- Begin function alloc_storable_picture
	.p2align	4, 0x90
	.type	alloc_storable_picture,@function
alloc_storable_picture:                 # @alloc_storable_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_alloc_storable_picture.9
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.9
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_alloc_storable_picture.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_alloc_storable_picture.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_alloc_storable_picture.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.110
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_alloc_storable_picture.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.115
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_alloc_storable_picture.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.117
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_alloc_storable_picture.150
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.150
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_alloc_storable_picture.179
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	alloc_storable_picture.179
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	alloc_storable_picture, .Lfunc_end6-alloc_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	free_storable_picture   # -- Begin function free_storable_picture
	.p2align	4, 0x90
	.type	free_storable_picture,@function
free_storable_picture:                  # @free_storable_picture
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB7_32
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	cmpq	$0, 6480(%rax)
	je	.LBB7_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	6480(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6480(%rax)
.LBB7_3:                                # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 6488(%rax)
	je	.LBB7_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	6488(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6488(%rax)
.LBB7_5:                                # %if.end9
	movq	-8(%rbp), %rax
	cmpq	$0, 6496(%rax)
	je	.LBB7_7
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	6496(%rax), %rdi
	movl	$6, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	$0, 6496(%rax)
.LBB7_7:                                # %if.end14
	movq	-8(%rbp), %rax
	cmpq	$0, 6504(%rax)
	je	.LBB7_9
# %bb.8:                                # %if.then16
	movq	-8(%rbp), %rax
	movq	6504(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	movq	$0, 6504(%rax)
.LBB7_9:                                # %if.end19
	movq	-8(%rbp), %rax
	cmpq	$0, 6512(%rax)
	je	.LBB7_11
# %bb.10:                               # %if.then21
	movq	-8(%rbp), %rax
	movq	6512(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6512(%rax)
.LBB7_11:                               # %if.end24
	movq	-8(%rbp), %rax
	cmpq	$0, 6520(%rax)
	je	.LBB7_13
# %bb.12:                               # %if.then26
	movq	-8(%rbp), %rax
	movq	6520(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 6520(%rax)
.LBB7_13:                               # %if.end29
	movq	-8(%rbp), %rax
	cmpq	$0, 6424(%rax)
	je	.LBB7_15
# %bb.14:                               # %if.then31
	movq	-8(%rbp), %rax
	movq	6424(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6424(%rax)
.LBB7_15:                               # %if.end34
	movq	-8(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB7_17
# %bb.16:                               # %if.then36
	movq	-8(%rbp), %rax
	movq	6432(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6432(%rax)
.LBB7_17:                               # %if.end39
	movq	-8(%rbp), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB7_19
# %bb.18:                               # %if.then41
	movq	-8(%rbp), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6448(%rax)
.LBB7_19:                               # %if.end44
	movq	-8(%rbp), %rax
	cmpq	$0, 6464(%rax)
	je	.LBB7_21
# %bb.20:                               # %if.then46
	movq	-8(%rbp), %rax
	movq	6464(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6464(%rax)
.LBB7_21:                               # %if.end49
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB7_24
# %bb.22:                               # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB7_24
# %bb.23:                               # %lor.lhs.false52
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB7_29
.LBB7_24:                               # %if.then54
	movq	-8(%rbp), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB7_26
# %bb.25:                               # %if.then56
	movq	-8(%rbp), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6440(%rax)
.LBB7_26:                               # %if.end59
	movq	-8(%rbp), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB7_28
# %bb.27:                               # %if.then61
	movq	-8(%rbp), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB7_28:                               # %if.end64
	jmp	.LBB7_29
.LBB7_29:                               # %if.end65
	movq	-8(%rbp), %rax
	cmpq	$0, 6472(%rax)
	je	.LBB7_31
# %bb.30:                               # %if.then67
	movq	-8(%rbp), %rax
	movq	6472(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	$0, 6472(%rax)
.LBB7_31:                               # %if.end70
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB7_32:                               # %if.end71
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end7:
	.size	free_storable_picture, .Lfunc_end7-free_storable_picture
	.cfi_endproc
                                        # -- End function
	.globl	is_short_ref            # -- Begin function is_short_ref
	.p2align	4, 0x90
	.type	is_short_ref,@function
is_short_ref:                           # @is_short_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB8_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
	xorb	$-1, %al
.LBB8_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	is_short_ref, .Lfunc_end8-is_short_ref
	.cfi_endproc
                                        # -- End function
	.globl	is_long_ref             # -- Begin function is_long_ref
	.p2align	4, 0x90
	.type	is_long_ref,@function
is_long_ref:                            # @is_long_ref
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%eax, %eax
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB9_2
# %bb.1:                                # %land.rhs
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	setne	%al
.LBB9_2:                                # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	is_long_ref, .Lfunc_end9-is_long_ref
	.cfi_endproc
                                        # -- End function
	.globl	init_lists              # -- Begin function init_lists
	.p2align	4, 0x90
	.type	init_lists,@function
init_lists:                             # @init_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_init_lists.88
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.88
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_init_lists.165
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.165
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_init_lists.187
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.187
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_init_lists.188
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.188
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_init_lists.229
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.229
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_init_lists.232
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.232
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_init_lists.235
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.235
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_init_lists.266
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	init_lists.266
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	init_lists, .Lfunc_end10-init_lists
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc
	.type	compare_pic_by_pic_num_desc,@function
compare_pic_by_pic_num_desc:            # @compare_pic_by_pic_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_7
# %bb.1:                                # %func_compare_pic_by_pic_num_desc.50
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_compare_pic_by_pic_num_desc.122
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.122
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_compare_pic_by_pic_num_desc.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.158
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_compare_pic_by_pic_num_desc.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_compare_pic_by_pic_num_desc.173
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.173
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_compare_pic_by_pic_num_desc.194
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_pic_num_desc.194
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
	jmp	.LBB11_6
.Lfunc_end11:
	.size	compare_pic_by_pic_num_desc, .Lfunc_end11-compare_pic_by_pic_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc
	.type	compare_pic_by_lt_pic_num_asc,@function
compare_pic_by_lt_pic_num_asc:          # @compare_pic_by_lt_pic_num_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_7
# %bb.1:                                # %func_compare_pic_by_lt_pic_num_asc.39
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_compare_pic_by_lt_pic_num_asc.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_compare_pic_by_lt_pic_num_asc.95
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.95
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_compare_pic_by_lt_pic_num_asc.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.131
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_compare_pic_by_lt_pic_num_asc.139
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.139
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_compare_pic_by_lt_pic_num_asc.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_lt_pic_num_asc.168
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
	jmp	.LBB12_6
.Lfunc_end12:
	.size	compare_pic_by_lt_pic_num_asc, .Lfunc_end12-compare_pic_by_lt_pic_num_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc
	.type	compare_fs_by_frame_num_desc,@function
compare_fs_by_frame_num_desc:           # @compare_fs_by_frame_num_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_7
# %bb.1:                                # %func_compare_fs_by_frame_num_desc.40
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_compare_fs_by_frame_num_desc.116
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.116
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_compare_fs_by_frame_num_desc.156
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.156
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_compare_fs_by_frame_num_desc.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.184
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_compare_fs_by_frame_num_desc.209
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.209
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_compare_fs_by_frame_num_desc.214
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_frame_num_desc.214
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
	jmp	.LBB13_6
.Lfunc_end13:
	.size	compare_fs_by_frame_num_desc, .Lfunc_end13-compare_fs_by_frame_num_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list
	.type	gen_pic_list_from_frame_list,@function
gen_pic_list_from_frame_list:           # @gen_pic_list_from_frame_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_gen_pic_list_from_frame_list.19
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	gen_pic_list_from_frame_list.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_gen_pic_list_from_frame_list.30
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_gen_pic_list_from_frame_list.31
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.31
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_gen_pic_list_from_frame_list.84
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.84
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_gen_pic_list_from_frame_list.133
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.133
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_gen_pic_list_from_frame_list.154
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	gen_pic_list_from_frame_list.154
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_gen_pic_list_from_frame_list.155
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.155
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_gen_pic_list_from_frame_list.227
	.cfi_def_cfa %rbp, 16
	callq	gen_pic_list_from_frame_list.227
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	gen_pic_list_from_frame_list, .Lfunc_end14-gen_pic_list_from_frame_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc
	.type	compare_fs_by_lt_pic_idx_asc,@function
compare_fs_by_lt_pic_idx_asc:           # @compare_fs_by_lt_pic_idx_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_7
# %bb.1:                                # %func_compare_fs_by_lt_pic_idx_asc.76
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.76
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_compare_fs_by_lt_pic_idx_asc.183
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.183
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_compare_fs_by_lt_pic_idx_asc.200
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.200
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_compare_fs_by_lt_pic_idx_asc.201
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.201
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_compare_fs_by_lt_pic_idx_asc.206
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.206
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_compare_fs_by_lt_pic_idx_asc.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_lt_pic_idx_asc.213
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
	jmp	.LBB15_6
.Lfunc_end15:
	.size	compare_fs_by_lt_pic_idx_asc, .Lfunc_end15-compare_fs_by_lt_pic_idx_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc
	.type	compare_pic_by_poc_desc,@function
compare_pic_by_poc_desc:                # @compare_pic_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_7
# %bb.1:                                # %func_compare_pic_by_poc_desc.33
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.33
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_compare_pic_by_poc_desc.54
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_compare_pic_by_poc_desc.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.91
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_compare_pic_by_poc_desc.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.108
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_compare_pic_by_poc_desc.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.111
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_compare_pic_by_poc_desc.193
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_desc.193
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
	jmp	.LBB16_6
.Lfunc_end16:
	.size	compare_pic_by_poc_desc, .Lfunc_end16-compare_pic_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc
	.type	compare_pic_by_poc_asc,@function
compare_pic_by_poc_asc:                 # @compare_pic_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_7
# %bb.1:                                # %func_compare_pic_by_poc_asc.20
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_compare_pic_by_poc_asc.83
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.83
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_compare_pic_by_poc_asc.162
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.162
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_compare_pic_by_poc_asc.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.219
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_compare_pic_by_poc_asc.230
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.230
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_compare_pic_by_poc_asc.237
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_pic_by_poc_asc.237
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
	jmp	.LBB17_6
.Lfunc_end17:
	.size	compare_pic_by_poc_asc, .Lfunc_end17-compare_pic_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc
	.type	compare_fs_by_poc_desc,@function
compare_fs_by_poc_desc:                 # @compare_fs_by_poc_desc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_7
# %bb.1:                                # %func_compare_fs_by_poc_desc.104
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.104
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_compare_fs_by_poc_desc.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.119
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_compare_fs_by_poc_desc.146
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.146
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_compare_fs_by_poc_desc.149
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.149
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_compare_fs_by_poc_desc.163
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.163
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_compare_fs_by_poc_desc.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_desc.177
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
	jmp	.LBB18_6
.Lfunc_end18:
	.size	compare_fs_by_poc_desc, .Lfunc_end18-compare_fs_by_poc_desc
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc
	.type	compare_fs_by_poc_asc,@function
compare_fs_by_poc_asc:                  # @compare_fs_by_poc_asc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_7
# %bb.1:                                # %func_compare_fs_by_poc_asc.35
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.35
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_compare_fs_by_poc_asc.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_compare_fs_by_poc_asc.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.100
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_compare_fs_by_poc_asc.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.107
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_compare_fs_by_poc_asc.140
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.140
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_compare_fs_by_poc_asc.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compare_fs_by_poc_asc.142
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
	jmp	.LBB19_6
.Lfunc_end19:
	.size	compare_fs_by_poc_asc, .Lfunc_end19-compare_fs_by_poc_asc
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists        # -- Begin function init_mbaff_lists
	.p2align	4, 0x90
	.type	init_mbaff_lists,@function
init_mbaff_lists:                       # @init_mbaff_lists
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_2
# %bb.1:                                # %func_init_mbaff_lists.23
	callq	init_mbaff_lists.23
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_init_mbaff_lists.114
	.cfi_def_cfa %rbp, 16
	callq	init_mbaff_lists.114
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end20:
	.size	init_mbaff_lists, .Lfunc_end20-init_mbaff_lists
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list    # -- Begin function reorder_ref_pic_list
	.p2align	4, 0x90
	.type	reorder_ref_pic_list,@function
reorder_ref_pic_list:                   # @reorder_ref_pic_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_reorder_ref_pic_list.123
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	reorder_ref_pic_list.123
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_reorder_ref_pic_list.129
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.129
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_reorder_ref_pic_list.207
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.207
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_reorder_ref_pic_list.234
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.234
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_reorder_ref_pic_list.239
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.239
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_reorder_ref_pic_list.250
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	reorder_ref_pic_list.250
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_reorder_ref_pic_list.251
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.251
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_reorder_ref_pic_list.255
	.cfi_def_cfa %rbp, 16
	callq	reorder_ref_pic_list.255
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r15, %rdi
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	reorder_ref_pic_list, .Lfunc_end21-reorder_ref_pic_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term
	.type	reorder_short_term,@function
reorder_short_term:                     # @reorder_short_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_reorder_short_term.6
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.6
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_reorder_short_term.13
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.13
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_reorder_short_term.69
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.69
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_reorder_short_term.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.127
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_reorder_short_term.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.147
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_reorder_short_term.190
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.190
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_reorder_short_term.224
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.224
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_reorder_short_term.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_short_term.241
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	reorder_short_term, .Lfunc_end22-reorder_short_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term
	.type	reorder_long_term,@function
reorder_long_term:                      # @reorder_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rcx, %r14
	movl	%edx, %r15d
	movl	%esi, %r12d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_9
# %bb.1:                                # %func_reorder_long_term.124
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.124
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_reorder_long_term.192
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.192
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_reorder_long_term.204
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.204
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_reorder_long_term.254
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.254
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_reorder_long_term.256
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.256
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_reorder_long_term.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.257
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_reorder_long_term.258
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.258
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_reorder_long_term.260
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movq	%r14, %rcx
	callq	reorder_long_term.260
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
	jmp	.LBB23_8
.Lfunc_end23:
	.size	reorder_long_term, .Lfunc_end23-reorder_long_term
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list         # -- Begin function update_ref_list
	.p2align	4, 0x90
	.type	update_ref_list,@function
update_ref_list:                        # @update_ref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_2
# %bb.1:                                # %func_update_ref_list.66
	callq	update_ref_list.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_update_ref_list.79
	.cfi_def_cfa %rbp, 16
	callq	update_ref_list.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end24:
	.size	update_ref_list, .Lfunc_end24-update_ref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference
	.type	is_short_term_reference,@function
is_short_term_reference:                # @is_short_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_2
# %bb.1:                                # %func_is_short_term_reference.46
	movq	%rbx, %rdi
	callq	is_short_term_reference.46
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_is_short_term_reference.80
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_short_term_reference.80
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end25:
	.size	is_short_term_reference, .Lfunc_end25-is_short_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list       # -- Begin function update_ltref_list
	.p2align	4, 0x90
	.type	update_ltref_list,@function
update_ltref_list:                      # @update_ltref_list
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_2
# %bb.1:                                # %func_update_ltref_list.24
	callq	update_ltref_list.24
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_update_ltref_list.52
	.cfi_def_cfa %rbp, 16
	callq	update_ltref_list.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end26:
	.size	update_ltref_list, .Lfunc_end26-update_ltref_list
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference
	.type	is_long_term_reference,@function
is_long_term_reference:                 # @is_long_term_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB27_2
# %bb.1:                                # %func_is_long_term_reference.56
	movq	%rbx, %rdi
	callq	is_long_term_reference.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_is_long_term_reference.85
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_long_term_reference.85
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	is_long_term_reference, .Lfunc_end27-is_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx # -- Begin function mm_update_max_long_term_frame_idx
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx,@function
mm_update_max_long_term_frame_idx:      # @mm_update_max_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB28_2
# %bb.1:                                # %func_mm_update_max_long_term_frame_idx.18
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_mm_update_max_long_term_frame_idx.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	mm_update_max_long_term_frame_idx.28
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	mm_update_max_long_term_frame_idx, .Lfunc_end28-mm_update_max_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_long_term_reference
	.type	unmark_for_long_term_reference,@function
unmark_for_long_term_reference:         # @unmark_for_long_term_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB29_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB29_5
# %bb.4:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_5:                               # %if.end11
	jmp	.LBB29_6
.LBB29_6:                               # %if.end12
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB29_10
# %bb.7:                                # %if.then14
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB29_9
# %bb.8:                                # %if.then17
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_9:                               # %if.end26
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB29_10:                              # %if.end30
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	unmark_for_long_term_reference, .Lfunc_end29-unmark_for_long_term_reference
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb    # -- Begin function store_picture_in_dpb
	.p2align	4, 0x90
	.type	store_picture_in_dpb,@function
store_picture_in_dpb:                   # @store_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_store_picture_in_dpb.5
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_store_picture_in_dpb.8
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_store_picture_in_dpb.17
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_store_picture_in_dpb.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_store_picture_in_dpb.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.166
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_store_picture_in_dpb.167
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.167
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_store_picture_in_dpb.211
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.211
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_store_picture_in_dpb.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	store_picture_in_dpb.215
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	store_picture_in_dpb, .Lfunc_end30-store_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management
	.type	idr_memory_management,@function
idr_memory_management:                  # @idr_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB31_2
# %bb.1:                                # %func_idr_memory_management.101
	movq	%rbx, %rdi
	callq	idr_memory_management.101
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_idr_memory_management.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	idr_memory_management.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end31:
	.size	idr_memory_management, .Lfunc_end31-idr_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management
	.type	adaptive_memory_management,@function
adaptive_memory_management:             # @adaptive_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB32_2
# %bb.1:                                # %func_adaptive_memory_management.92
	movq	%rbx, %rdi
	callq	adaptive_memory_management.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_adaptive_memory_management.121
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	adaptive_memory_management.121
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	adaptive_memory_management, .Lfunc_end32-adaptive_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb
	.type	insert_picture_in_dpb,@function
insert_picture_in_dpb:                  # @insert_picture_in_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB33_2
# %bb.1:                                # %func_insert_picture_in_dpb.14
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_insert_picture_in_dpb.15
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	insert_picture_in_dpb.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	insert_picture_in_dpb, .Lfunc_end33-insert_picture_in_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management
	.type	sliding_window_memory_management,@function
sliding_window_memory_management:       # @sliding_window_memory_management
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB34_2
# %bb.1:                                # %func_sliding_window_memory_management.25
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.25
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_sliding_window_memory_management.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	sliding_window_memory_management.94
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	sliding_window_memory_management, .Lfunc_end34-sliding_window_memory_management
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc
	.type	get_smallest_poc,@function
get_smallest_poc:                       # @get_smallest_poc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB35_7
# %bb.1:                                # %func_get_smallest_poc.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_get_smallest_poc.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.89
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_get_smallest_poc.132
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.132
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_get_smallest_poc.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.134
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_get_smallest_poc.138
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.138
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_get_smallest_poc.243
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	get_smallest_poc.243
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
	jmp	.LBB35_6
.Lfunc_end35:
	.size	get_smallest_poc, .Lfunc_end35-get_smallest_poc
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame # -- Begin function replace_top_pic_with_frame
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame,@function
replace_top_pic_with_frame:             # @replace_top_pic_with_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_replace_top_pic_with_frame.41
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.41
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_replace_top_pic_with_frame.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_replace_top_pic_with_frame.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.82
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_replace_top_pic_with_frame.153
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.153
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_replace_top_pic_with_frame.226
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.226
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_replace_top_pic_with_frame.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.248
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_replace_top_pic_with_frame.263
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.263
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_replace_top_pic_with_frame.265
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	replace_top_pic_with_frame.265
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	replace_top_pic_with_frame, .Lfunc_end36-replace_top_pic_with_frame
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field         # -- Begin function dpb_split_field
	.p2align	4, 0x90
	.type	dpb_split_field,@function
dpb_split_field:                        # @dpb_split_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_dpb_split_field.11
	movq	%rbx, %rdi
	callq	dpb_split_field.11
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_dpb_split_field.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_dpb_split_field.102
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.102
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_dpb_split_field.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.141
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_dpb_split_field.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.170
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_dpb_split_field.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.186
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_dpb_split_field.203
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.203
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_dpb_split_field.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_split_field.231
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	dpb_split_field, .Lfunc_end37-dpb_split_field
	.cfi_endproc
                                        # -- End function
	.globl	flush_dpb               # -- Begin function flush_dpb
	.p2align	4, 0x90
	.type	flush_dpb,@function
flush_dpb:                              # @flush_dpb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB38_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB38_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB38_1 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB38_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_1
.LBB38_4:                               # %for.end
	jmp	.LBB38_5
.LBB38_5:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	callq	remove_unused_frame_from_dpb
	cmpl	$0, %eax
	je	.LBB38_7
# %bb.6:                                # %while.body
                                        #   in Loop: Header=BB38_5 Depth=1
	jmp	.LBB38_5
.LBB38_7:                               # %while.end
	jmp	.LBB38_8
.LBB38_8:                               # %while.cond1
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, dpb+28
	je	.LBB38_10
# %bb.9:                                # %while.body3
                                        #   in Loop: Header=BB38_8 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB38_8
.LBB38_10:                              # %while.end4
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end38:
	.size	flush_dpb, .Lfunc_end38-flush_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_for_reference
	.type	unmark_for_reference,@function
unmark_for_reference:                   # @unmark_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_6
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB39_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_3:                               # %if.end
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB39_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_5:                               # %if.end8
	jmp	.LBB39_6
.LBB39_6:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB39_10
# %bb.7:                                # %if.then11
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB39_9
# %bb.8:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	-8(%rbp), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_9:                               # %if.end19
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB39_10:                              # %if.end21
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6456(%rax)
	je	.LBB39_12
# %bb.11:                               # %if.then24
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6456(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6456(%rax)
.LBB39_12:                              # %if.end29
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6448(%rax)
	je	.LBB39_14
# %bb.13:                               # %if.then32
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6448(%rax), %rdi
	callq	free_mem2Dpel
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6448(%rax)
.LBB39_14:                              # %if.end37
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	cmpq	$0, 6440(%rax)
	je	.LBB39_16
# %bb.15:                               # %if.then40
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	6440(%rax), %rdi
	callq	free
	movq	-8(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6440(%rax)
.LBB39_16:                              # %if.end45
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end39:
	.size	unmark_for_reference, .Lfunc_end39-unmark_for_reference
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids       # -- Begin function gen_field_ref_ids
	.p2align	4, 0x90
	.type	gen_field_ref_ids,@function
gen_field_ref_ids:                      # @gen_field_ref_ids
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_gen_field_ref_ids.10
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_gen_field_ref_ids.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.21
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_gen_field_ref_ids.58
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.58
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_gen_field_ref_ids.118
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.118
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_gen_field_ref_ids.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.144
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_gen_field_ref_ids.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.160
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_gen_field_ref_ids.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.174
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_gen_field_ref_ids.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	gen_field_ref_ids.182
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	gen_field_ref_ids, .Lfunc_end40-gen_field_ref_ids
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field       # -- Begin function dpb_combine_field
	.p2align	4, 0x90
	.type	dpb_combine_field,@function
dpb_combine_field:                      # @dpb_combine_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_dpb_combine_field.36
	movq	%rbx, %rdi
	callq	dpb_combine_field.36
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_dpb_combine_field.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_dpb_combine_field.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_dpb_combine_field.103
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.103
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_dpb_combine_field.113
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.113
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_dpb_combine_field.178
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.178
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_dpb_combine_field.198
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.198
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_dpb_combine_field.228
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	dpb_combine_field.228
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	dpb_combine_field, .Lfunc_end41-dpb_combine_field
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer # -- Begin function alloc_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer,@function
alloc_ref_pic_list_reordering_buffer:   # @alloc_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB42_2
# %bb.1:                                # %func_alloc_ref_pic_list_reordering_buffer.1
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.1
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_alloc_ref_pic_list_reordering_buffer.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	alloc_ref_pic_list_reordering_buffer.96
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end42:
	.size	alloc_ref_pic_list_reordering_buffer, .Lfunc_end42-alloc_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	free_ref_pic_list_reordering_buffer # -- Begin function free_ref_pic_list_reordering_buffer
	.p2align	4, 0x90
	.type	free_ref_pic_list_reordering_buffer,@function
free_ref_pic_list_reordering_buffer:    # @free_ref_pic_list_reordering_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpq	$0, 64(%rax)
	je	.LBB43_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	64(%rax), %rdi
	callq	free
.LBB43_2:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 72(%rax)
	je	.LBB43_4
# %bb.3:                                # %if.then3
	movq	-8(%rbp), %rax
	movq	72(%rax), %rdi
	callq	free
.LBB43_4:                               # %if.end5
	movq	-8(%rbp), %rax
	cmpq	$0, 80(%rax)
	je	.LBB43_6
# %bb.5:                                # %if.then7
	movq	-8(%rbp), %rax
	movq	80(%rax), %rdi
	callq	free
.LBB43_6:                               # %if.end9
	movq	-8(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 80(%rax)
	movq	-8(%rbp), %rax
	cmpq	$0, 96(%rax)
	je	.LBB43_8
# %bb.7:                                # %if.then14
	movq	-8(%rbp), %rax
	movq	96(%rax), %rdi
	callq	free
.LBB43_8:                               # %if.end16
	movq	-8(%rbp), %rax
	cmpq	$0, 104(%rax)
	je	.LBB43_10
# %bb.9:                                # %if.then18
	movq	-8(%rbp), %rax
	movq	104(%rax), %rdi
	callq	free
.LBB43_10:                              # %if.end20
	movq	-8(%rbp), %rax
	cmpq	$0, 112(%rax)
	je	.LBB43_12
# %bb.11:                               # %if.then22
	movq	-8(%rbp), %rax
	movq	112(%rax), %rdi
	callq	free
.LBB43_12:                              # %if.end24
	movq	-8(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 112(%rax)
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end43:
	.size	free_ref_pic_list_reordering_buffer, .Lfunc_end43-free_ref_pic_list_reordering_buffer
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap      # -- Begin function fill_frame_num_gap
	.p2align	4, 0x90
	.type	fill_frame_num_gap,@function
fill_frame_num_gap:                     # @fill_frame_num_gap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB44_9
# %bb.1:                                # %func_fill_frame_num_gap.217
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.217
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_fill_frame_num_gap.222
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.222
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_3:                               # %func_fill_frame_num_gap.244
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.244
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_4:                               # %func_fill_frame_num_gap.246
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.246
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_5:                               # %func_fill_frame_num_gap.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.252
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_6:                               # %func_fill_frame_num_gap.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.261
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_7:                               # %func_fill_frame_num_gap.262
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.262
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_8:                               # %func_fill_frame_num_gap.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	fill_frame_num_gap.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB44_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB44_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB44_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB44_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB44_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB44_7
	jmp	.LBB44_8
.Lfunc_end44:
	.size	fill_frame_num_gap, .Lfunc_end44-fill_frame_num_gap
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated         # -- Begin function alloc_colocated
	.p2align	4, 0x90
	.type	alloc_colocated,@function
alloc_colocated:                        # @alloc_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB45_9
# %bb.1:                                # %func_alloc_colocated.7
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.7
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_2:                               # %func_alloc_colocated.12
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_3:                               # %func_alloc_colocated.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.48
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_4:                               # %func_alloc_colocated.70
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.70
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_5:                               # %func_alloc_colocated.120
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.120
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_6:                               # %func_alloc_colocated.137
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.137
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_7:                               # %func_alloc_colocated.181
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.181
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_8:                               # %func_alloc_colocated.195
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	alloc_colocated.195
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB45_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB45_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB45_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB45_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB45_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB45_7
	jmp	.LBB45_8
.Lfunc_end45:
	.size	alloc_colocated, .Lfunc_end45-alloc_colocated
	.cfi_endproc
                                        # -- End function
	.globl	free_colocated          # -- Begin function free_colocated
	.p2align	4, 0x90
	.type	free_colocated,@function
free_colocated:                         # @free_colocated
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movq	%rdi, -8(%rbp)
	cmpq	$0, -8(%rbp)
	je	.LBB46_12
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movq	1600(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	1608(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	1616(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 1624(%rax)
	je	.LBB46_3
# %bb.2:                                # %if.then2
	movq	-8(%rbp), %rax
	movq	1624(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 1624(%rax)
.LBB46_3:                               # %if.end
	movq	-8(%rbp), %rax
	cmpq	$0, 4872(%rax)
	je	.LBB46_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rax
	movq	4872(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4872(%rax)
.LBB46_5:                               # %if.end9
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB46_11
# %bb.6:                                # %if.then11
	movq	-8(%rbp), %rax
	movq	3216(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	3224(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	3232(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 3240(%rax)
	je	.LBB46_8
# %bb.7:                                # %if.then15
	movq	-8(%rbp), %rax
	movq	3240(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 3240(%rax)
.LBB46_8:                               # %if.end18
	movq	-8(%rbp), %rax
	movq	4832(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dshort
	movq	-8(%rbp), %rax
	movq	4840(%rax), %rdi
	movl	$2, %esi
	callq	free_mem3Dint64
	movq	-8(%rbp), %rax
	movq	4848(%rax), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	$2, %esi
	movl	%eax, %edx
	callq	free_mem4Dshort
	movq	-8(%rbp), %rax
	cmpq	$0, 4856(%rax)
	je	.LBB46_10
# %bb.9:                                # %if.then22
	movq	-8(%rbp), %rax
	movq	4856(%rax), %rdi
	callq	free_mem2D
	movq	-8(%rbp), %rax
	movq	$0, 4856(%rax)
.LBB46_10:                              # %if.end25
	jmp	.LBB46_11
.LBB46_11:                              # %if.end26
	movq	-8(%rbp), %rdi
	callq	free
	movq	$0, -8(%rbp)
.LBB46_12:                              # %if.end27
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end46:
	.size	free_colocated, .Lfunc_end46-free_colocated
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated       # -- Begin function compute_colocated
	.p2align	4, 0x90
	.type	compute_colocated,@function
compute_colocated:                      # @compute_colocated
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB47_9
# %bb.1:                                # %func_compute_colocated.42
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_2:                               # %func_compute_colocated.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.75
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_3:                               # %func_compute_colocated.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.148
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_4:                               # %func_compute_colocated.205
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.205
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_5:                               # %func_compute_colocated.212
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.212
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_6:                               # %func_compute_colocated.223
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.223
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_7:                               # %func_compute_colocated.240
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.240
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_8:                               # %func_compute_colocated.247
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	compute_colocated.247
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB47_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB47_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB47_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB47_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB47_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB47_7
	jmp	.LBB47_8
.Lfunc_end47:
	.size	compute_colocated, .Lfunc_end47-compute_colocated
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic
	.type	get_short_term_pic,@function
get_short_term_pic:                     # @get_short_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB48_7
# %bb.1:                                # %func_get_short_term_pic.65
	movl	%ebx, %edi
	callq	get_short_term_pic.65
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_2:                               # %func_get_short_term_pic.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_3:                               # %func_get_short_term_pic.143
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.143
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_4:                               # %func_get_short_term_pic.159
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.159
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_5:                               # %func_get_short_term_pic.180
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.180
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_6:                               # %func_get_short_term_pic.197
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_short_term_pic.197
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB48_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB48_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB48_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB48_5
	jmp	.LBB48_6
.Lfunc_end48:
	.size	get_short_term_pic, .Lfunc_end48-get_short_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic
	.type	get_long_term_pic,@function
get_long_term_pic:                      # @get_long_term_pic
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB49_7
# %bb.1:                                # %func_get_long_term_pic.22
	movl	%ebx, %edi
	callq	get_long_term_pic.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_2:                               # %func_get_long_term_pic.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_3:                               # %func_get_long_term_pic.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_4:                               # %func_get_long_term_pic.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_5:                               # %func_get_long_term_pic.130
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.130
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_get_long_term_pic.157
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	get_long_term_pic.157
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB49_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB49_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB49_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB49_5
	jmp	.LBB49_6
.Lfunc_end49:
	.size	get_long_term_pic, .Lfunc_end49-get_long_term_pic
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference
	.type	mm_unmark_short_term_for_reference,@function
mm_unmark_short_term_for_reference:     # @mm_unmark_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB50_9
# %bb.1:                                # %func_mm_unmark_short_term_for_reference.27
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.27
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_2:                               # %func_mm_unmark_short_term_for_reference.99
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.99
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_3:                               # %func_mm_unmark_short_term_for_reference.136
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.136
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_4:                               # %func_mm_unmark_short_term_for_reference.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.236
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_5:                               # %func_mm_unmark_short_term_for_reference.242
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.242
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_6:                               # %func_mm_unmark_short_term_for_reference.249
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.249
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_7:                               # %func_mm_unmark_short_term_for_reference.253
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.253
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_8:                               # %func_mm_unmark_short_term_for_reference.259
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_short_term_for_reference.259
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB50_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB50_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB50_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB50_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB50_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB50_7
	jmp	.LBB50_8
.Lfunc_end50:
	.size	mm_unmark_short_term_for_reference, .Lfunc_end50-mm_unmark_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference
	.type	mm_unmark_long_term_for_reference,@function
mm_unmark_long_term_for_reference:      # @mm_unmark_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB51_7
# %bb.1:                                # %func_mm_unmark_long_term_for_reference.4
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_2:                               # %func_mm_unmark_long_term_for_reference.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.49
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_3:                               # %func_mm_unmark_long_term_for_reference.74
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.74
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_4:                               # %func_mm_unmark_long_term_for_reference.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_5:                               # %func_mm_unmark_long_term_for_reference.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.105
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_6:                               # %func_mm_unmark_long_term_for_reference.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_unmark_long_term_for_reference.109
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB51_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB51_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB51_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB51_5
	jmp	.LBB51_6
.Lfunc_end51:
	.size	mm_unmark_long_term_for_reference, .Lfunc_end51-mm_unmark_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx
	.type	mm_assign_long_term_frame_idx,@function
mm_assign_long_term_frame_idx:          # @mm_assign_long_term_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB52_9
# %bb.1:                                # %func_mm_assign_long_term_frame_idx.29
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_2:                               # %func_mm_assign_long_term_frame_idx.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_3:                               # %func_mm_assign_long_term_frame_idx.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_4:                               # %func_mm_assign_long_term_frame_idx.68
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_5:                               # %func_mm_assign_long_term_frame_idx.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_6:                               # %func_mm_assign_long_term_frame_idx.86
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.86
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_7:                               # %func_mm_assign_long_term_frame_idx.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.125
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_8:                               # %func_mm_assign_long_term_frame_idx.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mm_assign_long_term_frame_idx.152
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB52_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB52_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB52_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB52_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB52_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB52_7
	jmp	.LBB52_8
.Lfunc_end52:
	.size	mm_assign_long_term_frame_idx, .Lfunc_end52-mm_assign_long_term_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term
	.type	mm_mark_current_picture_long_term,@function
mm_mark_current_picture_long_term:      # @mm_mark_current_picture_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB53_2
# %bb.1:                                # %func_mm_mark_current_picture_long_term.43
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_mm_mark_current_picture_long_term.59
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	mm_mark_current_picture_long_term.59
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end53:
	.size	mm_mark_current_picture_long_term, .Lfunc_end53-mm_mark_current_picture_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x
	.type	get_pic_num_x,@function
get_pic_num_x:                          # @get_pic_num_x
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB54_7
# %bb.1:                                # %func_get_pic_num_x.151
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.151
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_2:                               # %func_get_pic_num_x.164
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.164
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_3:                               # %func_get_pic_num_x.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.175
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_4:                               # %func_get_pic_num_x.199
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.199
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_5:                               # %func_get_pic_num_x.216
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.216
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_6:                               # %func_get_pic_num_x.225
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	get_pic_num_x.225
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB54_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB54_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB54_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB54_5
	jmp	.LBB54_6
.Lfunc_end54:
	.size	get_pic_num_x, .Lfunc_end54-get_pic_num_x
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx
	.type	unmark_long_term_frame_for_reference_by_frame_idx,@function
unmark_long_term_frame_for_reference_by_frame_idx: # @unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB55_2
# %bb.1:                                # %func_unmark_long_term_frame_for_reference_by_frame_idx.78
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.78
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_2:                               # %func_unmark_long_term_frame_for_reference_by_frame_idx.112
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx.112
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end55:
	.size	unmark_long_term_frame_for_reference_by_frame_idx, .Lfunc_end55-unmark_long_term_frame_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx
	.type	unmark_long_term_field_for_reference_by_frame_idx,@function
unmark_long_term_field_for_reference_by_frame_idx: # @unmark_long_term_field_for_reference_by_frame_idx
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB56_9
# %bb.1:                                # %func_unmark_long_term_field_for_reference_by_frame_idx.53
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.53
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_2:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.72
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_3:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.97
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_4:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.126
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.126
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_5:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.176
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.176
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_6:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.185
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.185
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_7:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.196
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.196
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_8:                               # %func_unmark_long_term_field_for_reference_by_frame_idx.220
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx.220
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB56_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB56_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB56_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB56_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB56_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB56_7
	jmp	.LBB56_8
.Lfunc_end56:
	.size	unmark_long_term_field_for_reference_by_frame_idx, .Lfunc_end56-unmark_long_term_field_for_reference_by_frame_idx
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term
	.type	mark_pic_long_term,@function
mark_pic_long_term:                     # @mark_pic_long_term
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB57_9
# %bb.1:                                # %func_mark_pic_long_term.44
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_2:                               # %func_mark_pic_long_term.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.135
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_3:                               # %func_mark_pic_long_term.161
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.161
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_4:                               # %func_mark_pic_long_term.169
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.169
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_5:                               # %func_mark_pic_long_term.221
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.221
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_6:                               # %func_mark_pic_long_term.233
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.233
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_7:                               # %func_mark_pic_long_term.238
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.238
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_8:                               # %func_mark_pic_long_term.245
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	mark_pic_long_term.245
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB57_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB57_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB57_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB57_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB57_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB57_7
	jmp	.LBB57_8
.Lfunc_end57:
	.size	mark_pic_long_term, .Lfunc_end57-mark_pic_long_term
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_short_term_for_reference
	.type	mm_unmark_all_short_term_for_reference,@function
mm_unmark_all_short_term_for_reference: # @mm_unmark_all_short_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB58_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB58_1
.LBB58_4:                               # %for.end
	callq	update_ref_list
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end58:
	.size	mm_unmark_all_short_term_for_reference, .Lfunc_end58-mm_unmark_all_short_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_all_long_term_for_reference
	.type	mm_unmark_all_long_term_for_reference,@function
mm_unmark_all_long_term_for_reference:  # @mm_unmark_all_long_term_for_reference
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	xorl	%edi, %edi
	callq	mm_update_max_long_term_frame_idx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end59:
	.size	mm_unmark_all_long_term_for_reference, .Lfunc_end59-mm_unmark_all_long_term_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb
	.type	remove_unused_frame_from_dpb,@function
remove_unused_frame_from_dpb:           # @remove_unused_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB60_2
# %bb.1:                                # %func_remove_unused_frame_from_dpb.38
	callq	remove_unused_frame_from_dpb.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_2:                               # %func_remove_unused_frame_from_dpb.51
	.cfi_def_cfa %rbp, 16
	callq	remove_unused_frame_from_dpb.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end60:
	.size	remove_unused_frame_from_dpb, .Lfunc_end60-remove_unused_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference
	.type	is_used_for_reference,@function
is_used_for_reference:                  # @is_used_for_reference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB61_2
# %bb.1:                                # %func_is_used_for_reference.47
	movq	%rbx, %rdi
	callq	is_used_for_reference.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_2:                               # %func_is_used_for_reference.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	is_used_for_reference.64
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end61:
	.size	is_used_for_reference, .Lfunc_end61-is_used_for_reference
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb
	.type	remove_frame_from_dpb,@function
remove_frame_from_dpb:                  # @remove_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB62_9
# %bb.1:                                # %func_remove_frame_from_dpb.145
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.145
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_2:                               # %func_remove_frame_from_dpb.171
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.171
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_3:                               # %func_remove_frame_from_dpb.189
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.189
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_4:                               # %func_remove_frame_from_dpb.191
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.191
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_5:                               # %func_remove_frame_from_dpb.202
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.202
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_6:                               # %func_remove_frame_from_dpb.208
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.208
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_7:                               # %func_remove_frame_from_dpb.210
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.210
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_8:                               # %func_remove_frame_from_dpb.218
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	remove_frame_from_dpb.218
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB62_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB62_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB62_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB62_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB62_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB62_7
	jmp	.LBB62_8
.Lfunc_end62:
	.size	remove_frame_from_dpb, .Lfunc_end62-remove_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb
	.type	output_one_frame_from_dpb,@function
output_one_frame_from_dpb:              # @output_one_frame_from_dpb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB63_2
# %bb.1:                                # %func_output_one_frame_from_dpb.62
	callq	output_one_frame_from_dpb.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_2:                               # %func_output_one_frame_from_dpb.71
	.cfi_def_cfa %rbp, 16
	callq	output_one_frame_from_dpb.71
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end63:
	.size	output_one_frame_from_dpb, .Lfunc_end63-output_one_frame_from_dpb
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.1 # -- Begin function alloc_ref_pic_list_reordering_buffer.1
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.1,@function
alloc_ref_pic_list_reordering_buffer.1: # @alloc_ref_pic_list_reordering_buffer.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$384271764, -20(%rbp)   # imm = 0x16E78594
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB64_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB64_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB64_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB64_4:                               # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB64_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB64_6:                               # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB64_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB64_8:                               # %if.end17
	jmp	.LBB64_10
.LBB64_9:                               # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB64_10:                              # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB64_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB64_13:                              # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB64_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB64_15:                              # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB64_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB64_17:                              # %if.end44
	jmp	.LBB64_19
.LBB64_18:                              # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB64_19:                              # %if.end49
	cmpl	$384271764, -20(%rbp)   # imm = 0x16E78594
	jne	.LBB64_21
.LBB64_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_20
.Lfunc_end64:
	.size	alloc_ref_pic_list_reordering_buffer.1, .Lfunc_end64-alloc_ref_pic_list_reordering_buffer.1
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.2            # -- Begin function getDpbSize.2
	.p2align	4, 0x90
	.type	getDpbSize.2,@function
getDpbSize.2:                           # @getDpbSize.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1012504158, -20(%rbp)  # imm = 0x3C59965E
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB65_17
# %bb.1:                                # %entry
	movq	.LJTI65_0(,%rax,8), %rax
	jmpq	*%rax
.LBB65_2:                               # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB65_18
.LBB65_3:                               # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB65_18
.LBB65_4:                               # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB65_18
.LBB65_5:                               # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB65_18
.LBB65_6:                               # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB65_18
.LBB65_7:                               # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB65_18
.LBB65_8:                               # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB65_18
.LBB65_9:                               # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB65_18
.LBB65_10:                              # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB65_18
.LBB65_11:                              # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB65_18
.LBB65_12:                              # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB65_18
.LBB65_13:                              # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB65_18
.LBB65_14:                              # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB65_18
.LBB65_15:                              # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB65_18
.LBB65_16:                              # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB65_18
.LBB65_17:                              # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB65_18:                              # %sw.epilog
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB65_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB65_21
.LBB65_20:                              # %cond.false
	movl	$16, %ebx
	jmp	.LBB65_21
.LBB65_21:                              # %cond.end
	cmpl	$1012504158, -20(%rbp)  # imm = 0x3C59965E
	jne	.LBB65_23
.LBB65_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_23:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_22
.Lfunc_end65:
	.size	getDpbSize.2, .Lfunc_end65-getDpbSize.2
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI65_0:
	.quad	.LBB65_2
	.quad	.LBB65_3
	.quad	.LBB65_4
	.quad	.LBB65_5
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_6
	.quad	.LBB65_7
	.quad	.LBB65_8
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_9
	.quad	.LBB65_10
	.quad	.LBB65_11
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_12
	.quad	.LBB65_13
	.quad	.LBB65_14
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_17
	.quad	.LBB65_15
	.quad	.LBB65_16
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.3
	.type	get_smallest_poc.3,@function
get_smallest_poc.3:                     # @get_smallest_poc.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1161096173, -20(%rbp)  # imm = 0x4534EBED
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB66_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB66_2:                               # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB66_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB66_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB66_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB66_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB66_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB66_7:                               # %if.end10
                                        #   in Loop: Header=BB66_3 Depth=1
	jmp	.LBB66_8
.LBB66_8:                               # %for.inc
                                        #   in Loop: Header=BB66_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_3
.LBB66_9:                               # %for.end
	cmpl	$1161096173, -20(%rbp)  # imm = 0x4534EBED
	jne	.LBB66_11
.LBB66_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_10
.Lfunc_end66:
	.size	get_smallest_poc.3, .Lfunc_end66-get_smallest_poc.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.4
	.type	mm_unmark_long_term_for_reference.4,@function
mm_unmark_long_term_for_reference.4:    # @mm_unmark_long_term_for_reference.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$628769230, -12(%rbp)   # imm = 0x257A41CE
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB67_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB67_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB67_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB67_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB67_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB67_7:                               # %if.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_8
.LBB67_8:                               # %if.end14
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_24
.LBB67_9:                               # %if.else
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB67_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB67_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB67_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB67_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB67_14:                              # %if.end57
	jmp	.LBB67_27
.LBB67_15:                              # %if.end58
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_16
.LBB67_16:                              # %if.end59
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB67_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB67_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB67_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB67_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB67_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB67_21:                              # %if.end106
	jmp	.LBB67_27
.LBB67_22:                              # %if.end107
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_23
.LBB67_23:                              # %if.end108
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_24
.LBB67_24:                              # %if.end109
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_25
.LBB67_25:                              # %for.inc
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_1
.LBB67_26:                              # %for.end.loopexit
	jmp	.LBB67_27
.LBB67_27:                              # %for.end
	cmpl	$628769230, -12(%rbp)   # imm = 0x257A41CE
	jne	.LBB67_29
.LBB67_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_28
.Lfunc_end67:
	.size	mm_unmark_long_term_for_reference.4, .Lfunc_end67-mm_unmark_long_term_for_reference.4
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.5  # -- Begin function store_picture_in_dpb.5
	.p2align	4, 0x90
	.type	store_picture_in_dpb.5,@function
store_picture_in_dpb.5:                 # @store_picture_in_dpb.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1110750053, -24(%rbp)  # imm = 0x4234B365
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB68_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB68_6
.LBB68_2:                               # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB68_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB68_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB68_5:                               # %if.end
	jmp	.LBB68_6
.LBB68_6:                               # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB68_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB68_23
.LBB68_8:                               # %if.then14
	cmpq	$0, dpb+56
	je	.LBB68_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB68_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB68_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB68_14
.LBB68_12:                              # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB68_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB68_20
.LBB68_14:                              # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB68_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB68_18
.LBB68_16:                              # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB68_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB68_19
.LBB68_18:                              # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB68_50
.LBB68_19:                              # %if.end48
	jmp	.LBB68_20
.LBB68_20:                              # %if.end49
	jmp	.LBB68_21
.LBB68_21:                              # %if.end50
	jmp	.LBB68_22
.LBB68_22:                              # %if.end51
	jmp	.LBB68_23
.LBB68_23:                              # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB68_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB68_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB68_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB68_27:                              # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB68_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB68_29:                              # %if.end67
	jmp	.LBB68_30
.LBB68_30:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB68_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB68_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB68_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB68_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB68_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB68_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB68_35
.LBB68_34:                              # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB68_50
.LBB68_35:                              # %if.end80
                                        #   in Loop: Header=BB68_30 Depth=1
	jmp	.LBB68_36
.LBB68_36:                              # %if.end81
                                        #   in Loop: Header=BB68_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB68_30
.LBB68_37:                              # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB68_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB68_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB68_40:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB68_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB68_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB68_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB68_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB68_43:                              # %if.end94
                                        #   in Loop: Header=BB68_40 Depth=1
	jmp	.LBB68_44
.LBB68_44:                              # %for.inc
                                        #   in Loop: Header=BB68_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_40
.LBB68_45:                              # %for.end
	jmp	.LBB68_46
.LBB68_46:                              # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB68_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB68_49
.LBB68_48:                              # %if.else104
	movq	$0, dpb+56
.LBB68_49:                              # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB68_50:                              # %return
	cmpl	$1110750053, -24(%rbp)  # imm = 0x4234B365
	jne	.LBB68_52
.LBB68_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_51
.Lfunc_end68:
	.size	store_picture_in_dpb.5, .Lfunc_end68-store_picture_in_dpb.5
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.6
	.type	reorder_short_term.6,@function
reorder_short_term.6:                   # @reorder_short_term.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$86142395, -44(%rbp)    # imm = 0x5226DBB
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB69_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB69_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB69_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB69_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_1
.LBB69_4:                               # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_5:                               # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB69_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB69_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB69_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB69_10
.LBB69_9:                               # %if.then17
                                        #   in Loop: Header=BB69_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB69_10:                              # %if.end
                                        #   in Loop: Header=BB69_5 Depth=1
	jmp	.LBB69_11
.LBB69_11:                              # %if.end23
                                        #   in Loop: Header=BB69_5 Depth=1
	jmp	.LBB69_12
.LBB69_12:                              # %for.inc24
                                        #   in Loop: Header=BB69_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_5
.LBB69_13:                              # %for.end26
	cmpl	$86142395, -44(%rbp)    # imm = 0x5226DBB
	jne	.LBB69_15
.LBB69_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_14
.Lfunc_end69:
	.size	reorder_short_term.6, .Lfunc_end69-reorder_short_term.6
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.7       # -- Begin function alloc_colocated.7
	.p2align	4, 0x90
	.type	alloc_colocated.7,@function
alloc_colocated.7:                      # @alloc_colocated.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1309851027, -32(%rbp)  # imm = 0x4E12BD93
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB70_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB70_2:                               # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB70_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB70_4:                               # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1309851027, -32(%rbp)  # imm = 0x4E12BD93
	jne	.LBB70_6
.LBB70_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_5
.Lfunc_end70:
	.size	alloc_colocated.7, .Lfunc_end70-alloc_colocated.7
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.8  # -- Begin function store_picture_in_dpb.8
	.p2align	4, 0x90
	.type	store_picture_in_dpb.8,@function
store_picture_in_dpb.8:                 # @store_picture_in_dpb.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$924531861, -24(%rbp)   # imm = 0x371B3C95
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB71_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB71_6
.LBB71_2:                               # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB71_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB71_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB71_5:                               # %if.end
	jmp	.LBB71_6
.LBB71_6:                               # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB71_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB71_23
.LBB71_8:                               # %if.then14
	cmpq	$0, dpb+56
	je	.LBB71_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB71_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB71_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB71_14
.LBB71_12:                              # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB71_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB71_20
.LBB71_14:                              # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB71_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB71_18
.LBB71_16:                              # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB71_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB71_19
.LBB71_18:                              # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB71_50
.LBB71_19:                              # %if.end48
	jmp	.LBB71_20
.LBB71_20:                              # %if.end49
	jmp	.LBB71_21
.LBB71_21:                              # %if.end50
	jmp	.LBB71_22
.LBB71_22:                              # %if.end51
	jmp	.LBB71_23
.LBB71_23:                              # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB71_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB71_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB71_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB71_27:                              # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB71_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB71_29:                              # %if.end67
	jmp	.LBB71_30
.LBB71_30:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB71_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB71_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB71_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB71_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB71_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB71_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB71_35
.LBB71_34:                              # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB71_50
.LBB71_35:                              # %if.end80
                                        #   in Loop: Header=BB71_30 Depth=1
	jmp	.LBB71_36
.LBB71_36:                              # %if.end81
                                        #   in Loop: Header=BB71_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB71_30
.LBB71_37:                              # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB71_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB71_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB71_40:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB71_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB71_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB71_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB71_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB71_43:                              # %if.end94
                                        #   in Loop: Header=BB71_40 Depth=1
	jmp	.LBB71_44
.LBB71_44:                              # %for.inc
                                        #   in Loop: Header=BB71_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_40
.LBB71_45:                              # %for.end
	jmp	.LBB71_46
.LBB71_46:                              # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB71_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB71_49
.LBB71_48:                              # %if.else104
	movq	$0, dpb+56
.LBB71_49:                              # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB71_50:                              # %return
	cmpl	$924531861, -24(%rbp)   # imm = 0x371B3C95
	jne	.LBB71_52
.LBB71_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_51
.Lfunc_end71:
	.size	store_picture_in_dpb.8, .Lfunc_end71-store_picture_in_dpb.8
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.9 # -- Begin function alloc_storable_picture.9
	.p2align	4, 0x90
	.type	alloc_storable_picture.9,@function
alloc_storable_picture.9:               # @alloc_storable_picture.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$305453502, -40(%rbp)   # imm = 0x1234D9BE
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB72_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB72_2:                               # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB72_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB72_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB72_6
.LBB72_5:                               # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB72_6:                               # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB72_8:                               # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB72_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB72_10:                              # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$305453502, -40(%rbp)   # imm = 0x1234D9BE
	jne	.LBB72_12
.LBB72_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_11
.Lfunc_end72:
	.size	alloc_storable_picture.9, .Lfunc_end72-alloc_storable_picture.9
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.10    # -- Begin function gen_field_ref_ids.10
	.p2align	4, 0x90
	.type	gen_field_ref_ids.10,@function
gen_field_ref_ids.10:                   # @gen_field_ref_ids.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1171109508, -28(%rbp)  # imm = 0x45CDB684
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB73_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	$0, -8(%rbp)
.LBB73_3:                               # %for.cond1
                                        #   Parent Loop BB73_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB73_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB73_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB73_7
.LBB73_6:                               # %cond.false
                                        #   in Loop: Header=BB73_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB73_7
.LBB73_7:                               # %cond.end
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB73_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB73_10
.LBB73_9:                               # %cond.false32
                                        #   in Loop: Header=BB73_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB73_10
.LBB73_10:                              # %cond.end33
                                        #   in Loop: Header=BB73_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB73_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_3
.LBB73_12:                              # %for.end
                                        #   in Loop: Header=BB73_1 Depth=1
	jmp	.LBB73_13
.LBB73_13:                              # %for.inc45
                                        #   in Loop: Header=BB73_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_1
.LBB73_14:                              # %for.end47
	cmpl	$1171109508, -28(%rbp)  # imm = 0x45CDB684
	jne	.LBB73_16
.LBB73_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_15
.Lfunc_end73:
	.size	gen_field_ref_ids.10, .Lfunc_end73-gen_field_ref_ids.10
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.11      # -- Begin function dpb_split_field.11
	.p2align	4, 0x90
	.type	dpb_split_field.11,@function
dpb_split_field.11:                     # @dpb_split_field.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1952806240, -64(%rbp)  # imm = 0x74657560
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB74_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB74_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB74_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB74_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_2
.LBB74_5:                               # %for.end
	movl	$0, -4(%rbp)
.LBB74_6:                               # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB74_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_6
.LBB74_9:                               # %for.end68
	movl	$0, -4(%rbp)
.LBB74_10:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB74_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB74_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_10
.LBB74_13:                              # %for.end91
	movl	$0, -4(%rbp)
.LBB74_14:                              # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB74_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB74_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_14
.LBB74_17:                              # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB74_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB74_19:                              # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB74_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB74_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB74_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_19
.LBB74_22:                              # %for.end269
	movl	$0, -4(%rbp)
.LBB74_23:                              # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB74_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB74_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB74_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_23
.LBB74_26:                              # %for.end328
	jmp	.LBB74_27
.LBB74_27:                              # %if.end
	jmp	.LBB74_29
.LBB74_28:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB74_29:                              # %if.end335
	movl	$0, -8(%rbp)
.LBB74_30:                              # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB74_30 Depth=1
	movl	$0, -4(%rbp)
.LBB74_32:                              # %for.cond343
                                        #   Parent Loop BB74_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB74_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB74_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB74_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB74_32 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB74_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_38
.LBB74_37:                              # %cond.false
                                        #   in Loop: Header=BB74_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_38
.LBB74_38:                              # %cond.end
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB74_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_41
.LBB74_40:                              # %cond.false415
                                        #   in Loop: Header=BB74_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_41
.LBB74_41:                              # %cond.end416
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB74_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_44
.LBB74_43:                              # %cond.false436
                                        #   in Loop: Header=BB74_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_44
.LBB74_44:                              # %cond.end437
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB74_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_47
.LBB74_46:                              # %cond.false456
                                        #   in Loop: Header=BB74_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_47
.LBB74_47:                              # %cond.end457
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB74_55
.LBB74_48:                              # %if.else466
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB74_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB74_51
.LBB74_50:                              # %cond.false491
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB74_51
.LBB74_51:                              # %cond.end492
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB74_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB74_54
.LBB74_53:                              # %cond.false509
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB74_54
.LBB74_54:                              # %cond.end510
                                        #   in Loop: Header=BB74_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_55:                              # %if.end519
                                        #   in Loop: Header=BB74_32 Depth=2
	jmp	.LBB74_56
.LBB74_56:                              # %for.inc520
                                        #   in Loop: Header=BB74_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_32
.LBB74_57:                              # %for.end522
                                        #   in Loop: Header=BB74_30 Depth=1
	jmp	.LBB74_58
.LBB74_58:                              # %for.inc523
                                        #   in Loop: Header=BB74_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_30
.LBB74_59:                              # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB74_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB74_73
.LBB74_61:                              # %if.then530
	movl	$0, -4(%rbp)
.LBB74_62:                              # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB74_62 Depth=1
	movl	$0, -8(%rbp)
.LBB74_64:                              # %for.cond538
                                        #   Parent Loop BB74_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB74_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB74_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB74_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB74_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB74_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_68:                              # %if.end908
                                        #   in Loop: Header=BB74_64 Depth=2
	jmp	.LBB74_69
.LBB74_69:                              # %for.inc909
                                        #   in Loop: Header=BB74_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_64
.LBB74_70:                              # %for.end911
                                        #   in Loop: Header=BB74_62 Depth=1
	jmp	.LBB74_71
.LBB74_71:                              # %for.inc912
                                        #   in Loop: Header=BB74_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_62
.LBB74_72:                              # %for.end914
	jmp	.LBB74_73
.LBB74_73:                              # %if.end915
	movl	$0, -4(%rbp)
.LBB74_74:                              # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB74_74 Depth=1
	movl	$0, -8(%rbp)
.LBB74_76:                              # %for.cond923
                                        #   Parent Loop BB74_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB74_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB74_148
.LBB74_79:                              # %if.then954
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB74_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_83
.LBB74_82:                              # %cond.false991
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_83:                              # %cond.end993
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_86
.LBB74_85:                              # %cond.false1001
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_86:                              # %cond.end1003
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_89
.LBB74_88:                              # %cond.false1032
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_89:                              # %cond.end1034
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_92
.LBB74_91:                              # %cond.false1042
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_92:                              # %cond.end1044
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_95
.LBB74_94:                              # %cond.false1073
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_95:                              # %cond.end1075
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_98
.LBB74_97:                              # %cond.false1083
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_98:                              # %cond.end1085
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_101
.LBB74_100:                             # %cond.false1114
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_101:                             # %cond.end1116
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_104
.LBB74_103:                             # %cond.false1124
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_104:                             # %cond.end1126
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_107
.LBB74_106:                             # %cond.false1155
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_107:                             # %cond.end1157
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_110
.LBB74_109:                             # %cond.false1165
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_110:                             # %cond.end1167
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB74_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB74_125
.LBB74_112:                             # %if.else1190
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_115
.LBB74_114:                             # %cond.false1198
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_115:                             # %cond.end1200
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_118
.LBB74_117:                             # %cond.false1208
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_118:                             # %cond.end1210
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB74_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB74_121
.LBB74_120:                             # %cond.false1237
                                        #   in Loop: Header=BB74_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_121
.LBB74_121:                             # %cond.end1238
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB74_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB74_124
.LBB74_123:                             # %cond.false1254
                                        #   in Loop: Header=BB74_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_124
.LBB74_124:                             # %cond.end1255
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_125:                             # %if.end1264
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_128
.LBB74_127:                             # %cond.false1272
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_128:                             # %cond.end1274
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_131
.LBB74_130:                             # %cond.false1282
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_131:                             # %cond.end1284
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB74_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB74_146
.LBB74_133:                             # %if.else1307
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_136
.LBB74_135:                             # %cond.false1315
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_136:                             # %cond.end1317
                                        #   in Loop: Header=BB74_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB74_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB74_139
.LBB74_138:                             # %cond.false1325
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB74_139:                             # %cond.end1327
                                        #   in Loop: Header=BB74_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB74_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB74_142
.LBB74_141:                             # %cond.false1355
                                        #   in Loop: Header=BB74_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_142
.LBB74_142:                             # %cond.end1356
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB74_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB74_145
.LBB74_144:                             # %cond.false1373
                                        #   in Loop: Header=BB74_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_145
.LBB74_145:                             # %cond.end1374
                                        #   in Loop: Header=BB74_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB74_146:                             # %if.end1383
                                        #   in Loop: Header=BB74_76 Depth=2
	jmp	.LBB74_147
.LBB74_147:                             # %if.end1384
                                        #   in Loop: Header=BB74_76 Depth=2
	jmp	.LBB74_148
.LBB74_148:                             # %if.end1385
                                        #   in Loop: Header=BB74_76 Depth=2
	jmp	.LBB74_149
.LBB74_149:                             # %for.inc1386
                                        #   in Loop: Header=BB74_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_76
.LBB74_150:                             # %for.end1388
                                        #   in Loop: Header=BB74_74 Depth=1
	jmp	.LBB74_151
.LBB74_151:                             # %for.inc1389
                                        #   in Loop: Header=BB74_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_74
.LBB74_152:                             # %for.end1391
	movl	$0, -8(%rbp)
.LBB74_153:                             # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB74_153 Depth=1
	movl	$0, -4(%rbp)
.LBB74_155:                             # %for.cond1399
                                        #   Parent Loop BB74_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB74_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB74_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_155
.LBB74_158:                             # %for.end1414
                                        #   in Loop: Header=BB74_153 Depth=1
	jmp	.LBB74_159
.LBB74_159:                             # %for.inc1415
                                        #   in Loop: Header=BB74_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_153
.LBB74_160:                             # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB74_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB74_174
.LBB74_162:                             # %if.then1423
	movl	$0, -8(%rbp)
.LBB74_163:                             # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB74_163 Depth=1
	movl	$0, -4(%rbp)
.LBB74_165:                             # %for.cond1431
                                        #   Parent Loop BB74_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB74_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB74_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB74_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB74_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB74_169
.LBB74_168:                             # %cond.false1462
                                        #   in Loop: Header=BB74_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB74_169
.LBB74_169:                             # %cond.end1463
                                        #   in Loop: Header=BB74_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB74_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_165
.LBB74_171:                             # %for.end1474
                                        #   in Loop: Header=BB74_163 Depth=1
	jmp	.LBB74_172
.LBB74_172:                             # %for.inc1475
                                        #   in Loop: Header=BB74_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_163
.LBB74_173:                             # %for.end1477
	jmp	.LBB74_174
.LBB74_174:                             # %if.end1478
	cmpl	$1952806240, -64(%rbp)  # imm = 0x74657560
	jne	.LBB74_176
.LBB74_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_176:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_175
.Lfunc_end74:
	.size	dpb_split_field.11, .Lfunc_end74-dpb_split_field.11
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.12      # -- Begin function alloc_colocated.12
	.p2align	4, 0x90
	.type	alloc_colocated.12,@function
alloc_colocated.12:                     # @alloc_colocated.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1163930788, -32(%rbp)  # imm = 0x45602CA4
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB75_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB75_2:                               # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB75_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB75_4:                               # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1163930788, -32(%rbp)  # imm = 0x45602CA4
	jne	.LBB75_6
.LBB75_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_5
.Lfunc_end75:
	.size	alloc_colocated.12, .Lfunc_end75-alloc_colocated.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.13
	.type	reorder_short_term.13,@function
reorder_short_term.13:                  # @reorder_short_term.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$88732241, -44(%rbp)    # imm = 0x549F251
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB76_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_4:                               # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB76_5:                               # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB76_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB76_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB76_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB76_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB76_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB76_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB76_10
.LBB76_9:                               # %if.then17
                                        #   in Loop: Header=BB76_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB76_10:                              # %if.end
                                        #   in Loop: Header=BB76_5 Depth=1
	jmp	.LBB76_11
.LBB76_11:                              # %if.end23
                                        #   in Loop: Header=BB76_5 Depth=1
	jmp	.LBB76_12
.LBB76_12:                              # %for.inc24
                                        #   in Loop: Header=BB76_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_5
.LBB76_13:                              # %for.end26
	cmpl	$88732241, -44(%rbp)    # imm = 0x549F251
	jne	.LBB76_15
.LBB76_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_15:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_14
.Lfunc_end76:
	.size	reorder_short_term.13, .Lfunc_end76-reorder_short_term.13
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.14
	.type	insert_picture_in_dpb.14,@function
insert_picture_in_dpb.14:               # @insert_picture_in_dpb.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1110082438, -20(%rbp)  # imm = 0x422A8386
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB77_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB77_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB77_5
	jmp	.LBB77_3
.LBB77_3:                               # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB77_10
	jmp	.LBB77_4
.LBB77_4:                               # %if.end
	subl	$2, %eax
	je	.LBB77_18
	jmp	.LBB77_26
.LBB77_5:                               # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB77_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB77_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB77_8:                               # %if.end7
	jmp	.LBB77_9
.LBB77_9:                               # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB77_26
.LBB77_10:                              # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB77_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB77_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB77_13:                              # %if.end24
	jmp	.LBB77_14
.LBB77_14:                              # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB77_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB77_17
.LBB77_16:                              # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB77_17:                              # %if.end29
	jmp	.LBB77_26
.LBB77_18:                              # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB77_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB77_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB77_21:                              # %if.end47
	jmp	.LBB77_22
.LBB77_22:                              # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB77_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB77_25
.LBB77_24:                              # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB77_25:                              # %if.end55
	jmp	.LBB77_26
.LBB77_26:                              # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$1110082438, -20(%rbp)  # imm = 0x422A8386
	jne	.LBB77_28
.LBB77_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_27
.Lfunc_end77:
	.size	insert_picture_in_dpb.14, .Lfunc_end77-insert_picture_in_dpb.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function insert_picture_in_dpb.15
	.type	insert_picture_in_dpb.15,@function
insert_picture_in_dpb.15:               # @insert_picture_in_dpb.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$305600407, -20(%rbp)   # imm = 0x12371797
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB78_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB78_2:                               # %if.end
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB78_5
	jmp	.LBB78_3
.LBB78_3:                               # %if.end
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB78_10
	jmp	.LBB78_4
.LBB78_4:                               # %if.end
	subl	$2, %eax
	je	.LBB78_18
	jmp	.LBB78_26
.LBB78_5:                               # %sw.bb
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-8(%rbp), %rax
	movl	$3, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB78_9
# %bb.6:                                # %if.then3
	movq	-8(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB78_8
# %bb.7:                                # %if.then5
	movq	-8(%rbp), %rax
	movl	$3, 8(%rax)
.LBB78_8:                               # %if.end7
	jmp	.LBB78_9
.LBB78_9:                               # %if.end8
	movq	-8(%rbp), %rdi
	callq	dpb_split_field
	jmp	.LBB78_26
.LBB78_10:                              # %sw.bb9
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB78_14
# %bb.11:                               # %if.then13
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB78_13
# %bb.12:                               # %if.then20
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB78_13:                              # %if.end24
	jmp	.LBB78_14
.LBB78_14:                              # %if.end25
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB78_16
# %bb.15:                               # %if.then27
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB78_17
.LBB78_16:                              # %if.else
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB78_17:                              # %if.end29
	jmp	.LBB78_26
.LBB78_18:                              # %sw.bb30
	movq	-16(%rbp), %rax
	movq	-8(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movq	-8(%rbp), %rax
	movl	(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, (%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB78_22
# %bb.19:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	4(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 12(%rax)
	movq	-16(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB78_21
# %bb.20:                               # %if.then42
	movq	-8(%rbp), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	-16(%rbp), %rax
	movl	6372(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 28(%rcx)
.LBB78_21:                              # %if.end47
	jmp	.LBB78_22
.LBB78_22:                              # %if.end48
	movq	-8(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB78_24
# %bb.23:                               # %if.then51
	movq	-8(%rbp), %rdi
	callq	dpb_combine_field
	jmp	.LBB78_25
.LBB78_24:                              # %if.else52
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rdi
	callq	gen_field_ref_ids
.LBB78_25:                              # %if.end55
	jmp	.LBB78_26
.LBB78_26:                              # %sw.epilog
	movq	-16(%rbp), %rax
	movl	6364(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	6384(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 32(%rcx)
	cmpl	$305600407, -20(%rbp)   # imm = 0x12371797
	jne	.LBB78_28
.LBB78_27:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_28:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_27
.Lfunc_end78:
	.size	insert_picture_in_dpb.15, .Lfunc_end78-insert_picture_in_dpb.15
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.16             # -- Begin function init_dpb.16
	.p2align	4, 0x90
	.type	init_dpb.16,@function
init_dpb.16:                            # @init_dpb.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$183024231, -12(%rbp)   # imm = 0xAE8BA67
	cmpl	$0, dpb+48
	je	.LBB79_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB79_2:                               # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB79_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB79_4:                               # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB79_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB79_6:                               # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB79_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB79_8:                               # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB79_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB79_10:                              # %if.end19
	movl	$0, -4(%rbp)
.LBB79_11:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB79_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB79_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB79_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_11
.LBB79_14:                              # %for.end
	movl	$0, -4(%rbp)
.LBB79_15:                              # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB79_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB79_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB79_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB79_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB79_18:                              # %if.end39
                                        #   in Loop: Header=BB79_15 Depth=1
	jmp	.LBB79_19
.LBB79_19:                              # %for.inc40
                                        #   in Loop: Header=BB79_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_15
.LBB79_20:                              # %for.end42
	movl	$0, -8(%rbp)
.LBB79_21:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB79_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	$0, -4(%rbp)
.LBB79_23:                              # %for.cond47
                                        #   Parent Loop BB79_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB79_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB79_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB79_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_23
.LBB79_26:                              # %for.end57
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB79_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_21
.LBB79_28:                              # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$183024231, -12(%rbp)   # imm = 0xAE8BA67
	jne	.LBB79_30
.LBB79_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_29
.Lfunc_end79:
	.size	init_dpb.16, .Lfunc_end79-init_dpb.16
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.17 # -- Begin function store_picture_in_dpb.17
	.p2align	4, 0x90
	.type	store_picture_in_dpb.17,@function
store_picture_in_dpb.17:                # @store_picture_in_dpb.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2065404568, -24(%rbp)  # imm = 0x7B1B9298
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB80_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB80_6
.LBB80_2:                               # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB80_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB80_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB80_5:                               # %if.end
	jmp	.LBB80_6
.LBB80_6:                               # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB80_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB80_23
.LBB80_8:                               # %if.then14
	cmpq	$0, dpb+56
	je	.LBB80_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB80_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB80_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB80_14
.LBB80_12:                              # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB80_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB80_20
.LBB80_14:                              # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB80_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB80_18
.LBB80_16:                              # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB80_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB80_19
.LBB80_18:                              # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB80_50
.LBB80_19:                              # %if.end48
	jmp	.LBB80_20
.LBB80_20:                              # %if.end49
	jmp	.LBB80_21
.LBB80_21:                              # %if.end50
	jmp	.LBB80_22
.LBB80_22:                              # %if.end51
	jmp	.LBB80_23
.LBB80_23:                              # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB80_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB80_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB80_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB80_27:                              # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB80_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB80_29:                              # %if.end67
	jmp	.LBB80_30
.LBB80_30:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB80_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB80_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB80_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB80_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB80_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB80_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB80_35
.LBB80_34:                              # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB80_50
.LBB80_35:                              # %if.end80
                                        #   in Loop: Header=BB80_30 Depth=1
	jmp	.LBB80_36
.LBB80_36:                              # %if.end81
                                        #   in Loop: Header=BB80_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB80_30
.LBB80_37:                              # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB80_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB80_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB80_40:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB80_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB80_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB80_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB80_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB80_43:                              # %if.end94
                                        #   in Loop: Header=BB80_40 Depth=1
	jmp	.LBB80_44
.LBB80_44:                              # %for.inc
                                        #   in Loop: Header=BB80_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB80_40
.LBB80_45:                              # %for.end
	jmp	.LBB80_46
.LBB80_46:                              # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB80_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB80_49
.LBB80_48:                              # %if.else104
	movq	$0, dpb+56
.LBB80_49:                              # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB80_50:                              # %return
	cmpl	$2065404568, -24(%rbp)  # imm = 0x7B1B9298
	jne	.LBB80_52
.LBB80_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_51
.Lfunc_end80:
	.size	store_picture_in_dpb.17, .Lfunc_end80-store_picture_in_dpb.17
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.18 # -- Begin function mm_update_max_long_term_frame_idx.18
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.18,@function
mm_update_max_long_term_frame_idx.18:   # @mm_update_max_long_term_frame_idx.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1255228809, -12(%rbp)  # imm = 0x4AD14589
	movl	%edi, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB81_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB81_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB81_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB81_4:                               # %if.end
                                        #   in Loop: Header=BB81_1 Depth=1
	jmp	.LBB81_5
.LBB81_5:                               # %for.inc
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB81_1
.LBB81_6:                               # %for.end
	cmpl	$1255228809, -12(%rbp)  # imm = 0x4AD14589
	jne	.LBB81_8
.LBB81_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_7
.Lfunc_end81:
	.size	mm_update_max_long_term_frame_idx.18, .Lfunc_end81-mm_update_max_long_term_frame_idx.18
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.19
	.type	gen_pic_list_from_frame_list.19,@function
gen_pic_list_from_frame_list.19:        # @gen_pic_list_from_frame_list.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1135359187, -64(%rbp)  # imm = 0x43AC34D3
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB82_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB82_3
.LBB82_2:                               # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB82_3:                               # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB82_28
# %bb.4:                                # %if.then1
	jmp	.LBB82_5
.LBB82_5:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_9 Depth 2
                                        #     Child Loop BB82_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB82_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB82_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB82_7:                               # %lor.end
                                        #   in Loop: Header=BB82_5 Depth=1
	testb	$1, %al
	jne	.LBB82_8
	jmp	.LBB82_27
.LBB82_8:                               # %while.body
                                        #   in Loop: Header=BB82_5 Depth=1
	jmp	.LBB82_9
.LBB82_9:                               # %for.cond
                                        #   Parent Loop BB82_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB82_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB82_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB82_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB82_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB82_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB82_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_17
.LBB82_13:                              # %if.end17
                                        #   in Loop: Header=BB82_9 Depth=2
	jmp	.LBB82_14
.LBB82_14:                              # %if.end18
                                        #   in Loop: Header=BB82_9 Depth=2
	jmp	.LBB82_15
.LBB82_15:                              # %for.inc
                                        #   in Loop: Header=BB82_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_9
.LBB82_16:                              # %for.end.loopexit
                                        #   in Loop: Header=BB82_5 Depth=1
	jmp	.LBB82_17
.LBB82_17:                              # %for.end
                                        #   in Loop: Header=BB82_5 Depth=1
	jmp	.LBB82_18
.LBB82_18:                              # %for.cond20
                                        #   Parent Loop BB82_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB82_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB82_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB82_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB82_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB82_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB82_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_26
.LBB82_22:                              # %if.end41
                                        #   in Loop: Header=BB82_18 Depth=2
	jmp	.LBB82_23
.LBB82_23:                              # %if.end42
                                        #   in Loop: Header=BB82_18 Depth=2
	jmp	.LBB82_24
.LBB82_24:                              # %for.inc43
                                        #   in Loop: Header=BB82_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_18
.LBB82_25:                              # %for.end45.loopexit
                                        #   in Loop: Header=BB82_5 Depth=1
	jmp	.LBB82_26
.LBB82_26:                              # %for.end45
                                        #   in Loop: Header=BB82_5 Depth=1
	jmp	.LBB82_5
.LBB82_27:                              # %while.end
	jmp	.LBB82_28
.LBB82_28:                              # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB82_53
# %bb.29:                               # %if.then48
	jmp	.LBB82_30
.LBB82_30:                              # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_34 Depth 2
                                        #     Child Loop BB82_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB82_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB82_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB82_32:                              # %lor.end53
                                        #   in Loop: Header=BB82_30 Depth=1
	testb	$1, %al
	jne	.LBB82_33
	jmp	.LBB82_52
.LBB82_33:                              # %while.body54
                                        #   in Loop: Header=BB82_30 Depth=1
	jmp	.LBB82_34
.LBB82_34:                              # %for.cond55
                                        #   Parent Loop BB82_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB82_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB82_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB82_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB82_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB82_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB82_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_42
.LBB82_38:                              # %if.end77
                                        #   in Loop: Header=BB82_34 Depth=2
	jmp	.LBB82_39
.LBB82_39:                              # %if.end78
                                        #   in Loop: Header=BB82_34 Depth=2
	jmp	.LBB82_40
.LBB82_40:                              # %for.inc79
                                        #   in Loop: Header=BB82_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_34
.LBB82_41:                              # %for.end81.loopexit
                                        #   in Loop: Header=BB82_30 Depth=1
	jmp	.LBB82_42
.LBB82_42:                              # %for.end81
                                        #   in Loop: Header=BB82_30 Depth=1
	jmp	.LBB82_43
.LBB82_43:                              # %for.cond82
                                        #   Parent Loop BB82_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB82_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB82_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB82_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB82_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB82_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB82_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_51
.LBB82_47:                              # %if.end104
                                        #   in Loop: Header=BB82_43 Depth=2
	jmp	.LBB82_48
.LBB82_48:                              # %if.end105
                                        #   in Loop: Header=BB82_43 Depth=2
	jmp	.LBB82_49
.LBB82_49:                              # %for.inc106
                                        #   in Loop: Header=BB82_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_43
.LBB82_50:                              # %for.end108.loopexit
                                        #   in Loop: Header=BB82_30 Depth=1
	jmp	.LBB82_51
.LBB82_51:                              # %for.end108
                                        #   in Loop: Header=BB82_30 Depth=1
	jmp	.LBB82_30
.LBB82_52:                              # %while.end109
	jmp	.LBB82_53
.LBB82_53:                              # %if.end110
	cmpl	$1135359187, -64(%rbp)  # imm = 0x43AC34D3
	jne	.LBB82_55
.LBB82_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_54
.Lfunc_end82:
	.size	gen_pic_list_from_frame_list.19, .Lfunc_end82-gen_pic_list_from_frame_list.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.20
	.type	compare_pic_by_poc_asc.20,@function
compare_pic_by_poc_asc.20:              # @compare_pic_by_poc_asc.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1585704318, -16(%rbp)  # imm = 0x5E83ED7E
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB83_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB83_5
.LBB83_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB83_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB83_5
.LBB83_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB83_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1585704318, -16(%rbp)  # imm = 0x5E83ED7E
	jne	.LBB83_7
.LBB83_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_6
.Lfunc_end83:
	.size	compare_pic_by_poc_asc.20, .Lfunc_end83-compare_pic_by_poc_asc.20
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.21    # -- Begin function gen_field_ref_ids.21
	.p2align	4, 0x90
	.type	gen_field_ref_ids.21,@function
gen_field_ref_ids.21:                   # @gen_field_ref_ids.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$884569691, -28(%rbp)   # imm = 0x34B9765B
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB84_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB84_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	$0, -4(%rbp)
.LBB84_3:                               # %for.cond1
                                        #   Parent Loop BB84_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB84_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB84_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB84_7
.LBB84_6:                               # %cond.false
                                        #   in Loop: Header=BB84_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB84_7
.LBB84_7:                               # %cond.end
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB84_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB84_10
.LBB84_9:                               # %cond.false32
                                        #   in Loop: Header=BB84_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB84_10
.LBB84_10:                              # %cond.end33
                                        #   in Loop: Header=BB84_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB84_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_3
.LBB84_12:                              # %for.end
                                        #   in Loop: Header=BB84_1 Depth=1
	jmp	.LBB84_13
.LBB84_13:                              # %for.inc45
                                        #   in Loop: Header=BB84_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_1
.LBB84_14:                              # %for.end47
	cmpl	$884569691, -28(%rbp)   # imm = 0x34B9765B
	jne	.LBB84_16
.LBB84_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_15
.Lfunc_end84:
	.size	gen_field_ref_ids.21, .Lfunc_end84-gen_field_ref_ids.21
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.22
	.type	get_long_term_pic.22,@function
get_long_term_pic.22:                   # @get_long_term_pic.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1119325604, -28(%rbp)  # imm = 0x42B78DA4
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB85_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB85_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB85_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB85_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB85_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB85_23
.LBB85_7:                               # %if.end
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_8
.LBB85_8:                               # %if.end14
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_20
.LBB85_9:                               # %if.else
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB85_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB85_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB85_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB85_23
.LBB85_13:                              # %if.end34
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_14
.LBB85_14:                              # %if.end35
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB85_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB85_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB85_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB85_23
.LBB85_18:                              # %if.end56
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_19
.LBB85_19:                              # %if.end57
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_20
.LBB85_20:                              # %if.end58
                                        #   in Loop: Header=BB85_1 Depth=1
	jmp	.LBB85_21
.LBB85_21:                              # %for.inc
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_1
.LBB85_22:                              # %for.end
	movq	$0, -24(%rbp)
.LBB85_23:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$1119325604, -28(%rbp)  # imm = 0x42B78DA4
	jne	.LBB85_25
.LBB85_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_24
.Lfunc_end85:
	.size	get_long_term_pic.22, .Lfunc_end85-get_long_term_pic.22
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.23     # -- Begin function init_mbaff_lists.23
	.p2align	4, 0x90
	.type	init_mbaff_lists.23,@function
init_mbaff_lists.23:                    # @init_mbaff_lists.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$964683294, -12(%rbp)   # imm = 0x397FE61E
	movl	$2, -4(%rbp)
.LBB86_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB86_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	$0, -8(%rbp)
.LBB86_3:                               # %for.cond1
                                        #   Parent Loop BB86_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB86_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB86_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB86_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB86_3
.LBB86_6:                               # %for.end
                                        #   in Loop: Header=BB86_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB86_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_1
.LBB86_8:                               # %for.end10
	movl	$0, -4(%rbp)
.LBB86_9:                               # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB86_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB86_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB86_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_9
.LBB86_12:                              # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB86_13:                              # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB86_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB86_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB86_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB86_13
.LBB86_16:                              # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$964683294, -12(%rbp)   # imm = 0x397FE61E
	jne	.LBB86_18
.LBB86_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_17
.Lfunc_end86:
	.size	init_mbaff_lists.23, .Lfunc_end86-init_mbaff_lists.23
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list.24    # -- Begin function update_ltref_list.24
	.p2align	4, 0x90
	.type	update_ltref_list.24,@function
update_ltref_list.24:                   # @update_ltref_list.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$447312396, -12(%rbp)   # imm = 0x1AA9720C
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB87_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB87_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB87_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB87_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB87_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB87_4:                               # %if.end
                                        #   in Loop: Header=BB87_1 Depth=1
	jmp	.LBB87_5
.LBB87_5:                               # %for.inc
                                        #   in Loop: Header=BB87_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_1
.LBB87_6:                               # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB87_7:                               # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB87_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB87_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB87_7
.LBB87_9:                               # %while.end
	cmpl	$447312396, -12(%rbp)   # imm = 0x1AA9720C
	jne	.LBB87_11
.LBB87_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_11:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_10
.Lfunc_end87:
	.size	update_ltref_list.24, .Lfunc_end87-update_ltref_list.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.25
	.type	sliding_window_memory_management.25,@function
sliding_window_memory_management.25:    # @sliding_window_memory_management.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$885079776, -8(%rbp)    # imm = 0x34C13EE0
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB88_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB88_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB88_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB88_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB88_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB88_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB88_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB88_9
.LBB88_6:                               # %if.end
                                        #   in Loop: Header=BB88_2 Depth=1
	jmp	.LBB88_7
.LBB88_7:                               # %for.inc
                                        #   in Loop: Header=BB88_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_2
.LBB88_8:                               # %for.end.loopexit
	jmp	.LBB88_9
.LBB88_9:                               # %for.end
	jmp	.LBB88_10
.LBB88_10:                              # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$885079776, -8(%rbp)    # imm = 0x34C13EE0
	jne	.LBB88_12
.LBB88_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_11
.Lfunc_end88:
	.size	sliding_window_memory_management.25, .Lfunc_end88-sliding_window_memory_management.25
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.26      # -- Begin function dpb_split_field.26
	.p2align	4, 0x90
	.type	dpb_split_field.26,@function
dpb_split_field.26:                     # @dpb_split_field.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1706982554, -64(%rbp)  # imm = 0x65BE7C9A
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB89_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB89_2:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB89_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB89_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_2
.LBB89_5:                               # %for.end
	movl	$0, -4(%rbp)
.LBB89_6:                               # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB89_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB89_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_6
.LBB89_9:                               # %for.end68
	movl	$0, -4(%rbp)
.LBB89_10:                              # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB89_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB89_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_10
.LBB89_13:                              # %for.end91
	movl	$0, -4(%rbp)
.LBB89_14:                              # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB89_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB89_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_14
.LBB89_17:                              # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB89_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB89_19:                              # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB89_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB89_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB89_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_19
.LBB89_22:                              # %for.end269
	movl	$0, -4(%rbp)
.LBB89_23:                              # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB89_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB89_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB89_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_23
.LBB89_26:                              # %for.end328
	jmp	.LBB89_27
.LBB89_27:                              # %if.end
	jmp	.LBB89_29
.LBB89_28:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB89_29:                              # %if.end335
	movl	$0, -8(%rbp)
.LBB89_30:                              # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB89_30 Depth=1
	movl	$0, -4(%rbp)
.LBB89_32:                              # %for.cond343
                                        #   Parent Loop BB89_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB89_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB89_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB89_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB89_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB89_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB89_38
.LBB89_37:                              # %cond.false
                                        #   in Loop: Header=BB89_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_38
.LBB89_38:                              # %cond.end
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB89_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB89_41
.LBB89_40:                              # %cond.false415
                                        #   in Loop: Header=BB89_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_41
.LBB89_41:                              # %cond.end416
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB89_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB89_44
.LBB89_43:                              # %cond.false436
                                        #   in Loop: Header=BB89_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_44
.LBB89_44:                              # %cond.end437
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB89_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB89_47
.LBB89_46:                              # %cond.false456
                                        #   in Loop: Header=BB89_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_47
.LBB89_47:                              # %cond.end457
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB89_55
.LBB89_48:                              # %if.else466
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB89_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB89_51
.LBB89_50:                              # %cond.false491
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB89_51
.LBB89_51:                              # %cond.end492
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB89_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB89_54
.LBB89_53:                              # %cond.false509
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB89_54
.LBB89_54:                              # %cond.end510
                                        #   in Loop: Header=BB89_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB89_55:                              # %if.end519
                                        #   in Loop: Header=BB89_32 Depth=2
	jmp	.LBB89_56
.LBB89_56:                              # %for.inc520
                                        #   in Loop: Header=BB89_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_32
.LBB89_57:                              # %for.end522
                                        #   in Loop: Header=BB89_30 Depth=1
	jmp	.LBB89_58
.LBB89_58:                              # %for.inc523
                                        #   in Loop: Header=BB89_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_30
.LBB89_59:                              # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB89_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB89_73
.LBB89_61:                              # %if.then530
	movl	$0, -4(%rbp)
.LBB89_62:                              # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB89_62 Depth=1
	movl	$0, -8(%rbp)
.LBB89_64:                              # %for.cond538
                                        #   Parent Loop BB89_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB89_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB89_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB89_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB89_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB89_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB89_68:                              # %if.end908
                                        #   in Loop: Header=BB89_64 Depth=2
	jmp	.LBB89_69
.LBB89_69:                              # %for.inc909
                                        #   in Loop: Header=BB89_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_64
.LBB89_70:                              # %for.end911
                                        #   in Loop: Header=BB89_62 Depth=1
	jmp	.LBB89_71
.LBB89_71:                              # %for.inc912
                                        #   in Loop: Header=BB89_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_62
.LBB89_72:                              # %for.end914
	jmp	.LBB89_73
.LBB89_73:                              # %if.end915
	movl	$0, -4(%rbp)
.LBB89_74:                              # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB89_74 Depth=1
	movl	$0, -8(%rbp)
.LBB89_76:                              # %for.cond923
                                        #   Parent Loop BB89_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB89_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB89_148
.LBB89_79:                              # %if.then954
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB89_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_83
.LBB89_82:                              # %cond.false991
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_83:                              # %cond.end993
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_86
.LBB89_85:                              # %cond.false1001
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_86:                              # %cond.end1003
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_89
.LBB89_88:                              # %cond.false1032
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_89:                              # %cond.end1034
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_92
.LBB89_91:                              # %cond.false1042
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_92:                              # %cond.end1044
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_95
.LBB89_94:                              # %cond.false1073
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_95:                              # %cond.end1075
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_98
.LBB89_97:                              # %cond.false1083
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_98:                              # %cond.end1085
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_101
.LBB89_100:                             # %cond.false1114
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_101:                             # %cond.end1116
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_104
.LBB89_103:                             # %cond.false1124
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_104:                             # %cond.end1126
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_107
.LBB89_106:                             # %cond.false1155
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_107:                             # %cond.end1157
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_110
.LBB89_109:                             # %cond.false1165
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_110:                             # %cond.end1167
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB89_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB89_125
.LBB89_112:                             # %if.else1190
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_115
.LBB89_114:                             # %cond.false1198
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_115:                             # %cond.end1200
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_118
.LBB89_117:                             # %cond.false1208
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_118:                             # %cond.end1210
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB89_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB89_121
.LBB89_120:                             # %cond.false1237
                                        #   in Loop: Header=BB89_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_121
.LBB89_121:                             # %cond.end1238
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB89_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB89_124
.LBB89_123:                             # %cond.false1254
                                        #   in Loop: Header=BB89_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_124
.LBB89_124:                             # %cond.end1255
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB89_125:                             # %if.end1264
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_128
.LBB89_127:                             # %cond.false1272
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_128:                             # %cond.end1274
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_131
.LBB89_130:                             # %cond.false1282
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_131:                             # %cond.end1284
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB89_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB89_146
.LBB89_133:                             # %if.else1307
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_136
.LBB89_135:                             # %cond.false1315
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_136:                             # %cond.end1317
                                        #   in Loop: Header=BB89_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB89_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB89_139
.LBB89_138:                             # %cond.false1325
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB89_139:                             # %cond.end1327
                                        #   in Loop: Header=BB89_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB89_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB89_142
.LBB89_141:                             # %cond.false1355
                                        #   in Loop: Header=BB89_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_142
.LBB89_142:                             # %cond.end1356
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB89_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB89_145
.LBB89_144:                             # %cond.false1373
                                        #   in Loop: Header=BB89_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_145
.LBB89_145:                             # %cond.end1374
                                        #   in Loop: Header=BB89_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB89_146:                             # %if.end1383
                                        #   in Loop: Header=BB89_76 Depth=2
	jmp	.LBB89_147
.LBB89_147:                             # %if.end1384
                                        #   in Loop: Header=BB89_76 Depth=2
	jmp	.LBB89_148
.LBB89_148:                             # %if.end1385
                                        #   in Loop: Header=BB89_76 Depth=2
	jmp	.LBB89_149
.LBB89_149:                             # %for.inc1386
                                        #   in Loop: Header=BB89_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_76
.LBB89_150:                             # %for.end1388
                                        #   in Loop: Header=BB89_74 Depth=1
	jmp	.LBB89_151
.LBB89_151:                             # %for.inc1389
                                        #   in Loop: Header=BB89_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_74
.LBB89_152:                             # %for.end1391
	movl	$0, -8(%rbp)
.LBB89_153:                             # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB89_153 Depth=1
	movl	$0, -4(%rbp)
.LBB89_155:                             # %for.cond1399
                                        #   Parent Loop BB89_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB89_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB89_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_155
.LBB89_158:                             # %for.end1414
                                        #   in Loop: Header=BB89_153 Depth=1
	jmp	.LBB89_159
.LBB89_159:                             # %for.inc1415
                                        #   in Loop: Header=BB89_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_153
.LBB89_160:                             # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB89_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB89_174
.LBB89_162:                             # %if.then1423
	movl	$0, -8(%rbp)
.LBB89_163:                             # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB89_163 Depth=1
	movl	$0, -4(%rbp)
.LBB89_165:                             # %for.cond1431
                                        #   Parent Loop BB89_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB89_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB89_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB89_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB89_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB89_169
.LBB89_168:                             # %cond.false1462
                                        #   in Loop: Header=BB89_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB89_169
.LBB89_169:                             # %cond.end1463
                                        #   in Loop: Header=BB89_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB89_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_165
.LBB89_171:                             # %for.end1474
                                        #   in Loop: Header=BB89_163 Depth=1
	jmp	.LBB89_172
.LBB89_172:                             # %for.inc1475
                                        #   in Loop: Header=BB89_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_163
.LBB89_173:                             # %for.end1477
	jmp	.LBB89_174
.LBB89_174:                             # %if.end1478
	cmpl	$1706982554, -64(%rbp)  # imm = 0x65BE7C9A
	jne	.LBB89_176
.LBB89_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_176:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_175
.Lfunc_end89:
	.size	dpb_split_field.26, .Lfunc_end89-dpb_split_field.26
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.27
	.type	mm_unmark_short_term_for_reference.27,@function
mm_unmark_short_term_for_reference.27:  # @mm_unmark_short_term_for_reference.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$937243784, -16(%rbp)   # imm = 0x37DD3488
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB90_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB90_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB90_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB90_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB90_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB90_27
.LBB90_7:                               # %if.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_8
.LBB90_8:                               # %if.end13
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_24
.LBB90_9:                               # %if.else
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB90_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB90_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB90_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB90_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB90_14:                              # %if.end44
	jmp	.LBB90_27
.LBB90_15:                              # %if.end45
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_16
.LBB90_16:                              # %if.end46
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB90_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB90_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB90_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB90_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB90_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB90_21:                              # %if.end81
	jmp	.LBB90_27
.LBB90_22:                              # %if.end82
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_23
.LBB90_23:                              # %if.end83
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_24
.LBB90_24:                              # %if.end84
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_25
.LBB90_25:                              # %for.inc
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_1
.LBB90_26:                              # %for.end.loopexit
	jmp	.LBB90_27
.LBB90_27:                              # %for.end
	cmpl	$937243784, -16(%rbp)   # imm = 0x37DD3488
	jne	.LBB90_29
.LBB90_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_28
.Lfunc_end90:
	.size	mm_unmark_short_term_for_reference.27, .Lfunc_end90-mm_unmark_short_term_for_reference.27
	.cfi_endproc
                                        # -- End function
	.globl	mm_update_max_long_term_frame_idx.28 # -- Begin function mm_update_max_long_term_frame_idx.28
	.p2align	4, 0x90
	.type	mm_update_max_long_term_frame_idx.28,@function
mm_update_max_long_term_frame_idx.28:   # @mm_update_max_long_term_frame_idx.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$448086528, -8(%rbp)    # imm = 0x1AB54200
	movl	%edi, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movl	%eax, dpb+44
	movl	$0, -4(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB91_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	dpb+44, %eax
	jle	.LBB91_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB91_4:                               # %if.end
                                        #   in Loop: Header=BB91_1 Depth=1
	jmp	.LBB91_5
.LBB91_5:                               # %for.inc
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB91_1
.LBB91_6:                               # %for.end
	cmpl	$448086528, -8(%rbp)    # imm = 0x1AB54200
	jne	.LBB91_8
.LBB91_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_7
.Lfunc_end91:
	.size	mm_update_max_long_term_frame_idx.28, .Lfunc_end91-mm_update_max_long_term_frame_idx.28
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.29
	.type	mm_assign_long_term_frame_idx.29,@function
mm_assign_long_term_frame_idx.29:       # @mm_assign_long_term_frame_idx.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1487470337, -32(%rbp)  # imm = 0x58A8FF01
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB92_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB92_18
.LBB92_2:                               # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB92_3:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB92_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB92_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB92_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB92_15
.LBB92_7:                               # %if.end
                                        #   in Loop: Header=BB92_3 Depth=1
	jmp	.LBB92_8
.LBB92_8:                               # %if.end8
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB92_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB92_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB92_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB92_15
.LBB92_11:                              # %if.end20
                                        #   in Loop: Header=BB92_3 Depth=1
	jmp	.LBB92_12
.LBB92_12:                              # %if.end21
                                        #   in Loop: Header=BB92_3 Depth=1
	jmp	.LBB92_13
.LBB92_13:                              # %for.inc
                                        #   in Loop: Header=BB92_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_3
.LBB92_14:                              # %for.end.loopexit
	jmp	.LBB92_15
.LBB92_15:                              # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB92_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB92_17:                              # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB92_18:                              # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1487470337, -32(%rbp)  # imm = 0x58A8FF01
	jne	.LBB92_20
.LBB92_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_19
.Lfunc_end92:
	.size	mm_assign_long_term_frame_idx.29, .Lfunc_end92-mm_assign_long_term_frame_idx.29
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.30
	.type	gen_pic_list_from_frame_list.30,@function
gen_pic_list_from_frame_list.30:        # @gen_pic_list_from_frame_list.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$233680984, -64(%rbp)   # imm = 0xDEDB058
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB93_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB93_3
.LBB93_2:                               # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB93_3:                               # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB93_28
# %bb.4:                                # %if.then1
	jmp	.LBB93_5
.LBB93_5:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_9 Depth 2
                                        #     Child Loop BB93_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB93_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB93_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB93_7:                               # %lor.end
                                        #   in Loop: Header=BB93_5 Depth=1
	testb	$1, %al
	jne	.LBB93_8
	jmp	.LBB93_27
.LBB93_8:                               # %while.body
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_9
.LBB93_9:                               # %for.cond
                                        #   Parent Loop BB93_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB93_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB93_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB93_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB93_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB93_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_17
.LBB93_13:                              # %if.end17
                                        #   in Loop: Header=BB93_9 Depth=2
	jmp	.LBB93_14
.LBB93_14:                              # %if.end18
                                        #   in Loop: Header=BB93_9 Depth=2
	jmp	.LBB93_15
.LBB93_15:                              # %for.inc
                                        #   in Loop: Header=BB93_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_9
.LBB93_16:                              # %for.end.loopexit
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_17
.LBB93_17:                              # %for.end
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_18
.LBB93_18:                              # %for.cond20
                                        #   Parent Loop BB93_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB93_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB93_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB93_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB93_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB93_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_26
.LBB93_22:                              # %if.end41
                                        #   in Loop: Header=BB93_18 Depth=2
	jmp	.LBB93_23
.LBB93_23:                              # %if.end42
                                        #   in Loop: Header=BB93_18 Depth=2
	jmp	.LBB93_24
.LBB93_24:                              # %for.inc43
                                        #   in Loop: Header=BB93_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_18
.LBB93_25:                              # %for.end45.loopexit
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_26
.LBB93_26:                              # %for.end45
                                        #   in Loop: Header=BB93_5 Depth=1
	jmp	.LBB93_5
.LBB93_27:                              # %while.end
	jmp	.LBB93_28
.LBB93_28:                              # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB93_53
# %bb.29:                               # %if.then48
	jmp	.LBB93_30
.LBB93_30:                              # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_34 Depth 2
                                        #     Child Loop BB93_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB93_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB93_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB93_32:                              # %lor.end53
                                        #   in Loop: Header=BB93_30 Depth=1
	testb	$1, %al
	jne	.LBB93_33
	jmp	.LBB93_52
.LBB93_33:                              # %while.body54
                                        #   in Loop: Header=BB93_30 Depth=1
	jmp	.LBB93_34
.LBB93_34:                              # %for.cond55
                                        #   Parent Loop BB93_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB93_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB93_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB93_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB93_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB93_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_42
.LBB93_38:                              # %if.end77
                                        #   in Loop: Header=BB93_34 Depth=2
	jmp	.LBB93_39
.LBB93_39:                              # %if.end78
                                        #   in Loop: Header=BB93_34 Depth=2
	jmp	.LBB93_40
.LBB93_40:                              # %for.inc79
                                        #   in Loop: Header=BB93_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB93_34
.LBB93_41:                              # %for.end81.loopexit
                                        #   in Loop: Header=BB93_30 Depth=1
	jmp	.LBB93_42
.LBB93_42:                              # %for.end81
                                        #   in Loop: Header=BB93_30 Depth=1
	jmp	.LBB93_43
.LBB93_43:                              # %for.cond82
                                        #   Parent Loop BB93_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB93_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB93_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB93_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB93_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB93_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB93_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_51
.LBB93_47:                              # %if.end104
                                        #   in Loop: Header=BB93_43 Depth=2
	jmp	.LBB93_48
.LBB93_48:                              # %if.end105
                                        #   in Loop: Header=BB93_43 Depth=2
	jmp	.LBB93_49
.LBB93_49:                              # %for.inc106
                                        #   in Loop: Header=BB93_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB93_43
.LBB93_50:                              # %for.end108.loopexit
                                        #   in Loop: Header=BB93_30 Depth=1
	jmp	.LBB93_51
.LBB93_51:                              # %for.end108
                                        #   in Loop: Header=BB93_30 Depth=1
	jmp	.LBB93_30
.LBB93_52:                              # %while.end109
	jmp	.LBB93_53
.LBB93_53:                              # %if.end110
	cmpl	$233680984, -64(%rbp)   # imm = 0xDEDB058
	jne	.LBB93_55
.LBB93_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_54
.Lfunc_end93:
	.size	gen_pic_list_from_frame_list.30, .Lfunc_end93-gen_pic_list_from_frame_list.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.31
	.type	gen_pic_list_from_frame_list.31,@function
gen_pic_list_from_frame_list.31:        # @gen_pic_list_from_frame_list.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$764539093, -64(%rbp)   # imm = 0x2D91F0D5
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB94_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB94_3
.LBB94_2:                               # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB94_3:                               # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB94_28
# %bb.4:                                # %if.then1
	jmp	.LBB94_5
.LBB94_5:                               # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_9 Depth 2
                                        #     Child Loop BB94_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB94_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB94_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB94_7:                               # %lor.end
                                        #   in Loop: Header=BB94_5 Depth=1
	testb	$1, %al
	jne	.LBB94_8
	jmp	.LBB94_27
.LBB94_8:                               # %while.body
                                        #   in Loop: Header=BB94_5 Depth=1
	jmp	.LBB94_9
.LBB94_9:                               # %for.cond
                                        #   Parent Loop BB94_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB94_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB94_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB94_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB94_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB94_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB94_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_17
.LBB94_13:                              # %if.end17
                                        #   in Loop: Header=BB94_9 Depth=2
	jmp	.LBB94_14
.LBB94_14:                              # %if.end18
                                        #   in Loop: Header=BB94_9 Depth=2
	jmp	.LBB94_15
.LBB94_15:                              # %for.inc
                                        #   in Loop: Header=BB94_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_9
.LBB94_16:                              # %for.end.loopexit
                                        #   in Loop: Header=BB94_5 Depth=1
	jmp	.LBB94_17
.LBB94_17:                              # %for.end
                                        #   in Loop: Header=BB94_5 Depth=1
	jmp	.LBB94_18
.LBB94_18:                              # %for.cond20
                                        #   Parent Loop BB94_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB94_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB94_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB94_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB94_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB94_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB94_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_26
.LBB94_22:                              # %if.end41
                                        #   in Loop: Header=BB94_18 Depth=2
	jmp	.LBB94_23
.LBB94_23:                              # %if.end42
                                        #   in Loop: Header=BB94_18 Depth=2
	jmp	.LBB94_24
.LBB94_24:                              # %for.inc43
                                        #   in Loop: Header=BB94_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_18
.LBB94_25:                              # %for.end45.loopexit
                                        #   in Loop: Header=BB94_5 Depth=1
	jmp	.LBB94_26
.LBB94_26:                              # %for.end45
                                        #   in Loop: Header=BB94_5 Depth=1
	jmp	.LBB94_5
.LBB94_27:                              # %while.end
	jmp	.LBB94_28
.LBB94_28:                              # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB94_53
# %bb.29:                               # %if.then48
	jmp	.LBB94_30
.LBB94_30:                              # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_34 Depth 2
                                        #     Child Loop BB94_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB94_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB94_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB94_32:                              # %lor.end53
                                        #   in Loop: Header=BB94_30 Depth=1
	testb	$1, %al
	jne	.LBB94_33
	jmp	.LBB94_52
.LBB94_33:                              # %while.body54
                                        #   in Loop: Header=BB94_30 Depth=1
	jmp	.LBB94_34
.LBB94_34:                              # %for.cond55
                                        #   Parent Loop BB94_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB94_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB94_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB94_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB94_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB94_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB94_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_42
.LBB94_38:                              # %if.end77
                                        #   in Loop: Header=BB94_34 Depth=2
	jmp	.LBB94_39
.LBB94_39:                              # %if.end78
                                        #   in Loop: Header=BB94_34 Depth=2
	jmp	.LBB94_40
.LBB94_40:                              # %for.inc79
                                        #   in Loop: Header=BB94_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_34
.LBB94_41:                              # %for.end81.loopexit
                                        #   in Loop: Header=BB94_30 Depth=1
	jmp	.LBB94_42
.LBB94_42:                              # %for.end81
                                        #   in Loop: Header=BB94_30 Depth=1
	jmp	.LBB94_43
.LBB94_43:                              # %for.cond82
                                        #   Parent Loop BB94_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB94_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB94_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB94_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB94_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB94_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB94_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_51
.LBB94_47:                              # %if.end104
                                        #   in Loop: Header=BB94_43 Depth=2
	jmp	.LBB94_48
.LBB94_48:                              # %if.end105
                                        #   in Loop: Header=BB94_43 Depth=2
	jmp	.LBB94_49
.LBB94_49:                              # %for.inc106
                                        #   in Loop: Header=BB94_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_43
.LBB94_50:                              # %for.end108.loopexit
                                        #   in Loop: Header=BB94_30 Depth=1
	jmp	.LBB94_51
.LBB94_51:                              # %for.end108
                                        #   in Loop: Header=BB94_30 Depth=1
	jmp	.LBB94_30
.LBB94_52:                              # %while.end109
	jmp	.LBB94_53
.LBB94_53:                              # %if.end110
	cmpl	$764539093, -64(%rbp)   # imm = 0x2D91F0D5
	jne	.LBB94_55
.LBB94_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_55:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_54
.Lfunc_end94:
	.size	gen_pic_list_from_frame_list.31, .Lfunc_end94-gen_pic_list_from_frame_list.31
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.32 # -- Begin function store_picture_in_dpb.32
	.p2align	4, 0x90
	.type	store_picture_in_dpb.32,@function
store_picture_in_dpb.32:                # @store_picture_in_dpb.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2132259063, -24(%rbp)  # imm = 0x7F17B0F7
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB95_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB95_6
.LBB95_2:                               # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB95_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB95_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB95_5:                               # %if.end
	jmp	.LBB95_6
.LBB95_6:                               # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB95_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB95_23
.LBB95_8:                               # %if.then14
	cmpq	$0, dpb+56
	je	.LBB95_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB95_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB95_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB95_14
.LBB95_12:                              # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB95_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB95_20
.LBB95_14:                              # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB95_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB95_18
.LBB95_16:                              # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB95_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB95_19
.LBB95_18:                              # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB95_50
.LBB95_19:                              # %if.end48
	jmp	.LBB95_20
.LBB95_20:                              # %if.end49
	jmp	.LBB95_21
.LBB95_21:                              # %if.end50
	jmp	.LBB95_22
.LBB95_22:                              # %if.end51
	jmp	.LBB95_23
.LBB95_23:                              # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB95_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB95_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB95_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB95_27:                              # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB95_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB95_29:                              # %if.end67
	jmp	.LBB95_30
.LBB95_30:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB95_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB95_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB95_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB95_30 Depth=1
	leaq	-20(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB95_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB95_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB95_35
.LBB95_34:                              # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB95_50
.LBB95_35:                              # %if.end80
                                        #   in Loop: Header=BB95_30 Depth=1
	jmp	.LBB95_36
.LBB95_36:                              # %if.end81
                                        #   in Loop: Header=BB95_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB95_30
.LBB95_37:                              # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB95_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB95_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB95_40:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB95_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB95_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB95_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB95_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB95_43:                              # %if.end94
                                        #   in Loop: Header=BB95_40 Depth=1
	jmp	.LBB95_44
.LBB95_44:                              # %for.inc
                                        #   in Loop: Header=BB95_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_40
.LBB95_45:                              # %for.end
	jmp	.LBB95_46
.LBB95_46:                              # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB95_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB95_49
.LBB95_48:                              # %if.else104
	movq	$0, dpb+56
.LBB95_49:                              # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB95_50:                              # %return
	cmpl	$2132259063, -24(%rbp)  # imm = 0x7F17B0F7
	jne	.LBB95_52
.LBB95_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_52:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_51
.Lfunc_end95:
	.size	store_picture_in_dpb.32, .Lfunc_end95-store_picture_in_dpb.32
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.33
	.type	compare_pic_by_poc_desc.33,@function
compare_pic_by_poc_desc.33:             # @compare_pic_by_poc_desc.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1402542141, -16(%rbp)  # imm = 0x5399183D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB96_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB96_5
.LBB96_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB96_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB96_5
.LBB96_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB96_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$1402542141, -16(%rbp)  # imm = 0x5399183D
	jne	.LBB96_7
.LBB96_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_6
.Lfunc_end96:
	.size	compare_pic_by_poc_desc.33, .Lfunc_end96-compare_pic_by_poc_desc.33
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.34
	.type	get_long_term_pic.34,@function
get_long_term_pic.34:                   # @get_long_term_pic.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2078668121, -28(%rbp)  # imm = 0x7BE5F559
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB97_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB97_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB97_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB97_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB97_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB97_23
.LBB97_7:                               # %if.end
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_8
.LBB97_8:                               # %if.end14
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_20
.LBB97_9:                               # %if.else
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB97_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB97_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB97_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB97_23
.LBB97_13:                              # %if.end34
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_14
.LBB97_14:                              # %if.end35
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB97_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB97_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB97_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB97_23
.LBB97_18:                              # %if.end56
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_19
.LBB97_19:                              # %if.end57
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_20
.LBB97_20:                              # %if.end58
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_21
.LBB97_21:                              # %for.inc
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_1
.LBB97_22:                              # %for.end
	movq	$0, -24(%rbp)
.LBB97_23:                              # %return
	movq	-24(%rbp), %rbx
	cmpl	$2078668121, -28(%rbp)  # imm = 0x7BE5F559
	jne	.LBB97_25
.LBB97_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_25:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_24
.Lfunc_end97:
	.size	get_long_term_pic.34, .Lfunc_end97-get_long_term_pic.34
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.35
	.type	compare_fs_by_poc_asc.35,@function
compare_fs_by_poc_asc.35:               # @compare_fs_by_poc_asc.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$150775051, -16(%rbp)   # imm = 0x8FCA50B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB98_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB98_5
.LBB98_2:                               # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB98_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB98_5
.LBB98_4:                               # %if.else
	movl	$0, -12(%rbp)
.LBB98_5:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$150775051, -16(%rbp)   # imm = 0x8FCA50B
	jne	.LBB98_7
.LBB98_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_7:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_6
.Lfunc_end98:
	.size	compare_fs_by_poc_asc.35, .Lfunc_end98-compare_fs_by_poc_asc.35
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.36    # -- Begin function dpb_combine_field.36
	.p2align	4, 0x90
	.type	dpb_combine_field.36,@function
dpb_combine_field.36:                   # @dpb_combine_field.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$799752916, -32(%rbp)   # imm = 0x2FAB42D4
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB99_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB99_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB99_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB99_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_1
.LBB99_4:                               # %for.end
	movl	$0, -4(%rbp)
.LBB99_5:                               # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB99_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB99_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB99_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_5
.LBB99_8:                               # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB99_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB99_11
.LBB99_10:                              # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB99_11:                              # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB99_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB99_13:                              # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB99_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB99_15:                              # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB99_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB99_17:                              # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB99_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB99_19:                              # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB99_20:                              # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB99_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB99_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB99_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB99_24
.LBB99_23:                              # %cond.false217
                                        #   in Loop: Header=BB99_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB99_24:                              # %cond.end226
                                        #   in Loop: Header=BB99_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB99_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_20
.LBB99_26:                              # %for.end235
	movl	$0, -4(%rbp)
.LBB99_27:                              # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB99_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB99_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB99_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB99_31
.LBB99_30:                              # %cond.false269
                                        #   in Loop: Header=BB99_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB99_31:                              # %cond.end278
                                        #   in Loop: Header=BB99_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_27
.LBB99_33:                              # %for.end287
	movl	$0, -4(%rbp)
.LBB99_34:                              # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB99_34 Depth=1
	movl	$0, -20(%rbp)
.LBB99_36:                              # %for.cond295
                                        #   Parent Loop BB99_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB99_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB99_40
.LBB99_39:                              # %cond.false445
                                        #   in Loop: Header=BB99_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_40
.LBB99_40:                              # %cond.end446
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB99_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB99_43
.LBB99_42:                              # %cond.false462
                                        #   in Loop: Header=BB99_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_43
.LBB99_43:                              # %cond.end463
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB99_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB99_46
.LBB99_45:                              # %cond.false479
                                        #   in Loop: Header=BB99_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB99_46
.LBB99_46:                              # %cond.end480
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB99_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB99_49
.LBB99_48:                              # %cond.false501
                                        #   in Loop: Header=BB99_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB99_49
.LBB99_49:                              # %cond.end502
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB99_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB99_52
.LBB99_51:                              # %cond.false647
                                        #   in Loop: Header=BB99_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_52
.LBB99_52:                              # %cond.end648
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB99_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB99_55
.LBB99_54:                              # %cond.false665
                                        #   in Loop: Header=BB99_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB99_55
.LBB99_55:                              # %cond.end666
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB99_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB99_58
.LBB99_57:                              # %cond.false683
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB99_58
.LBB99_58:                              # %cond.end684
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB99_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB99_61
.LBB99_60:                              # %cond.false706
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB99_61
.LBB99_61:                              # %cond.end707
                                        #   in Loop: Header=BB99_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB99_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_36
.LBB99_63:                              # %for.end723
                                        #   in Loop: Header=BB99_34 Depth=1
	jmp	.LBB99_64
.LBB99_64:                              # %for.inc724
                                        #   in Loop: Header=BB99_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_34
.LBB99_65:                              # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB99_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB99_76
.LBB99_67:                              # %if.then729
	movl	$0, -4(%rbp)
.LBB99_68:                              # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB99_68 Depth=1
	movl	$0, -20(%rbp)
.LBB99_70:                              # %for.cond737
                                        #   Parent Loop BB99_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB99_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB99_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB99_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_70
.LBB99_73:                              # %for.end758
                                        #   in Loop: Header=BB99_68 Depth=1
	jmp	.LBB99_74
.LBB99_74:                              # %for.inc759
                                        #   in Loop: Header=BB99_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_68
.LBB99_75:                              # %for.end761
	jmp	.LBB99_76
.LBB99_76:                              # %if.end762
	cmpl	$799752916, -32(%rbp)   # imm = 0x2FAB42D4
	jne	.LBB99_78
.LBB99_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_78:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_77
.Lfunc_end99:
	.size	dpb_combine_field.36, .Lfunc_end99-dpb_combine_field.36
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.37 # -- Begin function alloc_storable_picture.37
	.p2align	4, 0x90
	.type	alloc_storable_picture.37,@function
alloc_storable_picture.37:              # @alloc_storable_picture.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$642130357, -40(%rbp)   # imm = 0x264621B5
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB100_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB100_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB100_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB100_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_6
.LBB100_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB100_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB100_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB100_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB100_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB100_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$642130357, -40(%rbp)   # imm = 0x264621B5
	jne	.LBB100_12
.LBB100_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_11
.Lfunc_end100:
	.size	alloc_storable_picture.37, .Lfunc_end100-alloc_storable_picture.37
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.38
	.type	remove_unused_frame_from_dpb.38,@function
remove_unused_frame_from_dpb.38:        # @remove_unused_frame_from_dpb.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2089498172, -20(%rbp)  # imm = 0x7C8B363C
	movl	$0, -12(%rbp)
.LBB101_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB101_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB101_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB101_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB101_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB101_8
.LBB101_5:                              # %if.end
                                        #   in Loop: Header=BB101_1 Depth=1
	jmp	.LBB101_6
.LBB101_6:                              # %for.inc
                                        #   in Loop: Header=BB101_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_1
.LBB101_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB101_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$2089498172, -20(%rbp)  # imm = 0x7C8B363C
	jne	.LBB101_10
.LBB101_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_9
.Lfunc_end101:
	.size	remove_unused_frame_from_dpb.38, .Lfunc_end101-remove_unused_frame_from_dpb.38
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.39
	.type	compare_pic_by_lt_pic_num_asc.39,@function
compare_pic_by_lt_pic_num_asc.39:       # @compare_pic_by_lt_pic_num_asc.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1575501237, -16(%rbp)  # imm = 0x5DE83DB5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB102_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB102_5
.LBB102_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB102_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB102_5
.LBB102_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB102_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1575501237, -16(%rbp)  # imm = 0x5DE83DB5
	jne	.LBB102_7
.LBB102_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_6
.Lfunc_end102:
	.size	compare_pic_by_lt_pic_num_asc.39, .Lfunc_end102-compare_pic_by_lt_pic_num_asc.39
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.40
	.type	compare_fs_by_frame_num_desc.40,@function
compare_fs_by_frame_num_desc.40:        # @compare_fs_by_frame_num_desc.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1924633706, -16(%rbp)  # imm = 0x72B7946A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB103_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB103_5
.LBB103_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB103_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB103_5
.LBB103_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB103_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1924633706, -16(%rbp)  # imm = 0x72B7946A
	jne	.LBB103_7
.LBB103_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_6
.Lfunc_end103:
	.size	compare_fs_by_frame_num_desc.40, .Lfunc_end103-compare_fs_by_frame_num_desc.40
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.41 # -- Begin function replace_top_pic_with_frame.41
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.41,@function
replace_top_pic_with_frame.41:          # @replace_top_pic_with_frame.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$700875236, -32(%rbp)   # imm = 0x29C681E4
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB104_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB104_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB104_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB104_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB104_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB104_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB104_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB104_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB104_10
.LBB104_7:                              # %if.end14
                                        #   in Loop: Header=BB104_3 Depth=1
	jmp	.LBB104_8
.LBB104_8:                              # %for.inc
                                        #   in Loop: Header=BB104_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB104_3
.LBB104_9:                              # %for.end.loopexit
	jmp	.LBB104_10
.LBB104_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB104_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB104_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB104_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB104_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB104_15:                             # %if.end26
	jmp	.LBB104_16
.LBB104_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$700875236, -32(%rbp)   # imm = 0x29C681E4
	jne	.LBB104_18
.LBB104_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_17
.Lfunc_end104:
	.size	replace_top_pic_with_frame.41, .Lfunc_end104-replace_top_pic_with_frame.41
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.42    # -- Begin function compute_colocated.42
	.p2align	4, 0x90
	.type	compute_colocated.42,@function
compute_colocated.42:                   # @compute_colocated.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1892127513, -72(%rbp)  # imm = 0x70C79319
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB105_11
.LBB105_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB105_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB105_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB105_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB105_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB105_8
.LBB105_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB105_8:                              # %if.end
	jmp	.LBB105_9
.LBB105_9:                              # %if.end20
	jmp	.LBB105_10
.LBB105_10:                             # %if.end21
	jmp	.LBB105_11
.LBB105_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB105_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_29
.LBB105_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB105_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB105_14 Depth=1
	movl	$0, -16(%rbp)
.LBB105_16:                             # %for.cond27
                                        #   Parent Loop BB105_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB105_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB105_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB105_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB105_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB105_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB105_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB105_22
.LBB105_21:                             # %if.else160
                                        #   in Loop: Header=BB105_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB105_22:                             # %if.end283
                                        #   in Loop: Header=BB105_16 Depth=2
	jmp	.LBB105_24
.LBB105_23:                             # %if.else284
                                        #   in Loop: Header=BB105_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB105_24:                             # %if.end391
                                        #   in Loop: Header=BB105_16 Depth=2
	jmp	.LBB105_25
.LBB105_25:                             # %for.inc
                                        #   in Loop: Header=BB105_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_16
.LBB105_26:                             # %for.end
                                        #   in Loop: Header=BB105_14 Depth=1
	jmp	.LBB105_27
.LBB105_27:                             # %for.inc392
                                        #   in Loop: Header=BB105_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_14
.LBB105_28:                             # %for.end394
	jmp	.LBB105_29
.LBB105_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB105_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_241
.LBB105_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB105_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	$0, -12(%rbp)
.LBB105_34:                             # %for.cond408
                                        #   Parent Loop BB105_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB105_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_39
.LBB105_38:                             # %cond.false
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_39:                             # %cond.end
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_42
.LBB105_41:                             # %cond.false427
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_42:                             # %cond.end429
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_45
.LBB105_44:                             # %cond.false447
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_45:                             # %cond.end449
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_48
.LBB105_47:                             # %cond.false457
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_48:                             # %cond.end459
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_51
.LBB105_50:                             # %cond.false477
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_51:                             # %cond.end479
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_54
.LBB105_53:                             # %cond.false487
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_54:                             # %cond.end489
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_57
.LBB105_56:                             # %cond.false507
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_57:                             # %cond.end509
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_60
.LBB105_59:                             # %cond.false517
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_60:                             # %cond.end519
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_63
.LBB105_62:                             # %cond.false537
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_63:                             # %cond.end539
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_66
.LBB105_65:                             # %cond.false547
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_66:                             # %cond.end549
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB105_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB105_81
.LBB105_68:                             # %if.else569
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_71
.LBB105_70:                             # %cond.false576
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_71:                             # %cond.end578
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_74
.LBB105_73:                             # %cond.false586
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_74:                             # %cond.end588
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_77
.LBB105_76:                             # %cond.false604
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_77:                             # %cond.end606
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_80
.LBB105_79:                             # %cond.false614
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_80:                             # %cond.end616
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB105_81:                             # %if.end626
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_84
.LBB105_83:                             # %cond.false633
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_84:                             # %cond.end635
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_87
.LBB105_86:                             # %cond.false643
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_87:                             # %cond.end645
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB105_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB105_102
.LBB105_89:                             # %if.else665
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_92
.LBB105_91:                             # %cond.false672
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_92:                             # %cond.end674
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_95
.LBB105_94:                             # %cond.false682
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_95:                             # %cond.end684
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_98
.LBB105_97:                             # %cond.false700
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_98:                             # %cond.end702
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_101
.LBB105_100:                            # %cond.false710
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_101:                            # %cond.end712
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB105_102:                            # %if.end722
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB105_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB105_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB105_112
.LBB105_107:                            # %lor.rhs
                                        #   in Loop: Header=BB105_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB105_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB105_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB105_111:                            # %land.end
                                        #   in Loop: Header=BB105_34 Depth=2
.LBB105_112:                            # %lor.end
                                        #   in Loop: Header=BB105_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB105_113:                            # %if.end814
                                        #   in Loop: Header=BB105_34 Depth=2
	jmp	.LBB105_236
.LBB105_114:                            # %if.else815
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_117
.LBB105_116:                            # %cond.false822
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_117:                            # %cond.end824
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_120
.LBB105_119:                            # %cond.false832
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_120:                            # %cond.end834
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_123
.LBB105_122:                            # %cond.false851
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_123:                            # %cond.end853
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_126
.LBB105_125:                            # %cond.false861
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_126:                            # %cond.end863
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_129
.LBB105_128:                            # %cond.false881
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_129:                            # %cond.end883
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_132
.LBB105_131:                            # %cond.false891
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_132:                            # %cond.end893
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_135
.LBB105_134:                            # %cond.false911
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_135:                            # %cond.end913
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_138
.LBB105_137:                            # %cond.false921
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_138:                            # %cond.end923
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_141
.LBB105_140:                            # %cond.false941
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_141:                            # %cond.end943
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_144
.LBB105_143:                            # %cond.false951
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_144:                            # %cond.end953
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_147
.LBB105_146:                            # %cond.false968
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_147:                            # %cond.end970
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_150
.LBB105_149:                            # %cond.false978
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_150:                            # %cond.end980
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_153
.LBB105_152:                            # %cond.false996
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_153:                            # %cond.end998
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_156
.LBB105_155:                            # %cond.false1006
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_156:                            # %cond.end1008
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_159
.LBB105_158:                            # %cond.false1023
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_159:                            # %cond.end1025
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_162
.LBB105_161:                            # %cond.false1033
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_162:                            # %cond.end1035
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB105_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB105_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB105_172
.LBB105_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB105_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB105_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB105_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB105_171:                            # %land.end1133
                                        #   in Loop: Header=BB105_34 Depth=2
.LBB105_172:                            # %lor.end1134
                                        #   in Loop: Header=BB105_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB105_173:                            # %if.end1142
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_176
.LBB105_175:                            # %cond.false1149
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_176:                            # %cond.end1151
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_179
.LBB105_178:                            # %cond.false1159
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_179:                            # %cond.end1161
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_182
.LBB105_181:                            # %cond.false1178
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_182:                            # %cond.end1180
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_185
.LBB105_184:                            # %cond.false1188
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_185:                            # %cond.end1190
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_188
.LBB105_187:                            # %cond.false1208
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_188:                            # %cond.end1210
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_191
.LBB105_190:                            # %cond.false1218
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_191:                            # %cond.end1220
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_194
.LBB105_193:                            # %cond.false1238
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_194:                            # %cond.end1240
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_197
.LBB105_196:                            # %cond.false1248
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_197:                            # %cond.end1250
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_200
.LBB105_199:                            # %cond.false1268
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_200:                            # %cond.end1270
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_203
.LBB105_202:                            # %cond.false1278
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_203:                            # %cond.end1280
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_206
.LBB105_205:                            # %cond.false1295
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_206:                            # %cond.end1297
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_209
.LBB105_208:                            # %cond.false1305
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_209:                            # %cond.end1307
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_212
.LBB105_211:                            # %cond.false1323
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_212:                            # %cond.end1325
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_215
.LBB105_214:                            # %cond.false1333
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_215:                            # %cond.end1335
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_218
.LBB105_217:                            # %cond.false1350
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_218:                            # %cond.end1352
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_221
.LBB105_220:                            # %cond.false1360
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_221:                            # %cond.end1362
                                        #   in Loop: Header=BB105_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB105_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB105_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB105_231
.LBB105_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB105_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB105_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB105_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB105_230:                            # %land.end1460
                                        #   in Loop: Header=BB105_34 Depth=2
.LBB105_231:                            # %lor.end1461
                                        #   in Loop: Header=BB105_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB105_232:                            # %if.end1469
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB105_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB105_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB105_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB105_235:                            # %if.end1522
                                        #   in Loop: Header=BB105_34 Depth=2
	jmp	.LBB105_236
.LBB105_236:                            # %if.end1523
                                        #   in Loop: Header=BB105_34 Depth=2
	jmp	.LBB105_237
.LBB105_237:                            # %for.inc1524
                                        #   in Loop: Header=BB105_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_34
.LBB105_238:                            # %for.end1526
                                        #   in Loop: Header=BB105_32 Depth=1
	jmp	.LBB105_239
.LBB105_239:                            # %for.inc1527
                                        #   in Loop: Header=BB105_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_32
.LBB105_240:                            # %for.end1529
	jmp	.LBB105_241
.LBB105_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB105_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_259
.LBB105_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB105_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB105_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB105_245 Depth=1
	movl	$0, -16(%rbp)
.LBB105_247:                            # %for.cond1546
                                        #   Parent Loop BB105_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB105_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB105_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB105_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB105_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB105_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB105_252
.LBB105_251:                            # %if.else1699
                                        #   in Loop: Header=BB105_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB105_252:                            # %if.end1829
                                        #   in Loop: Header=BB105_247 Depth=2
	jmp	.LBB105_253
.LBB105_253:                            # %if.end1830
                                        #   in Loop: Header=BB105_247 Depth=2
	jmp	.LBB105_254
.LBB105_254:                            # %for.inc1831
                                        #   in Loop: Header=BB105_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_247
.LBB105_255:                            # %for.end1833
                                        #   in Loop: Header=BB105_245 Depth=1
	jmp	.LBB105_256
.LBB105_256:                            # %for.inc1834
                                        #   in Loop: Header=BB105_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_245
.LBB105_257:                            # %for.end1836
	jmp	.LBB105_258
.LBB105_258:                            # %if.end1837
	jmp	.LBB105_259
.LBB105_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB105_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB105_260 Depth=1
	movl	$0, -16(%rbp)
.LBB105_262:                            # %for.cond1845
                                        #   Parent Loop BB105_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB105_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB105_314
.LBB105_265:                            # %if.then1856
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_268
.LBB105_267:                            # %cond.false1863
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_268:                            # %cond.end1865
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_271
.LBB105_270:                            # %cond.false1873
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_271:                            # %cond.end1875
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_274
.LBB105_273:                            # %cond.false1893
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_274:                            # %cond.end1895
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_277
.LBB105_276:                            # %cond.false1903
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_277:                            # %cond.end1905
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_280
.LBB105_279:                            # %cond.false1923
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_280:                            # %cond.end1925
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_283
.LBB105_282:                            # %cond.false1933
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_283:                            # %cond.end1935
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_286
.LBB105_285:                            # %cond.false1953
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_286:                            # %cond.end1955
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_289
.LBB105_288:                            # %cond.false1963
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_289:                            # %cond.end1965
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_292
.LBB105_291:                            # %cond.false1983
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_292:                            # %cond.end1985
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_295
.LBB105_294:                            # %cond.false1993
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_295:                            # %cond.end1995
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_298
.LBB105_297:                            # %cond.false2011
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_298:                            # %cond.end2013
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_301
.LBB105_300:                            # %cond.false2021
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_301:                            # %cond.end2023
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_304
.LBB105_303:                            # %cond.false2039
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_304:                            # %cond.end2041
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_307
.LBB105_306:                            # %cond.false2049
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_307:                            # %cond.end2051
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_310
.LBB105_309:                            # %cond.false2067
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_310:                            # %cond.end2069
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB105_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB105_313
.LBB105_312:                            # %cond.false2077
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB105_313:                            # %cond.end2079
                                        #   in Loop: Header=BB105_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB105_315
.LBB105_314:                            # %if.else2089
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB105_315:                            # %if.end2194
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB105_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB105_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB105_325
.LBB105_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB105_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB105_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB105_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB105_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB105_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB105_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB105_324:                            # %land.end2285
                                        #   in Loop: Header=BB105_262 Depth=2
.LBB105_325:                            # %lor.end2286
                                        #   in Loop: Header=BB105_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB105_326:                            # %if.end2295
                                        #   in Loop: Header=BB105_262 Depth=2
	jmp	.LBB105_327
.LBB105_327:                            # %for.inc2296
                                        #   in Loop: Header=BB105_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_262
.LBB105_328:                            # %for.end2298
                                        #   in Loop: Header=BB105_260 Depth=1
	jmp	.LBB105_329
.LBB105_329:                            # %for.inc2299
                                        #   in Loop: Header=BB105_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_260
.LBB105_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB105_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB105_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB105_332 Depth=1
	movl	$0, -16(%rbp)
.LBB105_334:                            # %for.cond2312
                                        #   Parent Loop BB105_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB105_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB105_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB105_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB105_340
.LBB105_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB105_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB105_341
.LBB105_340:                            # %if.then2342
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB105_345
.LBB105_341:                            # %if.else2363
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB105_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB105_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB105_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB105_344:                            # %if.end2394
                                        #   in Loop: Header=BB105_334 Depth=2
	jmp	.LBB105_345
.LBB105_345:                            # %if.end2395
                                        #   in Loop: Header=BB105_334 Depth=2
	jmp	.LBB105_346
.LBB105_346:                            # %for.inc2396
                                        #   in Loop: Header=BB105_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_334
.LBB105_347:                            # %for.end2398
                                        #   in Loop: Header=BB105_332 Depth=1
	jmp	.LBB105_348
.LBB105_348:                            # %for.inc2399
                                        #   in Loop: Header=BB105_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_332
.LBB105_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB105_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB105_350 Depth=1
	movl	$0, -16(%rbp)
.LBB105_352:                            # %for.cond2409
                                        #   Parent Loop BB105_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB105_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB105_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB105_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB105_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB105_360
.LBB105_356:                            # %cond.false2429
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB105_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$127, %eax
	jmp	.LBB105_359
.LBB105_358:                            # %cond.false2441
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB105_359:                            # %cond.end2450
                                        #   in Loop: Header=BB105_352 Depth=2
.LBB105_360:                            # %cond.end2452
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB105_377
.LBB105_361:                            # %if.else2454
                                        #   in Loop: Header=BB105_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB105_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB105_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB105_368
.LBB105_364:                            # %cond.false2468
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB105_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$127, %eax
	jmp	.LBB105_367
.LBB105_366:                            # %cond.false2480
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB105_367:                            # %cond.end2489
                                        #   in Loop: Header=BB105_352 Depth=2
.LBB105_368:                            # %cond.end2491
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB105_376
.LBB105_369:                            # %if.else2493
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB105_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB105_375
.LBB105_371:                            # %cond.false2504
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB105_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$127, %eax
	jmp	.LBB105_374
.LBB105_373:                            # %cond.false2516
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB105_374:                            # %cond.end2525
                                        #   in Loop: Header=BB105_352 Depth=2
.LBB105_375:                            # %cond.end2527
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB105_376:                            # %if.end2529
                                        #   in Loop: Header=BB105_352 Depth=2
	jmp	.LBB105_377
.LBB105_377:                            # %if.end2530
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB105_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB105_383
.LBB105_379:                            # %cond.false2546
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB105_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$127, %eax
	jmp	.LBB105_382
.LBB105_381:                            # %cond.false2562
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB105_382:                            # %cond.end2575
                                        #   in Loop: Header=BB105_352 Depth=2
.LBB105_383:                            # %cond.end2577
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB105_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB105_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB105_390
.LBB105_386:                            # %cond.false2592
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB105_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB105_389
.LBB105_388:                            # %cond.false2599
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB105_389:                            # %cond.end2603
                                        #   in Loop: Header=BB105_352 Depth=2
.LBB105_390:                            # %cond.end2605
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB105_392
.LBB105_391:                            # %if.else2611
                                        #   in Loop: Header=BB105_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB105_392:                            # %if.end2617
                                        #   in Loop: Header=BB105_352 Depth=2
	jmp	.LBB105_393
.LBB105_393:                            # %for.inc2618
                                        #   in Loop: Header=BB105_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_352
.LBB105_394:                            # %for.end2620
                                        #   in Loop: Header=BB105_350 Depth=1
	jmp	.LBB105_395
.LBB105_395:                            # %for.inc2621
                                        #   in Loop: Header=BB105_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB105_350
.LBB105_396:                            # %for.end2623
	jmp	.LBB105_397
.LBB105_397:                            # %if.end2624
	cmpl	$1892127513, -72(%rbp)  # imm = 0x70C79319
	jne	.LBB105_399
.LBB105_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_398
.Lfunc_end105:
	.size	compute_colocated.42, .Lfunc_end105-compute_colocated.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.43
	.type	mm_mark_current_picture_long_term.43,@function
mm_mark_current_picture_long_term.43:   # @mm_mark_current_picture_long_term.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$150176402, -20(%rbp)   # imm = 0x8F38292
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB106_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB106_3
.LBB106_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB106_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$150176402, -20(%rbp)   # imm = 0x8F38292
	jne	.LBB106_5
.LBB106_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_4
.Lfunc_end106:
	.size	mm_mark_current_picture_long_term.43, .Lfunc_end106-mm_mark_current_picture_long_term.43
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.44
	.type	mark_pic_long_term.44,@function
mark_pic_long_term.44:                  # @mark_pic_long_term.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1361161212, -20(%rbp)  # imm = 0x5121ABFC
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB107_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB107_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB107_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB107_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB107_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB107_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB107_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB107_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB107_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB107_39
.LBB107_7:                              # %if.end
                                        #   in Loop: Header=BB107_2 Depth=1
	jmp	.LBB107_8
.LBB107_8:                              # %if.end50
                                        #   in Loop: Header=BB107_2 Depth=1
	jmp	.LBB107_9
.LBB107_9:                              # %for.inc
                                        #   in Loop: Header=BB107_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_2
.LBB107_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB107_39
.LBB107_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB107_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB107_14
.LBB107_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB107_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB107_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB107_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB107_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB107_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB107_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB107_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB107_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB107_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB107_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB107_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB107_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB107_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB107_24:                             # %if.end123
	jmp	.LBB107_39
.LBB107_25:                             # %if.end124
                                        #   in Loop: Header=BB107_15 Depth=1
	jmp	.LBB107_26
.LBB107_26:                             # %if.end125
                                        #   in Loop: Header=BB107_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB107_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB107_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB107_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB107_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB107_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB107_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB107_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB107_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB107_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB107_34:                             # %if.end194
	jmp	.LBB107_39
.LBB107_35:                             # %if.end195
                                        #   in Loop: Header=BB107_15 Depth=1
	jmp	.LBB107_36
.LBB107_36:                             # %if.end196
                                        #   in Loop: Header=BB107_15 Depth=1
	jmp	.LBB107_37
.LBB107_37:                             # %for.inc197
                                        #   in Loop: Header=BB107_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_15
.LBB107_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB107_39:                             # %if.end201
	cmpl	$1361161212, -20(%rbp)  # imm = 0x5121ABFC
	jne	.LBB107_41
.LBB107_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_40
.Lfunc_end107:
	.size	mark_pic_long_term.44, .Lfunc_end107-mark_pic_long_term.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.45
	.type	compare_fs_by_poc_asc.45,@function
compare_fs_by_poc_asc.45:               # @compare_fs_by_poc_asc.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1780843299, -16(%rbp)  # imm = 0x6A258323
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB108_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB108_5
.LBB108_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB108_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB108_5
.LBB108_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB108_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1780843299, -16(%rbp)  # imm = 0x6A258323
	jne	.LBB108_7
.LBB108_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_6
.Lfunc_end108:
	.size	compare_fs_by_poc_asc.45, .Lfunc_end108-compare_fs_by_poc_asc.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.46
	.type	is_short_term_reference.46,@function
is_short_term_reference.46:             # @is_short_term_reference.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1700421114, -24(%rbp)  # imm = 0x655A5DFA
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB109_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB109_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB109_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB109_18
.LBB109_4:                              # %if.end
	jmp	.LBB109_5
.LBB109_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB109_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB109_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB109_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB109_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB109_18
.LBB109_10:                             # %if.end17
	jmp	.LBB109_11
.LBB109_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB109_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB109_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB109_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB109_18
.LBB109_15:                             # %if.end30
	jmp	.LBB109_16
.LBB109_16:                             # %if.end31
	jmp	.LBB109_17
.LBB109_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB109_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1700421114, -24(%rbp)  # imm = 0x655A5DFA
	jne	.LBB109_20
.LBB109_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_19
.Lfunc_end109:
	.size	is_short_term_reference.46, .Lfunc_end109-is_short_term_reference.46
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.47
	.type	is_used_for_reference.47,@function
is_used_for_reference.47:               # @is_used_for_reference.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$905099788, -28(%rbp)   # imm = 0x35F2BA0C
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB110_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB110_17
.LBB110_2:                              # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB110_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB110_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB110_17
.LBB110_5:                              # %if.end4
	jmp	.LBB110_6
.LBB110_6:                              # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB110_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB110_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB110_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB110_17
.LBB110_10:                             # %if.end14
	jmp	.LBB110_11
.LBB110_11:                             # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB110_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB110_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB110_17
.LBB110_14:                             # %if.end23
	jmp	.LBB110_15
.LBB110_15:                             # %if.end24
	jmp	.LBB110_16
.LBB110_16:                             # %if.end25
	movl	$0, -12(%rbp)
.LBB110_17:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$905099788, -28(%rbp)   # imm = 0x35F2BA0C
	jne	.LBB110_19
.LBB110_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_18
.Lfunc_end110:
	.size	is_used_for_reference.47, .Lfunc_end110-is_used_for_reference.47
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.48      # -- Begin function alloc_colocated.48
	.p2align	4, 0x90
	.type	alloc_colocated.48,@function
alloc_colocated.48:                     # @alloc_colocated.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$552569959, -32(%rbp)   # imm = 0x20EF8C67
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB111_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB111_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB111_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB111_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$552569959, -32(%rbp)   # imm = 0x20EF8C67
	jne	.LBB111_6
.LBB111_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_5
.Lfunc_end111:
	.size	alloc_colocated.48, .Lfunc_end111-alloc_colocated.48
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.49
	.type	mm_unmark_long_term_for_reference.49,@function
mm_unmark_long_term_for_reference.49:   # @mm_unmark_long_term_for_reference.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1078385827, -12(%rbp)  # imm = 0x4046DCA3
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB112_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB112_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB112_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB112_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB112_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB112_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB112_7:                              # %if.end
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_8
.LBB112_8:                              # %if.end14
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_24
.LBB112_9:                              # %if.else
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB112_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB112_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB112_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB112_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB112_14:                             # %if.end57
	jmp	.LBB112_27
.LBB112_15:                             # %if.end58
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_16
.LBB112_16:                             # %if.end59
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB112_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB112_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB112_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB112_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB112_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB112_21:                             # %if.end106
	jmp	.LBB112_27
.LBB112_22:                             # %if.end107
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_23
.LBB112_23:                             # %if.end108
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_24
.LBB112_24:                             # %if.end109
                                        #   in Loop: Header=BB112_1 Depth=1
	jmp	.LBB112_25
.LBB112_25:                             # %for.inc
                                        #   in Loop: Header=BB112_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB112_1
.LBB112_26:                             # %for.end.loopexit
	jmp	.LBB112_27
.LBB112_27:                             # %for.end
	cmpl	$1078385827, -12(%rbp)  # imm = 0x4046DCA3
	jne	.LBB112_29
.LBB112_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_28
.Lfunc_end112:
	.size	mm_unmark_long_term_for_reference.49, .Lfunc_end112-mm_unmark_long_term_for_reference.49
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.50
	.type	compare_pic_by_pic_num_desc.50,@function
compare_pic_by_pic_num_desc.50:         # @compare_pic_by_pic_num_desc.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1496653048, -16(%rbp)  # imm = 0x59351CF8
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB113_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB113_5
.LBB113_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB113_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB113_5
.LBB113_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB113_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1496653048, -16(%rbp)  # imm = 0x59351CF8
	jne	.LBB113_7
.LBB113_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_6
.Lfunc_end113:
	.size	compare_pic_by_pic_num_desc.50, .Lfunc_end113-compare_pic_by_pic_num_desc.50
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_unused_frame_from_dpb.51
	.type	remove_unused_frame_from_dpb.51,@function
remove_unused_frame_from_dpb.51:        # @remove_unused_frame_from_dpb.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$521521073, -20(%rbp)   # imm = 0x1F15C7B1
	movl	$0, -12(%rbp)
.LBB114_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB114_7
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB114_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	je	.LBB114_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB114_1 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB114_5
# %bb.4:                                # %if.then
	movl	-12(%rbp), %edi
	callq	remove_frame_from_dpb
	movl	$1, -16(%rbp)
	jmp	.LBB114_8
.LBB114_5:                              # %if.end
                                        #   in Loop: Header=BB114_1 Depth=1
	jmp	.LBB114_6
.LBB114_6:                              # %for.inc
                                        #   in Loop: Header=BB114_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_1
.LBB114_7:                              # %for.end
	movl	$0, -16(%rbp)
.LBB114_8:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$521521073, -20(%rbp)   # imm = 0x1F15C7B1
	jne	.LBB114_10
.LBB114_9:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_9
.Lfunc_end114:
	.size	remove_unused_frame_from_dpb.51, .Lfunc_end114-remove_unused_frame_from_dpb.51
	.cfi_endproc
                                        # -- End function
	.globl	update_ltref_list.52    # -- Begin function update_ltref_list.52
	.p2align	4, 0x90
	.type	update_ltref_list.52,@function
update_ltref_list.52:                   # @update_ltref_list.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$290928970, -12(%rbp)   # imm = 0x1157394A
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB115_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB115_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB115_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_long_term_reference
	cmpl	$0, %eax
	je	.LBB115_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB115_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB115_4:                              # %if.end
                                        #   in Loop: Header=BB115_1 Depth=1
	jmp	.LBB115_5
.LBB115_5:                              # %for.inc
                                        #   in Loop: Header=BB115_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_1
.LBB115_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+36
.LBB115_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB115_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB115_7 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB115_7
.LBB115_9:                              # %while.end
	cmpl	$290928970, -12(%rbp)   # imm = 0x1157394A
	jne	.LBB115_11
.LBB115_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_10
.Lfunc_end115:
	.size	update_ltref_list.52, .Lfunc_end115-update_ltref_list.52
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.53
	.type	unmark_long_term_field_for_reference_by_frame_idx.53,@function
unmark_long_term_field_for_reference_by_frame_idx.53: # @unmark_long_term_field_for_reference_by_frame_idx.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$642879919, -32(%rbp)   # imm = 0x265191AF
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB116_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB116_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB116_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB116_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB116_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB116_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB116_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB116_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB116_23
.LBB116_8:                              # %if.else
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB116_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB116_22
.LBB116_10:                             # %if.else21
                                        #   in Loop: Header=BB116_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB116_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB116_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB116_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB116_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB116_15
.LBB116_14:                             # %if.then29
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB116_15:                             # %if.end32
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_17
.LBB116_16:                             # %if.else33
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB116_17:                             # %if.end36
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_21
.LBB116_18:                             # %if.else37
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB116_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB116_20:                             # %if.end45
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_21
.LBB116_21:                             # %if.end46
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_22
.LBB116_22:                             # %if.end47
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_23
.LBB116_23:                             # %if.end48
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_24
.LBB116_24:                             # %if.end49
                                        #   in Loop: Header=BB116_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB116_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB116_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB116_42
.LBB116_27:                             # %if.else59
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB116_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB116_41
.LBB116_29:                             # %if.else67
                                        #   in Loop: Header=BB116_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB116_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB116_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB116_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB116_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB116_34
.LBB116_33:                             # %if.then78
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB116_34:                             # %if.end81
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_36
.LBB116_35:                             # %if.else82
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB116_36:                             # %if.end85
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_40
.LBB116_37:                             # %if.else86
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB116_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB116_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB116_39:                             # %if.end95
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_40
.LBB116_40:                             # %if.end96
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_41
.LBB116_41:                             # %if.end97
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_42
.LBB116_42:                             # %if.end98
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_43
.LBB116_43:                             # %if.end99
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_44
.LBB116_44:                             # %if.end100
                                        #   in Loop: Header=BB116_3 Depth=1
	jmp	.LBB116_45
.LBB116_45:                             # %for.inc
                                        #   in Loop: Header=BB116_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_3
.LBB116_46:                             # %for.end
	cmpl	$642879919, -32(%rbp)   # imm = 0x265191AF
	jne	.LBB116_48
.LBB116_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_47
.Lfunc_end116:
	.size	unmark_long_term_field_for_reference_by_frame_idx.53, .Lfunc_end116-unmark_long_term_field_for_reference_by_frame_idx.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.54
	.type	compare_pic_by_poc_desc.54,@function
compare_pic_by_poc_desc.54:             # @compare_pic_by_poc_desc.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$73540925, -16(%rbp)    # imm = 0x462253D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB117_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB117_5
.LBB117_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB117_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB117_5
.LBB117_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB117_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$73540925, -16(%rbp)    # imm = 0x462253D
	jne	.LBB117_7
.LBB117_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_6
.Lfunc_end117:
	.size	compare_pic_by_poc_desc.54, .Lfunc_end117-compare_pic_by_poc_desc.54
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.55
	.type	mm_assign_long_term_frame_idx.55,@function
mm_assign_long_term_frame_idx.55:       # @mm_assign_long_term_frame_idx.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1182947161, -32(%rbp)  # imm = 0x46825759
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB118_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB118_18
.LBB118_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB118_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB118_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB118_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB118_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB118_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB118_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB118_15
.LBB118_7:                              # %if.end
                                        #   in Loop: Header=BB118_3 Depth=1
	jmp	.LBB118_8
.LBB118_8:                              # %if.end8
                                        #   in Loop: Header=BB118_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB118_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB118_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB118_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB118_15
.LBB118_11:                             # %if.end20
                                        #   in Loop: Header=BB118_3 Depth=1
	jmp	.LBB118_12
.LBB118_12:                             # %if.end21
                                        #   in Loop: Header=BB118_3 Depth=1
	jmp	.LBB118_13
.LBB118_13:                             # %for.inc
                                        #   in Loop: Header=BB118_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_3
.LBB118_14:                             # %for.end.loopexit
	jmp	.LBB118_15
.LBB118_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB118_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB118_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB118_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1182947161, -32(%rbp)  # imm = 0x46825759
	jne	.LBB118_20
.LBB118_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_19
.Lfunc_end118:
	.size	mm_assign_long_term_frame_idx.55, .Lfunc_end118-mm_assign_long_term_frame_idx.55
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.56
	.type	is_long_term_reference.56,@function
is_long_term_reference.56:              # @is_long_term_reference.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$807650949, -24(%rbp)   # imm = 0x3023C685
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB119_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB119_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB119_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB119_18
.LBB119_4:                              # %if.end
	jmp	.LBB119_5
.LBB119_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB119_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB119_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB119_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB119_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB119_18
.LBB119_10:                             # %if.end17
	jmp	.LBB119_11
.LBB119_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB119_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB119_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB119_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB119_18
.LBB119_15:                             # %if.end30
	jmp	.LBB119_16
.LBB119_16:                             # %if.end31
	jmp	.LBB119_17
.LBB119_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB119_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$807650949, -24(%rbp)   # imm = 0x3023C685
	jne	.LBB119_20
.LBB119_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_19
.Lfunc_end119:
	.size	is_long_term_reference.56, .Lfunc_end119-is_long_term_reference.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.57
	.type	mm_assign_long_term_frame_idx.57,@function
mm_assign_long_term_frame_idx.57:       # @mm_assign_long_term_frame_idx.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1829778689, -28(%rbp)  # imm = 0x6D103501
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB120_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB120_18
.LBB120_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB120_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB120_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB120_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB120_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB120_15
.LBB120_7:                              # %if.end
                                        #   in Loop: Header=BB120_3 Depth=1
	jmp	.LBB120_8
.LBB120_8:                              # %if.end8
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB120_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB120_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB120_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB120_15
.LBB120_11:                             # %if.end20
                                        #   in Loop: Header=BB120_3 Depth=1
	jmp	.LBB120_12
.LBB120_12:                             # %if.end21
                                        #   in Loop: Header=BB120_3 Depth=1
	jmp	.LBB120_13
.LBB120_13:                             # %for.inc
                                        #   in Loop: Header=BB120_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_3
.LBB120_14:                             # %for.end.loopexit
	jmp	.LBB120_15
.LBB120_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB120_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB120_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB120_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1829778689, -28(%rbp)  # imm = 0x6D103501
	jne	.LBB120_20
.LBB120_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_19
.Lfunc_end120:
	.size	mm_assign_long_term_frame_idx.57, .Lfunc_end120-mm_assign_long_term_frame_idx.57
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.58    # -- Begin function gen_field_ref_ids.58
	.p2align	4, 0x90
	.type	gen_field_ref_ids.58,@function
gen_field_ref_ids.58:                   # @gen_field_ref_ids.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$732572726, -28(%rbp)   # imm = 0x2BAA2C36
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB121_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	$0, -8(%rbp)
.LBB121_3:                              # %for.cond1
                                        #   Parent Loop BB121_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB121_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB121_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB121_7
.LBB121_6:                              # %cond.false
                                        #   in Loop: Header=BB121_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB121_7
.LBB121_7:                              # %cond.end
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB121_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB121_10
.LBB121_9:                              # %cond.false32
                                        #   in Loop: Header=BB121_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB121_10
.LBB121_10:                             # %cond.end33
                                        #   in Loop: Header=BB121_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB121_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_3
.LBB121_12:                             # %for.end
                                        #   in Loop: Header=BB121_1 Depth=1
	jmp	.LBB121_13
.LBB121_13:                             # %for.inc45
                                        #   in Loop: Header=BB121_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_1
.LBB121_14:                             # %for.end47
	cmpl	$732572726, -28(%rbp)   # imm = 0x2BAA2C36
	jne	.LBB121_16
.LBB121_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_15
.Lfunc_end121:
	.size	gen_field_ref_ids.58, .Lfunc_end121-gen_field_ref_ids.58
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_mark_current_picture_long_term.59
	.type	mm_mark_current_picture_long_term.59,@function
mm_mark_current_picture_long_term.59:   # @mm_mark_current_picture_long_term.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1803986070, -20(%rbp)  # imm = 0x6B86A496
	movq	%rdi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB122_2
# %bb.1:                                # %if.then
	movl	-4(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB122_3
.LBB122_2:                              # %if.else
	movq	-16(%rbp), %rax
	movl	(%rax), %edi
	movl	-4(%rbp), %esi
	movq	-16(%rbp), %rax
	movl	6364(%rax), %ecx
	movl	$1, %edx
	xorl	%r8d, %r8d
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB122_3:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6372(%rcx)
	cmpl	$1803986070, -20(%rbp)  # imm = 0x6B86A496
	jne	.LBB122_5
.LBB122_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_4
.Lfunc_end122:
	.size	mm_mark_current_picture_long_term.59, .Lfunc_end122-mm_mark_current_picture_long_term.59
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.60    # -- Begin function dpb_combine_field.60
	.p2align	4, 0x90
	.type	dpb_combine_field.60,@function
dpb_combine_field.60:                   # @dpb_combine_field.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$227201775, -32(%rbp)   # imm = 0xD8AD2EF
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB123_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB123_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB123_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB123_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_5
.LBB123_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB123_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB123_11
.LBB123_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB123_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB123_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB123_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB123_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB123_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB123_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB123_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB123_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB123_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB123_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB123_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB123_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB123_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB123_24
.LBB123_23:                             # %cond.false217
                                        #   in Loop: Header=BB123_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB123_24:                             # %cond.end226
                                        #   in Loop: Header=BB123_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB123_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_20
.LBB123_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB123_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB123_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB123_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB123_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB123_31
.LBB123_30:                             # %cond.false269
                                        #   in Loop: Header=BB123_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB123_31:                             # %cond.end278
                                        #   in Loop: Header=BB123_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB123_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_27
.LBB123_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB123_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB123_34 Depth=1
	movl	$0, -20(%rbp)
.LBB123_36:                             # %for.cond295
                                        #   Parent Loop BB123_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB123_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB123_40
.LBB123_39:                             # %cond.false445
                                        #   in Loop: Header=BB123_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_40
.LBB123_40:                             # %cond.end446
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB123_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB123_43
.LBB123_42:                             # %cond.false462
                                        #   in Loop: Header=BB123_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_43
.LBB123_43:                             # %cond.end463
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB123_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB123_46
.LBB123_45:                             # %cond.false479
                                        #   in Loop: Header=BB123_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB123_46
.LBB123_46:                             # %cond.end480
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB123_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB123_49
.LBB123_48:                             # %cond.false501
                                        #   in Loop: Header=BB123_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB123_49
.LBB123_49:                             # %cond.end502
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB123_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB123_52
.LBB123_51:                             # %cond.false647
                                        #   in Loop: Header=BB123_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_52
.LBB123_52:                             # %cond.end648
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB123_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB123_55
.LBB123_54:                             # %cond.false665
                                        #   in Loop: Header=BB123_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB123_55
.LBB123_55:                             # %cond.end666
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB123_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB123_58
.LBB123_57:                             # %cond.false683
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB123_58
.LBB123_58:                             # %cond.end684
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB123_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB123_61
.LBB123_60:                             # %cond.false706
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB123_61
.LBB123_61:                             # %cond.end707
                                        #   in Loop: Header=BB123_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB123_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_36
.LBB123_63:                             # %for.end723
                                        #   in Loop: Header=BB123_34 Depth=1
	jmp	.LBB123_64
.LBB123_64:                             # %for.inc724
                                        #   in Loop: Header=BB123_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_34
.LBB123_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB123_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB123_76
.LBB123_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB123_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB123_68 Depth=1
	movl	$0, -20(%rbp)
.LBB123_70:                             # %for.cond737
                                        #   Parent Loop BB123_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB123_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB123_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB123_70
.LBB123_73:                             # %for.end758
                                        #   in Loop: Header=BB123_68 Depth=1
	jmp	.LBB123_74
.LBB123_74:                             # %for.inc759
                                        #   in Loop: Header=BB123_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_68
.LBB123_75:                             # %for.end761
	jmp	.LBB123_76
.LBB123_76:                             # %if.end762
	cmpl	$227201775, -32(%rbp)   # imm = 0xD8AD2EF
	jne	.LBB123_78
.LBB123_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_77
.Lfunc_end123:
	.size	dpb_combine_field.60, .Lfunc_end123-dpb_combine_field.60
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.61
	.type	get_long_term_pic.61,@function
get_long_term_pic.61:                   # @get_long_term_pic.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$66258910, -28(%rbp)    # imm = 0x3F307DE
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB124_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB124_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB124_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB124_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB124_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB124_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB124_23
.LBB124_7:                              # %if.end
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_8
.LBB124_8:                              # %if.end14
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_20
.LBB124_9:                              # %if.else
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB124_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB124_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB124_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB124_23
.LBB124_13:                             # %if.end34
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_14
.LBB124_14:                             # %if.end35
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB124_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB124_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB124_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB124_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB124_23
.LBB124_18:                             # %if.end56
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_19
.LBB124_19:                             # %if.end57
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_20
.LBB124_20:                             # %if.end58
                                        #   in Loop: Header=BB124_1 Depth=1
	jmp	.LBB124_21
.LBB124_21:                             # %for.inc
                                        #   in Loop: Header=BB124_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_1
.LBB124_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB124_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$66258910, -28(%rbp)    # imm = 0x3F307DE
	jne	.LBB124_25
.LBB124_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_24
.Lfunc_end124:
	.size	get_long_term_pic.61, .Lfunc_end124-get_long_term_pic.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.62
	.type	output_one_frame_from_dpb.62,@function
output_one_frame_from_dpb.62:           # @output_one_frame_from_dpb.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1085689204, -12(%rbp)  # imm = 0x40B64D74
	cmpl	$1, dpb+28
	jae	.LBB125_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB125_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB125_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB125_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB125_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB125_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB125_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB125_8:                              # %if.end10
	cmpl	$1085689204, -12(%rbp)  # imm = 0x40B64D74
	jne	.LBB125_10
.LBB125_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_9
.Lfunc_end125:
	.size	output_one_frame_from_dpb.62, .Lfunc_end125-output_one_frame_from_dpb.62
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.63
	.type	compare_pic_by_lt_pic_num_asc.63,@function
compare_pic_by_lt_pic_num_asc.63:       # @compare_pic_by_lt_pic_num_asc.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$628798534, -16(%rbp)   # imm = 0x257AB446
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB126_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB126_5
.LBB126_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB126_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB126_5
.LBB126_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB126_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$628798534, -16(%rbp)   # imm = 0x257AB446
	jne	.LBB126_7
.LBB126_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_6
.Lfunc_end126:
	.size	compare_pic_by_lt_pic_num_asc.63, .Lfunc_end126-compare_pic_by_lt_pic_num_asc.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_used_for_reference.64
	.type	is_used_for_reference.64,@function
is_used_for_reference.64:               # @is_used_for_reference.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1888840112, -28(%rbp)  # imm = 0x709569B0
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 4(%rax)
	je	.LBB127_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB127_17
.LBB127_2:                              # %if.end
	movq	-24(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB127_6
# %bb.3:                                # %if.then1
	movq	-24(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB127_5
# %bb.4:                                # %if.then3
	movl	$1, -12(%rbp)
	jmp	.LBB127_17
.LBB127_5:                              # %if.end4
	jmp	.LBB127_6
.LBB127_6:                              # %if.end5
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB127_16
# %bb.7:                                # %if.then7
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB127_11
# %bb.8:                                # %if.then10
	movq	-24(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB127_10
# %bb.9:                                # %if.then13
	movl	$1, -12(%rbp)
	jmp	.LBB127_17
.LBB127_10:                             # %if.end14
	jmp	.LBB127_11
.LBB127_11:                             # %if.end15
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB127_15
# %bb.12:                               # %if.then19
	movq	-24(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB127_14
# %bb.13:                               # %if.then22
	movl	$1, -12(%rbp)
	jmp	.LBB127_17
.LBB127_14:                             # %if.end23
	jmp	.LBB127_15
.LBB127_15:                             # %if.end24
	jmp	.LBB127_16
.LBB127_16:                             # %if.end25
	movl	$0, -12(%rbp)
.LBB127_17:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1888840112, -28(%rbp)  # imm = 0x709569B0
	jne	.LBB127_19
.LBB127_18:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_19:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_18
.Lfunc_end127:
	.size	is_used_for_reference.64, .Lfunc_end127-is_used_for_reference.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.65
	.type	get_short_term_pic.65,@function
get_short_term_pic.65:                  # @get_short_term_pic.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1477247633, -28(%rbp)  # imm = 0x580D0291
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB128_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB128_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB128_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB128_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB128_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB128_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB128_23
.LBB128_7:                              # %if.end
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_8
.LBB128_8:                              # %if.end14
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_20
.LBB128_9:                              # %if.else
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB128_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB128_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB128_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB128_23
.LBB128_13:                             # %if.end34
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_14
.LBB128_14:                             # %if.end35
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB128_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB128_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB128_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB128_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB128_23
.LBB128_18:                             # %if.end56
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_19
.LBB128_19:                             # %if.end57
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_20
.LBB128_20:                             # %if.end58
                                        #   in Loop: Header=BB128_1 Depth=1
	jmp	.LBB128_21
.LBB128_21:                             # %for.inc
                                        #   in Loop: Header=BB128_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_1
.LBB128_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB128_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1477247633, -28(%rbp)  # imm = 0x580D0291
	jne	.LBB128_25
.LBB128_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_24
.Lfunc_end128:
	.size	get_short_term_pic.65, .Lfunc_end128-get_short_term_pic.65
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.66      # -- Begin function update_ref_list.66
	.p2align	4, 0x90
	.type	update_ref_list.66,@function
update_ref_list.66:                     # @update_ref_list.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$83550146, -12(%rbp)    # imm = 0x4FADFC2
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB129_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB129_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB129_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB129_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB129_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB129_4:                              # %if.end
                                        #   in Loop: Header=BB129_1 Depth=1
	jmp	.LBB129_5
.LBB129_5:                              # %for.inc
                                        #   in Loop: Header=BB129_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_1
.LBB129_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB129_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB129_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB129_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB129_7
.LBB129_9:                              # %while.end
	cmpl	$83550146, -12(%rbp)    # imm = 0x4FADFC2
	jne	.LBB129_11
.LBB129_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_10
.Lfunc_end129:
	.size	update_ref_list.66, .Lfunc_end129-update_ref_list.66
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.67 # -- Begin function replace_top_pic_with_frame.67
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.67,@function
replace_top_pic_with_frame.67:          # @replace_top_pic_with_frame.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$611039564, -32(%rbp)   # imm = 0x246BB94C
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB130_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB130_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB130_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB130_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB130_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB130_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB130_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB130_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB130_10
.LBB130_7:                              # %if.end14
                                        #   in Loop: Header=BB130_3 Depth=1
	jmp	.LBB130_8
.LBB130_8:                              # %for.inc
                                        #   in Loop: Header=BB130_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB130_3
.LBB130_9:                              # %for.end.loopexit
	jmp	.LBB130_10
.LBB130_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB130_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB130_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB130_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB130_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB130_15:                             # %if.end26
	jmp	.LBB130_16
.LBB130_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$611039564, -32(%rbp)   # imm = 0x246BB94C
	jne	.LBB130_18
.LBB130_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_17
.Lfunc_end130:
	.size	replace_top_pic_with_frame.67, .Lfunc_end130-replace_top_pic_with_frame.67
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.68
	.type	mm_assign_long_term_frame_idx.68,@function
mm_assign_long_term_frame_idx.68:       # @mm_assign_long_term_frame_idx.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1947367240, -32(%rbp)  # imm = 0x74127748
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB131_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB131_18
.LBB131_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB131_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB131_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB131_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB131_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB131_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB131_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB131_15
.LBB131_7:                              # %if.end
                                        #   in Loop: Header=BB131_3 Depth=1
	jmp	.LBB131_8
.LBB131_8:                              # %if.end8
                                        #   in Loop: Header=BB131_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB131_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB131_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB131_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB131_15
.LBB131_11:                             # %if.end20
                                        #   in Loop: Header=BB131_3 Depth=1
	jmp	.LBB131_12
.LBB131_12:                             # %if.end21
                                        #   in Loop: Header=BB131_3 Depth=1
	jmp	.LBB131_13
.LBB131_13:                             # %for.inc
                                        #   in Loop: Header=BB131_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_3
.LBB131_14:                             # %for.end.loopexit
	jmp	.LBB131_15
.LBB131_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB131_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB131_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB131_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1947367240, -32(%rbp)  # imm = 0x74127748
	jne	.LBB131_20
.LBB131_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_19
.Lfunc_end131:
	.size	mm_assign_long_term_frame_idx.68, .Lfunc_end131-mm_assign_long_term_frame_idx.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.69
	.type	reorder_short_term.69,@function
reorder_short_term.69:                  # @reorder_short_term.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1484256907, -44(%rbp)  # imm = 0x5877F68B
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB132_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB132_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB132_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB132_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_1
.LBB132_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB132_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB132_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB132_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB132_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB132_10
.LBB132_9:                              # %if.then17
                                        #   in Loop: Header=BB132_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB132_10:                             # %if.end
                                        #   in Loop: Header=BB132_5 Depth=1
	jmp	.LBB132_11
.LBB132_11:                             # %if.end23
                                        #   in Loop: Header=BB132_5 Depth=1
	jmp	.LBB132_12
.LBB132_12:                             # %for.inc24
                                        #   in Loop: Header=BB132_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB132_5
.LBB132_13:                             # %for.end26
	cmpl	$1484256907, -44(%rbp)  # imm = 0x5877F68B
	jne	.LBB132_15
.LBB132_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_14
.Lfunc_end132:
	.size	reorder_short_term.69, .Lfunc_end132-reorder_short_term.69
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.70      # -- Begin function alloc_colocated.70
	.p2align	4, 0x90
	.type	alloc_colocated.70,@function
alloc_colocated.70:                     # @alloc_colocated.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$80762644, -32(%rbp)    # imm = 0x4D05714
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB133_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB133_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB133_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB133_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$80762644, -32(%rbp)    # imm = 0x4D05714
	jne	.LBB133_6
.LBB133_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_5
.Lfunc_end133:
	.size	alloc_colocated.70, .Lfunc_end133-alloc_colocated.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function output_one_frame_from_dpb.71
	.type	output_one_frame_from_dpb.71,@function
output_one_frame_from_dpb.71:           # @output_one_frame_from_dpb.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1973272647, -12(%rbp)  # imm = 0x759DC047
	cmpl	$1, dpb+28
	jae	.LBB134_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.30, %rdi
	movl	$150, %esi
	callq	error
.LBB134_2:                              # %if.end
	leaq	-8(%rbp), %rdi
	leaq	-4(%rbp), %rsi
	callq	get_smallest_poc
	cmpl	$-1, -4(%rbp)
	jne	.LBB134_4
# %bb.3:                                # %if.then2
	movabsq	$.L.str.31, %rdi
	movl	$150, %esi
	callq	error
.LBB134_4:                              # %if.end3
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	p_dec, %esi
	callq	write_stored_frame
	movl	dpb+40, %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB134_6
# %bb.5:                                # %if.then5
	movabsq	$.L.str.32, %rdi
	movl	$150, %esi
	callq	error
.LBB134_6:                              # %if.end6
	movl	-8(%rbp), %eax
	movl	%eax, dpb+40
	movq	dpb, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	callq	is_used_for_reference
	cmpl	$0, %eax
	jne	.LBB134_8
# %bb.7:                                # %if.then9
	movl	-4(%rbp), %edi
	callq	remove_frame_from_dpb
.LBB134_8:                              # %if.end10
	cmpl	$1973272647, -12(%rbp)  # imm = 0x759DC047
	jne	.LBB134_10
.LBB134_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_9
.Lfunc_end134:
	.size	output_one_frame_from_dpb.71, .Lfunc_end134-output_one_frame_from_dpb.71
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.72
	.type	unmark_long_term_field_for_reference_by_frame_idx.72,@function
unmark_long_term_field_for_reference_by_frame_idx.72: # @unmark_long_term_field_for_reference_by_frame_idx.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1984605522, -28(%rbp)  # imm = 0x764AAD52
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB135_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB135_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB135_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB135_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-24(%rbp), %eax
	jne	.LBB135_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB135_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB135_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB135_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB135_23
.LBB135_8:                              # %if.else
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB135_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB135_22
.LBB135_10:                             # %if.else21
                                        #   in Loop: Header=BB135_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB135_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB135_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB135_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB135_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB135_15
.LBB135_14:                             # %if.then29
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB135_15:                             # %if.end32
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_17
.LBB135_16:                             # %if.else33
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB135_17:                             # %if.end36
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_21
.LBB135_18:                             # %if.else37
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB135_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB135_20:                             # %if.end45
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_21
.LBB135_21:                             # %if.end46
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_22
.LBB135_22:                             # %if.end47
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_23
.LBB135_23:                             # %if.end48
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_24
.LBB135_24:                             # %if.end49
                                        #   in Loop: Header=BB135_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB135_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB135_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB135_42
.LBB135_27:                             # %if.else59
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB135_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB135_41
.LBB135_29:                             # %if.else67
                                        #   in Loop: Header=BB135_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB135_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB135_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB135_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB135_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB135_34
.LBB135_33:                             # %if.then78
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB135_34:                             # %if.end81
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_36
.LBB135_35:                             # %if.else82
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB135_36:                             # %if.end85
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_40
.LBB135_37:                             # %if.else86
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB135_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB135_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB135_39:                             # %if.end95
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_40
.LBB135_40:                             # %if.end96
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_41
.LBB135_41:                             # %if.end97
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_42
.LBB135_42:                             # %if.end98
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_43
.LBB135_43:                             # %if.end99
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_44
.LBB135_44:                             # %if.end100
                                        #   in Loop: Header=BB135_3 Depth=1
	jmp	.LBB135_45
.LBB135_45:                             # %for.inc
                                        #   in Loop: Header=BB135_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB135_3
.LBB135_46:                             # %for.end
	cmpl	$1984605522, -28(%rbp)  # imm = 0x764AAD52
	jne	.LBB135_48
.LBB135_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_47
.Lfunc_end135:
	.size	unmark_long_term_field_for_reference_by_frame_idx.72, .Lfunc_end135-unmark_long_term_field_for_reference_by_frame_idx.72
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.73
	.type	mm_assign_long_term_frame_idx.73,@function
mm_assign_long_term_frame_idx.73:       # @mm_assign_long_term_frame_idx.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1194866356, -32(%rbp)  # imm = 0x473836B4
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB136_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB136_18
.LBB136_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB136_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB136_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB136_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB136_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB136_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB136_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB136_15
.LBB136_7:                              # %if.end
                                        #   in Loop: Header=BB136_3 Depth=1
	jmp	.LBB136_8
.LBB136_8:                              # %if.end8
                                        #   in Loop: Header=BB136_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB136_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB136_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB136_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB136_15
.LBB136_11:                             # %if.end20
                                        #   in Loop: Header=BB136_3 Depth=1
	jmp	.LBB136_12
.LBB136_12:                             # %if.end21
                                        #   in Loop: Header=BB136_3 Depth=1
	jmp	.LBB136_13
.LBB136_13:                             # %for.inc
                                        #   in Loop: Header=BB136_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB136_3
.LBB136_14:                             # %for.end.loopexit
	jmp	.LBB136_15
.LBB136_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB136_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB136_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB136_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1194866356, -32(%rbp)  # imm = 0x473836B4
	jne	.LBB136_20
.LBB136_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_19
.Lfunc_end136:
	.size	mm_assign_long_term_frame_idx.73, .Lfunc_end136-mm_assign_long_term_frame_idx.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.74
	.type	mm_unmark_long_term_for_reference.74,@function
mm_unmark_long_term_for_reference.74:   # @mm_unmark_long_term_for_reference.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$379957869, -12(%rbp)   # imm = 0x16A5B26D
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB137_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB137_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB137_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB137_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB137_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB137_7:                              # %if.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_8
.LBB137_8:                              # %if.end14
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_24
.LBB137_9:                              # %if.else
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB137_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB137_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB137_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB137_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB137_14:                             # %if.end57
	jmp	.LBB137_27
.LBB137_15:                             # %if.end58
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_16
.LBB137_16:                             # %if.end59
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB137_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB137_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB137_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB137_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB137_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB137_21:                             # %if.end106
	jmp	.LBB137_27
.LBB137_22:                             # %if.end107
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_23
.LBB137_23:                             # %if.end108
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_24
.LBB137_24:                             # %if.end109
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_25
.LBB137_25:                             # %for.inc
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_1
.LBB137_26:                             # %for.end.loopexit
	jmp	.LBB137_27
.LBB137_27:                             # %for.end
	cmpl	$379957869, -12(%rbp)   # imm = 0x16A5B26D
	jne	.LBB137_29
.LBB137_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_28
.Lfunc_end137:
	.size	mm_unmark_long_term_for_reference.74, .Lfunc_end137-mm_unmark_long_term_for_reference.74
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.75    # -- Begin function compute_colocated.75
	.p2align	4, 0x90
	.type	compute_colocated.75,@function
compute_colocated.75:                   # @compute_colocated.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$605049981, -72(%rbp)   # imm = 0x2410547D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB138_11
.LBB138_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB138_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB138_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB138_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB138_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB138_8
.LBB138_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -40(%rbp)
.LBB138_8:                              # %if.end
	jmp	.LBB138_9
.LBB138_9:                              # %if.end20
	jmp	.LBB138_10
.LBB138_10:                             # %if.end21
	jmp	.LBB138_11
.LBB138_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB138_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB138_29
.LBB138_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB138_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB138_14 Depth=1
	movl	$0, -16(%rbp)
.LBB138_16:                             # %for.cond27
                                        #   Parent Loop BB138_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB138_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB138_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB138_22
.LBB138_21:                             # %if.else160
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB138_22:                             # %if.end283
                                        #   in Loop: Header=BB138_16 Depth=2
	jmp	.LBB138_24
.LBB138_23:                             # %if.else284
                                        #   in Loop: Header=BB138_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB138_24:                             # %if.end391
                                        #   in Loop: Header=BB138_16 Depth=2
	jmp	.LBB138_25
.LBB138_25:                             # %for.inc
                                        #   in Loop: Header=BB138_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_16
.LBB138_26:                             # %for.end
                                        #   in Loop: Header=BB138_14 Depth=1
	jmp	.LBB138_27
.LBB138_27:                             # %for.inc392
                                        #   in Loop: Header=BB138_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_14
.LBB138_28:                             # %for.end394
	jmp	.LBB138_29
.LBB138_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB138_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_241
.LBB138_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB138_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	$0, -12(%rbp)
.LBB138_34:                             # %for.cond408
                                        #   Parent Loop BB138_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB138_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_39
.LBB138_38:                             # %cond.false
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_39:                             # %cond.end
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_42
.LBB138_41:                             # %cond.false427
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_42:                             # %cond.end429
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_45
.LBB138_44:                             # %cond.false447
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_45:                             # %cond.end449
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_48
.LBB138_47:                             # %cond.false457
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_48:                             # %cond.end459
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_51
.LBB138_50:                             # %cond.false477
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_51:                             # %cond.end479
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_54
.LBB138_53:                             # %cond.false487
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_54:                             # %cond.end489
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_57
.LBB138_56:                             # %cond.false507
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_57:                             # %cond.end509
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_60
.LBB138_59:                             # %cond.false517
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_60:                             # %cond.end519
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_63
.LBB138_62:                             # %cond.false537
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_63:                             # %cond.end539
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_66
.LBB138_65:                             # %cond.false547
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_66:                             # %cond.end549
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB138_81
.LBB138_68:                             # %if.else569
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_71
.LBB138_70:                             # %cond.false576
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_71:                             # %cond.end578
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_74
.LBB138_73:                             # %cond.false586
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_74:                             # %cond.end588
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_77
.LBB138_76:                             # %cond.false604
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_77:                             # %cond.end606
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_80
.LBB138_79:                             # %cond.false614
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_80:                             # %cond.end616
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB138_81:                             # %if.end626
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_84
.LBB138_83:                             # %cond.false633
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_84:                             # %cond.end635
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_87
.LBB138_86:                             # %cond.false643
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_87:                             # %cond.end645
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB138_102
.LBB138_89:                             # %if.else665
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_92
.LBB138_91:                             # %cond.false672
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_92:                             # %cond.end674
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_95
.LBB138_94:                             # %cond.false682
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_95:                             # %cond.end684
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_98
.LBB138_97:                             # %cond.false700
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_98:                             # %cond.end702
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_101
.LBB138_100:                            # %cond.false710
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_101:                            # %cond.end712
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB138_102:                            # %if.end722
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB138_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_112
.LBB138_107:                            # %lor.rhs
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_111:                            # %land.end
                                        #   in Loop: Header=BB138_34 Depth=2
.LBB138_112:                            # %lor.end
                                        #   in Loop: Header=BB138_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_113:                            # %if.end814
                                        #   in Loop: Header=BB138_34 Depth=2
	jmp	.LBB138_236
.LBB138_114:                            # %if.else815
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_117
.LBB138_116:                            # %cond.false822
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_117:                            # %cond.end824
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_120
.LBB138_119:                            # %cond.false832
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_120:                            # %cond.end834
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_123
.LBB138_122:                            # %cond.false851
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_123:                            # %cond.end853
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_126
.LBB138_125:                            # %cond.false861
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_126:                            # %cond.end863
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_129
.LBB138_128:                            # %cond.false881
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_129:                            # %cond.end883
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_132
.LBB138_131:                            # %cond.false891
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_132:                            # %cond.end893
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_135
.LBB138_134:                            # %cond.false911
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_135:                            # %cond.end913
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_138
.LBB138_137:                            # %cond.false921
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_138:                            # %cond.end923
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_141
.LBB138_140:                            # %cond.false941
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_141:                            # %cond.end943
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_144
.LBB138_143:                            # %cond.false951
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_144:                            # %cond.end953
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_147
.LBB138_146:                            # %cond.false968
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_147:                            # %cond.end970
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_150
.LBB138_149:                            # %cond.false978
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_150:                            # %cond.end980
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_153
.LBB138_152:                            # %cond.false996
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_153:                            # %cond.end998
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_156
.LBB138_155:                            # %cond.false1006
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_156:                            # %cond.end1008
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_159
.LBB138_158:                            # %cond.false1023
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_159:                            # %cond.end1025
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_162
.LBB138_161:                            # %cond.false1033
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_162:                            # %cond.end1035
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB138_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_172
.LBB138_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_171:                            # %land.end1133
                                        #   in Loop: Header=BB138_34 Depth=2
.LBB138_172:                            # %lor.end1134
                                        #   in Loop: Header=BB138_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_173:                            # %if.end1142
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_176
.LBB138_175:                            # %cond.false1149
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_176:                            # %cond.end1151
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_179
.LBB138_178:                            # %cond.false1159
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_179:                            # %cond.end1161
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_182
.LBB138_181:                            # %cond.false1178
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_182:                            # %cond.end1180
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_185
.LBB138_184:                            # %cond.false1188
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_185:                            # %cond.end1190
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_188
.LBB138_187:                            # %cond.false1208
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_188:                            # %cond.end1210
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_191
.LBB138_190:                            # %cond.false1218
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_191:                            # %cond.end1220
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_194
.LBB138_193:                            # %cond.false1238
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_194:                            # %cond.end1240
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_197
.LBB138_196:                            # %cond.false1248
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_197:                            # %cond.end1250
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_200
.LBB138_199:                            # %cond.false1268
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_200:                            # %cond.end1270
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_203
.LBB138_202:                            # %cond.false1278
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_203:                            # %cond.end1280
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_206
.LBB138_205:                            # %cond.false1295
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_206:                            # %cond.end1297
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_209
.LBB138_208:                            # %cond.false1305
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_209:                            # %cond.end1307
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_212
.LBB138_211:                            # %cond.false1323
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_212:                            # %cond.end1325
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_215
.LBB138_214:                            # %cond.false1333
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_215:                            # %cond.end1335
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_218
.LBB138_217:                            # %cond.false1350
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_218:                            # %cond.end1352
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_221
.LBB138_220:                            # %cond.false1360
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_221:                            # %cond.end1362
                                        #   in Loop: Header=BB138_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB138_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_231
.LBB138_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB138_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_230:                            # %land.end1460
                                        #   in Loop: Header=BB138_34 Depth=2
.LBB138_231:                            # %lor.end1461
                                        #   in Loop: Header=BB138_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_232:                            # %if.end1469
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB138_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB138_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB138_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB138_235:                            # %if.end1522
                                        #   in Loop: Header=BB138_34 Depth=2
	jmp	.LBB138_236
.LBB138_236:                            # %if.end1523
                                        #   in Loop: Header=BB138_34 Depth=2
	jmp	.LBB138_237
.LBB138_237:                            # %for.inc1524
                                        #   in Loop: Header=BB138_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_34
.LBB138_238:                            # %for.end1526
                                        #   in Loop: Header=BB138_32 Depth=1
	jmp	.LBB138_239
.LBB138_239:                            # %for.inc1527
                                        #   in Loop: Header=BB138_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_32
.LBB138_240:                            # %for.end1529
	jmp	.LBB138_241
.LBB138_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB138_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB138_259
.LBB138_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB138_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB138_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB138_245 Depth=1
	movl	$0, -16(%rbp)
.LBB138_247:                            # %for.cond1546
                                        #   Parent Loop BB138_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB138_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB138_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB138_252
.LBB138_251:                            # %if.else1699
                                        #   in Loop: Header=BB138_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB138_252:                            # %if.end1829
                                        #   in Loop: Header=BB138_247 Depth=2
	jmp	.LBB138_253
.LBB138_253:                            # %if.end1830
                                        #   in Loop: Header=BB138_247 Depth=2
	jmp	.LBB138_254
.LBB138_254:                            # %for.inc1831
                                        #   in Loop: Header=BB138_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_247
.LBB138_255:                            # %for.end1833
                                        #   in Loop: Header=BB138_245 Depth=1
	jmp	.LBB138_256
.LBB138_256:                            # %for.inc1834
                                        #   in Loop: Header=BB138_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_245
.LBB138_257:                            # %for.end1836
	jmp	.LBB138_258
.LBB138_258:                            # %if.end1837
	jmp	.LBB138_259
.LBB138_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB138_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB138_260 Depth=1
	movl	$0, -16(%rbp)
.LBB138_262:                            # %for.cond1845
                                        #   Parent Loop BB138_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB138_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB138_314
.LBB138_265:                            # %if.then1856
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_268
.LBB138_267:                            # %cond.false1863
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_268:                            # %cond.end1865
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_271
.LBB138_270:                            # %cond.false1873
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_271:                            # %cond.end1875
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_274
.LBB138_273:                            # %cond.false1893
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_274:                            # %cond.end1895
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_277
.LBB138_276:                            # %cond.false1903
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_277:                            # %cond.end1905
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_280
.LBB138_279:                            # %cond.false1923
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_280:                            # %cond.end1925
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_283
.LBB138_282:                            # %cond.false1933
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_283:                            # %cond.end1935
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_286
.LBB138_285:                            # %cond.false1953
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_286:                            # %cond.end1955
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_289
.LBB138_288:                            # %cond.false1963
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_289:                            # %cond.end1965
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_292
.LBB138_291:                            # %cond.false1983
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_292:                            # %cond.end1985
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_295
.LBB138_294:                            # %cond.false1993
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_295:                            # %cond.end1995
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_298
.LBB138_297:                            # %cond.false2011
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_298:                            # %cond.end2013
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_301
.LBB138_300:                            # %cond.false2021
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_301:                            # %cond.end2023
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_304
.LBB138_303:                            # %cond.false2039
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_304:                            # %cond.end2041
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_307
.LBB138_306:                            # %cond.false2049
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_307:                            # %cond.end2051
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_310
.LBB138_309:                            # %cond.false2067
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_310:                            # %cond.end2069
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB138_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB138_313
.LBB138_312:                            # %cond.false2077
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB138_313:                            # %cond.end2079
                                        #   in Loop: Header=BB138_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB138_315
.LBB138_314:                            # %if.else2089
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB138_315:                            # %if.end2194
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB138_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB138_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB138_325
.LBB138_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB138_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB138_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB138_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB138_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB138_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB138_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB138_324:                            # %land.end2285
                                        #   in Loop: Header=BB138_262 Depth=2
.LBB138_325:                            # %lor.end2286
                                        #   in Loop: Header=BB138_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB138_326:                            # %if.end2295
                                        #   in Loop: Header=BB138_262 Depth=2
	jmp	.LBB138_327
.LBB138_327:                            # %for.inc2296
                                        #   in Loop: Header=BB138_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_262
.LBB138_328:                            # %for.end2298
                                        #   in Loop: Header=BB138_260 Depth=1
	jmp	.LBB138_329
.LBB138_329:                            # %for.inc2299
                                        #   in Loop: Header=BB138_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_260
.LBB138_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB138_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB138_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB138_332 Depth=1
	movl	$0, -16(%rbp)
.LBB138_334:                            # %for.cond2312
                                        #   Parent Loop BB138_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB138_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB138_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB138_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB138_340
.LBB138_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB138_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB138_341
.LBB138_340:                            # %if.then2342
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB138_345
.LBB138_341:                            # %if.else2363
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB138_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB138_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB138_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB138_344:                            # %if.end2394
                                        #   in Loop: Header=BB138_334 Depth=2
	jmp	.LBB138_345
.LBB138_345:                            # %if.end2395
                                        #   in Loop: Header=BB138_334 Depth=2
	jmp	.LBB138_346
.LBB138_346:                            # %for.inc2396
                                        #   in Loop: Header=BB138_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_334
.LBB138_347:                            # %for.end2398
                                        #   in Loop: Header=BB138_332 Depth=1
	jmp	.LBB138_348
.LBB138_348:                            # %for.inc2399
                                        #   in Loop: Header=BB138_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_332
.LBB138_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB138_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB138_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB138_350 Depth=1
	movl	$0, -16(%rbp)
.LBB138_352:                            # %for.cond2409
                                        #   Parent Loop BB138_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB138_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB138_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB138_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_360
.LBB138_356:                            # %cond.false2429
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_359
.LBB138_358:                            # %cond.false2441
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_359:                            # %cond.end2450
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_360:                            # %cond.end2452
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB138_377
.LBB138_361:                            # %if.else2454
                                        #   in Loop: Header=BB138_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB138_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_368
.LBB138_364:                            # %cond.false2468
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_367
.LBB138_366:                            # %cond.false2480
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_367:                            # %cond.end2489
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_368:                            # %cond.end2491
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB138_376
.LBB138_369:                            # %if.else2493
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_375
.LBB138_371:                            # %cond.false2504
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_374
.LBB138_373:                            # %cond.false2516
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_374:                            # %cond.end2525
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_375:                            # %cond.end2527
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB138_376:                            # %if.end2529
                                        #   in Loop: Header=BB138_352 Depth=2
	jmp	.LBB138_377
.LBB138_377:                            # %if.end2530
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB138_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB138_383
.LBB138_379:                            # %cond.false2546
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB138_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$127, %eax
	jmp	.LBB138_382
.LBB138_381:                            # %cond.false2562
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB138_382:                            # %cond.end2575
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_383:                            # %cond.end2577
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB138_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB138_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB138_390
.LBB138_386:                            # %cond.false2592
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB138_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB138_389
.LBB138_388:                            # %cond.false2599
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB138_389:                            # %cond.end2603
                                        #   in Loop: Header=BB138_352 Depth=2
.LBB138_390:                            # %cond.end2605
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB138_392
.LBB138_391:                            # %if.else2611
                                        #   in Loop: Header=BB138_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB138_392:                            # %if.end2617
                                        #   in Loop: Header=BB138_352 Depth=2
	jmp	.LBB138_393
.LBB138_393:                            # %for.inc2618
                                        #   in Loop: Header=BB138_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB138_352
.LBB138_394:                            # %for.end2620
                                        #   in Loop: Header=BB138_350 Depth=1
	jmp	.LBB138_395
.LBB138_395:                            # %for.inc2621
                                        #   in Loop: Header=BB138_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB138_350
.LBB138_396:                            # %for.end2623
	jmp	.LBB138_397
.LBB138_397:                            # %if.end2624
	cmpl	$605049981, -72(%rbp)   # imm = 0x2410547D
	jne	.LBB138_399
.LBB138_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_398
.Lfunc_end138:
	.size	compute_colocated.75, .Lfunc_end138-compute_colocated.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.76
	.type	compare_fs_by_lt_pic_idx_asc.76,@function
compare_fs_by_lt_pic_idx_asc.76:        # @compare_fs_by_lt_pic_idx_asc.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1456094605, -16(%rbp)  # imm = 0x56CA3D8D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB139_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB139_5
.LBB139_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB139_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB139_5
.LBB139_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB139_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1456094605, -16(%rbp)  # imm = 0x56CA3D8D
	jne	.LBB139_7
.LBB139_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_6
.Lfunc_end139:
	.size	compare_fs_by_lt_pic_idx_asc.76, .Lfunc_end139-compare_fs_by_lt_pic_idx_asc.76
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.77
	.type	get_short_term_pic.77,@function
get_short_term_pic.77:                  # @get_short_term_pic.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1140742227, -28(%rbp)  # imm = 0x43FE5853
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB140_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB140_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB140_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB140_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB140_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB140_23
.LBB140_7:                              # %if.end
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_8
.LBB140_8:                              # %if.end14
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_20
.LBB140_9:                              # %if.else
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB140_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB140_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB140_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB140_23
.LBB140_13:                             # %if.end34
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_14
.LBB140_14:                             # %if.end35
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB140_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB140_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB140_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB140_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB140_23
.LBB140_18:                             # %if.end56
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_19
.LBB140_19:                             # %if.end57
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_20
.LBB140_20:                             # %if.end58
                                        #   in Loop: Header=BB140_1 Depth=1
	jmp	.LBB140_21
.LBB140_21:                             # %for.inc
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_1
.LBB140_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB140_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1140742227, -28(%rbp)  # imm = 0x43FE5853
	jne	.LBB140_25
.LBB140_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_24
.Lfunc_end140:
	.size	get_short_term_pic.77, .Lfunc_end140-get_short_term_pic.77
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.78
	.type	unmark_long_term_frame_for_reference_by_frame_idx.78,@function
unmark_long_term_frame_for_reference_by_frame_idx.78: # @unmark_long_term_frame_for_reference_by_frame_idx.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1586209025, -12(%rbp)  # imm = 0x5E8BA101
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB141_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB141_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB141_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB141_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB141_4:                              # %if.end
                                        #   in Loop: Header=BB141_1 Depth=1
	jmp	.LBB141_5
.LBB141_5:                              # %for.inc
                                        #   in Loop: Header=BB141_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB141_1
.LBB141_6:                              # %for.end
	cmpl	$1586209025, -12(%rbp)  # imm = 0x5E8BA101
	jne	.LBB141_8
.LBB141_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_7
.Lfunc_end141:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.78, .Lfunc_end141-unmark_long_term_frame_for_reference_by_frame_idx.78
	.cfi_endproc
                                        # -- End function
	.globl	update_ref_list.79      # -- Begin function update_ref_list.79
	.p2align	4, 0x90
	.type	update_ref_list.79,@function
update_ref_list.79:                     # @update_ref_list.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$974931175, -12(%rbp)   # imm = 0x3A1C44E7
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB142_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB142_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB142_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	is_short_term_reference
	cmpl	$0, %eax
	je	.LBB142_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB142_1 Depth=1
	movq	dpb, %rax
	movl	-8(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -4(%rbp)
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
.LBB142_4:                              # %if.end
                                        #   in Loop: Header=BB142_1 Depth=1
	jmp	.LBB142_5
.LBB142_5:                              # %for.inc
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_1
.LBB142_6:                              # %for.end
	movl	-4(%rbp), %eax
	movl	%eax, dpb+32
.LBB142_7:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB142_9
# %bb.8:                                # %while.body
                                        #   in Loop: Header=BB142_7 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movl	%ecx, %edx
	addl	$1, %edx
	movl	%edx, -4(%rbp)
	movl	%ecx, %ecx
	movq	$0, (%rax,%rcx,8)
	jmp	.LBB142_7
.LBB142_9:                              # %while.end
	cmpl	$974931175, -12(%rbp)   # imm = 0x3A1C44E7
	jne	.LBB142_11
.LBB142_10:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_10
.Lfunc_end142:
	.size	update_ref_list.79, .Lfunc_end142-update_ref_list.79
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_short_term_reference.80
	.type	is_short_term_reference.80,@function
is_short_term_reference.80:             # @is_short_term_reference.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$273756779, -24(%rbp)   # imm = 0x1051326B
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB143_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB143_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB143_18
.LBB143_4:                              # %if.end
	jmp	.LBB143_5
.LBB143_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB143_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB143_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB143_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB143_18
.LBB143_10:                             # %if.end17
	jmp	.LBB143_11
.LBB143_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB143_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB143_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB143_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB143_18
.LBB143_15:                             # %if.end30
	jmp	.LBB143_16
.LBB143_16:                             # %if.end31
	jmp	.LBB143_17
.LBB143_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB143_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$273756779, -24(%rbp)   # imm = 0x1051326B
	jne	.LBB143_20
.LBB143_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_19
.Lfunc_end143:
	.size	is_short_term_reference.80, .Lfunc_end143-is_short_term_reference.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.81
	.type	get_long_term_pic.81,@function
get_long_term_pic.81:                   # @get_long_term_pic.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1205503664, -28(%rbp)  # imm = 0x47DA86B0
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB144_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB144_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB144_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB144_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB144_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB144_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB144_23
.LBB144_7:                              # %if.end
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_8
.LBB144_8:                              # %if.end14
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_20
.LBB144_9:                              # %if.else
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB144_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB144_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB144_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB144_23
.LBB144_13:                             # %if.end34
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_14
.LBB144_14:                             # %if.end35
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB144_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB144_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB144_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB144_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB144_23
.LBB144_18:                             # %if.end56
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_19
.LBB144_19:                             # %if.end57
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_20
.LBB144_20:                             # %if.end58
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_21
.LBB144_21:                             # %for.inc
                                        #   in Loop: Header=BB144_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB144_1
.LBB144_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB144_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$1205503664, -28(%rbp)  # imm = 0x47DA86B0
	jne	.LBB144_25
.LBB144_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_24
.Lfunc_end144:
	.size	get_long_term_pic.81, .Lfunc_end144-get_long_term_pic.81
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.82 # -- Begin function replace_top_pic_with_frame.82
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.82,@function
replace_top_pic_with_frame.82:          # @replace_top_pic_with_frame.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1802304689, -32(%rbp)  # imm = 0x6B6CFCB1
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB145_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB145_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB145_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB145_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB145_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB145_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB145_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB145_10
.LBB145_7:                              # %if.end14
                                        #   in Loop: Header=BB145_3 Depth=1
	jmp	.LBB145_8
.LBB145_8:                              # %for.inc
                                        #   in Loop: Header=BB145_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_3
.LBB145_9:                              # %for.end.loopexit
	jmp	.LBB145_10
.LBB145_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB145_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB145_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB145_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB145_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB145_15:                             # %if.end26
	jmp	.LBB145_16
.LBB145_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1802304689, -32(%rbp)  # imm = 0x6B6CFCB1
	jne	.LBB145_18
.LBB145_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_17
.Lfunc_end145:
	.size	replace_top_pic_with_frame.82, .Lfunc_end145-replace_top_pic_with_frame.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.83
	.type	compare_pic_by_poc_asc.83,@function
compare_pic_by_poc_asc.83:              # @compare_pic_by_poc_asc.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1335268625, -16(%rbp)  # imm = 0x4F969511
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB146_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB146_5
.LBB146_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB146_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB146_5
.LBB146_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB146_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1335268625, -16(%rbp)  # imm = 0x4F969511
	jne	.LBB146_7
.LBB146_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_6
.Lfunc_end146:
	.size	compare_pic_by_poc_asc.83, .Lfunc_end146-compare_pic_by_poc_asc.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.84
	.type	gen_pic_list_from_frame_list.84,@function
gen_pic_list_from_frame_list.84:        # @gen_pic_list_from_frame_list.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1882616553, -64(%rbp)  # imm = 0x703672E9
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB147_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB147_3
.LBB147_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB147_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB147_28
# %bb.4:                                # %if.then1
	jmp	.LBB147_5
.LBB147_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_9 Depth 2
                                        #     Child Loop BB147_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB147_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB147_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB147_7:                              # %lor.end
                                        #   in Loop: Header=BB147_5 Depth=1
	testb	$1, %al
	jne	.LBB147_8
	jmp	.LBB147_27
.LBB147_8:                              # %while.body
                                        #   in Loop: Header=BB147_5 Depth=1
	jmp	.LBB147_9
.LBB147_9:                              # %for.cond
                                        #   Parent Loop BB147_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB147_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB147_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB147_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB147_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB147_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB147_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_17
.LBB147_13:                             # %if.end17
                                        #   in Loop: Header=BB147_9 Depth=2
	jmp	.LBB147_14
.LBB147_14:                             # %if.end18
                                        #   in Loop: Header=BB147_9 Depth=2
	jmp	.LBB147_15
.LBB147_15:                             # %for.inc
                                        #   in Loop: Header=BB147_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_9
.LBB147_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB147_5 Depth=1
	jmp	.LBB147_17
.LBB147_17:                             # %for.end
                                        #   in Loop: Header=BB147_5 Depth=1
	jmp	.LBB147_18
.LBB147_18:                             # %for.cond20
                                        #   Parent Loop BB147_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB147_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB147_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB147_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB147_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB147_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB147_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_26
.LBB147_22:                             # %if.end41
                                        #   in Loop: Header=BB147_18 Depth=2
	jmp	.LBB147_23
.LBB147_23:                             # %if.end42
                                        #   in Loop: Header=BB147_18 Depth=2
	jmp	.LBB147_24
.LBB147_24:                             # %for.inc43
                                        #   in Loop: Header=BB147_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_18
.LBB147_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB147_5 Depth=1
	jmp	.LBB147_26
.LBB147_26:                             # %for.end45
                                        #   in Loop: Header=BB147_5 Depth=1
	jmp	.LBB147_5
.LBB147_27:                             # %while.end
	jmp	.LBB147_28
.LBB147_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB147_53
# %bb.29:                               # %if.then48
	jmp	.LBB147_30
.LBB147_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_34 Depth 2
                                        #     Child Loop BB147_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB147_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB147_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB147_32:                             # %lor.end53
                                        #   in Loop: Header=BB147_30 Depth=1
	testb	$1, %al
	jne	.LBB147_33
	jmp	.LBB147_52
.LBB147_33:                             # %while.body54
                                        #   in Loop: Header=BB147_30 Depth=1
	jmp	.LBB147_34
.LBB147_34:                             # %for.cond55
                                        #   Parent Loop BB147_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB147_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB147_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB147_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB147_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB147_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB147_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_42
.LBB147_38:                             # %if.end77
                                        #   in Loop: Header=BB147_34 Depth=2
	jmp	.LBB147_39
.LBB147_39:                             # %if.end78
                                        #   in Loop: Header=BB147_34 Depth=2
	jmp	.LBB147_40
.LBB147_40:                             # %for.inc79
                                        #   in Loop: Header=BB147_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB147_34
.LBB147_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB147_30 Depth=1
	jmp	.LBB147_42
.LBB147_42:                             # %for.end81
                                        #   in Loop: Header=BB147_30 Depth=1
	jmp	.LBB147_43
.LBB147_43:                             # %for.cond82
                                        #   Parent Loop BB147_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB147_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB147_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB147_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB147_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB147_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB147_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_51
.LBB147_47:                             # %if.end104
                                        #   in Loop: Header=BB147_43 Depth=2
	jmp	.LBB147_48
.LBB147_48:                             # %if.end105
                                        #   in Loop: Header=BB147_43 Depth=2
	jmp	.LBB147_49
.LBB147_49:                             # %for.inc106
                                        #   in Loop: Header=BB147_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB147_43
.LBB147_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB147_30 Depth=1
	jmp	.LBB147_51
.LBB147_51:                             # %for.end108
                                        #   in Loop: Header=BB147_30 Depth=1
	jmp	.LBB147_30
.LBB147_52:                             # %while.end109
	jmp	.LBB147_53
.LBB147_53:                             # %if.end110
	cmpl	$1882616553, -64(%rbp)  # imm = 0x703672E9
	jne	.LBB147_55
.LBB147_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_54
.Lfunc_end147:
	.size	gen_pic_list_from_frame_list.84, .Lfunc_end147-gen_pic_list_from_frame_list.84
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function is_long_term_reference.85
	.type	is_long_term_reference.85,@function
is_long_term_reference.85:              # @is_long_term_reference.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$423489266, -24(%rbp)   # imm = 0x193DEEF2
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	cmpl	$3, (%rax)
	jne	.LBB148_5
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB148_4
# %bb.2:                                # %land.lhs.true
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB148_4
# %bb.3:                                # %if.then3
	movl	$1, -20(%rbp)
	jmp	.LBB148_18
.LBB148_4:                              # %if.end
	jmp	.LBB148_5
.LBB148_5:                              # %if.end4
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB148_17
# %bb.6:                                # %if.then6
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB148_11
# %bb.7:                                # %if.then9
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB148_10
# %bb.8:                                # %land.lhs.true12
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB148_10
# %bb.9:                                # %if.then16
	movl	$1, -20(%rbp)
	jmp	.LBB148_18
.LBB148_10:                             # %if.end17
	jmp	.LBB148_11
.LBB148_11:                             # %if.end18
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB148_16
# %bb.12:                               # %if.then22
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB148_15
# %bb.13:                               # %land.lhs.true25
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB148_15
# %bb.14:                               # %if.then29
	movl	$1, -20(%rbp)
	jmp	.LBB148_18
.LBB148_15:                             # %if.end30
	jmp	.LBB148_16
.LBB148_16:                             # %if.end31
	jmp	.LBB148_17
.LBB148_17:                             # %if.end32
	movl	$0, -20(%rbp)
.LBB148_18:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$423489266, -24(%rbp)   # imm = 0x193DEEF2
	jne	.LBB148_20
.LBB148_19:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_19
.Lfunc_end148:
	.size	is_long_term_reference.85, .Lfunc_end148-is_long_term_reference.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.86
	.type	mm_assign_long_term_frame_idx.86,@function
mm_assign_long_term_frame_idx.86:       # @mm_assign_long_term_frame_idx.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1411696189, -28(%rbp)  # imm = 0x5424C63D
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB149_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB149_18
.LBB149_2:                              # %if.else
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB149_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB149_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB149_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB149_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB149_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB149_7
# %bb.6:                                # %if.then7
	movl	$1, -12(%rbp)
	jmp	.LBB149_15
.LBB149_7:                              # %if.end
                                        #   in Loop: Header=BB149_3 Depth=1
	jmp	.LBB149_8
.LBB149_8:                              # %if.end8
                                        #   in Loop: Header=BB149_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB149_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB149_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB149_11
# %bb.10:                               # %if.then19
	movl	$2, -12(%rbp)
	jmp	.LBB149_15
.LBB149_11:                             # %if.end20
                                        #   in Loop: Header=BB149_3 Depth=1
	jmp	.LBB149_12
.LBB149_12:                             # %if.end21
                                        #   in Loop: Header=BB149_3 Depth=1
	jmp	.LBB149_13
.LBB149_13:                             # %for.inc
                                        #   in Loop: Header=BB149_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB149_3
.LBB149_14:                             # %for.end.loopexit
	jmp	.LBB149_15
.LBB149_15:                             # %for.end
	cmpl	$0, -12(%rbp)
	jne	.LBB149_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB149_17:                             # %if.end24
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB149_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1411696189, -28(%rbp)  # imm = 0x5424C63D
	jne	.LBB149_20
.LBB149_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_19
.Lfunc_end149:
	.size	mm_assign_long_term_frame_idx.86, .Lfunc_end149-mm_assign_long_term_frame_idx.86
	.cfi_endproc
                                        # -- End function
	.globl	getDpbSize.87           # -- Begin function getDpbSize.87
	.p2align	4, 0x90
	.type	getDpbSize.87,@function
getDpbSize.87:                          # @getDpbSize.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1365773063, -20(%rbp)  # imm = 0x51680B07
	movq	active_sps(%rip), %rax
	movl	1140(%rax), %ecx
	movl	1144(%rax), %edx
	addl	$1, %ecx
	addl	$1, %edx
	imull	%edx, %ecx
	movl	1148(%rax), %eax
	cmpl	$1, %eax
	movl	$2, %eax
	adcl	$-1, %eax
	imull	%eax, %ecx
	shll	$7, %ecx
	leal	(%rcx,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -12(%rbp)
	movq	active_sps(%rip), %rax
	movl	24(%rax), %eax
	addl	$-10, %eax
	movl	%eax, %ecx
	subl	$41, %ecx
	ja	.LBB150_17
# %bb.1:                                # %entry
	movq	.LJTI150_0(,%rax,8), %rax
	jmpq	*%rax
.LBB150_2:                              # %sw.bb
	movl	$152064, -12(%rbp)      # imm = 0x25200
	jmp	.LBB150_18
.LBB150_3:                              # %sw.bb4
	movl	$345600, -12(%rbp)      # imm = 0x54600
	jmp	.LBB150_18
.LBB150_4:                              # %sw.bb5
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB150_18
.LBB150_5:                              # %sw.bb6
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB150_18
.LBB150_6:                              # %sw.bb7
	movl	$912384, -12(%rbp)      # imm = 0xDEC00
	jmp	.LBB150_18
.LBB150_7:                              # %sw.bb8
	movl	$1824768, -12(%rbp)     # imm = 0x1BD800
	jmp	.LBB150_18
.LBB150_8:                              # %sw.bb9
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB150_18
.LBB150_9:                              # %sw.bb10
	movl	$3110400, -12(%rbp)     # imm = 0x2F7600
	jmp	.LBB150_18
.LBB150_10:                             # %sw.bb11
	movl	$6912000, -12(%rbp)     # imm = 0x697800
	jmp	.LBB150_18
.LBB150_11:                             # %sw.bb12
	movl	$7864320, -12(%rbp)     # imm = 0x780000
	jmp	.LBB150_18
.LBB150_12:                             # %sw.bb13
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB150_18
.LBB150_13:                             # %sw.bb14
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB150_18
.LBB150_14:                             # %sw.bb15
	movl	$12582912, -12(%rbp)    # imm = 0xC00000
	jmp	.LBB150_18
.LBB150_15:                             # %sw.bb16
	movl	$42393600, -12(%rbp)    # imm = 0x286E000
	jmp	.LBB150_18
.LBB150_16:                             # %sw.bb17
	movl	$70778880, -12(%rbp)    # imm = 0x4380000
	jmp	.LBB150_18
.LBB150_17:                             # %sw.default
	movabsq	$.L.str, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB150_18:                             # %sw.epilog
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	cmpl	$16, -12(%rbp)
	jge	.LBB150_20
# %bb.19:                               # %cond.true
	movl	-12(%rbp), %ebx
	jmp	.LBB150_21
.LBB150_20:                             # %cond.false
	movl	$16, %ebx
	jmp	.LBB150_21
.LBB150_21:                             # %cond.end
	cmpl	$1365773063, -20(%rbp)  # imm = 0x51680B07
	jne	.LBB150_23
.LBB150_22:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_22
.Lfunc_end150:
	.size	getDpbSize.87, .Lfunc_end150-getDpbSize.87
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI150_0:
	.quad	.LBB150_2
	.quad	.LBB150_3
	.quad	.LBB150_4
	.quad	.LBB150_5
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_6
	.quad	.LBB150_7
	.quad	.LBB150_8
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_9
	.quad	.LBB150_10
	.quad	.LBB150_11
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_12
	.quad	.LBB150_13
	.quad	.LBB150_14
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_17
	.quad	.LBB150_15
	.quad	.LBB150_16
                                        # -- End function
	.text
	.globl	init_lists.88           # -- Begin function init_lists.88
	.p2align	4, 0x90
	.type	init_lists.88,@function
init_lists.88:                          # @init_lists.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1720139778, -76(%rbp)  # imm = 0x66874002
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB151_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB151_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB151_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB151_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB151_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB151_9
.LBB151_8:                              # %if.else
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB151_9:                              # %if.end
                                        #   in Loop: Header=BB151_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB151_10:                             # %if.end36
                                        #   in Loop: Header=BB151_2 Depth=1
	jmp	.LBB151_11
.LBB151_11:                             # %if.end37
                                        #   in Loop: Header=BB151_2 Depth=1
	jmp	.LBB151_12
.LBB151_12:                             # %for.inc
                                        #   in Loop: Header=BB151_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_2
.LBB151_13:                             # %for.end
	jmp	.LBB151_31
.LBB151_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB151_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB151_17
.LBB151_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB151_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB151_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB151_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB151_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB151_23
.LBB151_22:                             # %if.else63
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB151_23:                             # %if.end70
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB151_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB151_25:                             # %if.end83
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB151_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB151_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB151_27:                             # %if.end98
                                        #   in Loop: Header=BB151_18 Depth=1
	jmp	.LBB151_28
.LBB151_28:                             # %if.end99
                                        #   in Loop: Header=BB151_18 Depth=1
	jmp	.LBB151_29
.LBB151_29:                             # %for.inc100
                                        #   in Loop: Header=BB151_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_18
.LBB151_30:                             # %for.end102
	jmp	.LBB151_31
.LBB151_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB151_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB151_34
.LBB151_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB151_181
.LBB151_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB151_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB151_75
.LBB151_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB151_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB151_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB151_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB151_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB151_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB151_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB151_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB151_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_43:                             # %if.end140
                                        #   in Loop: Header=BB151_38 Depth=1
	jmp	.LBB151_44
.LBB151_44:                             # %if.end141
                                        #   in Loop: Header=BB151_38 Depth=1
	jmp	.LBB151_45
.LBB151_45:                             # %for.inc142
                                        #   in Loop: Header=BB151_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_38
.LBB151_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB151_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB151_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB151_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB151_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB151_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB151_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_51:                             # %if.end177
                                        #   in Loop: Header=BB151_47 Depth=1
	jmp	.LBB151_52
.LBB151_52:                             # %if.end178
                                        #   in Loop: Header=BB151_47 Depth=1
	jmp	.LBB151_53
.LBB151_53:                             # %for.inc179
                                        #   in Loop: Header=BB151_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_47
.LBB151_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB151_74
.LBB151_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB151_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB151_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB151_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB151_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB151_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB151_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB151_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB151_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_63:                             # %if.end212
                                        #   in Loop: Header=BB151_60 Depth=1
	jmp	.LBB151_64
.LBB151_64:                             # %for.inc213
                                        #   in Loop: Header=BB151_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_60
.LBB151_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB151_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB151_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB151_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB151_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB151_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB151_69:                             # %if.end242
                                        #   in Loop: Header=BB151_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB151_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB151_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB151_71:                             # %if.end259
                                        #   in Loop: Header=BB151_66 Depth=1
	jmp	.LBB151_72
.LBB151_72:                             # %for.inc260
                                        #   in Loop: Header=BB151_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_66
.LBB151_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB151_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB151_155
.LBB151_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB151_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB151_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB151_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB151_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB151_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB151_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB151_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB151_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB151_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB151_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_83:                             # %if.end307
                                        #   in Loop: Header=BB151_77 Depth=1
	jmp	.LBB151_84
.LBB151_84:                             # %if.end308
                                        #   in Loop: Header=BB151_77 Depth=1
	jmp	.LBB151_85
.LBB151_85:                             # %if.end309
                                        #   in Loop: Header=BB151_77 Depth=1
	jmp	.LBB151_86
.LBB151_86:                             # %for.inc310
                                        #   in Loop: Header=BB151_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_77
.LBB151_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB151_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB151_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB151_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB151_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB151_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB151_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB151_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB151_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB151_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_94:                             # %if.end354
                                        #   in Loop: Header=BB151_88 Depth=1
	jmp	.LBB151_95
.LBB151_95:                             # %if.end355
                                        #   in Loop: Header=BB151_88 Depth=1
	jmp	.LBB151_96
.LBB151_96:                             # %if.end356
                                        #   in Loop: Header=BB151_88 Depth=1
	jmp	.LBB151_97
.LBB151_97:                             # %for.inc357
                                        #   in Loop: Header=BB151_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_88
.LBB151_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB151_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB151_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB151_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB151_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_99
.LBB151_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB151_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB151_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB151_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB151_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_103
.LBB151_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB151_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB151_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB151_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB151_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB151_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB151_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB151_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_111:                            # %if.end428
                                        #   in Loop: Header=BB151_107 Depth=1
	jmp	.LBB151_112
.LBB151_112:                            # %if.end429
                                        #   in Loop: Header=BB151_107 Depth=1
	jmp	.LBB151_113
.LBB151_113:                            # %for.inc430
                                        #   in Loop: Header=BB151_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_107
.LBB151_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB151_154
.LBB151_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB151_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB151_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB151_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB151_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB151_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB151_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB151_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB151_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB151_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB151_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB151_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB151_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_126:                            # %if.end480
                                        #   in Loop: Header=BB151_122 Depth=1
	jmp	.LBB151_127
.LBB151_127:                            # %if.end481
                                        #   in Loop: Header=BB151_122 Depth=1
	jmp	.LBB151_128
.LBB151_128:                            # %for.inc482
                                        #   in Loop: Header=BB151_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_122
.LBB151_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB151_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB151_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB151_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB151_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB151_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB151_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB151_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB151_134:                            # %if.end507
                                        #   in Loop: Header=BB151_130 Depth=1
	jmp	.LBB151_135
.LBB151_135:                            # %if.end508
                                        #   in Loop: Header=BB151_130 Depth=1
	jmp	.LBB151_136
.LBB151_136:                            # %for.inc509
                                        #   in Loop: Header=BB151_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_130
.LBB151_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB151_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB151_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB151_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB151_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_138
.LBB151_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB151_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB151_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB151_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB151_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_142
.LBB151_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB151_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB151_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB151_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB151_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB151_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB151_149:                            # %if.end566
                                        #   in Loop: Header=BB151_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB151_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB151_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB151_151:                            # %if.end583
                                        #   in Loop: Header=BB151_146 Depth=1
	jmp	.LBB151_152
.LBB151_152:                            # %for.inc584
                                        #   in Loop: Header=BB151_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_146
.LBB151_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB151_154:                            # %if.end588
	jmp	.LBB151_155
.LBB151_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB151_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB151_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB151_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB151_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB151_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB151_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB151_158 Depth=1
	movl	$1, -72(%rbp)
.LBB151_161:                            # %if.end607
                                        #   in Loop: Header=BB151_158 Depth=1
	jmp	.LBB151_162
.LBB151_162:                            # %for.inc608
                                        #   in Loop: Header=BB151_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_158
.LBB151_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB151_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB151_165:                            # %if.end617
	jmp	.LBB151_166
.LBB151_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB151_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB151_169
.LBB151_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB151_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB151_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB151_172
.LBB151_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB151_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB151_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB151_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB151_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB151_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_173
.LBB151_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB151_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB151_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB151_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB151_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB151_177
.LBB151_180:                            # %for.end646.loopexit
	jmp	.LBB151_181
.LBB151_181:                            # %for.end646
	cmpl	$1720139778, -76(%rbp)  # imm = 0x66874002
	jne	.LBB151_183
.LBB151_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_182
.Lfunc_end151:
	.size	init_lists.88, .Lfunc_end151-init_lists.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.89
	.type	get_smallest_poc.89,@function
get_smallest_poc.89:                    # @get_smallest_poc.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1369935396, -20(%rbp)  # imm = 0x51A78E24
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB152_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB152_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB152_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB152_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB152_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB152_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB152_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB152_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB152_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB152_7:                              # %if.end10
                                        #   in Loop: Header=BB152_3 Depth=1
	jmp	.LBB152_8
.LBB152_8:                              # %for.inc
                                        #   in Loop: Header=BB152_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB152_3
.LBB152_9:                              # %for.end
	cmpl	$1369935396, -20(%rbp)  # imm = 0x51A78E24
	jne	.LBB152_11
.LBB152_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_10
.Lfunc_end152:
	.size	get_smallest_poc.89, .Lfunc_end152-get_smallest_poc.89
	.cfi_endproc
                                        # -- End function
	.globl	init_dpb.90             # -- Begin function init_dpb.90
	.p2align	4, 0x90
	.type	init_dpb.90,@function
init_dpb.90:                            # @init_dpb.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$442703545, -12(%rbp)   # imm = 0x1A631EB9
	cmpl	$0, dpb+48
	je	.LBB153_2
# %bb.1:                                # %if.then
	callq	free_dpb
.LBB153_2:                              # %if.end
	callq	getDpbSize
	movl	%eax, dpb+24
	movl	dpb+24, %eax
	movq	input, %rcx
	cmpl	36(%rcx), %eax
	jae	.LBB153_4
# %bb.3:                                # %if.then1
	movabsq	$.L.str.1, %rdi
	movl	$1000, %esi             # imm = 0x3E8
	callq	error
.LBB153_4:                              # %if.end2
	movl	$0, dpb+28
	movq	$0, dpb+56
	movl	$0, dpb+32
	movl	$0, dpb+36
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb
	cmpq	dpb, %rcx
	jne	.LBB153_6
# %bb.5:                                # %if.then6
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB153_6:                              # %if.end7
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+8
	cmpq	dpb+8, %rcx
	jne	.LBB153_8
# %bb.7:                                # %if.then12
	movabsq	$.L.str.3, %rdi
	callq	no_mem_exit
.LBB153_8:                              # %if.end13
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, dpb+16
	cmpq	dpb+16, %rcx
	jne	.LBB153_10
# %bb.9:                                # %if.then18
	movabsq	$.L.str.4, %rdi
	callq	no_mem_exit
.LBB153_10:                             # %if.end19
	movl	$0, -4(%rbp)
.LBB153_11:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+24, %eax
	jae	.LBB153_14
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB153_11 Depth=1
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB153_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_11
.LBB153_14:                             # %for.end
	movl	$0, -4(%rbp)
.LBB153_15:                             # %for.cond27
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$6, -4(%rbp)
	jae	.LBB153_20
# %bb.16:                               # %for.body30
                                        #   in Loop: Header=BB153_15 Depth=1
	movl	$33, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movl	-4(%rbp), %edx
	movq	%rax, listX(,%rdx,8)
	movl	-4(%rbp), %eax
	cmpq	listX(,%rax,8), %rcx
	jne	.LBB153_18
# %bb.17:                               # %if.then38
                                        #   in Loop: Header=BB153_15 Depth=1
	movabsq	$.L.str.5, %rdi
	callq	no_mem_exit
.LBB153_18:                             # %if.end39
                                        #   in Loop: Header=BB153_15 Depth=1
	jmp	.LBB153_19
.LBB153_19:                             # %for.inc40
                                        #   in Loop: Header=BB153_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_15
.LBB153_20:                             # %for.end42
	movl	$0, -8(%rbp)
.LBB153_21:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_23 Depth 2
	cmpl	$6, -8(%rbp)
	jae	.LBB153_28
# %bb.22:                               # %for.body46
                                        #   in Loop: Header=BB153_21 Depth=1
	movl	$0, -4(%rbp)
.LBB153_23:                             # %for.cond47
                                        #   Parent Loop BB153_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -4(%rbp)
	jae	.LBB153_26
# %bb.24:                               # %for.body50
                                        #   in Loop: Header=BB153_23 Depth=2
	movl	-8(%rbp), %eax
	movq	listX(,%rax,8), %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.25:                               # %for.inc55
                                        #   in Loop: Header=BB153_23 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_23
.LBB153_26:                             # %for.end57
                                        #   in Loop: Header=BB153_21 Depth=1
	movl	-8(%rbp), %eax
	movl	$0, listXsize(,%rax,4)
# %bb.27:                               # %for.inc60
                                        #   in Loop: Header=BB153_21 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB153_21
.LBB153_28:                             # %for.end62
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	movl	$0, 72644(%rax)
	movl	$1, dpb+48
	cmpl	$442703545, -12(%rbp)   # imm = 0x1A631EB9
	jne	.LBB153_30
.LBB153_29:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_29
.Lfunc_end153:
	.size	init_dpb.90, .Lfunc_end153-init_dpb.90
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.91
	.type	compare_pic_by_poc_desc.91,@function
compare_pic_by_poc_desc.91:             # @compare_pic_by_poc_desc.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$803656146, -16(%rbp)   # imm = 0x2FE6D1D2
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB154_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB154_5
.LBB154_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB154_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB154_5
.LBB154_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB154_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$803656146, -16(%rbp)   # imm = 0x2FE6D1D2
	jne	.LBB154_7
.LBB154_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_6
.Lfunc_end154:
	.size	compare_pic_by_poc_desc.91, .Lfunc_end154-compare_pic_by_poc_desc.91
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.92
	.type	adaptive_memory_management.92,@function
adaptive_memory_management.92:          # @adaptive_memory_management.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1810094253, -20(%rbp)  # imm = 0x6BE3D8AD
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB155_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB155_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB155_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	.LJTI155_0(,%rax,8), %rax
	jmpq	*%rax
.LBB155_4:                              # %sw.bb
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB155_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB155_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB155_6:                              # %if.end
                                        #   in Loop: Header=BB155_1 Depth=1
	jmp	.LBB155_14
.LBB155_7:                              # %sw.bb2
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB155_14
.LBB155_8:                              # %sw.bb3
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB155_14
.LBB155_9:                              # %sw.bb4
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB155_14
.LBB155_10:                             # %sw.bb6
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB155_14
.LBB155_11:                             # %sw.bb7
                                        #   in Loop: Header=BB155_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB155_14
.LBB155_12:                             # %sw.bb9
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB155_14
.LBB155_13:                             # %sw.default
                                        #   in Loop: Header=BB155_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB155_14:                             # %sw.epilog
                                        #   in Loop: Header=BB155_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB155_1
.LBB155_15:                             # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB155_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB155_21
	jmp	.LBB155_17
.LBB155_17:                             # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB155_19
	jmp	.LBB155_18
.LBB155_18:                             # %if.then15
	subl	$2, %eax
	je	.LBB155_20
	jmp	.LBB155_22
.LBB155_19:                             # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB155_22
.LBB155_20:                             # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB155_22
.LBB155_21:                             # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB155_22:                             # %sw.epilog19
	callq	flush_dpb
.LBB155_23:                             # %if.end20
	cmpl	$1810094253, -20(%rbp)  # imm = 0x6BE3D8AD
	jne	.LBB155_25
.LBB155_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_24
.Lfunc_end155:
	.size	adaptive_memory_management.92, .Lfunc_end155-adaptive_memory_management.92
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI155_0:
	.quad	.LBB155_4
	.quad	.LBB155_7
	.quad	.LBB155_8
	.quad	.LBB155_9
	.quad	.LBB155_10
	.quad	.LBB155_11
	.quad	.LBB155_12
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.93
	.type	mm_unmark_long_term_for_reference.93,@function
mm_unmark_long_term_for_reference.93:   # @mm_unmark_long_term_for_reference.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1052406431, -12(%rbp)  # imm = 0x3EBA729F
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB156_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB156_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB156_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB156_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB156_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB156_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB156_7:                              # %if.end
                                        #   in Loop: Header=BB156_1 Depth=1
	jmp	.LBB156_8
.LBB156_8:                              # %if.end14
                                        #   in Loop: Header=BB156_1 Depth=1
	jmp	.LBB156_24
.LBB156_9:                              # %if.else
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB156_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB156_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB156_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB156_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB156_14:                             # %if.end57
	jmp	.LBB156_27
.LBB156_15:                             # %if.end58
                                        #   in Loop: Header=BB156_1 Depth=1
	jmp	.LBB156_16
.LBB156_16:                             # %if.end59
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB156_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB156_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB156_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB156_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB156_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB156_21:                             # %if.end106
	jmp	.LBB156_27
.LBB156_22:                             # %if.end107
                                        #   in Loop: Header=BB156_1 Depth=1
	jmp	.LBB156_23
.LBB156_23:                             # %if.end108
                                        #   in Loop: Header=BB156_1 Depth=1
	jmp	.LBB156_24
.LBB156_24:                             # %if.end109
                                        #   in Loop: Header=BB156_1 Depth=1
	jmp	.LBB156_25
.LBB156_25:                             # %for.inc
                                        #   in Loop: Header=BB156_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB156_1
.LBB156_26:                             # %for.end.loopexit
	jmp	.LBB156_27
.LBB156_27:                             # %for.end
	cmpl	$1052406431, -12(%rbp)  # imm = 0x3EBA729F
	jne	.LBB156_29
.LBB156_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_28
.Lfunc_end156:
	.size	mm_unmark_long_term_for_reference.93, .Lfunc_end156-mm_unmark_long_term_for_reference.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function sliding_window_memory_management.94
	.type	sliding_window_memory_management.94,@function
sliding_window_memory_management.94:    # @sliding_window_memory_management.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1995927968, -8(%rbp)   # imm = 0x76F771A0
	movq	%rdi, -16(%rbp)
	movl	dpb+32, %eax
	movq	active_sps, %rcx
	movl	1132(%rcx), %ecx
	subl	dpb+36, %ecx
	cmpl	%ecx, %eax
	jne	.LBB157_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB157_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB157_8
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB157_6
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB157_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB157_6
# %bb.5:                                # %if.then5
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	callq	update_ref_list
	jmp	.LBB157_9
.LBB157_6:                              # %if.end
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_7
.LBB157_7:                              # %for.inc
                                        #   in Loop: Header=BB157_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB157_2
.LBB157_8:                              # %for.end.loopexit
	jmp	.LBB157_9
.LBB157_9:                              # %for.end
	jmp	.LBB157_10
.LBB157_10:                             # %if.end8
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	cmpl	$1995927968, -8(%rbp)   # imm = 0x76F771A0
	jne	.LBB157_12
.LBB157_11:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_11
.Lfunc_end157:
	.size	sliding_window_memory_management.94, .Lfunc_end157-sliding_window_memory_management.94
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.95
	.type	compare_pic_by_lt_pic_num_asc.95,@function
compare_pic_by_lt_pic_num_asc.95:       # @compare_pic_by_lt_pic_num_asc.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$78408279, -16(%rbp)    # imm = 0x4AC6A57
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB158_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB158_5
.LBB158_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB158_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB158_5
.LBB158_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB158_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$78408279, -16(%rbp)    # imm = 0x4AC6A57
	jne	.LBB158_7
.LBB158_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_6
.Lfunc_end158:
	.size	compare_pic_by_lt_pic_num_asc.95, .Lfunc_end158-compare_pic_by_lt_pic_num_asc.95
	.cfi_endproc
                                        # -- End function
	.globl	alloc_ref_pic_list_reordering_buffer.96 # -- Begin function alloc_ref_pic_list_reordering_buffer.96
	.p2align	4, 0x90
	.type	alloc_ref_pic_list_reordering_buffer.96,@function
alloc_ref_pic_list_reordering_buffer.96: # @alloc_ref_pic_list_reordering_buffer.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2021279722, -20(%rbp)  # imm = 0x787A47EA
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	72000(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB159_9
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$4, 24(%rax)
	je	.LBB159_9
# %bb.2:                                # %if.then
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 64(%rcx)
	cmpq	$0, %rax
	jne	.LBB159_4
# %bb.3:                                # %if.then5
	movabsq	$.L.str.15, %rdi
	callq	no_mem_exit
.LBB159_4:                              # %if.end
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 72(%rcx)
	cmpq	$0, %rax
	jne	.LBB159_6
# %bb.5:                                # %if.then10
	movabsq	$.L.str.16, %rdi
	callq	no_mem_exit
.LBB159_6:                              # %if.end11
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 80(%rcx)
	cmpq	$0, %rax
	jne	.LBB159_8
# %bb.7:                                # %if.then16
	movabsq	$.L.str.17, %rdi
	callq	no_mem_exit
.LBB159_8:                              # %if.end17
	jmp	.LBB159_10
.LBB159_9:                              # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 64(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 72(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 80(%rax)
.LBB159_10:                             # %if.end21
	movq	img, %rax
	movl	72004(%rax), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB159_18
# %bb.11:                               # %if.then26
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 96(%rcx)
	cmpq	$0, %rax
	jne	.LBB159_13
# %bb.12:                               # %if.then31
	movabsq	$.L.str.18, %rdi
	callq	no_mem_exit
.LBB159_13:                             # %if.end32
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 104(%rcx)
	cmpq	$0, %rax
	jne	.LBB159_15
# %bb.14:                               # %if.then37
	movabsq	$.L.str.19, %rdi
	callq	no_mem_exit
.LBB159_15:                             # %if.end38
	movslq	-4(%rbp), %rdi
	movl	$4, %esi
	callq	calloc
	movq	-16(%rbp), %rcx
	movq	%rax, 112(%rcx)
	cmpq	$0, %rax
	jne	.LBB159_17
# %bb.16:                               # %if.then43
	movabsq	$.L.str.20, %rdi
	callq	no_mem_exit
.LBB159_17:                             # %if.end44
	jmp	.LBB159_19
.LBB159_18:                             # %if.else45
	movq	-16(%rbp), %rax
	movq	$0, 96(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 104(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 112(%rax)
.LBB159_19:                             # %if.end49
	cmpl	$2021279722, -20(%rbp)  # imm = 0x787A47EA
	jne	.LBB159_21
.LBB159_20:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_20
.Lfunc_end159:
	.size	alloc_ref_pic_list_reordering_buffer.96, .Lfunc_end159-alloc_ref_pic_list_reordering_buffer.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.97
	.type	unmark_long_term_field_for_reference_by_frame_idx.97,@function
unmark_long_term_field_for_reference_by_frame_idx.97: # @unmark_long_term_field_for_reference_by_frame_idx.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1379793505, -28(%rbp)  # imm = 0x523DFA61
	movl	%edi, -16(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB160_2
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB160_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB160_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB160_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB160_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB160_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB160_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB160_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB160_23
.LBB160_8:                              # %if.else
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB160_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB160_22
.LBB160_10:                             # %if.else21
                                        #   in Loop: Header=BB160_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB160_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB160_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB160_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB160_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB160_15
.LBB160_14:                             # %if.then29
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB160_15:                             # %if.end32
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_17
.LBB160_16:                             # %if.else33
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB160_17:                             # %if.end36
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_21
.LBB160_18:                             # %if.else37
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB160_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB160_20:                             # %if.end45
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_21
.LBB160_21:                             # %if.end46
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_22
.LBB160_22:                             # %if.end47
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_23
.LBB160_23:                             # %if.end48
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_24
.LBB160_24:                             # %if.end49
                                        #   in Loop: Header=BB160_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB160_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB160_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB160_42
.LBB160_27:                             # %if.else59
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB160_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB160_41
.LBB160_29:                             # %if.else67
                                        #   in Loop: Header=BB160_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB160_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB160_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB160_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB160_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB160_34
.LBB160_33:                             # %if.then78
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB160_34:                             # %if.end81
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_36
.LBB160_35:                             # %if.else82
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB160_36:                             # %if.end85
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_40
.LBB160_37:                             # %if.else86
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB160_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB160_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB160_39:                             # %if.end95
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_40
.LBB160_40:                             # %if.end96
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_41
.LBB160_41:                             # %if.end97
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_42
.LBB160_42:                             # %if.end98
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_43
.LBB160_43:                             # %if.end99
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_44
.LBB160_44:                             # %if.end100
                                        #   in Loop: Header=BB160_3 Depth=1
	jmp	.LBB160_45
.LBB160_45:                             # %for.inc
                                        #   in Loop: Header=BB160_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB160_3
.LBB160_46:                             # %for.end
	cmpl	$1379793505, -28(%rbp)  # imm = 0x523DFA61
	jne	.LBB160_48
.LBB160_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_47
.Lfunc_end160:
	.size	unmark_long_term_field_for_reference_by_frame_idx.97, .Lfunc_end160-unmark_long_term_field_for_reference_by_frame_idx.97
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.98    # -- Begin function dpb_combine_field.98
	.p2align	4, 0x90
	.type	dpb_combine_field.98,@function
dpb_combine_field.98:                   # @dpb_combine_field.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$450865643, -32(%rbp)   # imm = 0x1ADFA9EB
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB161_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_1
.LBB161_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB161_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB161_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB161_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB161_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_5
.LBB161_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB161_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB161_11
.LBB161_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB161_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB161_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB161_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB161_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB161_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB161_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB161_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB161_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB161_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB161_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB161_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB161_24
.LBB161_23:                             # %cond.false217
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB161_24:                             # %cond.end226
                                        #   in Loop: Header=BB161_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB161_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_20
.LBB161_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB161_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB161_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB161_31
.LBB161_30:                             # %cond.false269
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB161_31:                             # %cond.end278
                                        #   in Loop: Header=BB161_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB161_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_27
.LBB161_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB161_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB161_34 Depth=1
	movl	$0, -20(%rbp)
.LBB161_36:                             # %for.cond295
                                        #   Parent Loop BB161_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB161_40
.LBB161_39:                             # %cond.false445
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_40
.LBB161_40:                             # %cond.end446
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB161_43
.LBB161_42:                             # %cond.false462
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_43
.LBB161_43:                             # %cond.end463
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB161_46
.LBB161_45:                             # %cond.false479
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB161_46
.LBB161_46:                             # %cond.end480
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB161_49
.LBB161_48:                             # %cond.false501
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB161_49
.LBB161_49:                             # %cond.end502
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB161_52
.LBB161_51:                             # %cond.false647
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_52
.LBB161_52:                             # %cond.end648
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB161_55
.LBB161_54:                             # %cond.false665
                                        #   in Loop: Header=BB161_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB161_55
.LBB161_55:                             # %cond.end666
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB161_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB161_58
.LBB161_57:                             # %cond.false683
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB161_58
.LBB161_58:                             # %cond.end684
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB161_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB161_61
.LBB161_60:                             # %cond.false706
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB161_61
.LBB161_61:                             # %cond.end707
                                        #   in Loop: Header=BB161_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB161_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_36
.LBB161_63:                             # %for.end723
                                        #   in Loop: Header=BB161_34 Depth=1
	jmp	.LBB161_64
.LBB161_64:                             # %for.inc724
                                        #   in Loop: Header=BB161_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_34
.LBB161_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB161_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB161_76
.LBB161_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB161_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB161_68 Depth=1
	movl	$0, -20(%rbp)
.LBB161_70:                             # %for.cond737
                                        #   Parent Loop BB161_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB161_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB161_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB161_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB161_70
.LBB161_73:                             # %for.end758
                                        #   in Loop: Header=BB161_68 Depth=1
	jmp	.LBB161_74
.LBB161_74:                             # %for.inc759
                                        #   in Loop: Header=BB161_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB161_68
.LBB161_75:                             # %for.end761
	jmp	.LBB161_76
.LBB161_76:                             # %if.end762
	cmpl	$450865643, -32(%rbp)   # imm = 0x1ADFA9EB
	jne	.LBB161_78
.LBB161_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_77
.Lfunc_end161:
	.size	dpb_combine_field.98, .Lfunc_end161-dpb_combine_field.98
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.99
	.type	mm_unmark_short_term_for_reference.99,@function
mm_unmark_short_term_for_reference.99:  # @mm_unmark_short_term_for_reference.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$11435920, -16(%rbp)    # imm = 0xAE7F90
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB162_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB162_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB162_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB162_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB162_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB162_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB162_27
.LBB162_7:                              # %if.end
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_8
.LBB162_8:                              # %if.end13
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_24
.LBB162_9:                              # %if.else
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB162_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB162_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB162_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB162_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB162_14:                             # %if.end44
	jmp	.LBB162_27
.LBB162_15:                             # %if.end45
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_16
.LBB162_16:                             # %if.end46
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB162_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB162_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB162_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB162_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB162_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB162_21:                             # %if.end81
	jmp	.LBB162_27
.LBB162_22:                             # %if.end82
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_23
.LBB162_23:                             # %if.end83
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_24
.LBB162_24:                             # %if.end84
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_25
.LBB162_25:                             # %for.inc
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB162_1
.LBB162_26:                             # %for.end.loopexit
	jmp	.LBB162_27
.LBB162_27:                             # %for.end
	cmpl	$11435920, -16(%rbp)    # imm = 0xAE7F90
	jne	.LBB162_29
.LBB162_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_28
.Lfunc_end162:
	.size	mm_unmark_short_term_for_reference.99, .Lfunc_end162-mm_unmark_short_term_for_reference.99
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.100
	.type	compare_fs_by_poc_asc.100,@function
compare_fs_by_poc_asc.100:              # @compare_fs_by_poc_asc.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1573895210, -16(%rbp)  # imm = 0x5DCFBC2A
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB163_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB163_5
.LBB163_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB163_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB163_5
.LBB163_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB163_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1573895210, -16(%rbp)  # imm = 0x5DCFBC2A
	jne	.LBB163_7
.LBB163_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_6
.Lfunc_end163:
	.size	compare_fs_by_poc_asc.100, .Lfunc_end163-compare_fs_by_poc_asc.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.101
	.type	idr_memory_management.101,@function
idr_memory_management.101:              # @idr_memory_management.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$440589932, -20(%rbp)   # imm = 0x1A42DE6C
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB164_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB164_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB164_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB164_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB164_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_2
.LBB164_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB164_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB164_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB164_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB164_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_6
.LBB164_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB164_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB164_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB164_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB164_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_10
.LBB164_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB164_15
.LBB164_14:                             # %if.else
	callq	flush_dpb
.LBB164_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB164_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB164_18
.LBB164_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB164_18:                             # %if.end23
	cmpl	$440589932, -20(%rbp)   # imm = 0x1A42DE6C
	jne	.LBB164_20
.LBB164_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_19
.Lfunc_end164:
	.size	idr_memory_management.101, .Lfunc_end164-idr_memory_management.101
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.102     # -- Begin function dpb_split_field.102
	.p2align	4, 0x90
	.type	dpb_split_field.102,@function
dpb_split_field.102:                    # @dpb_split_field.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$234440528, -80(%rbp)   # imm = 0xDF94750
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB165_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB165_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB165_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB165_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_2
.LBB165_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB165_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB165_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB165_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_6
.LBB165_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB165_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB165_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB165_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_10
.LBB165_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB165_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB165_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB165_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_14
.LBB165_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB165_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB165_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB165_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB165_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB165_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_19
.LBB165_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB165_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB165_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB165_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB165_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_23
.LBB165_26:                             # %for.end328
	jmp	.LBB165_27
.LBB165_27:                             # %if.end
	jmp	.LBB165_29
.LBB165_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB165_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB165_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB165_30 Depth=1
	movl	$0, -4(%rbp)
.LBB165_32:                             # %for.cond343
                                        #   Parent Loop BB165_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB165_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB165_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-40(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB165_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB165_32 Depth=2
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB165_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB165_38
.LBB165_37:                             # %cond.false
                                        #   in Loop: Header=BB165_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_38
.LBB165_38:                             # %cond.end
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB165_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB165_41
.LBB165_40:                             # %cond.false415
                                        #   in Loop: Header=BB165_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_41
.LBB165_41:                             # %cond.end416
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB165_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB165_44
.LBB165_43:                             # %cond.false436
                                        #   in Loop: Header=BB165_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_44
.LBB165_44:                             # %cond.end437
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB165_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB165_47
.LBB165_46:                             # %cond.false456
                                        #   in Loop: Header=BB165_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_47
.LBB165_47:                             # %cond.end457
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB165_55
.LBB165_48:                             # %if.else466
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB165_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB165_51
.LBB165_50:                             # %cond.false491
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB165_51
.LBB165_51:                             # %cond.end492
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB165_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB165_54
.LBB165_53:                             # %cond.false509
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB165_54
.LBB165_54:                             # %cond.end510
                                        #   in Loop: Header=BB165_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB165_55:                             # %if.end519
                                        #   in Loop: Header=BB165_32 Depth=2
	jmp	.LBB165_56
.LBB165_56:                             # %for.inc520
                                        #   in Loop: Header=BB165_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_32
.LBB165_57:                             # %for.end522
                                        #   in Loop: Header=BB165_30 Depth=1
	jmp	.LBB165_58
.LBB165_58:                             # %for.inc523
                                        #   in Loop: Header=BB165_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_30
.LBB165_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB165_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB165_73
.LBB165_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB165_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB165_62 Depth=1
	movl	$0, -8(%rbp)
.LBB165_64:                             # %for.cond538
                                        #   Parent Loop BB165_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB165_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB165_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB165_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB165_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB165_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB165_68:                             # %if.end908
                                        #   in Loop: Header=BB165_64 Depth=2
	jmp	.LBB165_69
.LBB165_69:                             # %for.inc909
                                        #   in Loop: Header=BB165_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_64
.LBB165_70:                             # %for.end911
                                        #   in Loop: Header=BB165_62 Depth=1
	jmp	.LBB165_71
.LBB165_71:                             # %for.inc912
                                        #   in Loop: Header=BB165_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_62
.LBB165_72:                             # %for.end914
	jmp	.LBB165_73
.LBB165_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB165_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB165_74 Depth=1
	movl	$0, -8(%rbp)
.LBB165_76:                             # %for.cond923
                                        #   Parent Loop BB165_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB165_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB165_148
.LBB165_79:                             # %if.then954
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB165_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_83
.LBB165_82:                             # %cond.false991
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_83:                             # %cond.end993
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_86
.LBB165_85:                             # %cond.false1001
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_86:                             # %cond.end1003
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_89
.LBB165_88:                             # %cond.false1032
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_89:                             # %cond.end1034
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_92
.LBB165_91:                             # %cond.false1042
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_92:                             # %cond.end1044
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_95
.LBB165_94:                             # %cond.false1073
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_95:                             # %cond.end1075
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_98
.LBB165_97:                             # %cond.false1083
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_98:                             # %cond.end1085
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_101
.LBB165_100:                            # %cond.false1114
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_101:                            # %cond.end1116
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_104
.LBB165_103:                            # %cond.false1124
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_104:                            # %cond.end1126
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_107
.LBB165_106:                            # %cond.false1155
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_107:                            # %cond.end1157
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_110
.LBB165_109:                            # %cond.false1165
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_110:                            # %cond.end1167
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB165_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB165_125
.LBB165_112:                            # %if.else1190
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_115
.LBB165_114:                            # %cond.false1198
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_115:                            # %cond.end1200
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_118
.LBB165_117:                            # %cond.false1208
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_118:                            # %cond.end1210
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB165_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB165_121
.LBB165_120:                            # %cond.false1237
                                        #   in Loop: Header=BB165_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_121
.LBB165_121:                            # %cond.end1238
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB165_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB165_124
.LBB165_123:                            # %cond.false1254
                                        #   in Loop: Header=BB165_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_124
.LBB165_124:                            # %cond.end1255
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB165_125:                            # %if.end1264
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_128
.LBB165_127:                            # %cond.false1272
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_128:                            # %cond.end1274
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_131
.LBB165_130:                            # %cond.false1282
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_131:                            # %cond.end1284
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB165_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB165_146
.LBB165_133:                            # %if.else1307
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_136
.LBB165_135:                            # %cond.false1315
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_136:                            # %cond.end1317
                                        #   in Loop: Header=BB165_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB165_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB165_139
.LBB165_138:                            # %cond.false1325
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB165_139:                            # %cond.end1327
                                        #   in Loop: Header=BB165_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB165_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB165_142
.LBB165_141:                            # %cond.false1355
                                        #   in Loop: Header=BB165_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_142
.LBB165_142:                            # %cond.end1356
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB165_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB165_145
.LBB165_144:                            # %cond.false1373
                                        #   in Loop: Header=BB165_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_145
.LBB165_145:                            # %cond.end1374
                                        #   in Loop: Header=BB165_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB165_146:                            # %if.end1383
                                        #   in Loop: Header=BB165_76 Depth=2
	jmp	.LBB165_147
.LBB165_147:                            # %if.end1384
                                        #   in Loop: Header=BB165_76 Depth=2
	jmp	.LBB165_148
.LBB165_148:                            # %if.end1385
                                        #   in Loop: Header=BB165_76 Depth=2
	jmp	.LBB165_149
.LBB165_149:                            # %for.inc1386
                                        #   in Loop: Header=BB165_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_76
.LBB165_150:                            # %for.end1388
                                        #   in Loop: Header=BB165_74 Depth=1
	jmp	.LBB165_151
.LBB165_151:                            # %for.inc1389
                                        #   in Loop: Header=BB165_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_74
.LBB165_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB165_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB165_153 Depth=1
	movl	$0, -4(%rbp)
.LBB165_155:                            # %for.cond1399
                                        #   Parent Loop BB165_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB165_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB165_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_155
.LBB165_158:                            # %for.end1414
                                        #   in Loop: Header=BB165_153 Depth=1
	jmp	.LBB165_159
.LBB165_159:                            # %for.inc1415
                                        #   in Loop: Header=BB165_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_153
.LBB165_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB165_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB165_174
.LBB165_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB165_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB165_163 Depth=1
	movl	$0, -4(%rbp)
.LBB165_165:                            # %for.cond1431
                                        #   Parent Loop BB165_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB165_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB165_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB165_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB165_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB165_169
.LBB165_168:                            # %cond.false1462
                                        #   in Loop: Header=BB165_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB165_169
.LBB165_169:                            # %cond.end1463
                                        #   in Loop: Header=BB165_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB165_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB165_165
.LBB165_171:                            # %for.end1474
                                        #   in Loop: Header=BB165_163 Depth=1
	jmp	.LBB165_172
.LBB165_172:                            # %for.inc1475
                                        #   in Loop: Header=BB165_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB165_163
.LBB165_173:                            # %for.end1477
	jmp	.LBB165_174
.LBB165_174:                            # %if.end1478
	cmpl	$234440528, -80(%rbp)   # imm = 0xDF94750
	jne	.LBB165_176
.LBB165_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_175
.Lfunc_end165:
	.size	dpb_split_field.102, .Lfunc_end165-dpb_split_field.102
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.103   # -- Begin function dpb_combine_field.103
	.p2align	4, 0x90
	.type	dpb_combine_field.103,@function
dpb_combine_field.103:                  # @dpb_combine_field.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1505645148, -32(%rbp)  # imm = 0x59BE525C
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB166_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB166_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB166_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB166_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB166_1
.LBB166_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB166_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB166_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB166_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB166_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB166_5
.LBB166_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB166_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB166_11
.LBB166_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB166_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB166_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB166_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB166_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB166_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB166_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB166_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB166_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB166_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB166_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB166_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB166_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB166_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB166_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB166_24
.LBB166_23:                             # %cond.false217
                                        #   in Loop: Header=BB166_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB166_24:                             # %cond.end226
                                        #   in Loop: Header=BB166_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB166_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB166_20
.LBB166_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB166_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB166_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB166_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB166_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB166_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB166_31
.LBB166_30:                             # %cond.false269
                                        #   in Loop: Header=BB166_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB166_31:                             # %cond.end278
                                        #   in Loop: Header=BB166_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB166_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB166_27
.LBB166_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB166_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB166_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB166_34 Depth=1
	movl	$0, -20(%rbp)
.LBB166_36:                             # %for.cond295
                                        #   Parent Loop BB166_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB166_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB166_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB166_40
.LBB166_39:                             # %cond.false445
                                        #   in Loop: Header=BB166_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB166_40
.LBB166_40:                             # %cond.end446
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB166_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB166_43
.LBB166_42:                             # %cond.false462
                                        #   in Loop: Header=BB166_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB166_43
.LBB166_43:                             # %cond.end463
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB166_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB166_46
.LBB166_45:                             # %cond.false479
                                        #   in Loop: Header=BB166_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB166_46
.LBB166_46:                             # %cond.end480
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB166_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB166_49
.LBB166_48:                             # %cond.false501
                                        #   in Loop: Header=BB166_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB166_49
.LBB166_49:                             # %cond.end502
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB166_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB166_52
.LBB166_51:                             # %cond.false647
                                        #   in Loop: Header=BB166_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB166_52
.LBB166_52:                             # %cond.end648
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB166_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB166_55
.LBB166_54:                             # %cond.false665
                                        #   in Loop: Header=BB166_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB166_55
.LBB166_55:                             # %cond.end666
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB166_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB166_58
.LBB166_57:                             # %cond.false683
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB166_58
.LBB166_58:                             # %cond.end684
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB166_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB166_61
.LBB166_60:                             # %cond.false706
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB166_61
.LBB166_61:                             # %cond.end707
                                        #   in Loop: Header=BB166_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB166_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_36
.LBB166_63:                             # %for.end723
                                        #   in Loop: Header=BB166_34 Depth=1
	jmp	.LBB166_64
.LBB166_64:                             # %for.inc724
                                        #   in Loop: Header=BB166_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB166_34
.LBB166_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB166_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB166_76
.LBB166_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB166_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB166_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB166_68 Depth=1
	movl	$0, -20(%rbp)
.LBB166_70:                             # %for.cond737
                                        #   Parent Loop BB166_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB166_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB166_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB166_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB166_70
.LBB166_73:                             # %for.end758
                                        #   in Loop: Header=BB166_68 Depth=1
	jmp	.LBB166_74
.LBB166_74:                             # %for.inc759
                                        #   in Loop: Header=BB166_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB166_68
.LBB166_75:                             # %for.end761
	jmp	.LBB166_76
.LBB166_76:                             # %if.end762
	cmpl	$1505645148, -32(%rbp)  # imm = 0x59BE525C
	jne	.LBB166_78
.LBB166_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_77
.Lfunc_end166:
	.size	dpb_combine_field.103, .Lfunc_end166-dpb_combine_field.103
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.104
	.type	compare_fs_by_poc_desc.104,@function
compare_fs_by_poc_desc.104:             # @compare_fs_by_poc_desc.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$136621765, -16(%rbp)   # imm = 0x824AEC5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB167_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB167_5
.LBB167_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB167_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB167_5
.LBB167_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB167_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$136621765, -16(%rbp)   # imm = 0x824AEC5
	jne	.LBB167_7
.LBB167_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_6
.Lfunc_end167:
	.size	compare_fs_by_poc_desc.104, .Lfunc_end167-compare_fs_by_poc_desc.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.105
	.type	mm_unmark_long_term_for_reference.105,@function
mm_unmark_long_term_for_reference.105:  # @mm_unmark_long_term_for_reference.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1918509062, -12(%rbp)  # imm = 0x725A2006
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB168_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB168_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB168_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB168_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB168_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB168_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB168_7:                              # %if.end
                                        #   in Loop: Header=BB168_1 Depth=1
	jmp	.LBB168_8
.LBB168_8:                              # %if.end14
                                        #   in Loop: Header=BB168_1 Depth=1
	jmp	.LBB168_24
.LBB168_9:                              # %if.else
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB168_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB168_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB168_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB168_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB168_14:                             # %if.end57
	jmp	.LBB168_27
.LBB168_15:                             # %if.end58
                                        #   in Loop: Header=BB168_1 Depth=1
	jmp	.LBB168_16
.LBB168_16:                             # %if.end59
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB168_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB168_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB168_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB168_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB168_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB168_21:                             # %if.end106
	jmp	.LBB168_27
.LBB168_22:                             # %if.end107
                                        #   in Loop: Header=BB168_1 Depth=1
	jmp	.LBB168_23
.LBB168_23:                             # %if.end108
                                        #   in Loop: Header=BB168_1 Depth=1
	jmp	.LBB168_24
.LBB168_24:                             # %if.end109
                                        #   in Loop: Header=BB168_1 Depth=1
	jmp	.LBB168_25
.LBB168_25:                             # %for.inc
                                        #   in Loop: Header=BB168_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_1
.LBB168_26:                             # %for.end.loopexit
	jmp	.LBB168_27
.LBB168_27:                             # %for.end
	cmpl	$1918509062, -12(%rbp)  # imm = 0x725A2006
	jne	.LBB168_29
.LBB168_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_28
.Lfunc_end168:
	.size	mm_unmark_long_term_for_reference.105, .Lfunc_end168-mm_unmark_long_term_for_reference.105
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.106 # -- Begin function alloc_storable_picture.106
	.p2align	4, 0x90
	.type	alloc_storable_picture.106,@function
alloc_storable_picture.106:             # @alloc_storable_picture.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1375962945, -40(%rbp)  # imm = 0x52038741
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB169_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB169_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB169_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB169_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB169_6
.LBB169_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB169_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB169_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB169_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB169_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB169_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1375962945, -40(%rbp)  # imm = 0x52038741
	jne	.LBB169_12
.LBB169_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_11
.Lfunc_end169:
	.size	alloc_storable_picture.106, .Lfunc_end169-alloc_storable_picture.106
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.107
	.type	compare_fs_by_poc_asc.107,@function
compare_fs_by_poc_asc.107:              # @compare_fs_by_poc_asc.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1223646187, -16(%rbp)  # imm = 0x48EF5BEB
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB170_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB170_5
.LBB170_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB170_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB170_5
.LBB170_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB170_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1223646187, -16(%rbp)  # imm = 0x48EF5BEB
	jne	.LBB170_7
.LBB170_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_6
.Lfunc_end170:
	.size	compare_fs_by_poc_asc.107, .Lfunc_end170-compare_fs_by_poc_asc.107
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.108
	.type	compare_pic_by_poc_desc.108,@function
compare_pic_by_poc_desc.108:            # @compare_pic_by_poc_desc.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$867032088, -16(%rbp)   # imm = 0x33ADDC18
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB171_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB171_5
.LBB171_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB171_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB171_5
.LBB171_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB171_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$867032088, -16(%rbp)   # imm = 0x33ADDC18
	jne	.LBB171_7
.LBB171_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_6
.Lfunc_end171:
	.size	compare_pic_by_poc_desc.108, .Lfunc_end171-compare_pic_by_poc_desc.108
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_long_term_for_reference.109
	.type	mm_unmark_long_term_for_reference.109,@function
mm_unmark_long_term_for_reference.109:  # @mm_unmark_long_term_for_reference.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$710021714, -12(%rbp)   # imm = 0x2A521252
	movq	%rdi, -24(%rbp)
	movl	%esi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB172_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB172_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB172_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB172_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB172_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB172_7
# %bb.6:                                # %if.then11
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB172_7:                              # %if.end
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_8
.LBB172_8:                              # %if.end14
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_24
.LBB172_9:                              # %if.else
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB172_16
# %bb.10:                               # %land.lhs.true18
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB172_16
# %bb.11:                               # %if.then24
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB172_15
# %bb.12:                               # %if.then29
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB172_14
# %bb.13:                               # %if.then48
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB172_14:                             # %if.end57
	jmp	.LBB172_27
.LBB172_15:                             # %if.end58
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_16
.LBB172_16:                             # %if.end59
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB172_23
# %bb.17:                               # %land.lhs.true65
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB172_23
# %bb.18:                               # %if.then71
                                        #   in Loop: Header=BB172_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB172_22
# %bb.19:                               # %if.then76
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6376(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB172_21
# %bb.20:                               # %if.then97
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6376(%rax)
.LBB172_21:                             # %if.end106
	jmp	.LBB172_27
.LBB172_22:                             # %if.end107
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_23
.LBB172_23:                             # %if.end108
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_24
.LBB172_24:                             # %if.end109
                                        #   in Loop: Header=BB172_1 Depth=1
	jmp	.LBB172_25
.LBB172_25:                             # %for.inc
                                        #   in Loop: Header=BB172_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_1
.LBB172_26:                             # %for.end.loopexit
	jmp	.LBB172_27
.LBB172_27:                             # %for.end
	cmpl	$710021714, -12(%rbp)   # imm = 0x2A521252
	jne	.LBB172_29
.LBB172_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_28
.Lfunc_end172:
	.size	mm_unmark_long_term_for_reference.109, .Lfunc_end172-mm_unmark_long_term_for_reference.109
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.110 # -- Begin function alloc_storable_picture.110
	.p2align	4, 0x90
	.type	alloc_storable_picture.110,@function
alloc_storable_picture.110:             # @alloc_storable_picture.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1422361201, -40(%rbp)  # imm = 0x54C78271
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB173_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB173_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB173_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB173_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB173_6
.LBB173_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB173_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB173_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB173_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB173_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB173_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1422361201, -40(%rbp)  # imm = 0x54C78271
	jne	.LBB173_12
.LBB173_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_11
.Lfunc_end173:
	.size	alloc_storable_picture.110, .Lfunc_end173-alloc_storable_picture.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.111
	.type	compare_pic_by_poc_desc.111,@function
compare_pic_by_poc_desc.111:            # @compare_pic_by_poc_desc.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1461992719, -16(%rbp)  # imm = 0x57243D0F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB174_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB174_5
.LBB174_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB174_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB174_5
.LBB174_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB174_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1461992719, -16(%rbp)  # imm = 0x57243D0F
	jne	.LBB174_7
.LBB174_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_6
.Lfunc_end174:
	.size	compare_pic_by_poc_desc.111, .Lfunc_end174-compare_pic_by_poc_desc.111
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_frame_for_reference_by_frame_idx.112
	.type	unmark_long_term_frame_for_reference_by_frame_idx.112,@function
unmark_long_term_frame_for_reference_by_frame_idx.112: # @unmark_long_term_frame_for_reference_by_frame_idx.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1912588073, -12(%rbp)  # imm = 0x71FFC729
	movl	%edi, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB175_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB175_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB175_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB175_1 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB175_4:                              # %if.end
                                        #   in Loop: Header=BB175_1 Depth=1
	jmp	.LBB175_5
.LBB175_5:                              # %for.inc
                                        #   in Loop: Header=BB175_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB175_1
.LBB175_6:                              # %for.end
	cmpl	$1912588073, -12(%rbp)  # imm = 0x71FFC729
	jne	.LBB175_8
.LBB175_7:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_7
.Lfunc_end175:
	.size	unmark_long_term_frame_for_reference_by_frame_idx.112, .Lfunc_end175-unmark_long_term_frame_for_reference_by_frame_idx.112
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.113   # -- Begin function dpb_combine_field.113
	.p2align	4, 0x90
	.type	dpb_combine_field.113,@function
dpb_combine_field.113:                  # @dpb_combine_field.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$210036353, -32(%rbp)   # imm = 0xC84E681
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB176_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB176_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB176_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB176_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_1
.LBB176_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB176_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB176_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB176_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB176_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_5
.LBB176_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB176_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB176_11
.LBB176_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB176_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB176_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB176_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB176_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB176_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB176_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB176_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB176_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB176_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB176_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB176_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB176_24
.LBB176_23:                             # %cond.false217
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB176_24:                             # %cond.end226
                                        #   in Loop: Header=BB176_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB176_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_20
.LBB176_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB176_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB176_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB176_31
.LBB176_30:                             # %cond.false269
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB176_31:                             # %cond.end278
                                        #   in Loop: Header=BB176_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB176_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_27
.LBB176_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB176_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB176_34 Depth=1
	movl	$0, -20(%rbp)
.LBB176_36:                             # %for.cond295
                                        #   Parent Loop BB176_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB176_40
.LBB176_39:                             # %cond.false445
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_40
.LBB176_40:                             # %cond.end446
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB176_43
.LBB176_42:                             # %cond.false462
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_43
.LBB176_43:                             # %cond.end463
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB176_46
.LBB176_45:                             # %cond.false479
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB176_46
.LBB176_46:                             # %cond.end480
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB176_49
.LBB176_48:                             # %cond.false501
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB176_49
.LBB176_49:                             # %cond.end502
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB176_52
.LBB176_51:                             # %cond.false647
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_52
.LBB176_52:                             # %cond.end648
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB176_55
.LBB176_54:                             # %cond.false665
                                        #   in Loop: Header=BB176_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB176_55
.LBB176_55:                             # %cond.end666
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB176_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB176_58
.LBB176_57:                             # %cond.false683
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB176_58
.LBB176_58:                             # %cond.end684
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB176_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB176_61
.LBB176_60:                             # %cond.false706
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB176_61
.LBB176_61:                             # %cond.end707
                                        #   in Loop: Header=BB176_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB176_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_36
.LBB176_63:                             # %for.end723
                                        #   in Loop: Header=BB176_34 Depth=1
	jmp	.LBB176_64
.LBB176_64:                             # %for.inc724
                                        #   in Loop: Header=BB176_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_34
.LBB176_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB176_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB176_76
.LBB176_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB176_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB176_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB176_68 Depth=1
	movl	$0, -20(%rbp)
.LBB176_70:                             # %for.cond737
                                        #   Parent Loop BB176_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB176_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB176_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB176_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB176_70
.LBB176_73:                             # %for.end758
                                        #   in Loop: Header=BB176_68 Depth=1
	jmp	.LBB176_74
.LBB176_74:                             # %for.inc759
                                        #   in Loop: Header=BB176_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB176_68
.LBB176_75:                             # %for.end761
	jmp	.LBB176_76
.LBB176_76:                             # %if.end762
	cmpl	$210036353, -32(%rbp)   # imm = 0xC84E681
	jne	.LBB176_78
.LBB176_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_77
.Lfunc_end176:
	.size	dpb_combine_field.113, .Lfunc_end176-dpb_combine_field.113
	.cfi_endproc
                                        # -- End function
	.globl	init_mbaff_lists.114    # -- Begin function init_mbaff_lists.114
	.p2align	4, 0x90
	.type	init_mbaff_lists.114,@function
init_mbaff_lists.114:                   # @init_mbaff_lists.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1430898529, -12(%rbp)  # imm = 0x5549C761
	movl	$2, -4(%rbp)
.LBB177_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB177_3 Depth 2
	cmpl	$6, -4(%rbp)
	jge	.LBB177_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB177_1 Depth=1
	movl	$0, -8(%rbp)
.LBB177_3:                              # %for.cond1
                                        #   Parent Loop BB177_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$33, -8(%rbp)
	jae	.LBB177_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB177_3 Depth=2
	movslq	-4(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movl	-8(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB177_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB177_3
.LBB177_6:                              # %for.end
                                        #   in Loop: Header=BB177_1 Depth=1
	movslq	-4(%rbp), %rax
	movl	$0, listXsize(,%rax,4)
# %bb.7:                                # %for.inc8
                                        #   in Loop: Header=BB177_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_1
.LBB177_8:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB177_9:                              # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB177_12
# %bb.10:                               # %for.body13
                                        #   in Loop: Header=BB177_9 Depth=1
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+16, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+32, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.11:                               # %for.inc36
                                        #   in Loop: Header=BB177_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_9
.LBB177_12:                             # %for.end38
	movl	listXsize, %eax
	shll	$1, %eax
	movl	%eax, listXsize+16
	movl	%eax, listXsize+8
	movl	$0, -4(%rbp)
.LBB177_13:                             # %for.cond40
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB177_16
# %bb.14:                               # %for.body42
                                        #   in Loop: Header=BB177_13 Depth=1
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+24, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6536(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	listX+8, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6528(%rax), %rax
	movq	listX+40, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB177_13 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB177_13
.LBB177_16:                             # %for.end71
	movl	listXsize+4, %eax
	shll	$1, %eax
	movl	%eax, listXsize+20
	movl	%eax, listXsize+12
	cmpl	$1430898529, -12(%rbp)  # imm = 0x5549C761
	jne	.LBB177_18
.LBB177_17:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_17
.Lfunc_end177:
	.size	init_mbaff_lists.114, .Lfunc_end177-init_mbaff_lists.114
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.115 # -- Begin function alloc_storable_picture.115
	.p2align	4, 0x90
	.type	alloc_storable_picture.115,@function
alloc_storable_picture.115:             # @alloc_storable_picture.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1375885298, -36(%rbp)  # imm = 0x520257F2
	movl	%edi, -40(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB178_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB178_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB178_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB178_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB178_6
.LBB178_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB178_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB178_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB178_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB178_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB178_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1375885298, -36(%rbp)  # imm = 0x520257F2
	jne	.LBB178_12
.LBB178_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_11
.Lfunc_end178:
	.size	alloc_storable_picture.115, .Lfunc_end178-alloc_storable_picture.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.116
	.type	compare_fs_by_frame_num_desc.116,@function
compare_fs_by_frame_num_desc.116:       # @compare_fs_by_frame_num_desc.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$519825565, -16(%rbp)   # imm = 0x1EFBE89D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB179_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB179_5
.LBB179_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB179_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB179_5
.LBB179_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB179_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$519825565, -16(%rbp)   # imm = 0x1EFBE89D
	jne	.LBB179_7
.LBB179_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_6
.Lfunc_end179:
	.size	compare_fs_by_frame_num_desc.116, .Lfunc_end179-compare_fs_by_frame_num_desc.116
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.117 # -- Begin function alloc_storable_picture.117
	.p2align	4, 0x90
	.type	alloc_storable_picture.117,@function
alloc_storable_picture.117:             # @alloc_storable_picture.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1076830680, -40(%rbp)  # imm = 0x402F21D8
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB180_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB180_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB180_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB180_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB180_6
.LBB180_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB180_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB180_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB180_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB180_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB180_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1076830680, -40(%rbp)  # imm = 0x402F21D8
	jne	.LBB180_12
.LBB180_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_11
.Lfunc_end180:
	.size	alloc_storable_picture.117, .Lfunc_end180-alloc_storable_picture.117
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.118   # -- Begin function gen_field_ref_ids.118
	.p2align	4, 0x90
	.type	gen_field_ref_ids.118,@function
gen_field_ref_ids.118:                  # @gen_field_ref_ids.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1783951136, -28(%rbp)  # imm = 0x6A54EF20
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB181_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB181_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB181_1 Depth=1
	movl	$0, -8(%rbp)
.LBB181_3:                              # %for.cond1
                                        #   Parent Loop BB181_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB181_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB181_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB181_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB181_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB181_7
.LBB181_6:                              # %cond.false
                                        #   in Loop: Header=BB181_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB181_7
.LBB181_7:                              # %cond.end
                                        #   in Loop: Header=BB181_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB181_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB181_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB181_10
.LBB181_9:                              # %cond.false32
                                        #   in Loop: Header=BB181_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB181_10
.LBB181_10:                             # %cond.end33
                                        #   in Loop: Header=BB181_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB181_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB181_3
.LBB181_12:                             # %for.end
                                        #   in Loop: Header=BB181_1 Depth=1
	jmp	.LBB181_13
.LBB181_13:                             # %for.inc45
                                        #   in Loop: Header=BB181_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB181_1
.LBB181_14:                             # %for.end47
	cmpl	$1783951136, -28(%rbp)  # imm = 0x6A54EF20
	jne	.LBB181_16
.LBB181_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_15
.Lfunc_end181:
	.size	gen_field_ref_ids.118, .Lfunc_end181-gen_field_ref_ids.118
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.119
	.type	compare_fs_by_poc_desc.119,@function
compare_fs_by_poc_desc.119:             # @compare_fs_by_poc_desc.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1750396849, -16(%rbp)  # imm = 0x6854EFB1
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB182_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB182_5
.LBB182_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB182_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB182_5
.LBB182_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB182_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1750396849, -16(%rbp)  # imm = 0x6854EFB1
	jne	.LBB182_7
.LBB182_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_6
.Lfunc_end182:
	.size	compare_fs_by_poc_desc.119, .Lfunc_end182-compare_fs_by_poc_desc.119
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.120     # -- Begin function alloc_colocated.120
	.p2align	4, 0x90
	.type	alloc_colocated.120,@function
alloc_colocated.120:                    # @alloc_colocated.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$109836074, -32(%rbp)   # imm = 0x68BF72A
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB183_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB183_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB183_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB183_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$109836074, -32(%rbp)   # imm = 0x68BF72A
	jne	.LBB183_6
.LBB183_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_5
.Lfunc_end183:
	.size	alloc_colocated.120, .Lfunc_end183-alloc_colocated.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function adaptive_memory_management.121
	.type	adaptive_memory_management.121,@function
adaptive_memory_management.121:         # @adaptive_memory_management.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$24368420, -20(%rbp)    # imm = 0x173D524
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	movl	$0, 72644(%rax)
.LBB184_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	img, %rax
	cmpq	$0, 72512(%rax)
	je	.LBB184_15
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	img(%rip), %rax
	movq	72512(%rax), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$6, %rcx
	ja	.LBB184_13
# %bb.3:                                # %while.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	.LJTI184_0(,%rax,8), %rax
	jmpq	*%rax
.LBB184_4:                              # %sw.bb
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-8(%rbp), %rax
	cmpq	$0, 24(%rax)
	je	.LBB184_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB184_1 Depth=1
	movabsq	$.L.str.22, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB184_6:                              # %if.end
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_14
.LBB184_7:                              # %sw.bb2
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	callq	mm_unmark_short_term_for_reference
	callq	update_ref_list
	jmp	.LBB184_14
.LBB184_8:                              # %sw.bb3
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	8(%rax), %esi
	callq	mm_unmark_long_term_for_reference
	callq	update_ltref_list
	jmp	.LBB184_14
.LBB184_9:                              # %sw.bb4
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	4(%rax), %esi
	movq	-8(%rbp), %rax
	movl	12(%rax), %edx
	callq	mm_assign_long_term_frame_idx
	callq	update_ref_list
	callq	update_ltref_list
	jmp	.LBB184_14
.LBB184_10:                             # %sw.bb6
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-8(%rbp), %rax
	movl	16(%rax), %edi
	callq	mm_update_max_long_term_frame_idx
	callq	update_ltref_list
	jmp	.LBB184_14
.LBB184_11:                             # %sw.bb7
                                        #   in Loop: Header=BB184_1 Depth=1
	callq	mm_unmark_all_short_term_for_reference
	callq	mm_unmark_all_long_term_for_reference
	movq	img, %rax
	movl	$1, 72644(%rax)
	jmp	.LBB184_14
.LBB184_12:                             # %sw.bb9
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-16(%rbp), %rdi
	movq	-8(%rbp), %rax
	movl	12(%rax), %esi
	callq	mm_mark_current_picture_long_term
	jmp	.LBB184_14
.LBB184_13:                             # %sw.default
                                        #   in Loop: Header=BB184_1 Depth=1
	movabsq	$.L.str.23, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB184_14:                             # %sw.epilog
                                        #   in Loop: Header=BB184_1 Depth=1
	movq	-8(%rbp), %rax
	movq	24(%rax), %rax
	movq	img, %rcx
	movq	%rax, 72512(%rcx)
	movq	-8(%rbp), %rdi
	callq	free
	jmp	.LBB184_1
.LBB184_15:                             # %while.end
	movq	img, %rax
	cmpl	$0, 72644(%rax)
	je	.LBB184_23
# %bb.16:                               # %if.then15
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 4(%rax)
	movq	img(%rip), %rax
	movl	$0, 72460(%rax)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	testl	%eax, %eax
	je	.LBB184_21
	jmp	.LBB184_17
.LBB184_17:                             # %if.then15
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB184_19
	jmp	.LBB184_18
.LBB184_18:                             # %if.then15
	subl	$2, %eax
	je	.LBB184_20
	jmp	.LBB184_22
.LBB184_19:                             # %sw.bb16
	movq	img, %rax
	movl	$0, 72448(%rax)
	jmp	.LBB184_22
.LBB184_20:                             # %sw.bb17
	movq	img, %rax
	movl	$0, 72452(%rax)
	jmp	.LBB184_22
.LBB184_21:                             # %sw.bb18
	movq	img, %rax
	movl	$0, 72456(%rax)
.LBB184_22:                             # %sw.epilog19
	callq	flush_dpb
.LBB184_23:                             # %if.end20
	cmpl	$24368420, -20(%rbp)    # imm = 0x173D524
	jne	.LBB184_25
.LBB184_24:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_24
.Lfunc_end184:
	.size	adaptive_memory_management.121, .Lfunc_end184-adaptive_memory_management.121
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI184_0:
	.quad	.LBB184_4
	.quad	.LBB184_7
	.quad	.LBB184_8
	.quad	.LBB184_9
	.quad	.LBB184_10
	.quad	.LBB184_11
	.quad	.LBB184_12
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.122
	.type	compare_pic_by_pic_num_desc.122,@function
compare_pic_by_pic_num_desc.122:        # @compare_pic_by_pic_num_desc.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$914203453, -16(%rbp)   # imm = 0x367DA33D
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB185_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB185_5
.LBB185_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB185_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB185_5
.LBB185_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB185_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$914203453, -16(%rbp)   # imm = 0x367DA33D
	jne	.LBB185_7
.LBB185_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_6
.Lfunc_end185:
	.size	compare_pic_by_pic_num_desc.122, .Lfunc_end185-compare_pic_by_pic_num_desc.122
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.123 # -- Begin function reorder_ref_pic_list.123
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.123,@function
reorder_ref_pic_list.123:               # @reorder_ref_pic_list.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$425768142, -60(%rbp)   # imm = 0x1960B4CE
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB186_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB186_3
.LBB186_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB186_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB186_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB186_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB186_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB186_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB186_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB186_7:                              # %if.end9
                                        #   in Loop: Header=BB186_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB186_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB186_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB186_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB186_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_12
.LBB186_11:                             # %if.else28
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB186_12:                             # %if.end33
                                        #   in Loop: Header=BB186_4 Depth=1
	jmp	.LBB186_17
.LBB186_13:                             # %if.else34
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB186_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_16
.LBB186_15:                             # %if.else46
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB186_16:                             # %if.end51
                                        #   in Loop: Header=BB186_4 Depth=1
	jmp	.LBB186_17
.LBB186_17:                             # %if.end52
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB186_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB186_20
.LBB186_19:                             # %if.else56
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB186_20:                             # %if.end57
                                        #   in Loop: Header=BB186_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB186_22
.LBB186_21:                             # %if.else58
                                        #   in Loop: Header=BB186_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB186_22:                             # %if.end61
                                        #   in Loop: Header=BB186_4 Depth=1
	jmp	.LBB186_23
.LBB186_23:                             # %for.inc
                                        #   in Loop: Header=BB186_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_4
.LBB186_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$425768142, -60(%rbp)   # imm = 0x1960B4CE
	jne	.LBB186_26
.LBB186_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_25
.Lfunc_end186:
	.size	reorder_ref_pic_list.123, .Lfunc_end186-reorder_ref_pic_list.123
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.124
	.type	reorder_long_term.124,@function
reorder_long_term.124:                  # @reorder_long_term.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1608330586, -44(%rbp)  # imm = 0x5FDD2D5A
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB187_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB187_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB187_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB187_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_1
.LBB187_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB187_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB187_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB187_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB187_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB187_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB187_9
.LBB187_8:                              # %if.then
                                        #   in Loop: Header=BB187_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB187_9:                              # %if.end
                                        #   in Loop: Header=BB187_5 Depth=1
	jmp	.LBB187_10
.LBB187_10:                             # %for.inc19
                                        #   in Loop: Header=BB187_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB187_5
.LBB187_11:                             # %for.end21
	cmpl	$1608330586, -44(%rbp)  # imm = 0x5FDD2D5A
	jne	.LBB187_13
.LBB187_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_12
.Lfunc_end187:
	.size	reorder_long_term.124, .Lfunc_end187-reorder_long_term.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.125
	.type	mm_assign_long_term_frame_idx.125,@function
mm_assign_long_term_frame_idx.125:      # @mm_assign_long_term_frame_idx.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1500593224, -32(%rbp)  # imm = 0x59713C48
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-28(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB188_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB188_18
.LBB188_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB188_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB188_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB188_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB188_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB188_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB188_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB188_15
.LBB188_7:                              # %if.end
                                        #   in Loop: Header=BB188_3 Depth=1
	jmp	.LBB188_8
.LBB188_8:                              # %if.end8
                                        #   in Loop: Header=BB188_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB188_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB188_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB188_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB188_15
.LBB188_11:                             # %if.end20
                                        #   in Loop: Header=BB188_3 Depth=1
	jmp	.LBB188_12
.LBB188_12:                             # %if.end21
                                        #   in Loop: Header=BB188_3 Depth=1
	jmp	.LBB188_13
.LBB188_13:                             # %for.inc
                                        #   in Loop: Header=BB188_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_3
.LBB188_14:                             # %for.end.loopexit
	jmp	.LBB188_15
.LBB188_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB188_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB188_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB188_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$1500593224, -32(%rbp)  # imm = 0x59713C48
	jne	.LBB188_20
.LBB188_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_19
.Lfunc_end188:
	.size	mm_assign_long_term_frame_idx.125, .Lfunc_end188-mm_assign_long_term_frame_idx.125
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.126
	.type	unmark_long_term_field_for_reference_by_frame_idx.126,@function
unmark_long_term_field_for_reference_by_frame_idx.126: # @unmark_long_term_field_for_reference_by_frame_idx.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$947347089, -32(%rbp)   # imm = 0x38775E91
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB189_2
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB189_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB189_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB189_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB189_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB189_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB189_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB189_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB189_23
.LBB189_8:                              # %if.else
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB189_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB189_22
.LBB189_10:                             # %if.else21
                                        #   in Loop: Header=BB189_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB189_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB189_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB189_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB189_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB189_15
.LBB189_14:                             # %if.then29
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB189_15:                             # %if.end32
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_17
.LBB189_16:                             # %if.else33
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB189_17:                             # %if.end36
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_21
.LBB189_18:                             # %if.else37
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB189_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB189_20:                             # %if.end45
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_21
.LBB189_21:                             # %if.end46
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_22
.LBB189_22:                             # %if.end47
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_23
.LBB189_23:                             # %if.end48
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_24
.LBB189_24:                             # %if.end49
                                        #   in Loop: Header=BB189_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB189_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB189_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB189_42
.LBB189_27:                             # %if.else59
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB189_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB189_41
.LBB189_29:                             # %if.else67
                                        #   in Loop: Header=BB189_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB189_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB189_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB189_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB189_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB189_34
.LBB189_33:                             # %if.then78
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB189_34:                             # %if.end81
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_36
.LBB189_35:                             # %if.else82
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB189_36:                             # %if.end85
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_40
.LBB189_37:                             # %if.else86
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB189_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB189_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB189_39:                             # %if.end95
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_40
.LBB189_40:                             # %if.end96
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_41
.LBB189_41:                             # %if.end97
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_42
.LBB189_42:                             # %if.end98
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_43
.LBB189_43:                             # %if.end99
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_44
.LBB189_44:                             # %if.end100
                                        #   in Loop: Header=BB189_3 Depth=1
	jmp	.LBB189_45
.LBB189_45:                             # %for.inc
                                        #   in Loop: Header=BB189_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB189_3
.LBB189_46:                             # %for.end
	cmpl	$947347089, -32(%rbp)   # imm = 0x38775E91
	jne	.LBB189_48
.LBB189_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_47
.Lfunc_end189:
	.size	unmark_long_term_field_for_reference_by_frame_idx.126, .Lfunc_end189-unmark_long_term_field_for_reference_by_frame_idx.126
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.127
	.type	reorder_short_term.127,@function
reorder_short_term.127:                 # @reorder_short_term.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$774888380, -44(%rbp)   # imm = 0x2E2FDBBC
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB190_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB190_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB190_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB190_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_1
.LBB190_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB190_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB190_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB190_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB190_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB190_10
.LBB190_9:                              # %if.then17
                                        #   in Loop: Header=BB190_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB190_10:                             # %if.end
                                        #   in Loop: Header=BB190_5 Depth=1
	jmp	.LBB190_11
.LBB190_11:                             # %if.end23
                                        #   in Loop: Header=BB190_5 Depth=1
	jmp	.LBB190_12
.LBB190_12:                             # %for.inc24
                                        #   in Loop: Header=BB190_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_5
.LBB190_13:                             # %for.end26
	cmpl	$774888380, -44(%rbp)   # imm = 0x2E2FDBBC
	jne	.LBB190_15
.LBB190_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_14
.Lfunc_end190:
	.size	reorder_short_term.127, .Lfunc_end190-reorder_short_term.127
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function idr_memory_management.128
	.type	idr_memory_management.128,@function
idr_memory_management.128:              # @idr_memory_management.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1312484743, -20(%rbp)  # imm = 0x4E3AED87
	movq	%rdi, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72504(%rax)
	je	.LBB191_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB191_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB191_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB191_2 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	free_frame_store
	callq	alloc_frame_store
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB191_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB191_2
.LBB191_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB191_6:                              # %for.cond3
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB191_9
# %bb.7:                                # %for.body5
                                        #   in Loop: Header=BB191_6 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.8:                                # %for.inc8
                                        #   in Loop: Header=BB191_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB191_6
.LBB191_9:                              # %for.end10
	movl	$0, -4(%rbp)
.LBB191_10:                             # %for.cond11
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB191_13
# %bb.11:                               # %for.body13
                                        #   in Loop: Header=BB191_10 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.12:                               # %for.inc16
                                        #   in Loop: Header=BB191_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB191_10
.LBB191_13:                             # %for.end18
	movl	$0, dpb+28
	jmp	.LBB191_15
.LBB191_14:                             # %if.else
	callq	flush_dpb
.LBB191_15:                             # %if.end
	movq	$0, dpb+56
	callq	update_ref_list
	callq	update_ltref_list
	movl	$-2147483648, dpb+40    # imm = 0x80000000
	movq	img, %rax
	cmpl	$0, 72508(%rax)
	je	.LBB191_17
# %bb.16:                               # %if.then20
	movl	$0, dpb+44
	movq	-16(%rbp), %rax
	movl	$1, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	jmp	.LBB191_18
.LBB191_17:                             # %if.else21
	movl	$-1, dpb+44
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
.LBB191_18:                             # %if.end23
	cmpl	$1312484743, -20(%rbp)  # imm = 0x4E3AED87
	jne	.LBB191_20
.LBB191_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_19
.Lfunc_end191:
	.size	idr_memory_management.128, .Lfunc_end191-idr_memory_management.128
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.129 # -- Begin function reorder_ref_pic_list.129
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.129,@function
reorder_ref_pic_list.129:               # @reorder_ref_pic_list.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$152682737, -60(%rbp)   # imm = 0x919C0F1
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB192_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB192_3
.LBB192_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB192_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB192_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB192_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB192_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB192_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB192_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB192_7:                              # %if.end9
                                        #   in Loop: Header=BB192_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB192_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB192_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB192_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB192_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB192_12
.LBB192_11:                             # %if.else28
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB192_12:                             # %if.end33
                                        #   in Loop: Header=BB192_4 Depth=1
	jmp	.LBB192_17
.LBB192_13:                             # %if.else34
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB192_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB192_16
.LBB192_15:                             # %if.else46
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB192_16:                             # %if.end51
                                        #   in Loop: Header=BB192_4 Depth=1
	jmp	.LBB192_17
.LBB192_17:                             # %if.end52
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB192_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB192_20
.LBB192_19:                             # %if.else56
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB192_20:                             # %if.end57
                                        #   in Loop: Header=BB192_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB192_22
.LBB192_21:                             # %if.else58
                                        #   in Loop: Header=BB192_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB192_22:                             # %if.end61
                                        #   in Loop: Header=BB192_4 Depth=1
	jmp	.LBB192_23
.LBB192_23:                             # %for.inc
                                        #   in Loop: Header=BB192_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB192_4
.LBB192_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$152682737, -60(%rbp)   # imm = 0x919C0F1
	jne	.LBB192_26
.LBB192_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_25
.Lfunc_end192:
	.size	reorder_ref_pic_list.129, .Lfunc_end192-reorder_ref_pic_list.129
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.130
	.type	get_long_term_pic.130,@function
get_long_term_pic.130:                  # @get_long_term_pic.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$836944466, -28(%rbp)   # imm = 0x31E2C252
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB193_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB193_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB193_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB193_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB193_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB193_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB193_23
.LBB193_7:                              # %if.end
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_8
.LBB193_8:                              # %if.end14
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_20
.LBB193_9:                              # %if.else
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB193_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB193_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB193_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB193_23
.LBB193_13:                             # %if.end34
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_14
.LBB193_14:                             # %if.end35
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB193_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB193_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB193_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB193_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB193_23
.LBB193_18:                             # %if.end56
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_19
.LBB193_19:                             # %if.end57
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_20
.LBB193_20:                             # %if.end58
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_21
.LBB193_21:                             # %for.inc
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB193_1
.LBB193_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB193_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$836944466, -28(%rbp)   # imm = 0x31E2C252
	jne	.LBB193_25
.LBB193_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_24
.Lfunc_end193:
	.size	get_long_term_pic.130, .Lfunc_end193-get_long_term_pic.130
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.131
	.type	compare_pic_by_lt_pic_num_asc.131,@function
compare_pic_by_lt_pic_num_asc.131:      # @compare_pic_by_lt_pic_num_asc.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$108907984, -16(%rbp)   # imm = 0x67DCDD0
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB194_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB194_5
.LBB194_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB194_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB194_5
.LBB194_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB194_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$108907984, -16(%rbp)   # imm = 0x67DCDD0
	jne	.LBB194_7
.LBB194_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_6
.Lfunc_end194:
	.size	compare_pic_by_lt_pic_num_asc.131, .Lfunc_end194-compare_pic_by_lt_pic_num_asc.131
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.132
	.type	get_smallest_poc.132,@function
get_smallest_poc.132:                   # @get_smallest_poc.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$279695895, -20(%rbp)   # imm = 0x10ABD217
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB195_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB195_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB195_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB195_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB195_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB195_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB195_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB195_7:                              # %if.end10
                                        #   in Loop: Header=BB195_3 Depth=1
	jmp	.LBB195_8
.LBB195_8:                              # %for.inc
                                        #   in Loop: Header=BB195_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_3
.LBB195_9:                              # %for.end
	cmpl	$279695895, -20(%rbp)   # imm = 0x10ABD217
	jne	.LBB195_11
.LBB195_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_10
.Lfunc_end195:
	.size	get_smallest_poc.132, .Lfunc_end195-get_smallest_poc.132
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.133
	.type	gen_pic_list_from_frame_list.133,@function
gen_pic_list_from_frame_list.133:       # @gen_pic_list_from_frame_list.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1124503441, -64(%rbp)  # imm = 0x43068F91
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB196_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB196_3
.LBB196_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB196_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB196_28
# %bb.4:                                # %if.then1
	jmp	.LBB196_5
.LBB196_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_9 Depth 2
                                        #     Child Loop BB196_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB196_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB196_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB196_7:                              # %lor.end
                                        #   in Loop: Header=BB196_5 Depth=1
	testb	$1, %al
	jne	.LBB196_8
	jmp	.LBB196_27
.LBB196_8:                              # %while.body
                                        #   in Loop: Header=BB196_5 Depth=1
	jmp	.LBB196_9
.LBB196_9:                              # %for.cond
                                        #   Parent Loop BB196_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB196_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB196_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB196_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB196_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB196_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB196_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB196_17
.LBB196_13:                             # %if.end17
                                        #   in Loop: Header=BB196_9 Depth=2
	jmp	.LBB196_14
.LBB196_14:                             # %if.end18
                                        #   in Loop: Header=BB196_9 Depth=2
	jmp	.LBB196_15
.LBB196_15:                             # %for.inc
                                        #   in Loop: Header=BB196_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB196_9
.LBB196_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB196_5 Depth=1
	jmp	.LBB196_17
.LBB196_17:                             # %for.end
                                        #   in Loop: Header=BB196_5 Depth=1
	jmp	.LBB196_18
.LBB196_18:                             # %for.cond20
                                        #   Parent Loop BB196_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB196_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB196_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB196_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB196_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB196_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB196_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_26
.LBB196_22:                             # %if.end41
                                        #   in Loop: Header=BB196_18 Depth=2
	jmp	.LBB196_23
.LBB196_23:                             # %if.end42
                                        #   in Loop: Header=BB196_18 Depth=2
	jmp	.LBB196_24
.LBB196_24:                             # %for.inc43
                                        #   in Loop: Header=BB196_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_18
.LBB196_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB196_5 Depth=1
	jmp	.LBB196_26
.LBB196_26:                             # %for.end45
                                        #   in Loop: Header=BB196_5 Depth=1
	jmp	.LBB196_5
.LBB196_27:                             # %while.end
	jmp	.LBB196_28
.LBB196_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB196_53
# %bb.29:                               # %if.then48
	jmp	.LBB196_30
.LBB196_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_34 Depth 2
                                        #     Child Loop BB196_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB196_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB196_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB196_32:                             # %lor.end53
                                        #   in Loop: Header=BB196_30 Depth=1
	testb	$1, %al
	jne	.LBB196_33
	jmp	.LBB196_52
.LBB196_33:                             # %while.body54
                                        #   in Loop: Header=BB196_30 Depth=1
	jmp	.LBB196_34
.LBB196_34:                             # %for.cond55
                                        #   Parent Loop BB196_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB196_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB196_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB196_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB196_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB196_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB196_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_42
.LBB196_38:                             # %if.end77
                                        #   in Loop: Header=BB196_34 Depth=2
	jmp	.LBB196_39
.LBB196_39:                             # %if.end78
                                        #   in Loop: Header=BB196_34 Depth=2
	jmp	.LBB196_40
.LBB196_40:                             # %for.inc79
                                        #   in Loop: Header=BB196_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB196_34
.LBB196_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB196_30 Depth=1
	jmp	.LBB196_42
.LBB196_42:                             # %for.end81
                                        #   in Loop: Header=BB196_30 Depth=1
	jmp	.LBB196_43
.LBB196_43:                             # %for.cond82
                                        #   Parent Loop BB196_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB196_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB196_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB196_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB196_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB196_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB196_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB196_51
.LBB196_47:                             # %if.end104
                                        #   in Loop: Header=BB196_43 Depth=2
	jmp	.LBB196_48
.LBB196_48:                             # %if.end105
                                        #   in Loop: Header=BB196_43 Depth=2
	jmp	.LBB196_49
.LBB196_49:                             # %for.inc106
                                        #   in Loop: Header=BB196_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB196_43
.LBB196_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB196_30 Depth=1
	jmp	.LBB196_51
.LBB196_51:                             # %for.end108
                                        #   in Loop: Header=BB196_30 Depth=1
	jmp	.LBB196_30
.LBB196_52:                             # %while.end109
	jmp	.LBB196_53
.LBB196_53:                             # %if.end110
	cmpl	$1124503441, -64(%rbp)  # imm = 0x43068F91
	jne	.LBB196_55
.LBB196_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_54
.Lfunc_end196:
	.size	gen_pic_list_from_frame_list.133, .Lfunc_end196-gen_pic_list_from_frame_list.133
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.134
	.type	get_smallest_poc.134,@function
get_smallest_poc.134:                   # @get_smallest_poc.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1531483336, -20(%rbp)  # imm = 0x5B4894C8
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB197_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB197_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB197_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB197_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB197_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB197_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB197_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB197_7:                              # %if.end10
                                        #   in Loop: Header=BB197_3 Depth=1
	jmp	.LBB197_8
.LBB197_8:                              # %for.inc
                                        #   in Loop: Header=BB197_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB197_3
.LBB197_9:                              # %for.end
	cmpl	$1531483336, -20(%rbp)  # imm = 0x5B4894C8
	jne	.LBB197_11
.LBB197_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_10
.Lfunc_end197:
	.size	get_smallest_poc.134, .Lfunc_end197-get_smallest_poc.134
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.135
	.type	mark_pic_long_term.135,@function
mark_pic_long_term.135:                 # @mark_pic_long_term.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$338341630, -20(%rbp)   # imm = 0x142AAEFE
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB198_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB198_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB198_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB198_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB198_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB198_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB198_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB198_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB198_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB198_39
.LBB198_7:                              # %if.end
                                        #   in Loop: Header=BB198_2 Depth=1
	jmp	.LBB198_8
.LBB198_8:                              # %if.end50
                                        #   in Loop: Header=BB198_2 Depth=1
	jmp	.LBB198_9
.LBB198_9:                              # %for.inc
                                        #   in Loop: Header=BB198_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB198_2
.LBB198_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB198_39
.LBB198_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB198_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB198_14
.LBB198_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -24(%rbp)
.LBB198_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB198_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB198_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB198_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB198_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB198_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB198_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB198_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB198_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB198_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB198_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB198_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB198_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB198_24:                             # %if.end123
	jmp	.LBB198_39
.LBB198_25:                             # %if.end124
                                        #   in Loop: Header=BB198_15 Depth=1
	jmp	.LBB198_26
.LBB198_26:                             # %if.end125
                                        #   in Loop: Header=BB198_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB198_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB198_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB198_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB198_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB198_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB198_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB198_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB198_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB198_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB198_34:                             # %if.end194
	jmp	.LBB198_39
.LBB198_35:                             # %if.end195
                                        #   in Loop: Header=BB198_15 Depth=1
	jmp	.LBB198_36
.LBB198_36:                             # %if.end196
                                        #   in Loop: Header=BB198_15 Depth=1
	jmp	.LBB198_37
.LBB198_37:                             # %for.inc197
                                        #   in Loop: Header=BB198_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB198_15
.LBB198_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB198_39:                             # %if.end201
	cmpl	$338341630, -20(%rbp)   # imm = 0x142AAEFE
	jne	.LBB198_41
.LBB198_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_40
.Lfunc_end198:
	.size	mark_pic_long_term.135, .Lfunc_end198-mark_pic_long_term.135
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.136
	.type	mm_unmark_short_term_for_reference.136,@function
mm_unmark_short_term_for_reference.136: # @mm_unmark_short_term_for_reference.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1540923723, -12(%rbp)  # imm = 0x5BD8A14B
	movq	%rdi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB199_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB199_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB199_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB199_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB199_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB199_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB199_27
.LBB199_7:                              # %if.end
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_8
.LBB199_8:                              # %if.end13
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_24
.LBB199_9:                              # %if.else
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB199_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB199_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB199_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB199_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB199_14:                             # %if.end44
	jmp	.LBB199_27
.LBB199_15:                             # %if.end45
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_16
.LBB199_16:                             # %if.end46
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB199_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB199_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB199_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB199_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB199_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB199_21:                             # %if.end81
	jmp	.LBB199_27
.LBB199_22:                             # %if.end82
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_23
.LBB199_23:                             # %if.end83
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_24
.LBB199_24:                             # %if.end84
                                        #   in Loop: Header=BB199_1 Depth=1
	jmp	.LBB199_25
.LBB199_25:                             # %for.inc
                                        #   in Loop: Header=BB199_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB199_1
.LBB199_26:                             # %for.end.loopexit
	jmp	.LBB199_27
.LBB199_27:                             # %for.end
	cmpl	$1540923723, -12(%rbp)  # imm = 0x5BD8A14B
	jne	.LBB199_29
.LBB199_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_28
.Lfunc_end199:
	.size	mm_unmark_short_term_for_reference.136, .Lfunc_end199-mm_unmark_short_term_for_reference.136
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.137     # -- Begin function alloc_colocated.137
	.p2align	4, 0x90
	.type	alloc_colocated.137,@function
alloc_colocated.137:                    # @alloc_colocated.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$587584291, -32(%rbp)   # imm = 0x2305D323
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB200_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB200_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB200_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB200_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$587584291, -32(%rbp)   # imm = 0x2305D323
	jne	.LBB200_6
.LBB200_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_5
.Lfunc_end200:
	.size	alloc_colocated.137, .Lfunc_end200-alloc_colocated.137
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.138
	.type	get_smallest_poc.138,@function
get_smallest_poc.138:                   # @get_smallest_poc.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$974677779, -20(%rbp)   # imm = 0x3A186713
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB201_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB201_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB201_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB201_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB201_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB201_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB201_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB201_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB201_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB201_7:                              # %if.end10
                                        #   in Loop: Header=BB201_3 Depth=1
	jmp	.LBB201_8
.LBB201_8:                              # %for.inc
                                        #   in Loop: Header=BB201_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB201_3
.LBB201_9:                              # %for.end
	cmpl	$974677779, -20(%rbp)   # imm = 0x3A186713
	jne	.LBB201_11
.LBB201_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_10
.Lfunc_end201:
	.size	get_smallest_poc.138, .Lfunc_end201-get_smallest_poc.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.139
	.type	compare_pic_by_lt_pic_num_asc.139,@function
compare_pic_by_lt_pic_num_asc.139:      # @compare_pic_by_lt_pic_num_asc.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1131249206, -16(%rbp)  # imm = 0x436D7E36
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB202_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB202_5
.LBB202_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB202_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB202_5
.LBB202_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB202_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1131249206, -16(%rbp)  # imm = 0x436D7E36
	jne	.LBB202_7
.LBB202_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_6
.Lfunc_end202:
	.size	compare_pic_by_lt_pic_num_asc.139, .Lfunc_end202-compare_pic_by_lt_pic_num_asc.139
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.140
	.type	compare_fs_by_poc_asc.140,@function
compare_fs_by_poc_asc.140:              # @compare_fs_by_poc_asc.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2066213008, -16(%rbp)  # imm = 0x7B27E890
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB203_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB203_5
.LBB203_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB203_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB203_5
.LBB203_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB203_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2066213008, -16(%rbp)  # imm = 0x7B27E890
	jne	.LBB203_7
.LBB203_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_6
.Lfunc_end203:
	.size	compare_fs_by_poc_asc.140, .Lfunc_end203-compare_fs_by_poc_asc.140
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.141     # -- Begin function dpb_split_field.141
	.p2align	4, 0x90
	.type	dpb_split_field.141,@function
dpb_split_field.141:                    # @dpb_split_field.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$581553127, -68(%rbp)   # imm = 0x22A9CBE7
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB204_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB204_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB204_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB204_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_2
.LBB204_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB204_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB204_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB204_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_6
.LBB204_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB204_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB204_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB204_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_10
.LBB204_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB204_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB204_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB204_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_14
.LBB204_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB204_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB204_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB204_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB204_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB204_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_19
.LBB204_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB204_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB204_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB204_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB204_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_23
.LBB204_26:                             # %for.end328
	jmp	.LBB204_27
.LBB204_27:                             # %if.end
	jmp	.LBB204_29
.LBB204_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB204_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB204_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB204_30 Depth=1
	movl	$0, -4(%rbp)
.LBB204_32:                             # %for.cond343
                                        #   Parent Loop BB204_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB204_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -72(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-72(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB204_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB204_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB204_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB204_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB204_38
.LBB204_37:                             # %cond.false
                                        #   in Loop: Header=BB204_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_38
.LBB204_38:                             # %cond.end
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB204_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB204_41
.LBB204_40:                             # %cond.false415
                                        #   in Loop: Header=BB204_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_41
.LBB204_41:                             # %cond.end416
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB204_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB204_44
.LBB204_43:                             # %cond.false436
                                        #   in Loop: Header=BB204_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_44
.LBB204_44:                             # %cond.end437
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB204_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB204_47
.LBB204_46:                             # %cond.false456
                                        #   in Loop: Header=BB204_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_47
.LBB204_47:                             # %cond.end457
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB204_55
.LBB204_48:                             # %if.else466
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB204_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB204_51
.LBB204_50:                             # %cond.false491
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB204_51
.LBB204_51:                             # %cond.end492
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB204_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB204_54
.LBB204_53:                             # %cond.false509
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB204_54
.LBB204_54:                             # %cond.end510
                                        #   in Loop: Header=BB204_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_55:                             # %if.end519
                                        #   in Loop: Header=BB204_32 Depth=2
	jmp	.LBB204_56
.LBB204_56:                             # %for.inc520
                                        #   in Loop: Header=BB204_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_32
.LBB204_57:                             # %for.end522
                                        #   in Loop: Header=BB204_30 Depth=1
	jmp	.LBB204_58
.LBB204_58:                             # %for.inc523
                                        #   in Loop: Header=BB204_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB204_30
.LBB204_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB204_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB204_73
.LBB204_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB204_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB204_62 Depth=1
	movl	$0, -8(%rbp)
.LBB204_64:                             # %for.cond538
                                        #   Parent Loop BB204_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB204_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB204_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB204_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-56(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB204_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB204_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_68:                             # %if.end908
                                        #   in Loop: Header=BB204_64 Depth=2
	jmp	.LBB204_69
.LBB204_69:                             # %for.inc909
                                        #   in Loop: Header=BB204_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB204_64
.LBB204_70:                             # %for.end911
                                        #   in Loop: Header=BB204_62 Depth=1
	jmp	.LBB204_71
.LBB204_71:                             # %for.inc912
                                        #   in Loop: Header=BB204_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_62
.LBB204_72:                             # %for.end914
	jmp	.LBB204_73
.LBB204_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB204_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB204_74 Depth=1
	movl	$0, -8(%rbp)
.LBB204_76:                             # %for.cond923
                                        #   Parent Loop BB204_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB204_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB204_148
.LBB204_79:                             # %if.then954
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB204_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_83
.LBB204_82:                             # %cond.false991
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_83:                             # %cond.end993
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_86
.LBB204_85:                             # %cond.false1001
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_86:                             # %cond.end1003
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_89
.LBB204_88:                             # %cond.false1032
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_89:                             # %cond.end1034
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_92
.LBB204_91:                             # %cond.false1042
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_92:                             # %cond.end1044
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_95
.LBB204_94:                             # %cond.false1073
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_95:                             # %cond.end1075
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_98
.LBB204_97:                             # %cond.false1083
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_98:                             # %cond.end1085
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_101
.LBB204_100:                            # %cond.false1114
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_101:                            # %cond.end1116
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_104
.LBB204_103:                            # %cond.false1124
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_104:                            # %cond.end1126
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_107
.LBB204_106:                            # %cond.false1155
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_107:                            # %cond.end1157
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_110
.LBB204_109:                            # %cond.false1165
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_110:                            # %cond.end1167
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB204_125
.LBB204_112:                            # %if.else1190
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_115
.LBB204_114:                            # %cond.false1198
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_115:                            # %cond.end1200
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_118
.LBB204_117:                            # %cond.false1208
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_118:                            # %cond.end1210
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB204_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB204_121
.LBB204_120:                            # %cond.false1237
                                        #   in Loop: Header=BB204_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_121
.LBB204_121:                            # %cond.end1238
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB204_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB204_124
.LBB204_123:                            # %cond.false1254
                                        #   in Loop: Header=BB204_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_124
.LBB204_124:                            # %cond.end1255
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_125:                            # %if.end1264
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_128
.LBB204_127:                            # %cond.false1272
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_128:                            # %cond.end1274
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_131
.LBB204_130:                            # %cond.false1282
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_131:                            # %cond.end1284
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB204_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB204_146
.LBB204_133:                            # %if.else1307
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_136
.LBB204_135:                            # %cond.false1315
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_136:                            # %cond.end1317
                                        #   in Loop: Header=BB204_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB204_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB204_139
.LBB204_138:                            # %cond.false1325
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB204_139:                            # %cond.end1327
                                        #   in Loop: Header=BB204_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB204_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB204_142
.LBB204_141:                            # %cond.false1355
                                        #   in Loop: Header=BB204_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_142
.LBB204_142:                            # %cond.end1356
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB204_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB204_145
.LBB204_144:                            # %cond.false1373
                                        #   in Loop: Header=BB204_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_145
.LBB204_145:                            # %cond.end1374
                                        #   in Loop: Header=BB204_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB204_146:                            # %if.end1383
                                        #   in Loop: Header=BB204_76 Depth=2
	jmp	.LBB204_147
.LBB204_147:                            # %if.end1384
                                        #   in Loop: Header=BB204_76 Depth=2
	jmp	.LBB204_148
.LBB204_148:                            # %if.end1385
                                        #   in Loop: Header=BB204_76 Depth=2
	jmp	.LBB204_149
.LBB204_149:                            # %for.inc1386
                                        #   in Loop: Header=BB204_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB204_76
.LBB204_150:                            # %for.end1388
                                        #   in Loop: Header=BB204_74 Depth=1
	jmp	.LBB204_151
.LBB204_151:                            # %for.inc1389
                                        #   in Loop: Header=BB204_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_74
.LBB204_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB204_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB204_153 Depth=1
	movl	$0, -4(%rbp)
.LBB204_155:                            # %for.cond1399
                                        #   Parent Loop BB204_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB204_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB204_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_155
.LBB204_158:                            # %for.end1414
                                        #   in Loop: Header=BB204_153 Depth=1
	jmp	.LBB204_159
.LBB204_159:                            # %for.inc1415
                                        #   in Loop: Header=BB204_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB204_153
.LBB204_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB204_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB204_174
.LBB204_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB204_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB204_163 Depth=1
	movl	$0, -4(%rbp)
.LBB204_165:                            # %for.cond1431
                                        #   Parent Loop BB204_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB204_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB204_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB204_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB204_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB204_169
.LBB204_168:                            # %cond.false1462
                                        #   in Loop: Header=BB204_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB204_169
.LBB204_169:                            # %cond.end1463
                                        #   in Loop: Header=BB204_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB204_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB204_165
.LBB204_171:                            # %for.end1474
                                        #   in Loop: Header=BB204_163 Depth=1
	jmp	.LBB204_172
.LBB204_172:                            # %for.inc1475
                                        #   in Loop: Header=BB204_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB204_163
.LBB204_173:                            # %for.end1477
	jmp	.LBB204_174
.LBB204_174:                            # %if.end1478
	cmpl	$581553127, -68(%rbp)   # imm = 0x22A9CBE7
	jne	.LBB204_176
.LBB204_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_175
.Lfunc_end204:
	.size	dpb_split_field.141, .Lfunc_end204-dpb_split_field.141
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_asc.142
	.type	compare_fs_by_poc_asc.142,@function
compare_fs_by_poc_asc.142:              # @compare_fs_by_poc_asc.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$434789608, -16(%rbp)   # imm = 0x19EA5CE8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB205_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB205_5
.LBB205_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB205_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB205_5
.LBB205_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB205_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$434789608, -16(%rbp)   # imm = 0x19EA5CE8
	jne	.LBB205_7
.LBB205_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_6
.Lfunc_end205:
	.size	compare_fs_by_poc_asc.142, .Lfunc_end205-compare_fs_by_poc_asc.142
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.143
	.type	get_short_term_pic.143,@function
get_short_term_pic.143:                 # @get_short_term_pic.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2132824493, -28(%rbp)  # imm = 0x7F2051AD
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB206_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB206_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB206_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB206_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB206_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB206_23
.LBB206_7:                              # %if.end
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_8
.LBB206_8:                              # %if.end14
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_20
.LBB206_9:                              # %if.else
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB206_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB206_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB206_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB206_23
.LBB206_13:                             # %if.end34
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_14
.LBB206_14:                             # %if.end35
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB206_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB206_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB206_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB206_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB206_23
.LBB206_18:                             # %if.end56
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_19
.LBB206_19:                             # %if.end57
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_20
.LBB206_20:                             # %if.end58
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_21
.LBB206_21:                             # %for.inc
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_1
.LBB206_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB206_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$2132824493, -28(%rbp)  # imm = 0x7F2051AD
	jne	.LBB206_25
.LBB206_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_24
.Lfunc_end206:
	.size	get_short_term_pic.143, .Lfunc_end206-get_short_term_pic.143
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.144   # -- Begin function gen_field_ref_ids.144
	.p2align	4, 0x90
	.type	gen_field_ref_ids.144,@function
gen_field_ref_ids.144:                  # @gen_field_ref_ids.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1852087054, -28(%rbp)  # imm = 0x6E649B0E
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB207_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB207_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	$0, -8(%rbp)
.LBB207_3:                              # %for.cond1
                                        #   Parent Loop BB207_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB207_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB207_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB207_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB207_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB207_7
.LBB207_6:                              # %cond.false
                                        #   in Loop: Header=BB207_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB207_7
.LBB207_7:                              # %cond.end
                                        #   in Loop: Header=BB207_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB207_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB207_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB207_10
.LBB207_9:                              # %cond.false32
                                        #   in Loop: Header=BB207_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB207_10
.LBB207_10:                             # %cond.end33
                                        #   in Loop: Header=BB207_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB207_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_3
.LBB207_12:                             # %for.end
                                        #   in Loop: Header=BB207_1 Depth=1
	jmp	.LBB207_13
.LBB207_13:                             # %for.inc45
                                        #   in Loop: Header=BB207_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_1
.LBB207_14:                             # %for.end47
	cmpl	$1852087054, -28(%rbp)  # imm = 0x6E649B0E
	jne	.LBB207_16
.LBB207_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_15
.Lfunc_end207:
	.size	gen_field_ref_ids.144, .Lfunc_end207-gen_field_ref_ids.144
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.145
	.type	remove_frame_from_dpb.145,@function
remove_frame_from_dpb.145:              # @remove_frame_from_dpb.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$508287622, -20(%rbp)   # imm = 0x1E4BDA86
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB208_6
# %bb.1:                                # %entry
	movq	.LJTI208_0(,%rax,8), %rax
	jmpq	*%rax
.LBB208_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB208_7
.LBB208_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB208_7
.LBB208_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB208_7
.LBB208_5:                              # %sw.bb10
	jmp	.LBB208_7
.LBB208_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB208_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB208_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB208_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB208_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB208_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_8
.LBB208_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$508287622, -20(%rbp)   # imm = 0x1E4BDA86
	jne	.LBB208_13
.LBB208_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_12
.Lfunc_end208:
	.size	remove_frame_from_dpb.145, .Lfunc_end208-remove_frame_from_dpb.145
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI208_0:
	.quad	.LBB208_5
	.quad	.LBB208_4
	.quad	.LBB208_3
	.quad	.LBB208_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.146
	.type	compare_fs_by_poc_desc.146,@function
compare_fs_by_poc_desc.146:             # @compare_fs_by_poc_desc.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1875998337, -16(%rbp)  # imm = 0x6FD17681
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB209_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB209_5
.LBB209_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB209_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB209_5
.LBB209_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB209_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1875998337, -16(%rbp)  # imm = 0x6FD17681
	jne	.LBB209_7
.LBB209_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_6
.Lfunc_end209:
	.size	compare_fs_by_poc_desc.146, .Lfunc_end209-compare_fs_by_poc_desc.146
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.147
	.type	reorder_short_term.147,@function
reorder_short_term.147:                 # @reorder_short_term.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1741786019, -44(%rbp)  # imm = 0x67D18BA3
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB210_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB210_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB210_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB210_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_1
.LBB210_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB210_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB210_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB210_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB210_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB210_10
.LBB210_9:                              # %if.then17
                                        #   in Loop: Header=BB210_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB210_10:                             # %if.end
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_11
.LBB210_11:                             # %if.end23
                                        #   in Loop: Header=BB210_5 Depth=1
	jmp	.LBB210_12
.LBB210_12:                             # %for.inc24
                                        #   in Loop: Header=BB210_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_5
.LBB210_13:                             # %for.end26
	cmpl	$1741786019, -44(%rbp)  # imm = 0x67D18BA3
	jne	.LBB210_15
.LBB210_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_14
.Lfunc_end210:
	.size	reorder_short_term.147, .Lfunc_end210-reorder_short_term.147
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.148   # -- Begin function compute_colocated.148
	.p2align	4, 0x90
	.type	compute_colocated.148,@function
compute_colocated.148:                  # @compute_colocated.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$300734261, -72(%rbp)   # imm = 0x11ECD735
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB211_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB211_11
.LBB211_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB211_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB211_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB211_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB211_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB211_8
.LBB211_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB211_8:                              # %if.end
	jmp	.LBB211_9
.LBB211_9:                              # %if.end20
	jmp	.LBB211_10
.LBB211_10:                             # %if.end21
	jmp	.LBB211_11
.LBB211_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB211_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB211_29
.LBB211_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB211_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB211_14 Depth=1
	movl	$0, -16(%rbp)
.LBB211_16:                             # %for.cond27
                                        #   Parent Loop BB211_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB211_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB211_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB211_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB211_22
.LBB211_21:                             # %if.else160
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB211_22:                             # %if.end283
                                        #   in Loop: Header=BB211_16 Depth=2
	jmp	.LBB211_24
.LBB211_23:                             # %if.else284
                                        #   in Loop: Header=BB211_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB211_24:                             # %if.end391
                                        #   in Loop: Header=BB211_16 Depth=2
	jmp	.LBB211_25
.LBB211_25:                             # %for.inc
                                        #   in Loop: Header=BB211_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_16
.LBB211_26:                             # %for.end
                                        #   in Loop: Header=BB211_14 Depth=1
	jmp	.LBB211_27
.LBB211_27:                             # %for.inc392
                                        #   in Loop: Header=BB211_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_14
.LBB211_28:                             # %for.end394
	jmp	.LBB211_29
.LBB211_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB211_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB211_241
.LBB211_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB211_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB211_32 Depth=1
	movl	$0, -12(%rbp)
.LBB211_34:                             # %for.cond408
                                        #   Parent Loop BB211_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB211_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_39
.LBB211_38:                             # %cond.false
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_39:                             # %cond.end
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_42
.LBB211_41:                             # %cond.false427
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_42:                             # %cond.end429
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_45
.LBB211_44:                             # %cond.false447
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_45:                             # %cond.end449
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_48
.LBB211_47:                             # %cond.false457
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_48:                             # %cond.end459
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_51
.LBB211_50:                             # %cond.false477
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_51:                             # %cond.end479
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_54
.LBB211_53:                             # %cond.false487
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_54:                             # %cond.end489
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_57
.LBB211_56:                             # %cond.false507
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_57:                             # %cond.end509
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_60
.LBB211_59:                             # %cond.false517
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_60:                             # %cond.end519
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_63
.LBB211_62:                             # %cond.false537
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_63:                             # %cond.end539
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_66
.LBB211_65:                             # %cond.false547
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_66:                             # %cond.end549
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB211_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB211_81
.LBB211_68:                             # %if.else569
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_71
.LBB211_70:                             # %cond.false576
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_71:                             # %cond.end578
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_74
.LBB211_73:                             # %cond.false586
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_74:                             # %cond.end588
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_77
.LBB211_76:                             # %cond.false604
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_77:                             # %cond.end606
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_80
.LBB211_79:                             # %cond.false614
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_80:                             # %cond.end616
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB211_81:                             # %if.end626
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_84
.LBB211_83:                             # %cond.false633
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_84:                             # %cond.end635
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_87
.LBB211_86:                             # %cond.false643
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_87:                             # %cond.end645
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB211_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB211_102
.LBB211_89:                             # %if.else665
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_92
.LBB211_91:                             # %cond.false672
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_92:                             # %cond.end674
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_95
.LBB211_94:                             # %cond.false682
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_95:                             # %cond.end684
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_98
.LBB211_97:                             # %cond.false700
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_98:                             # %cond.end702
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_101
.LBB211_100:                            # %cond.false710
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_101:                            # %cond.end712
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB211_102:                            # %if.end722
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB211_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB211_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB211_112
.LBB211_107:                            # %lor.rhs
                                        #   in Loop: Header=BB211_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB211_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB211_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB211_111:                            # %land.end
                                        #   in Loop: Header=BB211_34 Depth=2
.LBB211_112:                            # %lor.end
                                        #   in Loop: Header=BB211_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB211_113:                            # %if.end814
                                        #   in Loop: Header=BB211_34 Depth=2
	jmp	.LBB211_236
.LBB211_114:                            # %if.else815
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_117
.LBB211_116:                            # %cond.false822
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_117:                            # %cond.end824
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_120
.LBB211_119:                            # %cond.false832
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_120:                            # %cond.end834
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_123
.LBB211_122:                            # %cond.false851
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_123:                            # %cond.end853
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_126
.LBB211_125:                            # %cond.false861
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_126:                            # %cond.end863
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_129
.LBB211_128:                            # %cond.false881
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_129:                            # %cond.end883
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_132
.LBB211_131:                            # %cond.false891
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_132:                            # %cond.end893
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_135
.LBB211_134:                            # %cond.false911
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_135:                            # %cond.end913
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_138
.LBB211_137:                            # %cond.false921
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_138:                            # %cond.end923
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_141
.LBB211_140:                            # %cond.false941
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_141:                            # %cond.end943
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_144
.LBB211_143:                            # %cond.false951
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_144:                            # %cond.end953
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_147
.LBB211_146:                            # %cond.false968
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_147:                            # %cond.end970
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_150
.LBB211_149:                            # %cond.false978
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_150:                            # %cond.end980
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_153
.LBB211_152:                            # %cond.false996
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_153:                            # %cond.end998
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_156
.LBB211_155:                            # %cond.false1006
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_156:                            # %cond.end1008
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_159
.LBB211_158:                            # %cond.false1023
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_159:                            # %cond.end1025
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_162
.LBB211_161:                            # %cond.false1033
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_162:                            # %cond.end1035
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB211_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB211_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB211_172
.LBB211_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB211_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB211_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB211_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB211_171:                            # %land.end1133
                                        #   in Loop: Header=BB211_34 Depth=2
.LBB211_172:                            # %lor.end1134
                                        #   in Loop: Header=BB211_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB211_173:                            # %if.end1142
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_176
.LBB211_175:                            # %cond.false1149
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_176:                            # %cond.end1151
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_179
.LBB211_178:                            # %cond.false1159
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_179:                            # %cond.end1161
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_182
.LBB211_181:                            # %cond.false1178
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_182:                            # %cond.end1180
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_185
.LBB211_184:                            # %cond.false1188
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_185:                            # %cond.end1190
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_188
.LBB211_187:                            # %cond.false1208
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_188:                            # %cond.end1210
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_191
.LBB211_190:                            # %cond.false1218
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_191:                            # %cond.end1220
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_194
.LBB211_193:                            # %cond.false1238
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_194:                            # %cond.end1240
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_197
.LBB211_196:                            # %cond.false1248
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_197:                            # %cond.end1250
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_200
.LBB211_199:                            # %cond.false1268
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_200:                            # %cond.end1270
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_203
.LBB211_202:                            # %cond.false1278
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_203:                            # %cond.end1280
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_206
.LBB211_205:                            # %cond.false1295
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_206:                            # %cond.end1297
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_209
.LBB211_208:                            # %cond.false1305
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_209:                            # %cond.end1307
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_212
.LBB211_211:                            # %cond.false1323
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_212:                            # %cond.end1325
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_215
.LBB211_214:                            # %cond.false1333
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_215:                            # %cond.end1335
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_218
.LBB211_217:                            # %cond.false1350
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_218:                            # %cond.end1352
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_221
.LBB211_220:                            # %cond.false1360
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_221:                            # %cond.end1362
                                        #   in Loop: Header=BB211_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB211_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB211_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB211_231
.LBB211_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB211_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB211_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB211_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB211_230:                            # %land.end1460
                                        #   in Loop: Header=BB211_34 Depth=2
.LBB211_231:                            # %lor.end1461
                                        #   in Loop: Header=BB211_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB211_232:                            # %if.end1469
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB211_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB211_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB211_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB211_235:                            # %if.end1522
                                        #   in Loop: Header=BB211_34 Depth=2
	jmp	.LBB211_236
.LBB211_236:                            # %if.end1523
                                        #   in Loop: Header=BB211_34 Depth=2
	jmp	.LBB211_237
.LBB211_237:                            # %for.inc1524
                                        #   in Loop: Header=BB211_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_34
.LBB211_238:                            # %for.end1526
                                        #   in Loop: Header=BB211_32 Depth=1
	jmp	.LBB211_239
.LBB211_239:                            # %for.inc1527
                                        #   in Loop: Header=BB211_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_32
.LBB211_240:                            # %for.end1529
	jmp	.LBB211_241
.LBB211_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB211_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB211_259
.LBB211_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB211_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB211_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB211_245 Depth=1
	movl	$0, -16(%rbp)
.LBB211_247:                            # %for.cond1546
                                        #   Parent Loop BB211_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB211_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB211_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB211_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB211_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB211_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB211_252
.LBB211_251:                            # %if.else1699
                                        #   in Loop: Header=BB211_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB211_252:                            # %if.end1829
                                        #   in Loop: Header=BB211_247 Depth=2
	jmp	.LBB211_253
.LBB211_253:                            # %if.end1830
                                        #   in Loop: Header=BB211_247 Depth=2
	jmp	.LBB211_254
.LBB211_254:                            # %for.inc1831
                                        #   in Loop: Header=BB211_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_247
.LBB211_255:                            # %for.end1833
                                        #   in Loop: Header=BB211_245 Depth=1
	jmp	.LBB211_256
.LBB211_256:                            # %for.inc1834
                                        #   in Loop: Header=BB211_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_245
.LBB211_257:                            # %for.end1836
	jmp	.LBB211_258
.LBB211_258:                            # %if.end1837
	jmp	.LBB211_259
.LBB211_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB211_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB211_260 Depth=1
	movl	$0, -16(%rbp)
.LBB211_262:                            # %for.cond1845
                                        #   Parent Loop BB211_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB211_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB211_314
.LBB211_265:                            # %if.then1856
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_268
.LBB211_267:                            # %cond.false1863
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_268:                            # %cond.end1865
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_271
.LBB211_270:                            # %cond.false1873
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_271:                            # %cond.end1875
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_274
.LBB211_273:                            # %cond.false1893
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_274:                            # %cond.end1895
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_277
.LBB211_276:                            # %cond.false1903
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_277:                            # %cond.end1905
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_280
.LBB211_279:                            # %cond.false1923
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_280:                            # %cond.end1925
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_283
.LBB211_282:                            # %cond.false1933
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_283:                            # %cond.end1935
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_286
.LBB211_285:                            # %cond.false1953
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_286:                            # %cond.end1955
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_289
.LBB211_288:                            # %cond.false1963
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_289:                            # %cond.end1965
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_292
.LBB211_291:                            # %cond.false1983
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_292:                            # %cond.end1985
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_295
.LBB211_294:                            # %cond.false1993
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_295:                            # %cond.end1995
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_298
.LBB211_297:                            # %cond.false2011
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_298:                            # %cond.end2013
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_301
.LBB211_300:                            # %cond.false2021
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_301:                            # %cond.end2023
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_304
.LBB211_303:                            # %cond.false2039
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_304:                            # %cond.end2041
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_307
.LBB211_306:                            # %cond.false2049
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_307:                            # %cond.end2051
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_310
.LBB211_309:                            # %cond.false2067
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_310:                            # %cond.end2069
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB211_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB211_313
.LBB211_312:                            # %cond.false2077
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB211_313:                            # %cond.end2079
                                        #   in Loop: Header=BB211_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB211_315
.LBB211_314:                            # %if.else2089
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB211_315:                            # %if.end2194
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB211_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB211_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB211_325
.LBB211_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB211_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB211_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB211_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB211_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB211_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB211_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB211_324:                            # %land.end2285
                                        #   in Loop: Header=BB211_262 Depth=2
.LBB211_325:                            # %lor.end2286
                                        #   in Loop: Header=BB211_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB211_326:                            # %if.end2295
                                        #   in Loop: Header=BB211_262 Depth=2
	jmp	.LBB211_327
.LBB211_327:                            # %for.inc2296
                                        #   in Loop: Header=BB211_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_262
.LBB211_328:                            # %for.end2298
                                        #   in Loop: Header=BB211_260 Depth=1
	jmp	.LBB211_329
.LBB211_329:                            # %for.inc2299
                                        #   in Loop: Header=BB211_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_260
.LBB211_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB211_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB211_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB211_332 Depth=1
	movl	$0, -16(%rbp)
.LBB211_334:                            # %for.cond2312
                                        #   Parent Loop BB211_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB211_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB211_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB211_340
.LBB211_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB211_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB211_341
.LBB211_340:                            # %if.then2342
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB211_345
.LBB211_341:                            # %if.else2363
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB211_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB211_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB211_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB211_344:                            # %if.end2394
                                        #   in Loop: Header=BB211_334 Depth=2
	jmp	.LBB211_345
.LBB211_345:                            # %if.end2395
                                        #   in Loop: Header=BB211_334 Depth=2
	jmp	.LBB211_346
.LBB211_346:                            # %for.inc2396
                                        #   in Loop: Header=BB211_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_334
.LBB211_347:                            # %for.end2398
                                        #   in Loop: Header=BB211_332 Depth=1
	jmp	.LBB211_348
.LBB211_348:                            # %for.inc2399
                                        #   in Loop: Header=BB211_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_332
.LBB211_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB211_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB211_350 Depth=1
	movl	$0, -16(%rbp)
.LBB211_352:                            # %for.cond2409
                                        #   Parent Loop BB211_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB211_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB211_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB211_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB211_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB211_360
.LBB211_356:                            # %cond.false2429
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB211_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$127, %eax
	jmp	.LBB211_359
.LBB211_358:                            # %cond.false2441
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB211_359:                            # %cond.end2450
                                        #   in Loop: Header=BB211_352 Depth=2
.LBB211_360:                            # %cond.end2452
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB211_377
.LBB211_361:                            # %if.else2454
                                        #   in Loop: Header=BB211_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB211_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB211_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB211_368
.LBB211_364:                            # %cond.false2468
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB211_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$127, %eax
	jmp	.LBB211_367
.LBB211_366:                            # %cond.false2480
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB211_367:                            # %cond.end2489
                                        #   in Loop: Header=BB211_352 Depth=2
.LBB211_368:                            # %cond.end2491
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB211_376
.LBB211_369:                            # %if.else2493
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB211_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB211_375
.LBB211_371:                            # %cond.false2504
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB211_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$127, %eax
	jmp	.LBB211_374
.LBB211_373:                            # %cond.false2516
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB211_374:                            # %cond.end2525
                                        #   in Loop: Header=BB211_352 Depth=2
.LBB211_375:                            # %cond.end2527
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB211_376:                            # %if.end2529
                                        #   in Loop: Header=BB211_352 Depth=2
	jmp	.LBB211_377
.LBB211_377:                            # %if.end2530
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB211_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB211_383
.LBB211_379:                            # %cond.false2546
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB211_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$127, %eax
	jmp	.LBB211_382
.LBB211_381:                            # %cond.false2562
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB211_382:                            # %cond.end2575
                                        #   in Loop: Header=BB211_352 Depth=2
.LBB211_383:                            # %cond.end2577
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB211_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB211_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB211_390
.LBB211_386:                            # %cond.false2592
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB211_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB211_389
.LBB211_388:                            # %cond.false2599
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB211_389:                            # %cond.end2603
                                        #   in Loop: Header=BB211_352 Depth=2
.LBB211_390:                            # %cond.end2605
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB211_392
.LBB211_391:                            # %if.else2611
                                        #   in Loop: Header=BB211_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB211_392:                            # %if.end2617
                                        #   in Loop: Header=BB211_352 Depth=2
	jmp	.LBB211_393
.LBB211_393:                            # %for.inc2618
                                        #   in Loop: Header=BB211_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB211_352
.LBB211_394:                            # %for.end2620
                                        #   in Loop: Header=BB211_350 Depth=1
	jmp	.LBB211_395
.LBB211_395:                            # %for.inc2621
                                        #   in Loop: Header=BB211_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB211_350
.LBB211_396:                            # %for.end2623
	jmp	.LBB211_397
.LBB211_397:                            # %if.end2624
	cmpl	$300734261, -72(%rbp)   # imm = 0x11ECD735
	jne	.LBB211_399
.LBB211_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_398
.Lfunc_end211:
	.size	compute_colocated.148, .Lfunc_end211-compute_colocated.148
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.149
	.type	compare_fs_by_poc_desc.149,@function
compare_fs_by_poc_desc.149:             # @compare_fs_by_poc_desc.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1366186914, -16(%rbp)  # imm = 0x516E5BA2
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB212_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB212_5
.LBB212_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB212_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB212_5
.LBB212_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB212_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1366186914, -16(%rbp)  # imm = 0x516E5BA2
	jne	.LBB212_7
.LBB212_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_6
.Lfunc_end212:
	.size	compare_fs_by_poc_desc.149, .Lfunc_end212-compare_fs_by_poc_desc.149
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.150 # -- Begin function alloc_storable_picture.150
	.p2align	4, 0x90
	.type	alloc_storable_picture.150,@function
alloc_storable_picture.150:             # @alloc_storable_picture.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1684889495, -40(%rbp)  # imm = 0x646D5F97
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB213_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB213_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB213_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB213_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB213_6
.LBB213_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB213_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB213_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB213_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB213_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB213_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-24(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-24(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$1684889495, -40(%rbp)  # imm = 0x646D5F97
	jne	.LBB213_12
.LBB213_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_11
.Lfunc_end213:
	.size	alloc_storable_picture.150, .Lfunc_end213-alloc_storable_picture.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.151
	.type	get_pic_num_x.151,@function
get_pic_num_x.151:                      # @get_pic_num_x.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$363044933, -32(%rbp)   # imm = 0x15A3A045
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB214_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB214_3
.LBB214_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB214_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$363044933, -32(%rbp)   # imm = 0x15A3A045
	jne	.LBB214_5
.LBB214_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_4
.Lfunc_end214:
	.size	get_pic_num_x.151, .Lfunc_end214-get_pic_num_x.151
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_assign_long_term_frame_idx.152
	.type	mm_assign_long_term_frame_idx.152,@function
mm_assign_long_term_frame_idx.152:      # @mm_assign_long_term_frame_idx.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$939699963, -28(%rbp)   # imm = 0x3802AEFB
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movq	-24(%rbp), %rdi
	movl	-32(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -12(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB215_2
# %bb.1:                                # %if.then
	movl	-16(%rbp), %edi
	callq	unmark_long_term_frame_for_reference_by_frame_idx
	jmp	.LBB215_18
.LBB215_2:                              # %if.else
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB215_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB215_14
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB215_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB215_8
# %bb.5:                                # %if.then3
                                        #   in Loop: Header=BB215_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB215_7
# %bb.6:                                # %if.then7
	movl	$1, -8(%rbp)
	jmp	.LBB215_15
.LBB215_7:                              # %if.end
                                        #   in Loop: Header=BB215_3 Depth=1
	jmp	.LBB215_8
.LBB215_8:                              # %if.end8
                                        #   in Loop: Header=BB215_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB215_12
# %bb.9:                                # %if.then14
                                        #   in Loop: Header=BB215_3 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB215_11
# %bb.10:                               # %if.then19
	movl	$2, -8(%rbp)
	jmp	.LBB215_15
.LBB215_11:                             # %if.end20
                                        #   in Loop: Header=BB215_3 Depth=1
	jmp	.LBB215_12
.LBB215_12:                             # %if.end21
                                        #   in Loop: Header=BB215_3 Depth=1
	jmp	.LBB215_13
.LBB215_13:                             # %for.inc
                                        #   in Loop: Header=BB215_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_3
.LBB215_14:                             # %for.end.loopexit
	jmp	.LBB215_15
.LBB215_15:                             # %for.end
	cmpl	$0, -8(%rbp)
	jne	.LBB215_17
# %bb.16:                               # %if.then23
	movabsq	$.L.str.24, %rdi
	movl	$200, %esi
	callq	error
.LBB215_17:                             # %if.end24
	movl	-8(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	unmark_long_term_field_for_reference_by_frame_idx
.LBB215_18:                             # %if.end25
	movq	-24(%rbp), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	mark_pic_long_term
	cmpl	$939699963, -28(%rbp)   # imm = 0x3802AEFB
	jne	.LBB215_20
.LBB215_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_19
.Lfunc_end215:
	.size	mm_assign_long_term_frame_idx.152, .Lfunc_end215-mm_assign_long_term_frame_idx.152
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.153 # -- Begin function replace_top_pic_with_frame.153
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.153,@function
replace_top_pic_with_frame.153:         # @replace_top_pic_with_frame.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$174970445, -32(%rbp)   # imm = 0xA6DD64D
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB216_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB216_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB216_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB216_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB216_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB216_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB216_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB216_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB216_10
.LBB216_7:                              # %if.end14
                                        #   in Loop: Header=BB216_3 Depth=1
	jmp	.LBB216_8
.LBB216_8:                              # %for.inc
                                        #   in Loop: Header=BB216_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB216_3
.LBB216_9:                              # %for.end.loopexit
	jmp	.LBB216_10
.LBB216_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB216_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB216_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB216_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB216_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB216_15:                             # %if.end26
	jmp	.LBB216_16
.LBB216_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$174970445, -32(%rbp)   # imm = 0xA6DD64D
	jne	.LBB216_18
.LBB216_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_17
.Lfunc_end216:
	.size	replace_top_pic_with_frame.153, .Lfunc_end216-replace_top_pic_with_frame.153
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.154
	.type	gen_pic_list_from_frame_list.154,@function
gen_pic_list_from_frame_list.154:       # @gen_pic_list_from_frame_list.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$343314503, -60(%rbp)   # imm = 0x14769047
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -64(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB217_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB217_3
.LBB217_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB217_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB217_28
# %bb.4:                                # %if.then1
	jmp	.LBB217_5
.LBB217_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_9 Depth 2
                                        #     Child Loop BB217_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB217_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB217_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB217_7:                              # %lor.end
                                        #   in Loop: Header=BB217_5 Depth=1
	testb	$1, %al
	jne	.LBB217_8
	jmp	.LBB217_27
.LBB217_8:                              # %while.body
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_9
.LBB217_9:                              # %for.cond
                                        #   Parent Loop BB217_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB217_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB217_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB217_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB217_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB217_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB217_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_17
.LBB217_13:                             # %if.end17
                                        #   in Loop: Header=BB217_9 Depth=2
	jmp	.LBB217_14
.LBB217_14:                             # %if.end18
                                        #   in Loop: Header=BB217_9 Depth=2
	jmp	.LBB217_15
.LBB217_15:                             # %for.inc
                                        #   in Loop: Header=BB217_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_9
.LBB217_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_17
.LBB217_17:                             # %for.end
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_18
.LBB217_18:                             # %for.cond20
                                        #   Parent Loop BB217_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB217_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB217_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB217_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB217_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB217_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB217_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_26
.LBB217_22:                             # %if.end41
                                        #   in Loop: Header=BB217_18 Depth=2
	jmp	.LBB217_23
.LBB217_23:                             # %if.end42
                                        #   in Loop: Header=BB217_18 Depth=2
	jmp	.LBB217_24
.LBB217_24:                             # %for.inc43
                                        #   in Loop: Header=BB217_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_18
.LBB217_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_26
.LBB217_26:                             # %for.end45
                                        #   in Loop: Header=BB217_5 Depth=1
	jmp	.LBB217_5
.LBB217_27:                             # %while.end
	jmp	.LBB217_28
.LBB217_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB217_53
# %bb.29:                               # %if.then48
	jmp	.LBB217_30
.LBB217_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_34 Depth 2
                                        #     Child Loop BB217_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB217_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB217_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB217_32:                             # %lor.end53
                                        #   in Loop: Header=BB217_30 Depth=1
	testb	$1, %al
	jne	.LBB217_33
	jmp	.LBB217_52
.LBB217_33:                             # %while.body54
                                        #   in Loop: Header=BB217_30 Depth=1
	jmp	.LBB217_34
.LBB217_34:                             # %for.cond55
                                        #   Parent Loop BB217_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB217_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB217_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB217_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB217_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB217_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB217_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_42
.LBB217_38:                             # %if.end77
                                        #   in Loop: Header=BB217_34 Depth=2
	jmp	.LBB217_39
.LBB217_39:                             # %if.end78
                                        #   in Loop: Header=BB217_34 Depth=2
	jmp	.LBB217_40
.LBB217_40:                             # %for.inc79
                                        #   in Loop: Header=BB217_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB217_34
.LBB217_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB217_30 Depth=1
	jmp	.LBB217_42
.LBB217_42:                             # %for.end81
                                        #   in Loop: Header=BB217_30 Depth=1
	jmp	.LBB217_43
.LBB217_43:                             # %for.cond82
                                        #   Parent Loop BB217_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB217_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB217_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB217_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB217_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB217_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB217_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_51
.LBB217_47:                             # %if.end104
                                        #   in Loop: Header=BB217_43 Depth=2
	jmp	.LBB217_48
.LBB217_48:                             # %if.end105
                                        #   in Loop: Header=BB217_43 Depth=2
	jmp	.LBB217_49
.LBB217_49:                             # %for.inc106
                                        #   in Loop: Header=BB217_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB217_43
.LBB217_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB217_30 Depth=1
	jmp	.LBB217_51
.LBB217_51:                             # %for.end108
                                        #   in Loop: Header=BB217_30 Depth=1
	jmp	.LBB217_30
.LBB217_52:                             # %while.end109
	jmp	.LBB217_53
.LBB217_53:                             # %if.end110
	cmpl	$343314503, -60(%rbp)   # imm = 0x14769047
	jne	.LBB217_55
.LBB217_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_54
.Lfunc_end217:
	.size	gen_pic_list_from_frame_list.154, .Lfunc_end217-gen_pic_list_from_frame_list.154
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.155
	.type	gen_pic_list_from_frame_list.155,@function
gen_pic_list_from_frame_list.155:       # @gen_pic_list_from_frame_list.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1504739761, -64(%rbp)  # imm = 0x59B081B1
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -4(%rbp)
	movl	$0, -8(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB218_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB218_3
.LBB218_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB218_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB218_28
# %bb.4:                                # %if.then1
	jmp	.LBB218_5
.LBB218_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_9 Depth 2
                                        #     Child Loop BB218_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB218_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB218_5 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB218_7:                              # %lor.end
                                        #   in Loop: Header=BB218_5 Depth=1
	testb	$1, %al
	jne	.LBB218_8
	jmp	.LBB218_27
.LBB218_8:                              # %while.body
                                        #   in Loop: Header=BB218_5 Depth=1
	jmp	.LBB218_9
.LBB218_9:                              # %for.cond
                                        #   Parent Loop BB218_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB218_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB218_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB218_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB218_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB218_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_17
.LBB218_13:                             # %if.end17
                                        #   in Loop: Header=BB218_9 Depth=2
	jmp	.LBB218_14
.LBB218_14:                             # %if.end18
                                        #   in Loop: Header=BB218_9 Depth=2
	jmp	.LBB218_15
.LBB218_15:                             # %for.inc
                                        #   in Loop: Header=BB218_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_9
.LBB218_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB218_5 Depth=1
	jmp	.LBB218_17
.LBB218_17:                             # %for.end
                                        #   in Loop: Header=BB218_5 Depth=1
	jmp	.LBB218_18
.LBB218_18:                             # %for.cond20
                                        #   Parent Loop BB218_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB218_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB218_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB218_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB218_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB218_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_26
.LBB218_22:                             # %if.end41
                                        #   in Loop: Header=BB218_18 Depth=2
	jmp	.LBB218_23
.LBB218_23:                             # %if.end42
                                        #   in Loop: Header=BB218_18 Depth=2
	jmp	.LBB218_24
.LBB218_24:                             # %for.inc43
                                        #   in Loop: Header=BB218_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_18
.LBB218_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB218_5 Depth=1
	jmp	.LBB218_26
.LBB218_26:                             # %for.end45
                                        #   in Loop: Header=BB218_5 Depth=1
	jmp	.LBB218_5
.LBB218_27:                             # %while.end
	jmp	.LBB218_28
.LBB218_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB218_53
# %bb.29:                               # %if.then48
	jmp	.LBB218_30
.LBB218_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_34 Depth 2
                                        #     Child Loop BB218_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB218_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB218_30 Depth=1
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB218_32:                             # %lor.end53
                                        #   in Loop: Header=BB218_30 Depth=1
	testb	$1, %al
	jne	.LBB218_33
	jmp	.LBB218_52
.LBB218_33:                             # %while.body54
                                        #   in Loop: Header=BB218_30 Depth=1
	jmp	.LBB218_34
.LBB218_34:                             # %for.cond55
                                        #   Parent Loop BB218_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB218_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB218_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB218_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB218_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB218_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_42
.LBB218_38:                             # %if.end77
                                        #   in Loop: Header=BB218_34 Depth=2
	jmp	.LBB218_39
.LBB218_39:                             # %if.end78
                                        #   in Loop: Header=BB218_34 Depth=2
	jmp	.LBB218_40
.LBB218_40:                             # %for.inc79
                                        #   in Loop: Header=BB218_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_34
.LBB218_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB218_30 Depth=1
	jmp	.LBB218_42
.LBB218_42:                             # %for.end81
                                        #   in Loop: Header=BB218_30 Depth=1
	jmp	.LBB218_43
.LBB218_43:                             # %for.cond82
                                        #   Parent Loop BB218_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB218_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB218_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB218_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB218_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB218_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_51
.LBB218_47:                             # %if.end104
                                        #   in Loop: Header=BB218_43 Depth=2
	jmp	.LBB218_48
.LBB218_48:                             # %if.end105
                                        #   in Loop: Header=BB218_43 Depth=2
	jmp	.LBB218_49
.LBB218_49:                             # %for.inc106
                                        #   in Loop: Header=BB218_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_43
.LBB218_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB218_30 Depth=1
	jmp	.LBB218_51
.LBB218_51:                             # %for.end108
                                        #   in Loop: Header=BB218_30 Depth=1
	jmp	.LBB218_30
.LBB218_52:                             # %while.end109
	jmp	.LBB218_53
.LBB218_53:                             # %if.end110
	cmpl	$1504739761, -64(%rbp)  # imm = 0x59B081B1
	jne	.LBB218_55
.LBB218_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_54
.Lfunc_end218:
	.size	gen_pic_list_from_frame_list.155, .Lfunc_end218-gen_pic_list_from_frame_list.155
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.156
	.type	compare_fs_by_frame_num_desc.156,@function
compare_fs_by_frame_num_desc.156:       # @compare_fs_by_frame_num_desc.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$953920979, -16(%rbp)   # imm = 0x38DBADD3
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB219_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB219_5
.LBB219_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB219_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB219_5
.LBB219_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB219_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$953920979, -16(%rbp)   # imm = 0x38DBADD3
	jne	.LBB219_7
.LBB219_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_6
.Lfunc_end219:
	.size	compare_fs_by_frame_num_desc.156, .Lfunc_end219-compare_fs_by_frame_num_desc.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_long_term_pic.157
	.type	get_long_term_pic.157,@function
get_long_term_pic.157:                  # @get_long_term_pic.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$417804607, -28(%rbp)   # imm = 0x18E7313F
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB220_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB220_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB220_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB220_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB220_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB220_7
# %bb.6:                                # %if.then10
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB220_23
.LBB220_7:                              # %if.end
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_8
.LBB220_8:                              # %if.end14
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_20
.LBB220_9:                              # %if.else
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB220_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB220_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB220_13
# %bb.12:                               # %if.then30
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB220_23
.LBB220_13:                             # %if.end34
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_14
.LBB220_14:                             # %if.end35
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB220_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB220_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB220_1 Depth=1
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6368(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB220_18
# %bb.17:                               # %if.then52
	movq	dpb+16, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB220_23
.LBB220_18:                             # %if.end56
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_19
.LBB220_19:                             # %if.end57
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_20
.LBB220_20:                             # %if.end58
                                        #   in Loop: Header=BB220_1 Depth=1
	jmp	.LBB220_21
.LBB220_21:                             # %for.inc
                                        #   in Loop: Header=BB220_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB220_1
.LBB220_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB220_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$417804607, -28(%rbp)   # imm = 0x18E7313F
	jne	.LBB220_25
.LBB220_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_24
.Lfunc_end220:
	.size	get_long_term_pic.157, .Lfunc_end220-get_long_term_pic.157
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.158
	.type	compare_pic_by_pic_num_desc.158,@function
compare_pic_by_pic_num_desc.158:        # @compare_pic_by_pic_num_desc.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$799518984, -16(%rbp)   # imm = 0x2FA7B108
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB221_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB221_5
.LBB221_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB221_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB221_5
.LBB221_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB221_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$799518984, -16(%rbp)   # imm = 0x2FA7B108
	jne	.LBB221_7
.LBB221_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_6
.Lfunc_end221:
	.size	compare_pic_by_pic_num_desc.158, .Lfunc_end221-compare_pic_by_pic_num_desc.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.159
	.type	get_short_term_pic.159,@function
get_short_term_pic.159:                 # @get_short_term_pic.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2113076741, -28(%rbp)  # imm = 0x7DF2FE05
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB222_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB222_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB222_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB222_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB222_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB222_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB222_23
.LBB222_7:                              # %if.end
                                        #   in Loop: Header=BB222_1 Depth=1
	jmp	.LBB222_8
.LBB222_8:                              # %if.end14
                                        #   in Loop: Header=BB222_1 Depth=1
	jmp	.LBB222_20
.LBB222_9:                              # %if.else
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB222_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB222_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB222_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB222_23
.LBB222_13:                             # %if.end34
                                        #   in Loop: Header=BB222_1 Depth=1
	jmp	.LBB222_14
.LBB222_14:                             # %if.end35
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB222_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB222_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB222_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB222_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB222_23
.LBB222_18:                             # %if.end56
                                        #   in Loop: Header=BB222_1 Depth=1
	jmp	.LBB222_19
.LBB222_19:                             # %if.end57
                                        #   in Loop: Header=BB222_1 Depth=1
	jmp	.LBB222_20
.LBB222_20:                             # %if.end58
                                        #   in Loop: Header=BB222_1 Depth=1
	jmp	.LBB222_21
.LBB222_21:                             # %for.inc
                                        #   in Loop: Header=BB222_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB222_1
.LBB222_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB222_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$2113076741, -28(%rbp)  # imm = 0x7DF2FE05
	jne	.LBB222_25
.LBB222_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_24
.Lfunc_end222:
	.size	get_short_term_pic.159, .Lfunc_end222-get_short_term_pic.159
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.160   # -- Begin function gen_field_ref_ids.160
	.p2align	4, 0x90
	.type	gen_field_ref_ids.160,@function
gen_field_ref_ids.160:                  # @gen_field_ref_ids.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$742881055, -28(%rbp)   # imm = 0x2C47771F
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB223_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB223_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	$0, -4(%rbp)
.LBB223_3:                              # %for.cond1
                                        #   Parent Loop BB223_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB223_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB223_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB223_7
.LBB223_6:                              # %cond.false
                                        #   in Loop: Header=BB223_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_7
.LBB223_7:                              # %cond.end
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB223_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB223_10
.LBB223_9:                              # %cond.false32
                                        #   in Loop: Header=BB223_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB223_10
.LBB223_10:                             # %cond.end33
                                        #   in Loop: Header=BB223_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB223_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB223_3
.LBB223_12:                             # %for.end
                                        #   in Loop: Header=BB223_1 Depth=1
	jmp	.LBB223_13
.LBB223_13:                             # %for.inc45
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB223_1
.LBB223_14:                             # %for.end47
	cmpl	$742881055, -28(%rbp)   # imm = 0x2C47771F
	jne	.LBB223_16
.LBB223_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_15
.Lfunc_end223:
	.size	gen_field_ref_ids.160, .Lfunc_end223-gen_field_ref_ids.160
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.161
	.type	mark_pic_long_term.161,@function
mark_pic_long_term.161:                 # @mark_pic_long_term.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2147024898, -24(%rbp)  # imm = 0x7FF90002
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB224_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB224_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB224_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB224_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB224_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB224_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB224_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB224_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB224_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB224_39
.LBB224_7:                              # %if.end
                                        #   in Loop: Header=BB224_2 Depth=1
	jmp	.LBB224_8
.LBB224_8:                              # %if.end50
                                        #   in Loop: Header=BB224_2 Depth=1
	jmp	.LBB224_9
.LBB224_9:                              # %for.inc
                                        #   in Loop: Header=BB224_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_2
.LBB224_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB224_39
.LBB224_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB224_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB224_14
.LBB224_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB224_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB224_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB224_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB224_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB224_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB224_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB224_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB224_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB224_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB224_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB224_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB224_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB224_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB224_24:                             # %if.end123
	jmp	.LBB224_39
.LBB224_25:                             # %if.end124
                                        #   in Loop: Header=BB224_15 Depth=1
	jmp	.LBB224_26
.LBB224_26:                             # %if.end125
                                        #   in Loop: Header=BB224_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB224_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB224_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB224_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB224_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB224_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB224_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB224_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB224_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB224_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB224_34:                             # %if.end194
	jmp	.LBB224_39
.LBB224_35:                             # %if.end195
                                        #   in Loop: Header=BB224_15 Depth=1
	jmp	.LBB224_36
.LBB224_36:                             # %if.end196
                                        #   in Loop: Header=BB224_15 Depth=1
	jmp	.LBB224_37
.LBB224_37:                             # %for.inc197
                                        #   in Loop: Header=BB224_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_15
.LBB224_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB224_39:                             # %if.end201
	cmpl	$2147024898, -24(%rbp)  # imm = 0x7FF90002
	jne	.LBB224_41
.LBB224_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_40
.Lfunc_end224:
	.size	mark_pic_long_term.161, .Lfunc_end224-mark_pic_long_term.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.162
	.type	compare_pic_by_poc_asc.162,@function
compare_pic_by_poc_asc.162:             # @compare_pic_by_poc_asc.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$650938447, -16(%rbp)   # imm = 0x26CC884F
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB225_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB225_5
.LBB225_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB225_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB225_5
.LBB225_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB225_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$650938447, -16(%rbp)   # imm = 0x26CC884F
	jne	.LBB225_7
.LBB225_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_6
.Lfunc_end225:
	.size	compare_pic_by_poc_asc.162, .Lfunc_end225-compare_pic_by_poc_asc.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.163
	.type	compare_fs_by_poc_desc.163,@function
compare_fs_by_poc_desc.163:             # @compare_fs_by_poc_desc.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1664117175, -16(%rbp)  # imm = 0x633069B7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB226_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB226_5
.LBB226_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB226_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB226_5
.LBB226_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB226_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1664117175, -16(%rbp)  # imm = 0x633069B7
	jne	.LBB226_7
.LBB226_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_6
.Lfunc_end226:
	.size	compare_fs_by_poc_desc.163, .Lfunc_end226-compare_fs_by_poc_desc.163
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.164
	.type	get_pic_num_x.164,@function
get_pic_num_x.164:                      # @get_pic_num_x.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$303472535, -32(%rbp)   # imm = 0x12169F97
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB227_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB227_3
.LBB227_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB227_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$303472535, -32(%rbp)   # imm = 0x12169F97
	jne	.LBB227_5
.LBB227_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_4
.Lfunc_end227:
	.size	get_pic_num_x.164, .Lfunc_end227-get_pic_num_x.164
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.165          # -- Begin function init_lists.165
	.p2align	4, 0x90
	.type	init_lists.165,@function
init_lists.165:                         # @init_lists.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1181367945, -76(%rbp)  # imm = 0x466A3E89
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB228_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB228_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB228_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB228_9
.LBB228_8:                              # %if.else
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB228_9:                              # %if.end
                                        #   in Loop: Header=BB228_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB228_10:                             # %if.end36
                                        #   in Loop: Header=BB228_2 Depth=1
	jmp	.LBB228_11
.LBB228_11:                             # %if.end37
                                        #   in Loop: Header=BB228_2 Depth=1
	jmp	.LBB228_12
.LBB228_12:                             # %for.inc
                                        #   in Loop: Header=BB228_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_2
.LBB228_13:                             # %for.end
	jmp	.LBB228_31
.LBB228_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB228_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB228_17
.LBB228_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB228_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB228_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB228_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB228_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB228_23
.LBB228_22:                             # %if.else63
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB228_23:                             # %if.end70
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB228_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB228_25:                             # %if.end83
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB228_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB228_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB228_27:                             # %if.end98
                                        #   in Loop: Header=BB228_18 Depth=1
	jmp	.LBB228_28
.LBB228_28:                             # %if.end99
                                        #   in Loop: Header=BB228_18 Depth=1
	jmp	.LBB228_29
.LBB228_29:                             # %for.inc100
                                        #   in Loop: Header=BB228_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_18
.LBB228_30:                             # %for.end102
	jmp	.LBB228_31
.LBB228_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB228_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB228_34
.LBB228_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB228_181
.LBB228_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB228_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB228_75
.LBB228_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB228_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB228_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB228_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_43:                             # %if.end140
                                        #   in Loop: Header=BB228_38 Depth=1
	jmp	.LBB228_44
.LBB228_44:                             # %if.end141
                                        #   in Loop: Header=BB228_38 Depth=1
	jmp	.LBB228_45
.LBB228_45:                             # %for.inc142
                                        #   in Loop: Header=BB228_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_38
.LBB228_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB228_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB228_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB228_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB228_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB228_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_51:                             # %if.end177
                                        #   in Loop: Header=BB228_47 Depth=1
	jmp	.LBB228_52
.LBB228_52:                             # %if.end178
                                        #   in Loop: Header=BB228_47 Depth=1
	jmp	.LBB228_53
.LBB228_53:                             # %for.inc179
                                        #   in Loop: Header=BB228_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_47
.LBB228_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB228_74
.LBB228_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB228_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB228_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB228_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB228_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB228_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB228_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB228_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB228_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_63:                             # %if.end212
                                        #   in Loop: Header=BB228_60 Depth=1
	jmp	.LBB228_64
.LBB228_64:                             # %for.inc213
                                        #   in Loop: Header=BB228_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_60
.LBB228_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB228_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB228_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_69:                             # %if.end242
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB228_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB228_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_71:                             # %if.end259
                                        #   in Loop: Header=BB228_66 Depth=1
	jmp	.LBB228_72
.LBB228_72:                             # %for.inc260
                                        #   in Loop: Header=BB228_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_66
.LBB228_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB228_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB228_155
.LBB228_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB228_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB228_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB228_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB228_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB228_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_83:                             # %if.end307
                                        #   in Loop: Header=BB228_77 Depth=1
	jmp	.LBB228_84
.LBB228_84:                             # %if.end308
                                        #   in Loop: Header=BB228_77 Depth=1
	jmp	.LBB228_85
.LBB228_85:                             # %if.end309
                                        #   in Loop: Header=BB228_77 Depth=1
	jmp	.LBB228_86
.LBB228_86:                             # %for.inc310
                                        #   in Loop: Header=BB228_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_77
.LBB228_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB228_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB228_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB228_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB228_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB228_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB228_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_94:                             # %if.end354
                                        #   in Loop: Header=BB228_88 Depth=1
	jmp	.LBB228_95
.LBB228_95:                             # %if.end355
                                        #   in Loop: Header=BB228_88 Depth=1
	jmp	.LBB228_96
.LBB228_96:                             # %if.end356
                                        #   in Loop: Header=BB228_88 Depth=1
	jmp	.LBB228_97
.LBB228_97:                             # %for.inc357
                                        #   in Loop: Header=BB228_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_88
.LBB228_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB228_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB228_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB228_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB228_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_99
.LBB228_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB228_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB228_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB228_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB228_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_103
.LBB228_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB228_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB228_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB228_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB228_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB228_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB228_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_111:                            # %if.end428
                                        #   in Loop: Header=BB228_107 Depth=1
	jmp	.LBB228_112
.LBB228_112:                            # %if.end429
                                        #   in Loop: Header=BB228_107 Depth=1
	jmp	.LBB228_113
.LBB228_113:                            # %for.inc430
                                        #   in Loop: Header=BB228_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_107
.LBB228_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB228_154
.LBB228_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB228_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB228_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB228_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB228_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB228_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB228_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB228_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB228_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB228_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB228_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB228_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB228_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_126:                            # %if.end480
                                        #   in Loop: Header=BB228_122 Depth=1
	jmp	.LBB228_127
.LBB228_127:                            # %if.end481
                                        #   in Loop: Header=BB228_122 Depth=1
	jmp	.LBB228_128
.LBB228_128:                            # %for.inc482
                                        #   in Loop: Header=BB228_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_122
.LBB228_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB228_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB228_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB228_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB228_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB228_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB228_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB228_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB228_134:                            # %if.end507
                                        #   in Loop: Header=BB228_130 Depth=1
	jmp	.LBB228_135
.LBB228_135:                            # %if.end508
                                        #   in Loop: Header=BB228_130 Depth=1
	jmp	.LBB228_136
.LBB228_136:                            # %for.inc509
                                        #   in Loop: Header=BB228_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_130
.LBB228_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB228_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB228_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB228_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB228_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_138
.LBB228_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB228_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB228_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB228_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB228_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_142
.LBB228_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB228_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB228_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB228_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_149:                            # %if.end566
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB228_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB228_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB228_151:                            # %if.end583
                                        #   in Loop: Header=BB228_146 Depth=1
	jmp	.LBB228_152
.LBB228_152:                            # %for.inc584
                                        #   in Loop: Header=BB228_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_146
.LBB228_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB228_154:                            # %if.end588
	jmp	.LBB228_155
.LBB228_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB228_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB228_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB228_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB228_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB228_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB228_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB228_158 Depth=1
	movl	$1, -68(%rbp)
.LBB228_161:                            # %if.end607
                                        #   in Loop: Header=BB228_158 Depth=1
	jmp	.LBB228_162
.LBB228_162:                            # %for.inc608
                                        #   in Loop: Header=BB228_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB228_158
.LBB228_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB228_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB228_165:                            # %if.end617
	jmp	.LBB228_166
.LBB228_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB228_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB228_169
.LBB228_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB228_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB228_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB228_172
.LBB228_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB228_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB228_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB228_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB228_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB228_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_173
.LBB228_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB228_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB228_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB228_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB228_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB228_177
.LBB228_180:                            # %for.end646.loopexit
	jmp	.LBB228_181
.LBB228_181:                            # %for.end646
	cmpl	$1181367945, -76(%rbp)  # imm = 0x466A3E89
	jne	.LBB228_183
.LBB228_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_182
.Lfunc_end228:
	.size	init_lists.165, .Lfunc_end228-init_lists.165
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.166 # -- Begin function store_picture_in_dpb.166
	.p2align	4, 0x90
	.type	store_picture_in_dpb.166,@function
store_picture_in_dpb.166:               # @store_picture_in_dpb.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$765734530, -20(%rbp)   # imm = 0x2DA42E82
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB229_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB229_6
.LBB229_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB229_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB229_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB229_5:                              # %if.end
	jmp	.LBB229_6
.LBB229_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB229_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB229_23
.LBB229_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB229_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB229_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB229_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB229_14
.LBB229_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB229_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB229_20
.LBB229_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB229_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB229_18
.LBB229_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB229_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB229_19
.LBB229_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB229_50
.LBB229_19:                             # %if.end48
	jmp	.LBB229_20
.LBB229_20:                             # %if.end49
	jmp	.LBB229_21
.LBB229_21:                             # %if.end50
	jmp	.LBB229_22
.LBB229_22:                             # %if.end51
	jmp	.LBB229_23
.LBB229_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB229_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB229_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB229_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB229_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB229_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB229_29:                             # %if.end67
	jmp	.LBB229_30
.LBB229_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB229_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB229_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB229_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB229_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB229_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB229_35
.LBB229_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB229_50
.LBB229_35:                             # %if.end80
                                        #   in Loop: Header=BB229_30 Depth=1
	jmp	.LBB229_36
.LBB229_36:                             # %if.end81
                                        #   in Loop: Header=BB229_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB229_30
.LBB229_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB229_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB229_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB229_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB229_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB229_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB229_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB229_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB229_43:                             # %if.end94
                                        #   in Loop: Header=BB229_40 Depth=1
	jmp	.LBB229_44
.LBB229_44:                             # %for.inc
                                        #   in Loop: Header=BB229_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB229_40
.LBB229_45:                             # %for.end
	jmp	.LBB229_46
.LBB229_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB229_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB229_49
.LBB229_48:                             # %if.else104
	movq	$0, dpb+56
.LBB229_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB229_50:                             # %return
	cmpl	$765734530, -20(%rbp)   # imm = 0x2DA42E82
	jne	.LBB229_52
.LBB229_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_51
.Lfunc_end229:
	.size	store_picture_in_dpb.166, .Lfunc_end229-store_picture_in_dpb.166
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.167 # -- Begin function store_picture_in_dpb.167
	.p2align	4, 0x90
	.type	store_picture_in_dpb.167,@function
store_picture_in_dpb.167:               # @store_picture_in_dpb.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$8568832, -20(%rbp)     # imm = 0x82C000
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB230_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB230_6
.LBB230_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB230_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB230_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB230_5:                              # %if.end
	jmp	.LBB230_6
.LBB230_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB230_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB230_23
.LBB230_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB230_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB230_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB230_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB230_14
.LBB230_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB230_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB230_20
.LBB230_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB230_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB230_18
.LBB230_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB230_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB230_19
.LBB230_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB230_50
.LBB230_19:                             # %if.end48
	jmp	.LBB230_20
.LBB230_20:                             # %if.end49
	jmp	.LBB230_21
.LBB230_21:                             # %if.end50
	jmp	.LBB230_22
.LBB230_22:                             # %if.end51
	jmp	.LBB230_23
.LBB230_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB230_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB230_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB230_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB230_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB230_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB230_29:                             # %if.end67
	jmp	.LBB230_30
.LBB230_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB230_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB230_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB230_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB230_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB230_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB230_35
.LBB230_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB230_50
.LBB230_35:                             # %if.end80
                                        #   in Loop: Header=BB230_30 Depth=1
	jmp	.LBB230_36
.LBB230_36:                             # %if.end81
                                        #   in Loop: Header=BB230_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB230_30
.LBB230_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB230_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB230_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB230_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB230_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB230_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB230_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB230_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB230_43:                             # %if.end94
                                        #   in Loop: Header=BB230_40 Depth=1
	jmp	.LBB230_44
.LBB230_44:                             # %for.inc
                                        #   in Loop: Header=BB230_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB230_40
.LBB230_45:                             # %for.end
	jmp	.LBB230_46
.LBB230_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB230_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB230_49
.LBB230_48:                             # %if.else104
	movq	$0, dpb+56
.LBB230_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB230_50:                             # %return
	cmpl	$8568832, -20(%rbp)     # imm = 0x82C000
	jne	.LBB230_52
.LBB230_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_51
.Lfunc_end230:
	.size	store_picture_in_dpb.167, .Lfunc_end230-store_picture_in_dpb.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_lt_pic_num_asc.168
	.type	compare_pic_by_lt_pic_num_asc.168,@function
compare_pic_by_lt_pic_num_asc.168:      # @compare_pic_by_lt_pic_num_asc.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1903342924, -16(%rbp)  # imm = 0x7172B54C
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jge	.LBB231_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB231_5
.LBB231_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6368(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6368(%rcx), %eax
	jle	.LBB231_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB231_5
.LBB231_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB231_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1903342924, -16(%rbp)  # imm = 0x7172B54C
	jne	.LBB231_7
.LBB231_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_6
.Lfunc_end231:
	.size	compare_pic_by_lt_pic_num_asc.168, .Lfunc_end231-compare_pic_by_lt_pic_num_asc.168
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.169
	.type	mark_pic_long_term.169,@function
mark_pic_long_term.169:                 # @mark_pic_long_term.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$14409734, -20(%rbp)    # imm = 0xDBE006
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB232_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB232_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB232_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB232_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB232_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB232_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB232_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB232_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB232_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB232_39
.LBB232_7:                              # %if.end
                                        #   in Loop: Header=BB232_2 Depth=1
	jmp	.LBB232_8
.LBB232_8:                              # %if.end50
                                        #   in Loop: Header=BB232_2 Depth=1
	jmp	.LBB232_9
.LBB232_9:                              # %for.inc
                                        #   in Loop: Header=BB232_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_2
.LBB232_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB232_39
.LBB232_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB232_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB232_14
.LBB232_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB232_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB232_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB232_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB232_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB232_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB232_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB232_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB232_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB232_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB232_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB232_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB232_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB232_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB232_24:                             # %if.end123
	jmp	.LBB232_39
.LBB232_25:                             # %if.end124
                                        #   in Loop: Header=BB232_15 Depth=1
	jmp	.LBB232_26
.LBB232_26:                             # %if.end125
                                        #   in Loop: Header=BB232_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB232_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB232_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB232_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB232_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB232_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB232_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB232_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB232_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB232_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB232_34:                             # %if.end194
	jmp	.LBB232_39
.LBB232_35:                             # %if.end195
                                        #   in Loop: Header=BB232_15 Depth=1
	jmp	.LBB232_36
.LBB232_36:                             # %if.end196
                                        #   in Loop: Header=BB232_15 Depth=1
	jmp	.LBB232_37
.LBB232_37:                             # %for.inc197
                                        #   in Loop: Header=BB232_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB232_15
.LBB232_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB232_39:                             # %if.end201
	cmpl	$14409734, -20(%rbp)    # imm = 0xDBE006
	jne	.LBB232_41
.LBB232_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_40
.Lfunc_end232:
	.size	mark_pic_long_term.169, .Lfunc_end232-mark_pic_long_term.169
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.170     # -- Begin function dpb_split_field.170
	.p2align	4, 0x90
	.type	dpb_split_field.170,@function
dpb_split_field.170:                    # @dpb_split_field.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2067622110, -64(%rbp)  # imm = 0x7B3D68DE
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB233_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB233_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB233_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB233_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_2
.LBB233_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB233_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB233_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB233_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_6
.LBB233_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB233_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB233_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB233_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_10
.LBB233_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB233_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB233_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB233_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_14
.LBB233_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB233_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB233_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB233_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB233_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB233_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_19
.LBB233_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB233_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB233_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB233_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB233_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_23
.LBB233_26:                             # %for.end328
	jmp	.LBB233_27
.LBB233_27:                             # %if.end
	jmp	.LBB233_29
.LBB233_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB233_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB233_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB233_30 Depth=1
	movl	$0, -4(%rbp)
.LBB233_32:                             # %for.cond343
                                        #   Parent Loop BB233_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB233_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB233_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB233_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB233_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB233_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB233_38
.LBB233_37:                             # %cond.false
                                        #   in Loop: Header=BB233_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_38
.LBB233_38:                             # %cond.end
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB233_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB233_41
.LBB233_40:                             # %cond.false415
                                        #   in Loop: Header=BB233_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_41
.LBB233_41:                             # %cond.end416
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB233_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB233_44
.LBB233_43:                             # %cond.false436
                                        #   in Loop: Header=BB233_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_44
.LBB233_44:                             # %cond.end437
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB233_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB233_47
.LBB233_46:                             # %cond.false456
                                        #   in Loop: Header=BB233_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_47
.LBB233_47:                             # %cond.end457
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB233_55
.LBB233_48:                             # %if.else466
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB233_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB233_51
.LBB233_50:                             # %cond.false491
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB233_51
.LBB233_51:                             # %cond.end492
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB233_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB233_54
.LBB233_53:                             # %cond.false509
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB233_54
.LBB233_54:                             # %cond.end510
                                        #   in Loop: Header=BB233_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_55:                             # %if.end519
                                        #   in Loop: Header=BB233_32 Depth=2
	jmp	.LBB233_56
.LBB233_56:                             # %for.inc520
                                        #   in Loop: Header=BB233_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_32
.LBB233_57:                             # %for.end522
                                        #   in Loop: Header=BB233_30 Depth=1
	jmp	.LBB233_58
.LBB233_58:                             # %for.inc523
                                        #   in Loop: Header=BB233_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_30
.LBB233_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB233_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_73
.LBB233_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB233_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB233_62 Depth=1
	movl	$0, -8(%rbp)
.LBB233_64:                             # %for.cond538
                                        #   Parent Loop BB233_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB233_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB233_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB233_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB233_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB233_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_68:                             # %if.end908
                                        #   in Loop: Header=BB233_64 Depth=2
	jmp	.LBB233_69
.LBB233_69:                             # %for.inc909
                                        #   in Loop: Header=BB233_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_64
.LBB233_70:                             # %for.end911
                                        #   in Loop: Header=BB233_62 Depth=1
	jmp	.LBB233_71
.LBB233_71:                             # %for.inc912
                                        #   in Loop: Header=BB233_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_62
.LBB233_72:                             # %for.end914
	jmp	.LBB233_73
.LBB233_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB233_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB233_74 Depth=1
	movl	$0, -8(%rbp)
.LBB233_76:                             # %for.cond923
                                        #   Parent Loop BB233_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB233_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB233_148
.LBB233_79:                             # %if.then954
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB233_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_83
.LBB233_82:                             # %cond.false991
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_83:                             # %cond.end993
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_86
.LBB233_85:                             # %cond.false1001
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_86:                             # %cond.end1003
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_89
.LBB233_88:                             # %cond.false1032
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_89:                             # %cond.end1034
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_92
.LBB233_91:                             # %cond.false1042
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_92:                             # %cond.end1044
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_95
.LBB233_94:                             # %cond.false1073
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_95:                             # %cond.end1075
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_98
.LBB233_97:                             # %cond.false1083
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_98:                             # %cond.end1085
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_101
.LBB233_100:                            # %cond.false1114
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_101:                            # %cond.end1116
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_104
.LBB233_103:                            # %cond.false1124
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_104:                            # %cond.end1126
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_107
.LBB233_106:                            # %cond.false1155
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_107:                            # %cond.end1157
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_110
.LBB233_109:                            # %cond.false1165
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_110:                            # %cond.end1167
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB233_125
.LBB233_112:                            # %if.else1190
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_115
.LBB233_114:                            # %cond.false1198
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_115:                            # %cond.end1200
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_118
.LBB233_117:                            # %cond.false1208
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_118:                            # %cond.end1210
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB233_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB233_121
.LBB233_120:                            # %cond.false1237
                                        #   in Loop: Header=BB233_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_121
.LBB233_121:                            # %cond.end1238
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB233_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB233_124
.LBB233_123:                            # %cond.false1254
                                        #   in Loop: Header=BB233_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_124
.LBB233_124:                            # %cond.end1255
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_125:                            # %if.end1264
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_128
.LBB233_127:                            # %cond.false1272
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_128:                            # %cond.end1274
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_131
.LBB233_130:                            # %cond.false1282
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_131:                            # %cond.end1284
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB233_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB233_146
.LBB233_133:                            # %if.else1307
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_136
.LBB233_135:                            # %cond.false1315
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_136:                            # %cond.end1317
                                        #   in Loop: Header=BB233_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB233_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB233_139
.LBB233_138:                            # %cond.false1325
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB233_139:                            # %cond.end1327
                                        #   in Loop: Header=BB233_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB233_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB233_142
.LBB233_141:                            # %cond.false1355
                                        #   in Loop: Header=BB233_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_142
.LBB233_142:                            # %cond.end1356
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB233_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB233_145
.LBB233_144:                            # %cond.false1373
                                        #   in Loop: Header=BB233_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_145
.LBB233_145:                            # %cond.end1374
                                        #   in Loop: Header=BB233_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB233_146:                            # %if.end1383
                                        #   in Loop: Header=BB233_76 Depth=2
	jmp	.LBB233_147
.LBB233_147:                            # %if.end1384
                                        #   in Loop: Header=BB233_76 Depth=2
	jmp	.LBB233_148
.LBB233_148:                            # %if.end1385
                                        #   in Loop: Header=BB233_76 Depth=2
	jmp	.LBB233_149
.LBB233_149:                            # %for.inc1386
                                        #   in Loop: Header=BB233_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_76
.LBB233_150:                            # %for.end1388
                                        #   in Loop: Header=BB233_74 Depth=1
	jmp	.LBB233_151
.LBB233_151:                            # %for.inc1389
                                        #   in Loop: Header=BB233_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_74
.LBB233_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB233_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB233_153 Depth=1
	movl	$0, -4(%rbp)
.LBB233_155:                            # %for.cond1399
                                        #   Parent Loop BB233_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB233_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB233_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_155
.LBB233_158:                            # %for.end1414
                                        #   in Loop: Header=BB233_153 Depth=1
	jmp	.LBB233_159
.LBB233_159:                            # %for.inc1415
                                        #   in Loop: Header=BB233_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_153
.LBB233_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB233_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB233_174
.LBB233_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB233_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB233_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB233_163 Depth=1
	movl	$0, -4(%rbp)
.LBB233_165:                            # %for.cond1431
                                        #   Parent Loop BB233_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB233_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB233_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB233_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB233_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-52(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB233_169
.LBB233_168:                            # %cond.false1462
                                        #   in Loop: Header=BB233_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB233_169
.LBB233_169:                            # %cond.end1463
                                        #   in Loop: Header=BB233_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB233_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB233_165
.LBB233_171:                            # %for.end1474
                                        #   in Loop: Header=BB233_163 Depth=1
	jmp	.LBB233_172
.LBB233_172:                            # %for.inc1475
                                        #   in Loop: Header=BB233_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB233_163
.LBB233_173:                            # %for.end1477
	jmp	.LBB233_174
.LBB233_174:                            # %if.end1478
	cmpl	$2067622110, -64(%rbp)  # imm = 0x7B3D68DE
	jne	.LBB233_176
.LBB233_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_175
.Lfunc_end233:
	.size	dpb_split_field.170, .Lfunc_end233-dpb_split_field.170
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.171
	.type	remove_frame_from_dpb.171,@function
remove_frame_from_dpb.171:              # @remove_frame_from_dpb.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1224346709, -20(%rbp)  # imm = 0x48FA0C55
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB234_6
# %bb.1:                                # %entry
	movq	.LJTI234_0(,%rax,8), %rax
	jmpq	*%rax
.LBB234_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB234_7
.LBB234_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB234_7
.LBB234_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB234_7
.LBB234_5:                              # %sw.bb10
	jmp	.LBB234_7
.LBB234_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB234_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB234_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB234_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB234_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB234_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB234_8
.LBB234_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1224346709, -20(%rbp)  # imm = 0x48FA0C55
	jne	.LBB234_13
.LBB234_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_12
.Lfunc_end234:
	.size	remove_frame_from_dpb.171, .Lfunc_end234-remove_frame_from_dpb.171
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI234_0:
	.quad	.LBB234_5
	.quad	.LBB234_4
	.quad	.LBB234_3
	.quad	.LBB234_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.172
	.type	compare_pic_by_pic_num_desc.172,@function
compare_pic_by_pic_num_desc.172:        # @compare_pic_by_pic_num_desc.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$875124902, -16(%rbp)   # imm = 0x342958A6
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB235_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB235_5
.LBB235_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB235_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB235_5
.LBB235_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB235_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$875124902, -16(%rbp)   # imm = 0x342958A6
	jne	.LBB235_7
.LBB235_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_6
.Lfunc_end235:
	.size	compare_pic_by_pic_num_desc.172, .Lfunc_end235-compare_pic_by_pic_num_desc.172
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.173
	.type	compare_pic_by_pic_num_desc.173,@function
compare_pic_by_pic_num_desc.173:        # @compare_pic_by_pic_num_desc.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2067887719, -16(%rbp)  # imm = 0x7B417667
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB236_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB236_5
.LBB236_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB236_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB236_5
.LBB236_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB236_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2067887719, -16(%rbp)  # imm = 0x7B417667
	jne	.LBB236_7
.LBB236_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_6
.Lfunc_end236:
	.size	compare_pic_by_pic_num_desc.173, .Lfunc_end236-compare_pic_by_pic_num_desc.173
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.174   # -- Begin function gen_field_ref_ids.174
	.p2align	4, 0x90
	.type	gen_field_ref_ids.174,@function
gen_field_ref_ids.174:                  # @gen_field_ref_ids.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1692183223, -28(%rbp)  # imm = 0x64DCAAB7
	movq	%rdi, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB237_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB237_3 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB237_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB237_1 Depth=1
	movl	$0, -8(%rbp)
.LBB237_3:                              # %for.cond1
                                        #   Parent Loop BB237_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB237_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB237_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB237_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB237_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB237_7
.LBB237_6:                              # %cond.false
                                        #   in Loop: Header=BB237_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB237_7
.LBB237_7:                              # %cond.end
                                        #   in Loop: Header=BB237_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB237_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB237_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB237_10
.LBB237_9:                              # %cond.false32
                                        #   in Loop: Header=BB237_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB237_10
.LBB237_10:                             # %cond.end33
                                        #   in Loop: Header=BB237_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB237_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB237_3
.LBB237_12:                             # %for.end
                                        #   in Loop: Header=BB237_1 Depth=1
	jmp	.LBB237_13
.LBB237_13:                             # %for.inc45
                                        #   in Loop: Header=BB237_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB237_1
.LBB237_14:                             # %for.end47
	cmpl	$1692183223, -28(%rbp)  # imm = 0x64DCAAB7
	jne	.LBB237_16
.LBB237_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_15
.Lfunc_end237:
	.size	gen_field_ref_ids.174, .Lfunc_end237-gen_field_ref_ids.174
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.175
	.type	get_pic_num_x.175,@function
get_pic_num_x.175:                      # @get_pic_num_x.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1732847621, -28(%rbp)  # imm = 0x67492805
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB238_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB238_3
.LBB238_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB238_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1732847621, -28(%rbp)  # imm = 0x67492805
	jne	.LBB238_5
.LBB238_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_4
.Lfunc_end238:
	.size	get_pic_num_x.175, .Lfunc_end238-get_pic_num_x.175
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.176
	.type	unmark_long_term_field_for_reference_by_frame_idx.176,@function
unmark_long_term_field_for_reference_by_frame_idx.176: # @unmark_long_term_field_for_reference_by_frame_idx.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2031125860, -32(%rbp)  # imm = 0x79108564
	movl	%edi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -12(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB239_2
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB239_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB239_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB239_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB239_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$1, -16(%rbp)
	jne	.LBB239_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB239_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_23
.LBB239_8:                              # %if.else
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB239_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_22
.LBB239_10:                             # %if.else21
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB239_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB239_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB239_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB239_15
.LBB239_14:                             # %if.then29
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_15:                             # %if.end32
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_17
.LBB239_16:                             # %if.else33
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_17:                             # %if.end36
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_21
.LBB239_18:                             # %if.else37
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB239_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_20:                             # %if.end45
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_21
.LBB239_21:                             # %if.end46
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_22
.LBB239_22:                             # %if.end47
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_23
.LBB239_23:                             # %if.end48
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_24
.LBB239_24:                             # %if.end49
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$2, -16(%rbp)
	jne	.LBB239_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB239_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_42
.LBB239_27:                             # %if.else59
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB239_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB239_41
.LBB239_29:                             # %if.else67
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB239_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB239_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB239_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB239_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB239_34
.LBB239_33:                             # %if.then78
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_34:                             # %if.end81
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_36
.LBB239_35:                             # %if.else82
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_36:                             # %if.end85
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_40
.LBB239_37:                             # %if.else86
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB239_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB239_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB239_39:                             # %if.end95
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_40
.LBB239_40:                             # %if.end96
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_41
.LBB239_41:                             # %if.end97
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_42
.LBB239_42:                             # %if.end98
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_43
.LBB239_43:                             # %if.end99
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_44
.LBB239_44:                             # %if.end100
                                        #   in Loop: Header=BB239_3 Depth=1
	jmp	.LBB239_45
.LBB239_45:                             # %for.inc
                                        #   in Loop: Header=BB239_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB239_3
.LBB239_46:                             # %for.end
	cmpl	$2031125860, -32(%rbp)  # imm = 0x79108564
	jne	.LBB239_48
.LBB239_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_47
.Lfunc_end239:
	.size	unmark_long_term_field_for_reference_by_frame_idx.176, .Lfunc_end239-unmark_long_term_field_for_reference_by_frame_idx.176
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_poc_desc.177
	.type	compare_fs_by_poc_desc.177,@function
compare_fs_by_poc_desc.177:             # @compare_fs_by_poc_desc.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1867145970, -16(%rbp)  # imm = 0x6F4A62F2
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB240_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB240_5
.LBB240_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	36(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB240_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB240_5
.LBB240_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB240_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1867145970, -16(%rbp)  # imm = 0x6F4A62F2
	jne	.LBB240_7
.LBB240_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_6
.Lfunc_end240:
	.size	compare_fs_by_poc_desc.177, .Lfunc_end240-compare_fs_by_poc_desc.177
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.178   # -- Begin function dpb_combine_field.178
	.p2align	4, 0x90
	.type	dpb_combine_field.178,@function
dpb_combine_field.178:                  # @dpb_combine_field.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$420300044, -32(%rbp)   # imm = 0x190D450C
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB241_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB241_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB241_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB241_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_1
.LBB241_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB241_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB241_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB241_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB241_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_5
.LBB241_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB241_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB241_11
.LBB241_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB241_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB241_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB241_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB241_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB241_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB241_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB241_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB241_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB241_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB241_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB241_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB241_24
.LBB241_23:                             # %cond.false217
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB241_24:                             # %cond.end226
                                        #   in Loop: Header=BB241_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB241_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_20
.LBB241_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB241_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB241_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB241_31
.LBB241_30:                             # %cond.false269
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB241_31:                             # %cond.end278
                                        #   in Loop: Header=BB241_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB241_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_27
.LBB241_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB241_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB241_34 Depth=1
	movl	$0, -20(%rbp)
.LBB241_36:                             # %for.cond295
                                        #   Parent Loop BB241_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB241_40
.LBB241_39:                             # %cond.false445
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_40
.LBB241_40:                             # %cond.end446
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB241_43
.LBB241_42:                             # %cond.false462
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_43
.LBB241_43:                             # %cond.end463
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB241_46
.LBB241_45:                             # %cond.false479
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB241_46
.LBB241_46:                             # %cond.end480
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB241_49
.LBB241_48:                             # %cond.false501
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB241_49
.LBB241_49:                             # %cond.end502
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB241_52
.LBB241_51:                             # %cond.false647
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_52
.LBB241_52:                             # %cond.end648
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB241_55
.LBB241_54:                             # %cond.false665
                                        #   in Loop: Header=BB241_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB241_55
.LBB241_55:                             # %cond.end666
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB241_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB241_58
.LBB241_57:                             # %cond.false683
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB241_58
.LBB241_58:                             # %cond.end684
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB241_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB241_61
.LBB241_60:                             # %cond.false706
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB241_61
.LBB241_61:                             # %cond.end707
                                        #   in Loop: Header=BB241_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB241_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_36
.LBB241_63:                             # %for.end723
                                        #   in Loop: Header=BB241_34 Depth=1
	jmp	.LBB241_64
.LBB241_64:                             # %for.inc724
                                        #   in Loop: Header=BB241_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_34
.LBB241_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB241_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB241_76
.LBB241_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB241_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB241_68 Depth=1
	movl	$0, -20(%rbp)
.LBB241_70:                             # %for.cond737
                                        #   Parent Loop BB241_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB241_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB241_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB241_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB241_70
.LBB241_73:                             # %for.end758
                                        #   in Loop: Header=BB241_68 Depth=1
	jmp	.LBB241_74
.LBB241_74:                             # %for.inc759
                                        #   in Loop: Header=BB241_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_68
.LBB241_75:                             # %for.end761
	jmp	.LBB241_76
.LBB241_76:                             # %if.end762
	cmpl	$420300044, -32(%rbp)   # imm = 0x190D450C
	jne	.LBB241_78
.LBB241_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_77
.Lfunc_end241:
	.size	dpb_combine_field.178, .Lfunc_end241-dpb_combine_field.178
	.cfi_endproc
                                        # -- End function
	.globl	alloc_storable_picture.179 # -- Begin function alloc_storable_picture.179
	.p2align	4, 0x90
	.type	alloc_storable_picture.179,@function
alloc_storable_picture.179:             # @alloc_storable_picture.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2135482987, -40(%rbp)  # imm = 0x7F48E26B
	movl	%edi, -36(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$1, %edi
	movl	$6584, %esi             # imm = 0x19B8
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -16(%rbp)
	cmpq	-16(%rbp), %rcx
	jne	.LBB242_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.7, %rdi
	callq	no_mem_exit
.LBB242_2:                              # %if.end
	movq	-16(%rbp), %rdi
	addq	$6424, %rdi             # imm = 0x1918
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	get_mem2Dpel
	movq	-16(%rbp), %rax
	movq	$0, 6432(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6448(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6464(%rax)
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB242_5
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB242_5
# %bb.4:                                # %lor.lhs.false3
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB242_6
.LBB242_5:                              # %if.then5
	movq	-16(%rbp), %rax
	movq	$0, 6440(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6456(%rax)
.LBB242_6:                              # %if.end6
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB242_8
# %bb.7:                                # %if.then8
	movq	-16(%rbp), %rdi
	addq	$6464, %rdi             # imm = 0x1940
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	$2, %esi
	callq	get_mem3Dpel
.LBB242_8:                              # %if.end11
	movq	img, %rax
	movl	72484(%rax), %edi
	movl	$4, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movq	%rax, 6472(%rdx)
	movq	-16(%rbp), %rax
	cmpq	6472(%rax), %rcx
	jne	.LBB242_10
# %bb.9:                                # %if.then16
	movabsq	$.L.str.8, %rdi
	callq	no_mem_exit
.LBB242_10:                             # %if.end17
	movq	-16(%rbp), %rdi
	addq	$6480, %rdi             # imm = 0x1950
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-16(%rbp), %rdi
	addq	$6488, %rdi             # imm = 0x1958
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6496, %rdi             # imm = 0x1960
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$6, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-16(%rbp), %rdi
	addq	$6504, %rdi             # imm = 0x1968
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-16(%rbp), %rdi
	addq	$6512, %rdi             # imm = 0x1970
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rdi
	addq	$6520, %rdi             # imm = 0x1978
	movl	-24(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-16(%rbp), %rax
	movl	$0, 6364(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6360(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6372(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6368(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6380(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6376(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6388(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6384(%rax)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6392(%rcx)
	movl	-20(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6396(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6400(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 6404(%rcx)
	movq	-16(%rbp), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6536(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 6544(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movl	$0, 6416(%rax)
	movq	-16(%rbp), %rbx
	cmpl	$2135482987, -40(%rbp)  # imm = 0x7F48E26B
	jne	.LBB242_12
.LBB242_11:
	movq	%rbx, %rax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_12:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_11
.Lfunc_end242:
	.size	alloc_storable_picture.179, .Lfunc_end242-alloc_storable_picture.179
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.180
	.type	get_short_term_pic.180,@function
get_short_term_pic.180:                 # @get_short_term_pic.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$867101440, -28(%rbp)   # imm = 0x33AEEB00
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB243_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB243_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB243_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB243_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB243_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB243_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB243_23
.LBB243_7:                              # %if.end
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_8
.LBB243_8:                              # %if.end14
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_20
.LBB243_9:                              # %if.else
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB243_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB243_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB243_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB243_23
.LBB243_13:                             # %if.end34
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_14
.LBB243_14:                             # %if.end35
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB243_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB243_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB243_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB243_23
.LBB243_18:                             # %if.end56
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_19
.LBB243_19:                             # %if.end57
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_20
.LBB243_20:                             # %if.end58
                                        #   in Loop: Header=BB243_1 Depth=1
	jmp	.LBB243_21
.LBB243_21:                             # %for.inc
                                        #   in Loop: Header=BB243_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB243_1
.LBB243_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB243_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$867101440, -28(%rbp)   # imm = 0x33AEEB00
	jne	.LBB243_25
.LBB243_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_24
.Lfunc_end243:
	.size	get_short_term_pic.180, .Lfunc_end243-get_short_term_pic.180
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.181     # -- Begin function alloc_colocated.181
	.p2align	4, 0x90
	.type	alloc_colocated.181,@function
alloc_colocated.181:                    # @alloc_colocated.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1758612513, -32(%rbp)  # imm = 0x68D24C21
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB244_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB244_2:                              # %if.end
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB244_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-16(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB244_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1758612513, -32(%rbp)  # imm = 0x68D24C21
	jne	.LBB244_6
.LBB244_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_5
.Lfunc_end244:
	.size	alloc_colocated.181, .Lfunc_end244-alloc_colocated.181
	.cfi_endproc
                                        # -- End function
	.globl	gen_field_ref_ids.182   # -- Begin function gen_field_ref_ids.182
	.p2align	4, 0x90
	.type	gen_field_ref_ids.182,@function
gen_field_ref_ids.182:                  # @gen_field_ref_ids.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1962127135, -28(%rbp)  # imm = 0x74F3AF1F
	movq	%rdi, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB245_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB245_3 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB245_14
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB245_1 Depth=1
	movl	$0, -4(%rbp)
.LBB245_3:                              # %for.cond1
                                        #   Parent Loop BB245_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB245_12
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB245_3 Depth=2
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB245_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB245_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB245_7
.LBB245_6:                              # %cond.false
                                        #   in Loop: Header=BB245_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB245_7
.LBB245_7:                              # %cond.end
                                        #   in Loop: Header=BB245_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB245_9
# %bb.8:                                # %cond.true27
                                        #   in Loop: Header=BB245_3 Depth=2
	movq	-16(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB245_10
.LBB245_9:                              # %cond.false32
                                        #   in Loop: Header=BB245_3 Depth=2
	xorl	%eax, %eax
	jmp	.LBB245_10
.LBB245_10:                             # %cond.end33
                                        #   in Loop: Header=BB245_3 Depth=2
	movq	-16(%rbp), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB245_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB245_3
.LBB245_12:                             # %for.end
                                        #   in Loop: Header=BB245_1 Depth=1
	jmp	.LBB245_13
.LBB245_13:                             # %for.inc45
                                        #   in Loop: Header=BB245_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB245_1
.LBB245_14:                             # %for.end47
	cmpl	$1962127135, -28(%rbp)  # imm = 0x74F3AF1F
	jne	.LBB245_16
.LBB245_15:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_15
.Lfunc_end245:
	.size	gen_field_ref_ids.182, .Lfunc_end245-gen_field_ref_ids.182
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.183
	.type	compare_fs_by_lt_pic_idx_asc.183,@function
compare_fs_by_lt_pic_idx_asc.183:       # @compare_fs_by_lt_pic_idx_asc.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1019139049, -16(%rbp)  # imm = 0x3CBED3E9
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB246_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB246_5
.LBB246_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB246_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB246_5
.LBB246_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB246_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1019139049, -16(%rbp)  # imm = 0x3CBED3E9
	jne	.LBB246_7
.LBB246_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_6
.Lfunc_end246:
	.size	compare_fs_by_lt_pic_idx_asc.183, .Lfunc_end246-compare_fs_by_lt_pic_idx_asc.183
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.184
	.type	compare_fs_by_frame_num_desc.184,@function
compare_fs_by_frame_num_desc.184:       # @compare_fs_by_frame_num_desc.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$832278262, -16(%rbp)   # imm = 0x319B8EF6
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB247_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB247_5
.LBB247_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB247_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB247_5
.LBB247_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB247_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$832278262, -16(%rbp)   # imm = 0x319B8EF6
	jne	.LBB247_7
.LBB247_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_6
.Lfunc_end247:
	.size	compare_fs_by_frame_num_desc.184, .Lfunc_end247-compare_fs_by_frame_num_desc.184
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.185
	.type	unmark_long_term_field_for_reference_by_frame_idx.185,@function
unmark_long_term_field_for_reference_by_frame_idx.185: # @unmark_long_term_field_for_reference_by_frame_idx.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$76109599, -24(%rbp)    # imm = 0x489571F
	movl	%edi, -12(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB248_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB248_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB248_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB248_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB248_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB248_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB248_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB248_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB248_23
.LBB248_8:                              # %if.else
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB248_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB248_22
.LBB248_10:                             # %if.else21
                                        #   in Loop: Header=BB248_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB248_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB248_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB248_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB248_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB248_15
.LBB248_14:                             # %if.then29
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB248_15:                             # %if.end32
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_17
.LBB248_16:                             # %if.else33
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB248_17:                             # %if.end36
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_21
.LBB248_18:                             # %if.else37
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB248_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB248_20:                             # %if.end45
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_21
.LBB248_21:                             # %if.end46
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_22
.LBB248_22:                             # %if.end47
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_23
.LBB248_23:                             # %if.end48
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_24
.LBB248_24:                             # %if.end49
                                        #   in Loop: Header=BB248_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB248_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB248_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB248_42
.LBB248_27:                             # %if.else59
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB248_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB248_41
.LBB248_29:                             # %if.else67
                                        #   in Loop: Header=BB248_3 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB248_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB248_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB248_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB248_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB248_34
.LBB248_33:                             # %if.then78
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB248_34:                             # %if.end81
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_36
.LBB248_35:                             # %if.else82
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB248_36:                             # %if.end85
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_40
.LBB248_37:                             # %if.else86
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB248_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB248_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB248_39:                             # %if.end95
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_40
.LBB248_40:                             # %if.end96
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_41
.LBB248_41:                             # %if.end97
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_42
.LBB248_42:                             # %if.end98
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_43
.LBB248_43:                             # %if.end99
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_44
.LBB248_44:                             # %if.end100
                                        #   in Loop: Header=BB248_3 Depth=1
	jmp	.LBB248_45
.LBB248_45:                             # %for.inc
                                        #   in Loop: Header=BB248_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB248_3
.LBB248_46:                             # %for.end
	cmpl	$76109599, -24(%rbp)    # imm = 0x489571F
	jne	.LBB248_48
.LBB248_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_47
.Lfunc_end248:
	.size	unmark_long_term_field_for_reference_by_frame_idx.185, .Lfunc_end248-unmark_long_term_field_for_reference_by_frame_idx.185
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.186     # -- Begin function dpb_split_field.186
	.p2align	4, 0x90
	.type	dpb_split_field.186,@function
dpb_split_field.186:                    # @dpb_split_field.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$451926491, -72(%rbp)   # imm = 0x1AEFD9DB
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB249_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB249_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB249_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB249_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_2
.LBB249_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB249_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB249_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB249_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_6
.LBB249_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB249_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB249_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB249_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_10
.LBB249_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB249_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB249_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB249_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_14
.LBB249_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB249_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB249_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB249_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB249_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB249_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_19
.LBB249_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB249_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB249_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB249_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB249_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_23
.LBB249_26:                             # %for.end328
	jmp	.LBB249_27
.LBB249_27:                             # %if.end
	jmp	.LBB249_29
.LBB249_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB249_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB249_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB249_30 Depth=1
	movl	$0, -4(%rbp)
.LBB249_32:                             # %for.cond343
                                        #   Parent Loop BB249_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB249_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -68(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-68(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB249_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB249_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB249_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB249_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB249_38
.LBB249_37:                             # %cond.false
                                        #   in Loop: Header=BB249_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_38
.LBB249_38:                             # %cond.end
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB249_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB249_41
.LBB249_40:                             # %cond.false415
                                        #   in Loop: Header=BB249_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_41
.LBB249_41:                             # %cond.end416
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB249_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB249_44
.LBB249_43:                             # %cond.false436
                                        #   in Loop: Header=BB249_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_44
.LBB249_44:                             # %cond.end437
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB249_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB249_47
.LBB249_46:                             # %cond.false456
                                        #   in Loop: Header=BB249_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_47
.LBB249_47:                             # %cond.end457
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB249_55
.LBB249_48:                             # %if.else466
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB249_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB249_51
.LBB249_50:                             # %cond.false491
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB249_51
.LBB249_51:                             # %cond.end492
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB249_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB249_54
.LBB249_53:                             # %cond.false509
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB249_54
.LBB249_54:                             # %cond.end510
                                        #   in Loop: Header=BB249_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB249_55:                             # %if.end519
                                        #   in Loop: Header=BB249_32 Depth=2
	jmp	.LBB249_56
.LBB249_56:                             # %for.inc520
                                        #   in Loop: Header=BB249_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_32
.LBB249_57:                             # %for.end522
                                        #   in Loop: Header=BB249_30 Depth=1
	jmp	.LBB249_58
.LBB249_58:                             # %for.inc523
                                        #   in Loop: Header=BB249_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_30
.LBB249_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB249_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB249_73
.LBB249_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB249_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB249_62 Depth=1
	movl	$0, -8(%rbp)
.LBB249_64:                             # %for.cond538
                                        #   Parent Loop BB249_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB249_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB249_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB249_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-76(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB249_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB249_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB249_68:                             # %if.end908
                                        #   in Loop: Header=BB249_64 Depth=2
	jmp	.LBB249_69
.LBB249_69:                             # %for.inc909
                                        #   in Loop: Header=BB249_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_64
.LBB249_70:                             # %for.end911
                                        #   in Loop: Header=BB249_62 Depth=1
	jmp	.LBB249_71
.LBB249_71:                             # %for.inc912
                                        #   in Loop: Header=BB249_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_62
.LBB249_72:                             # %for.end914
	jmp	.LBB249_73
.LBB249_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB249_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB249_74 Depth=1
	movl	$0, -8(%rbp)
.LBB249_76:                             # %for.cond923
                                        #   Parent Loop BB249_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-64(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB249_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-80(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB249_148
.LBB249_79:                             # %if.then954
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB249_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_83
.LBB249_82:                             # %cond.false991
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_83:                             # %cond.end993
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_86
.LBB249_85:                             # %cond.false1001
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_86:                             # %cond.end1003
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_89
.LBB249_88:                             # %cond.false1032
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_89:                             # %cond.end1034
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_92
.LBB249_91:                             # %cond.false1042
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_92:                             # %cond.end1044
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_95
.LBB249_94:                             # %cond.false1073
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_95:                             # %cond.end1075
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_98
.LBB249_97:                             # %cond.false1083
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_98:                             # %cond.end1085
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_101
.LBB249_100:                            # %cond.false1114
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_101:                            # %cond.end1116
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_104
.LBB249_103:                            # %cond.false1124
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_104:                            # %cond.end1126
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_107
.LBB249_106:                            # %cond.false1155
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_107:                            # %cond.end1157
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_110
.LBB249_109:                            # %cond.false1165
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_110:                            # %cond.end1167
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB249_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB249_125
.LBB249_112:                            # %if.else1190
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_115
.LBB249_114:                            # %cond.false1198
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_115:                            # %cond.end1200
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_118
.LBB249_117:                            # %cond.false1208
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_118:                            # %cond.end1210
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB249_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB249_121
.LBB249_120:                            # %cond.false1237
                                        #   in Loop: Header=BB249_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_121
.LBB249_121:                            # %cond.end1238
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB249_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB249_124
.LBB249_123:                            # %cond.false1254
                                        #   in Loop: Header=BB249_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_124
.LBB249_124:                            # %cond.end1255
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB249_125:                            # %if.end1264
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_128
.LBB249_127:                            # %cond.false1272
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_128:                            # %cond.end1274
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_131
.LBB249_130:                            # %cond.false1282
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_131:                            # %cond.end1284
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB249_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB249_146
.LBB249_133:                            # %if.else1307
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_136
.LBB249_135:                            # %cond.false1315
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_136:                            # %cond.end1317
                                        #   in Loop: Header=BB249_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB249_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB249_139
.LBB249_138:                            # %cond.false1325
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB249_139:                            # %cond.end1327
                                        #   in Loop: Header=BB249_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB249_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB249_142
.LBB249_141:                            # %cond.false1355
                                        #   in Loop: Header=BB249_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_142
.LBB249_142:                            # %cond.end1356
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB249_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB249_145
.LBB249_144:                            # %cond.false1373
                                        #   in Loop: Header=BB249_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_145
.LBB249_145:                            # %cond.end1374
                                        #   in Loop: Header=BB249_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB249_146:                            # %if.end1383
                                        #   in Loop: Header=BB249_76 Depth=2
	jmp	.LBB249_147
.LBB249_147:                            # %if.end1384
                                        #   in Loop: Header=BB249_76 Depth=2
	jmp	.LBB249_148
.LBB249_148:                            # %if.end1385
                                        #   in Loop: Header=BB249_76 Depth=2
	jmp	.LBB249_149
.LBB249_149:                            # %for.inc1386
                                        #   in Loop: Header=BB249_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_76
.LBB249_150:                            # %for.end1388
                                        #   in Loop: Header=BB249_74 Depth=1
	jmp	.LBB249_151
.LBB249_151:                            # %for.inc1389
                                        #   in Loop: Header=BB249_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_74
.LBB249_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB249_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB249_153 Depth=1
	movl	$0, -4(%rbp)
.LBB249_155:                            # %for.cond1399
                                        #   Parent Loop BB249_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB249_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB249_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_155
.LBB249_158:                            # %for.end1414
                                        #   in Loop: Header=BB249_153 Depth=1
	jmp	.LBB249_159
.LBB249_159:                            # %for.inc1415
                                        #   in Loop: Header=BB249_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_153
.LBB249_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB249_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB249_174
.LBB249_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB249_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB249_163 Depth=1
	movl	$0, -4(%rbp)
.LBB249_165:                            # %for.cond1431
                                        #   Parent Loop BB249_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB249_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB249_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB249_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB249_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB249_169
.LBB249_168:                            # %cond.false1462
                                        #   in Loop: Header=BB249_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB249_169
.LBB249_169:                            # %cond.end1463
                                        #   in Loop: Header=BB249_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB249_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB249_165
.LBB249_171:                            # %for.end1474
                                        #   in Loop: Header=BB249_163 Depth=1
	jmp	.LBB249_172
.LBB249_172:                            # %for.inc1475
                                        #   in Loop: Header=BB249_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB249_163
.LBB249_173:                            # %for.end1477
	jmp	.LBB249_174
.LBB249_174:                            # %if.end1478
	cmpl	$451926491, -72(%rbp)   # imm = 0x1AEFD9DB
	jne	.LBB249_176
.LBB249_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_175
.Lfunc_end249:
	.size	dpb_split_field.186, .Lfunc_end249-dpb_split_field.186
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.187          # -- Begin function init_lists.187
	.p2align	4, 0x90
	.type	init_lists.187,@function
init_lists.187:                         # @init_lists.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1441753383, -76(%rbp)  # imm = 0x55EF6927
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB250_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB250_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB250_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB250_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB250_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB250_9
.LBB250_8:                              # %if.else
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB250_9:                              # %if.end
                                        #   in Loop: Header=BB250_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB250_10:                             # %if.end36
                                        #   in Loop: Header=BB250_2 Depth=1
	jmp	.LBB250_11
.LBB250_11:                             # %if.end37
                                        #   in Loop: Header=BB250_2 Depth=1
	jmp	.LBB250_12
.LBB250_12:                             # %for.inc
                                        #   in Loop: Header=BB250_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_2
.LBB250_13:                             # %for.end
	jmp	.LBB250_31
.LBB250_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB250_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB250_17
.LBB250_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB250_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB250_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB250_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB250_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB250_23
.LBB250_22:                             # %if.else63
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB250_23:                             # %if.end70
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB250_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB250_25:                             # %if.end83
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB250_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB250_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB250_27:                             # %if.end98
                                        #   in Loop: Header=BB250_18 Depth=1
	jmp	.LBB250_28
.LBB250_28:                             # %if.end99
                                        #   in Loop: Header=BB250_18 Depth=1
	jmp	.LBB250_29
.LBB250_29:                             # %for.inc100
                                        #   in Loop: Header=BB250_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_18
.LBB250_30:                             # %for.end102
	jmp	.LBB250_31
.LBB250_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB250_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB250_34
.LBB250_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB250_181
.LBB250_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB250_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB250_75
.LBB250_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB250_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB250_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB250_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB250_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB250_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB250_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB250_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB250_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_43:                             # %if.end140
                                        #   in Loop: Header=BB250_38 Depth=1
	jmp	.LBB250_44
.LBB250_44:                             # %if.end141
                                        #   in Loop: Header=BB250_38 Depth=1
	jmp	.LBB250_45
.LBB250_45:                             # %for.inc142
                                        #   in Loop: Header=BB250_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_38
.LBB250_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB250_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB250_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB250_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB250_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB250_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB250_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB250_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_51:                             # %if.end177
                                        #   in Loop: Header=BB250_47 Depth=1
	jmp	.LBB250_52
.LBB250_52:                             # %if.end178
                                        #   in Loop: Header=BB250_47 Depth=1
	jmp	.LBB250_53
.LBB250_53:                             # %for.inc179
                                        #   in Loop: Header=BB250_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_47
.LBB250_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB250_74
.LBB250_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB250_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB250_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB250_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB250_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB250_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB250_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB250_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB250_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_63:                             # %if.end212
                                        #   in Loop: Header=BB250_60 Depth=1
	jmp	.LBB250_64
.LBB250_64:                             # %for.inc213
                                        #   in Loop: Header=BB250_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_60
.LBB250_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB250_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB250_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB250_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB250_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB250_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB250_69:                             # %if.end242
                                        #   in Loop: Header=BB250_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB250_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB250_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB250_71:                             # %if.end259
                                        #   in Loop: Header=BB250_66 Depth=1
	jmp	.LBB250_72
.LBB250_72:                             # %for.inc260
                                        #   in Loop: Header=BB250_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_66
.LBB250_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB250_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB250_155
.LBB250_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB250_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB250_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB250_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB250_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB250_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB250_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB250_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB250_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB250_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB250_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_83:                             # %if.end307
                                        #   in Loop: Header=BB250_77 Depth=1
	jmp	.LBB250_84
.LBB250_84:                             # %if.end308
                                        #   in Loop: Header=BB250_77 Depth=1
	jmp	.LBB250_85
.LBB250_85:                             # %if.end309
                                        #   in Loop: Header=BB250_77 Depth=1
	jmp	.LBB250_86
.LBB250_86:                             # %for.inc310
                                        #   in Loop: Header=BB250_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_77
.LBB250_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB250_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB250_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB250_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB250_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB250_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB250_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB250_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB250_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB250_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB250_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_94:                             # %if.end354
                                        #   in Loop: Header=BB250_88 Depth=1
	jmp	.LBB250_95
.LBB250_95:                             # %if.end355
                                        #   in Loop: Header=BB250_88 Depth=1
	jmp	.LBB250_96
.LBB250_96:                             # %if.end356
                                        #   in Loop: Header=BB250_88 Depth=1
	jmp	.LBB250_97
.LBB250_97:                             # %for.inc357
                                        #   in Loop: Header=BB250_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_88
.LBB250_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB250_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB250_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB250_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB250_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_99
.LBB250_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB250_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB250_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB250_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB250_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_103
.LBB250_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB250_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB250_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB250_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB250_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB250_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB250_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB250_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_111:                            # %if.end428
                                        #   in Loop: Header=BB250_107 Depth=1
	jmp	.LBB250_112
.LBB250_112:                            # %if.end429
                                        #   in Loop: Header=BB250_107 Depth=1
	jmp	.LBB250_113
.LBB250_113:                            # %for.inc430
                                        #   in Loop: Header=BB250_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_107
.LBB250_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB250_154
.LBB250_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB250_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB250_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB250_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB250_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB250_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB250_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB250_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB250_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB250_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB250_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB250_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB250_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_126:                            # %if.end480
                                        #   in Loop: Header=BB250_122 Depth=1
	jmp	.LBB250_127
.LBB250_127:                            # %if.end481
                                        #   in Loop: Header=BB250_122 Depth=1
	jmp	.LBB250_128
.LBB250_128:                            # %for.inc482
                                        #   in Loop: Header=BB250_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_122
.LBB250_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB250_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB250_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB250_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB250_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB250_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB250_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB250_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB250_134:                            # %if.end507
                                        #   in Loop: Header=BB250_130 Depth=1
	jmp	.LBB250_135
.LBB250_135:                            # %if.end508
                                        #   in Loop: Header=BB250_130 Depth=1
	jmp	.LBB250_136
.LBB250_136:                            # %for.inc509
                                        #   in Loop: Header=BB250_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_130
.LBB250_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB250_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB250_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB250_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB250_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_138
.LBB250_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB250_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB250_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB250_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB250_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_142
.LBB250_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB250_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB250_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB250_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB250_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB250_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB250_149:                            # %if.end566
                                        #   in Loop: Header=BB250_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB250_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB250_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB250_151:                            # %if.end583
                                        #   in Loop: Header=BB250_146 Depth=1
	jmp	.LBB250_152
.LBB250_152:                            # %for.inc584
                                        #   in Loop: Header=BB250_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_146
.LBB250_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB250_154:                            # %if.end588
	jmp	.LBB250_155
.LBB250_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB250_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB250_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB250_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB250_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB250_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB250_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB250_158 Depth=1
	movl	$1, -72(%rbp)
.LBB250_161:                            # %if.end607
                                        #   in Loop: Header=BB250_158 Depth=1
	jmp	.LBB250_162
.LBB250_162:                            # %for.inc608
                                        #   in Loop: Header=BB250_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB250_158
.LBB250_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB250_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB250_165:                            # %if.end617
	jmp	.LBB250_166
.LBB250_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB250_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB250_169
.LBB250_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB250_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB250_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB250_172
.LBB250_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB250_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB250_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB250_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB250_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB250_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_173
.LBB250_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB250_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB250_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB250_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB250_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB250_177
.LBB250_180:                            # %for.end646.loopexit
	jmp	.LBB250_181
.LBB250_181:                            # %for.end646
	cmpl	$1441753383, -76(%rbp)  # imm = 0x55EF6927
	jne	.LBB250_183
.LBB250_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_182
.Lfunc_end250:
	.size	init_lists.187, .Lfunc_end250-init_lists.187
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.188          # -- Begin function init_lists.188
	.p2align	4, 0x90
	.type	init_lists.188,@function
init_lists.188:                         # @init_lists.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1735442750, -76(%rbp)  # imm = 0x6770C13E
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB251_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB251_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB251_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB251_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB251_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB251_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB251_9
.LBB251_8:                              # %if.else
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB251_9:                              # %if.end
                                        #   in Loop: Header=BB251_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB251_10:                             # %if.end36
                                        #   in Loop: Header=BB251_2 Depth=1
	jmp	.LBB251_11
.LBB251_11:                             # %if.end37
                                        #   in Loop: Header=BB251_2 Depth=1
	jmp	.LBB251_12
.LBB251_12:                             # %for.inc
                                        #   in Loop: Header=BB251_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_2
.LBB251_13:                             # %for.end
	jmp	.LBB251_31
.LBB251_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB251_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB251_17
.LBB251_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB251_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB251_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB251_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB251_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB251_23
.LBB251_22:                             # %if.else63
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB251_23:                             # %if.end70
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB251_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB251_25:                             # %if.end83
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB251_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB251_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB251_27:                             # %if.end98
                                        #   in Loop: Header=BB251_18 Depth=1
	jmp	.LBB251_28
.LBB251_28:                             # %if.end99
                                        #   in Loop: Header=BB251_18 Depth=1
	jmp	.LBB251_29
.LBB251_29:                             # %for.inc100
                                        #   in Loop: Header=BB251_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_18
.LBB251_30:                             # %for.end102
	jmp	.LBB251_31
.LBB251_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB251_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB251_34
.LBB251_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB251_181
.LBB251_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB251_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB251_75
.LBB251_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB251_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB251_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB251_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB251_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB251_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB251_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB251_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB251_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB251_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_43:                             # %if.end140
                                        #   in Loop: Header=BB251_38 Depth=1
	jmp	.LBB251_44
.LBB251_44:                             # %if.end141
                                        #   in Loop: Header=BB251_38 Depth=1
	jmp	.LBB251_45
.LBB251_45:                             # %for.inc142
                                        #   in Loop: Header=BB251_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_38
.LBB251_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB251_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB251_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB251_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB251_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB251_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB251_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB251_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_51:                             # %if.end177
                                        #   in Loop: Header=BB251_47 Depth=1
	jmp	.LBB251_52
.LBB251_52:                             # %if.end178
                                        #   in Loop: Header=BB251_47 Depth=1
	jmp	.LBB251_53
.LBB251_53:                             # %for.inc179
                                        #   in Loop: Header=BB251_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_47
.LBB251_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB251_74
.LBB251_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB251_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB251_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB251_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB251_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB251_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB251_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB251_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB251_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_63:                             # %if.end212
                                        #   in Loop: Header=BB251_60 Depth=1
	jmp	.LBB251_64
.LBB251_64:                             # %for.inc213
                                        #   in Loop: Header=BB251_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_60
.LBB251_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB251_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB251_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB251_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB251_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB251_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB251_69:                             # %if.end242
                                        #   in Loop: Header=BB251_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB251_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB251_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB251_71:                             # %if.end259
                                        #   in Loop: Header=BB251_66 Depth=1
	jmp	.LBB251_72
.LBB251_72:                             # %for.inc260
                                        #   in Loop: Header=BB251_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_66
.LBB251_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB251_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB251_155
.LBB251_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB251_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB251_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB251_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB251_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB251_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB251_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB251_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB251_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB251_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB251_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB251_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_83:                             # %if.end307
                                        #   in Loop: Header=BB251_77 Depth=1
	jmp	.LBB251_84
.LBB251_84:                             # %if.end308
                                        #   in Loop: Header=BB251_77 Depth=1
	jmp	.LBB251_85
.LBB251_85:                             # %if.end309
                                        #   in Loop: Header=BB251_77 Depth=1
	jmp	.LBB251_86
.LBB251_86:                             # %for.inc310
                                        #   in Loop: Header=BB251_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_77
.LBB251_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB251_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB251_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB251_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB251_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB251_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB251_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB251_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB251_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB251_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB251_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_94:                             # %if.end354
                                        #   in Loop: Header=BB251_88 Depth=1
	jmp	.LBB251_95
.LBB251_95:                             # %if.end355
                                        #   in Loop: Header=BB251_88 Depth=1
	jmp	.LBB251_96
.LBB251_96:                             # %if.end356
                                        #   in Loop: Header=BB251_88 Depth=1
	jmp	.LBB251_97
.LBB251_97:                             # %for.inc357
                                        #   in Loop: Header=BB251_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_88
.LBB251_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB251_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB251_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB251_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB251_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_99
.LBB251_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB251_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB251_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB251_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB251_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_103
.LBB251_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB251_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB251_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB251_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB251_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB251_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB251_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB251_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_111:                            # %if.end428
                                        #   in Loop: Header=BB251_107 Depth=1
	jmp	.LBB251_112
.LBB251_112:                            # %if.end429
                                        #   in Loop: Header=BB251_107 Depth=1
	jmp	.LBB251_113
.LBB251_113:                            # %for.inc430
                                        #   in Loop: Header=BB251_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_107
.LBB251_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB251_154
.LBB251_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB251_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB251_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB251_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB251_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB251_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB251_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB251_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB251_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB251_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB251_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB251_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB251_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_126:                            # %if.end480
                                        #   in Loop: Header=BB251_122 Depth=1
	jmp	.LBB251_127
.LBB251_127:                            # %if.end481
                                        #   in Loop: Header=BB251_122 Depth=1
	jmp	.LBB251_128
.LBB251_128:                            # %for.inc482
                                        #   in Loop: Header=BB251_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_122
.LBB251_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB251_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB251_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB251_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB251_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB251_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB251_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB251_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB251_134:                            # %if.end507
                                        #   in Loop: Header=BB251_130 Depth=1
	jmp	.LBB251_135
.LBB251_135:                            # %if.end508
                                        #   in Loop: Header=BB251_130 Depth=1
	jmp	.LBB251_136
.LBB251_136:                            # %for.inc509
                                        #   in Loop: Header=BB251_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_130
.LBB251_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB251_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB251_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB251_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB251_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_138
.LBB251_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB251_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB251_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB251_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB251_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_142
.LBB251_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB251_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB251_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB251_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB251_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB251_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB251_149:                            # %if.end566
                                        #   in Loop: Header=BB251_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB251_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB251_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB251_151:                            # %if.end583
                                        #   in Loop: Header=BB251_146 Depth=1
	jmp	.LBB251_152
.LBB251_152:                            # %for.inc584
                                        #   in Loop: Header=BB251_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_146
.LBB251_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB251_154:                            # %if.end588
	jmp	.LBB251_155
.LBB251_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB251_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB251_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB251_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB251_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB251_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB251_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB251_158 Depth=1
	movl	$1, -68(%rbp)
.LBB251_161:                            # %if.end607
                                        #   in Loop: Header=BB251_158 Depth=1
	jmp	.LBB251_162
.LBB251_162:                            # %for.inc608
                                        #   in Loop: Header=BB251_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_158
.LBB251_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB251_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB251_165:                            # %if.end617
	jmp	.LBB251_166
.LBB251_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB251_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB251_169
.LBB251_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB251_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB251_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB251_172
.LBB251_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB251_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB251_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB251_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB251_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB251_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_173
.LBB251_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB251_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB251_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB251_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB251_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB251_177
.LBB251_180:                            # %for.end646.loopexit
	jmp	.LBB251_181
.LBB251_181:                            # %for.end646
	cmpl	$1735442750, -76(%rbp)  # imm = 0x6770C13E
	jne	.LBB251_183
.LBB251_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_182
.Lfunc_end251:
	.size	init_lists.188, .Lfunc_end251-init_lists.188
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.189
	.type	remove_frame_from_dpb.189,@function
remove_frame_from_dpb.189:              # @remove_frame_from_dpb.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1359452270, -20(%rbp)  # imm = 0x5107986E
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB252_6
# %bb.1:                                # %entry
	movq	.LJTI252_0(,%rax,8), %rax
	jmpq	*%rax
.LBB252_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB252_7
.LBB252_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB252_7
.LBB252_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB252_7
.LBB252_5:                              # %sw.bb10
	jmp	.LBB252_7
.LBB252_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB252_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB252_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB252_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB252_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB252_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB252_8
.LBB252_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1359452270, -20(%rbp)  # imm = 0x5107986E
	jne	.LBB252_13
.LBB252_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_12
.Lfunc_end252:
	.size	remove_frame_from_dpb.189, .Lfunc_end252-remove_frame_from_dpb.189
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI252_0:
	.quad	.LBB252_5
	.quad	.LBB252_4
	.quad	.LBB252_3
	.quad	.LBB252_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function reorder_short_term.190
	.type	reorder_short_term.190,@function
reorder_short_term.190:                 # @reorder_short_term.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$399273426, -44(%rbp)   # imm = 0x17CC6DD2
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB253_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB253_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB253_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB253_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_1
.LBB253_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB253_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB253_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB253_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB253_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB253_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB253_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB253_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB253_10
.LBB253_9:                              # %if.then17
                                        #   in Loop: Header=BB253_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB253_10:                             # %if.end
                                        #   in Loop: Header=BB253_5 Depth=1
	jmp	.LBB253_11
.LBB253_11:                             # %if.end23
                                        #   in Loop: Header=BB253_5 Depth=1
	jmp	.LBB253_12
.LBB253_12:                             # %for.inc24
                                        #   in Loop: Header=BB253_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB253_5
.LBB253_13:                             # %for.end26
	cmpl	$399273426, -44(%rbp)   # imm = 0x17CC6DD2
	jne	.LBB253_15
.LBB253_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_14
.Lfunc_end253:
	.size	reorder_short_term.190, .Lfunc_end253-reorder_short_term.190
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.191
	.type	remove_frame_from_dpb.191,@function
remove_frame_from_dpb.191:              # @remove_frame_from_dpb.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1241052873, -20(%rbp)  # imm = 0x49F8F6C9
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB254_6
# %bb.1:                                # %entry
	movq	.LJTI254_0(,%rax,8), %rax
	jmpq	*%rax
.LBB254_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB254_7
.LBB254_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB254_7
.LBB254_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB254_7
.LBB254_5:                              # %sw.bb10
	jmp	.LBB254_7
.LBB254_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB254_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB254_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB254_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB254_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB254_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_8
.LBB254_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1241052873, -20(%rbp)  # imm = 0x49F8F6C9
	jne	.LBB254_13
.LBB254_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_12
.Lfunc_end254:
	.size	remove_frame_from_dpb.191, .Lfunc_end254-remove_frame_from_dpb.191
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI254_0:
	.quad	.LBB254_5
	.quad	.LBB254_4
	.quad	.LBB254_3
	.quad	.LBB254_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function reorder_long_term.192
	.type	reorder_long_term.192,@function
reorder_long_term.192:                  # @reorder_long_term.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$441337763, -44(%rbp)   # imm = 0x1A4E47A3
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB255_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB255_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB255_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB255_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_1
.LBB255_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB255_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB255_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB255_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB255_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB255_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB255_9
.LBB255_8:                              # %if.then
                                        #   in Loop: Header=BB255_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB255_9:                              # %if.end
                                        #   in Loop: Header=BB255_5 Depth=1
	jmp	.LBB255_10
.LBB255_10:                             # %for.inc19
                                        #   in Loop: Header=BB255_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB255_5
.LBB255_11:                             # %for.end21
	cmpl	$441337763, -44(%rbp)   # imm = 0x1A4E47A3
	jne	.LBB255_13
.LBB255_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_12
.Lfunc_end255:
	.size	reorder_long_term.192, .Lfunc_end255-reorder_long_term.192
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_desc.193
	.type	compare_pic_by_poc_desc.193,@function
compare_pic_by_poc_desc.193:            # @compare_pic_by_poc_desc.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$21604041, -16(%rbp)    # imm = 0x149A6C9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB256_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB256_5
.LBB256_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB256_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB256_5
.LBB256_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB256_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$21604041, -16(%rbp)    # imm = 0x149A6C9
	jne	.LBB256_7
.LBB256_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_6
.Lfunc_end256:
	.size	compare_pic_by_poc_desc.193, .Lfunc_end256-compare_pic_by_poc_desc.193
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_pic_num_desc.194
	.type	compare_pic_by_pic_num_desc.194,@function
compare_pic_by_pic_num_desc.194:        # @compare_pic_by_pic_num_desc.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1339817073, -16(%rbp)  # imm = 0x4FDBFC71
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jge	.LBB257_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB257_5
.LBB257_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	6364(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	6364(%rcx), %eax
	jle	.LBB257_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB257_5
.LBB257_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB257_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1339817073, -16(%rbp)  # imm = 0x4FDBFC71
	jne	.LBB257_7
.LBB257_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_6
.Lfunc_end257:
	.size	compare_pic_by_pic_num_desc.194, .Lfunc_end257-compare_pic_by_pic_num_desc.194
	.cfi_endproc
                                        # -- End function
	.globl	alloc_colocated.195     # -- Begin function alloc_colocated.195
	.p2align	4, 0x90
	.type	alloc_colocated.195,@function
alloc_colocated.195:                    # @alloc_colocated.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1968493500, -32(%rbp)  # imm = 0x7554D3BC
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -28(%rbp)
	movl	$1, %edi
	movl	$4880, %esi             # imm = 0x1310
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	-24(%rbp), %rcx
	jne	.LBB258_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.21, %rdi
	callq	no_mem_exit
.LBB258_2:                              # %if.end
	movl	-16(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-24(%rbp), %rdi
	addq	$1600, %rdi             # imm = 0x640
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$1608, %rdi             # imm = 0x648
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$1616, %rdi             # imm = 0x650
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$1624, %rdi             # imm = 0x658
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4872, %rdi             # imm = 0x1308
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	cmpl	$0, -28(%rbp)
	je	.LBB258_4
# %bb.3:                                # %if.then17
	movq	-24(%rbp), %rdi
	addq	$3216, %rdi             # imm = 0xC90
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$3224, %rdi             # imm = 0xC98
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$3232, %rdi             # imm = 0xCA0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$3240, %rdi             # imm = 0xCA8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
	movq	-24(%rbp), %rdi
	addq	$4832, %rdi             # imm = 0x12E0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dshort
	movq	-24(%rbp), %rdi
	addq	$4840, %rdi             # imm = 0x12E8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	callq	get_mem3Dint64
	movq	-24(%rbp), %rdi
	addq	$4848, %rdi             # imm = 0x12F0
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	$2, %esi
	movl	%ecx, %edx
	movl	%eax, %ecx
	movl	$2, %r8d
	callq	get_mem4Dshort
	movq	-24(%rbp), %rdi
	addq	$4856, %rdi             # imm = 0x12F8
	movl	-16(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edx
	callq	get_mem2D
.LBB258_4:                              # %if.end50
	movl	-28(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rbx
	cmpl	$1968493500, -32(%rbp)  # imm = 0x7554D3BC
	jne	.LBB258_6
.LBB258_5:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_5
.Lfunc_end258:
	.size	alloc_colocated.195, .Lfunc_end258-alloc_colocated.195
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.196
	.type	unmark_long_term_field_for_reference_by_frame_idx.196,@function
unmark_long_term_field_for_reference_by_frame_idx.196: # @unmark_long_term_field_for_reference_by_frame_idx.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1548883023, -24(%rbp)  # imm = 0x5C52144F
	movl	%edi, -20(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB259_2
# %bb.1:                                # %if.then
	movl	-32(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB259_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB259_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB259_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-28(%rbp), %eax
	jne	.LBB259_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB259_3 Depth=1
	cmpl	$1, -20(%rbp)
	jne	.LBB259_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB259_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB259_23
.LBB259_8:                              # %if.else
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB259_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB259_22
.LBB259_10:                             # %if.else21
                                        #   in Loop: Header=BB259_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB259_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB259_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB259_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB259_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB259_15
.LBB259_14:                             # %if.then29
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB259_15:                             # %if.end32
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_17
.LBB259_16:                             # %if.else33
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB259_17:                             # %if.end36
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_21
.LBB259_18:                             # %if.else37
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB259_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB259_20:                             # %if.end45
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_21
.LBB259_21:                             # %if.end46
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_22
.LBB259_22:                             # %if.end47
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_23
.LBB259_23:                             # %if.end48
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_24
.LBB259_24:                             # %if.end49
                                        #   in Loop: Header=BB259_3 Depth=1
	cmpl	$2, -20(%rbp)
	jne	.LBB259_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB259_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB259_42
.LBB259_27:                             # %if.else59
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB259_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB259_41
.LBB259_29:                             # %if.else67
                                        #   in Loop: Header=BB259_3 Depth=1
	cmpl	$0, -12(%rbp)
	je	.LBB259_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB259_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB259_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB259_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB259_34
.LBB259_33:                             # %if.then78
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB259_34:                             # %if.end81
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_36
.LBB259_35:                             # %if.else82
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB259_36:                             # %if.end85
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_40
.LBB259_37:                             # %if.else86
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB259_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB259_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB259_39:                             # %if.end95
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_40
.LBB259_40:                             # %if.end96
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_41
.LBB259_41:                             # %if.end97
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_42
.LBB259_42:                             # %if.end98
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_43
.LBB259_43:                             # %if.end99
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_44
.LBB259_44:                             # %if.end100
                                        #   in Loop: Header=BB259_3 Depth=1
	jmp	.LBB259_45
.LBB259_45:                             # %for.inc
                                        #   in Loop: Header=BB259_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB259_3
.LBB259_46:                             # %for.end
	cmpl	$1548883023, -24(%rbp)  # imm = 0x5C52144F
	jne	.LBB259_48
.LBB259_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_47
.Lfunc_end259:
	.size	unmark_long_term_field_for_reference_by_frame_idx.196, .Lfunc_end259-unmark_long_term_field_for_reference_by_frame_idx.196
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_short_term_pic.197
	.type	get_short_term_pic.197,@function
get_short_term_pic.197:                 # @get_short_term_pic.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$97414353, -28(%rbp)    # imm = 0x5CE6CD1
	movl	%edi, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB260_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB260_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB260_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB260_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB260_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB260_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB260_23
.LBB260_7:                              # %if.end
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_8
.LBB260_8:                              # %if.end14
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_20
.LBB260_9:                              # %if.else
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB260_14
# %bb.10:                               # %if.then19
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB260_13
# %bb.11:                               # %land.lhs.true24
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB260_13
# %bb.12:                               # %if.then30
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB260_23
.LBB260_13:                             # %if.end34
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_14
.LBB260_14:                             # %if.end35
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB260_19
# %bb.15:                               # %if.then41
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB260_18
# %bb.16:                               # %land.lhs.true46
                                        #   in Loop: Header=BB260_1 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB260_18
# %bb.17:                               # %if.then52
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	%rax, -24(%rbp)
	jmp	.LBB260_23
.LBB260_18:                             # %if.end56
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_19
.LBB260_19:                             # %if.end57
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_20
.LBB260_20:                             # %if.end58
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_21
.LBB260_21:                             # %for.inc
                                        #   in Loop: Header=BB260_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB260_1
.LBB260_22:                             # %for.end
	movq	$0, -24(%rbp)
.LBB260_23:                             # %return
	movq	-24(%rbp), %rbx
	cmpl	$97414353, -28(%rbp)    # imm = 0x5CE6CD1
	jne	.LBB260_25
.LBB260_24:
	movq	%rbx, %rax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_25:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_24
.Lfunc_end260:
	.size	get_short_term_pic.197, .Lfunc_end260-get_short_term_pic.197
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.198   # -- Begin function dpb_combine_field.198
	.p2align	4, 0x90
	.type	dpb_combine_field.198,@function
dpb_combine_field.198:                  # @dpb_combine_field.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1873885132, -32(%rbp)  # imm = 0x6FB137CC
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB261_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB261_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB261_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB261_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_1
.LBB261_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB261_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB261_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_5
.LBB261_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB261_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB261_11
.LBB261_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB261_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB261_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB261_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB261_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB261_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB261_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB261_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB261_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB261_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB261_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB261_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB261_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB261_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB261_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB261_24
.LBB261_23:                             # %cond.false217
                                        #   in Loop: Header=BB261_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB261_24:                             # %cond.end226
                                        #   in Loop: Header=BB261_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB261_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_20
.LBB261_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB261_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB261_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB261_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB261_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB261_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB261_31
.LBB261_30:                             # %cond.false269
                                        #   in Loop: Header=BB261_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB261_31:                             # %cond.end278
                                        #   in Loop: Header=BB261_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB261_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_27
.LBB261_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB261_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB261_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB261_34 Depth=1
	movl	$0, -20(%rbp)
.LBB261_36:                             # %for.cond295
                                        #   Parent Loop BB261_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB261_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB261_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB261_40
.LBB261_39:                             # %cond.false445
                                        #   in Loop: Header=BB261_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_40
.LBB261_40:                             # %cond.end446
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB261_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB261_43
.LBB261_42:                             # %cond.false462
                                        #   in Loop: Header=BB261_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_43
.LBB261_43:                             # %cond.end463
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB261_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB261_46
.LBB261_45:                             # %cond.false479
                                        #   in Loop: Header=BB261_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB261_46
.LBB261_46:                             # %cond.end480
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB261_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB261_49
.LBB261_48:                             # %cond.false501
                                        #   in Loop: Header=BB261_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB261_49
.LBB261_49:                             # %cond.end502
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB261_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB261_52
.LBB261_51:                             # %cond.false647
                                        #   in Loop: Header=BB261_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_52
.LBB261_52:                             # %cond.end648
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB261_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB261_55
.LBB261_54:                             # %cond.false665
                                        #   in Loop: Header=BB261_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_55
.LBB261_55:                             # %cond.end666
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB261_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB261_58
.LBB261_57:                             # %cond.false683
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB261_58
.LBB261_58:                             # %cond.end684
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB261_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB261_61
.LBB261_60:                             # %cond.false706
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB261_61
.LBB261_61:                             # %cond.end707
                                        #   in Loop: Header=BB261_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB261_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB261_36
.LBB261_63:                             # %for.end723
                                        #   in Loop: Header=BB261_34 Depth=1
	jmp	.LBB261_64
.LBB261_64:                             # %for.inc724
                                        #   in Loop: Header=BB261_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_34
.LBB261_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB261_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB261_76
.LBB261_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB261_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB261_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB261_68 Depth=1
	movl	$0, -20(%rbp)
.LBB261_70:                             # %for.cond737
                                        #   Parent Loop BB261_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB261_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB261_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB261_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB261_70
.LBB261_73:                             # %for.end758
                                        #   in Loop: Header=BB261_68 Depth=1
	jmp	.LBB261_74
.LBB261_74:                             # %for.inc759
                                        #   in Loop: Header=BB261_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_68
.LBB261_75:                             # %for.end761
	jmp	.LBB261_76
.LBB261_76:                             # %if.end762
	cmpl	$1873885132, -32(%rbp)  # imm = 0x6FB137CC
	jne	.LBB261_78
.LBB261_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_77
.Lfunc_end261:
	.size	dpb_combine_field.198, .Lfunc_end261-dpb_combine_field.198
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.199
	.type	get_pic_num_x.199,@function
get_pic_num_x.199:                      # @get_pic_num_x.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2129723565, -32(%rbp)  # imm = 0x7EF100AD
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB262_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB262_3
.LBB262_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB262_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$2129723565, -32(%rbp)  # imm = 0x7EF100AD
	jne	.LBB262_5
.LBB262_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_4
.Lfunc_end262:
	.size	get_pic_num_x.199, .Lfunc_end262-get_pic_num_x.199
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.200
	.type	compare_fs_by_lt_pic_idx_asc.200,@function
compare_fs_by_lt_pic_idx_asc.200:       # @compare_fs_by_lt_pic_idx_asc.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$803458241, -16(%rbp)   # imm = 0x2FE3CCC1
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB263_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB263_5
.LBB263_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB263_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB263_5
.LBB263_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB263_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$803458241, -16(%rbp)   # imm = 0x2FE3CCC1
	jne	.LBB263_7
.LBB263_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_6
.Lfunc_end263:
	.size	compare_fs_by_lt_pic_idx_asc.200, .Lfunc_end263-compare_fs_by_lt_pic_idx_asc.200
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.201
	.type	compare_fs_by_lt_pic_idx_asc.201,@function
compare_fs_by_lt_pic_idx_asc.201:       # @compare_fs_by_lt_pic_idx_asc.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$475904308, -16(%rbp)   # imm = 0x1C5DB934
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB264_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB264_5
.LBB264_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB264_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB264_5
.LBB264_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB264_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$475904308, -16(%rbp)   # imm = 0x1C5DB934
	jne	.LBB264_7
.LBB264_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_6
.Lfunc_end264:
	.size	compare_fs_by_lt_pic_idx_asc.201, .Lfunc_end264-compare_fs_by_lt_pic_idx_asc.201
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.202
	.type	remove_frame_from_dpb.202,@function
remove_frame_from_dpb.202:              # @remove_frame_from_dpb.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$353085783, -20(%rbp)   # imm = 0x150BA957
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB265_6
# %bb.1:                                # %entry
	movq	.LJTI265_0(,%rax,8), %rax
	jmpq	*%rax
.LBB265_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB265_7
.LBB265_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB265_7
.LBB265_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB265_7
.LBB265_5:                              # %sw.bb10
	jmp	.LBB265_7
.LBB265_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB265_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB265_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB265_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB265_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB265_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB265_8
.LBB265_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$353085783, -20(%rbp)   # imm = 0x150BA957
	jne	.LBB265_13
.LBB265_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_12
.Lfunc_end265:
	.size	remove_frame_from_dpb.202, .Lfunc_end265-remove_frame_from_dpb.202
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI265_0:
	.quad	.LBB265_5
	.quad	.LBB265_4
	.quad	.LBB265_3
	.quad	.LBB265_2
                                        # -- End function
	.text
	.globl	dpb_split_field.203     # -- Begin function dpb_split_field.203
	.p2align	4, 0x90
	.type	dpb_split_field.203,@function
dpb_split_field.203:                    # @dpb_split_field.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1019244582, -64(%rbp)  # imm = 0x3CC07026
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB266_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB266_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB266_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB266_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_2
.LBB266_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB266_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB266_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB266_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_6
.LBB266_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB266_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB266_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB266_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_10
.LBB266_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB266_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB266_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB266_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_14
.LBB266_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB266_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB266_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB266_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB266_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB266_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_19
.LBB266_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB266_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB266_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB266_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB266_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_23
.LBB266_26:                             # %for.end328
	jmp	.LBB266_27
.LBB266_27:                             # %if.end
	jmp	.LBB266_29
.LBB266_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB266_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB266_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB266_30 Depth=1
	movl	$0, -4(%rbp)
.LBB266_32:                             # %for.cond343
                                        #   Parent Loop BB266_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB266_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB266_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-32(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB266_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB266_32 Depth=2
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB266_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB266_38
.LBB266_37:                             # %cond.false
                                        #   in Loop: Header=BB266_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_38
.LBB266_38:                             # %cond.end
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB266_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB266_41
.LBB266_40:                             # %cond.false415
                                        #   in Loop: Header=BB266_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_41
.LBB266_41:                             # %cond.end416
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB266_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB266_44
.LBB266_43:                             # %cond.false436
                                        #   in Loop: Header=BB266_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_44
.LBB266_44:                             # %cond.end437
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB266_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB266_47
.LBB266_46:                             # %cond.false456
                                        #   in Loop: Header=BB266_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_47
.LBB266_47:                             # %cond.end457
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB266_55
.LBB266_48:                             # %if.else466
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB266_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB266_51
.LBB266_50:                             # %cond.false491
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB266_51
.LBB266_51:                             # %cond.end492
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB266_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB266_54
.LBB266_53:                             # %cond.false509
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB266_54
.LBB266_54:                             # %cond.end510
                                        #   in Loop: Header=BB266_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB266_55:                             # %if.end519
                                        #   in Loop: Header=BB266_32 Depth=2
	jmp	.LBB266_56
.LBB266_56:                             # %for.inc520
                                        #   in Loop: Header=BB266_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_32
.LBB266_57:                             # %for.end522
                                        #   in Loop: Header=BB266_30 Depth=1
	jmp	.LBB266_58
.LBB266_58:                             # %for.inc523
                                        #   in Loop: Header=BB266_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB266_30
.LBB266_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB266_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB266_73
.LBB266_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB266_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB266_62 Depth=1
	movl	$0, -8(%rbp)
.LBB266_64:                             # %for.cond538
                                        #   Parent Loop BB266_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB266_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB266_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB266_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB266_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB266_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB266_68:                             # %if.end908
                                        #   in Loop: Header=BB266_64 Depth=2
	jmp	.LBB266_69
.LBB266_69:                             # %for.inc909
                                        #   in Loop: Header=BB266_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB266_64
.LBB266_70:                             # %for.end911
                                        #   in Loop: Header=BB266_62 Depth=1
	jmp	.LBB266_71
.LBB266_71:                             # %for.inc912
                                        #   in Loop: Header=BB266_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_62
.LBB266_72:                             # %for.end914
	jmp	.LBB266_73
.LBB266_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB266_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB266_74 Depth=1
	movl	$0, -8(%rbp)
.LBB266_76:                             # %for.cond923
                                        #   Parent Loop BB266_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -76(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-76(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB266_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB266_148
.LBB266_79:                             # %if.then954
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB266_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_83
.LBB266_82:                             # %cond.false991
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_83:                             # %cond.end993
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_86
.LBB266_85:                             # %cond.false1001
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_86:                             # %cond.end1003
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_89
.LBB266_88:                             # %cond.false1032
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_89:                             # %cond.end1034
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_92
.LBB266_91:                             # %cond.false1042
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_92:                             # %cond.end1044
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_95
.LBB266_94:                             # %cond.false1073
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_95:                             # %cond.end1075
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_98
.LBB266_97:                             # %cond.false1083
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_98:                             # %cond.end1085
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_101
.LBB266_100:                            # %cond.false1114
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_101:                            # %cond.end1116
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_104
.LBB266_103:                            # %cond.false1124
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_104:                            # %cond.end1126
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_107
.LBB266_106:                            # %cond.false1155
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_107:                            # %cond.end1157
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_110
.LBB266_109:                            # %cond.false1165
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_110:                            # %cond.end1167
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB266_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB266_125
.LBB266_112:                            # %if.else1190
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_115
.LBB266_114:                            # %cond.false1198
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_115:                            # %cond.end1200
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_118
.LBB266_117:                            # %cond.false1208
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_118:                            # %cond.end1210
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB266_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB266_121
.LBB266_120:                            # %cond.false1237
                                        #   in Loop: Header=BB266_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_121
.LBB266_121:                            # %cond.end1238
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB266_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB266_124
.LBB266_123:                            # %cond.false1254
                                        #   in Loop: Header=BB266_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_124
.LBB266_124:                            # %cond.end1255
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB266_125:                            # %if.end1264
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_128
.LBB266_127:                            # %cond.false1272
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_128:                            # %cond.end1274
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_131
.LBB266_130:                            # %cond.false1282
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_131:                            # %cond.end1284
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB266_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB266_146
.LBB266_133:                            # %if.else1307
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_136
.LBB266_135:                            # %cond.false1315
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_136:                            # %cond.end1317
                                        #   in Loop: Header=BB266_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB266_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB266_139
.LBB266_138:                            # %cond.false1325
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB266_139:                            # %cond.end1327
                                        #   in Loop: Header=BB266_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB266_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB266_142
.LBB266_141:                            # %cond.false1355
                                        #   in Loop: Header=BB266_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_142
.LBB266_142:                            # %cond.end1356
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB266_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB266_145
.LBB266_144:                            # %cond.false1373
                                        #   in Loop: Header=BB266_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_145
.LBB266_145:                            # %cond.end1374
                                        #   in Loop: Header=BB266_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB266_146:                            # %if.end1383
                                        #   in Loop: Header=BB266_76 Depth=2
	jmp	.LBB266_147
.LBB266_147:                            # %if.end1384
                                        #   in Loop: Header=BB266_76 Depth=2
	jmp	.LBB266_148
.LBB266_148:                            # %if.end1385
                                        #   in Loop: Header=BB266_76 Depth=2
	jmp	.LBB266_149
.LBB266_149:                            # %for.inc1386
                                        #   in Loop: Header=BB266_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB266_76
.LBB266_150:                            # %for.end1388
                                        #   in Loop: Header=BB266_74 Depth=1
	jmp	.LBB266_151
.LBB266_151:                            # %for.inc1389
                                        #   in Loop: Header=BB266_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_74
.LBB266_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB266_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB266_153 Depth=1
	movl	$0, -4(%rbp)
.LBB266_155:                            # %for.cond1399
                                        #   Parent Loop BB266_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB266_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB266_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_155
.LBB266_158:                            # %for.end1414
                                        #   in Loop: Header=BB266_153 Depth=1
	jmp	.LBB266_159
.LBB266_159:                            # %for.inc1415
                                        #   in Loop: Header=BB266_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB266_153
.LBB266_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB266_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB266_174
.LBB266_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB266_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB266_163 Depth=1
	movl	$0, -4(%rbp)
.LBB266_165:                            # %for.cond1431
                                        #   Parent Loop BB266_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB266_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB266_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -60(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB266_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB266_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-60(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB266_169
.LBB266_168:                            # %cond.false1462
                                        #   in Loop: Header=BB266_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB266_169
.LBB266_169:                            # %cond.end1463
                                        #   in Loop: Header=BB266_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB266_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB266_165
.LBB266_171:                            # %for.end1474
                                        #   in Loop: Header=BB266_163 Depth=1
	jmp	.LBB266_172
.LBB266_172:                            # %for.inc1475
                                        #   in Loop: Header=BB266_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB266_163
.LBB266_173:                            # %for.end1477
	jmp	.LBB266_174
.LBB266_174:                            # %if.end1478
	cmpl	$1019244582, -64(%rbp)  # imm = 0x3CC07026
	jne	.LBB266_176
.LBB266_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_175
.Lfunc_end266:
	.size	dpb_split_field.203, .Lfunc_end266-dpb_split_field.203
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.204
	.type	reorder_long_term.204,@function
reorder_long_term.204:                  # @reorder_long_term.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$538458440, -44(%rbp)   # imm = 0x20183948
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB267_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB267_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB267_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB267_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_1
.LBB267_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB267_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB267_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB267_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB267_9
.LBB267_8:                              # %if.then
                                        #   in Loop: Header=BB267_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-28(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -28(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB267_9:                              # %if.end
                                        #   in Loop: Header=BB267_5 Depth=1
	jmp	.LBB267_10
.LBB267_10:                             # %for.inc19
                                        #   in Loop: Header=BB267_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB267_5
.LBB267_11:                             # %for.end21
	cmpl	$538458440, -44(%rbp)   # imm = 0x20183948
	jne	.LBB267_13
.LBB267_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_12
.Lfunc_end267:
	.size	reorder_long_term.204, .Lfunc_end267-reorder_long_term.204
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.205   # -- Begin function compute_colocated.205
	.p2align	4, 0x90
	.type	compute_colocated.205,@function
compute_colocated.205:                  # @compute_colocated.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$380568013, -72(%rbp)   # imm = 0x16AF01CD
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB268_11
.LBB268_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB268_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB268_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB268_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB268_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB268_8
.LBB268_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB268_8:                              # %if.end
	jmp	.LBB268_9
.LBB268_9:                              # %if.end20
	jmp	.LBB268_10
.LBB268_10:                             # %if.end21
	jmp	.LBB268_11
.LBB268_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB268_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB268_29
.LBB268_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB268_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB268_14 Depth=1
	movl	$0, -16(%rbp)
.LBB268_16:                             # %for.cond27
                                        #   Parent Loop BB268_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB268_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB268_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB268_22
.LBB268_21:                             # %if.else160
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB268_22:                             # %if.end283
                                        #   in Loop: Header=BB268_16 Depth=2
	jmp	.LBB268_24
.LBB268_23:                             # %if.else284
                                        #   in Loop: Header=BB268_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB268_24:                             # %if.end391
                                        #   in Loop: Header=BB268_16 Depth=2
	jmp	.LBB268_25
.LBB268_25:                             # %for.inc
                                        #   in Loop: Header=BB268_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_16
.LBB268_26:                             # %for.end
                                        #   in Loop: Header=BB268_14 Depth=1
	jmp	.LBB268_27
.LBB268_27:                             # %for.inc392
                                        #   in Loop: Header=BB268_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_14
.LBB268_28:                             # %for.end394
	jmp	.LBB268_29
.LBB268_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB268_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_241
.LBB268_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB268_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB268_32 Depth=1
	movl	$0, -12(%rbp)
.LBB268_34:                             # %for.cond408
                                        #   Parent Loop BB268_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB268_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_39
.LBB268_38:                             # %cond.false
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_39:                             # %cond.end
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_42
.LBB268_41:                             # %cond.false427
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_42:                             # %cond.end429
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_45
.LBB268_44:                             # %cond.false447
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_45:                             # %cond.end449
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_48
.LBB268_47:                             # %cond.false457
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_48:                             # %cond.end459
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_51
.LBB268_50:                             # %cond.false477
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_51:                             # %cond.end479
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_54
.LBB268_53:                             # %cond.false487
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_54:                             # %cond.end489
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_57
.LBB268_56:                             # %cond.false507
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_57:                             # %cond.end509
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_60
.LBB268_59:                             # %cond.false517
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_60:                             # %cond.end519
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_63
.LBB268_62:                             # %cond.false537
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_63:                             # %cond.end539
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_66
.LBB268_65:                             # %cond.false547
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_66:                             # %cond.end549
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB268_81
.LBB268_68:                             # %if.else569
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_71
.LBB268_70:                             # %cond.false576
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_71:                             # %cond.end578
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_74
.LBB268_73:                             # %cond.false586
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_74:                             # %cond.end588
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_77
.LBB268_76:                             # %cond.false604
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_77:                             # %cond.end606
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_80
.LBB268_79:                             # %cond.false614
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_80:                             # %cond.end616
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB268_81:                             # %if.end626
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_84
.LBB268_83:                             # %cond.false633
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_84:                             # %cond.end635
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_87
.LBB268_86:                             # %cond.false643
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_87:                             # %cond.end645
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB268_102
.LBB268_89:                             # %if.else665
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_92
.LBB268_91:                             # %cond.false672
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_92:                             # %cond.end674
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_95
.LBB268_94:                             # %cond.false682
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_95:                             # %cond.end684
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_98
.LBB268_97:                             # %cond.false700
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_98:                             # %cond.end702
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_101
.LBB268_100:                            # %cond.false710
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_101:                            # %cond.end712
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB268_102:                            # %if.end722
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB268_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_112
.LBB268_107:                            # %lor.rhs
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_111:                            # %land.end
                                        #   in Loop: Header=BB268_34 Depth=2
.LBB268_112:                            # %lor.end
                                        #   in Loop: Header=BB268_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_113:                            # %if.end814
                                        #   in Loop: Header=BB268_34 Depth=2
	jmp	.LBB268_236
.LBB268_114:                            # %if.else815
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_117
.LBB268_116:                            # %cond.false822
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_117:                            # %cond.end824
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_120
.LBB268_119:                            # %cond.false832
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_120:                            # %cond.end834
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_123
.LBB268_122:                            # %cond.false851
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_123:                            # %cond.end853
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_126
.LBB268_125:                            # %cond.false861
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_126:                            # %cond.end863
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_129
.LBB268_128:                            # %cond.false881
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_129:                            # %cond.end883
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_132
.LBB268_131:                            # %cond.false891
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_132:                            # %cond.end893
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_135
.LBB268_134:                            # %cond.false911
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_135:                            # %cond.end913
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_138
.LBB268_137:                            # %cond.false921
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_138:                            # %cond.end923
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_141
.LBB268_140:                            # %cond.false941
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_141:                            # %cond.end943
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_144
.LBB268_143:                            # %cond.false951
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_144:                            # %cond.end953
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_147
.LBB268_146:                            # %cond.false968
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_147:                            # %cond.end970
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_150
.LBB268_149:                            # %cond.false978
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_150:                            # %cond.end980
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_153
.LBB268_152:                            # %cond.false996
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_153:                            # %cond.end998
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_156
.LBB268_155:                            # %cond.false1006
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_156:                            # %cond.end1008
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_159
.LBB268_158:                            # %cond.false1023
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_159:                            # %cond.end1025
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_162
.LBB268_161:                            # %cond.false1033
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_162:                            # %cond.end1035
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB268_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_172
.LBB268_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_171:                            # %land.end1133
                                        #   in Loop: Header=BB268_34 Depth=2
.LBB268_172:                            # %lor.end1134
                                        #   in Loop: Header=BB268_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_173:                            # %if.end1142
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_176
.LBB268_175:                            # %cond.false1149
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_176:                            # %cond.end1151
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_179
.LBB268_178:                            # %cond.false1159
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_179:                            # %cond.end1161
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_182
.LBB268_181:                            # %cond.false1178
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_182:                            # %cond.end1180
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_185
.LBB268_184:                            # %cond.false1188
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_185:                            # %cond.end1190
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_188
.LBB268_187:                            # %cond.false1208
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_188:                            # %cond.end1210
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_191
.LBB268_190:                            # %cond.false1218
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_191:                            # %cond.end1220
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_194
.LBB268_193:                            # %cond.false1238
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_194:                            # %cond.end1240
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_197
.LBB268_196:                            # %cond.false1248
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_197:                            # %cond.end1250
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_200
.LBB268_199:                            # %cond.false1268
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_200:                            # %cond.end1270
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_203
.LBB268_202:                            # %cond.false1278
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_203:                            # %cond.end1280
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_206
.LBB268_205:                            # %cond.false1295
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_206:                            # %cond.end1297
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_209
.LBB268_208:                            # %cond.false1305
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_209:                            # %cond.end1307
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_212
.LBB268_211:                            # %cond.false1323
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_212:                            # %cond.end1325
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_215
.LBB268_214:                            # %cond.false1333
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_215:                            # %cond.end1335
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_218
.LBB268_217:                            # %cond.false1350
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_218:                            # %cond.end1352
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_221
.LBB268_220:                            # %cond.false1360
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_221:                            # %cond.end1362
                                        #   in Loop: Header=BB268_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB268_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_231
.LBB268_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB268_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_230:                            # %land.end1460
                                        #   in Loop: Header=BB268_34 Depth=2
.LBB268_231:                            # %lor.end1461
                                        #   in Loop: Header=BB268_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_232:                            # %if.end1469
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB268_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB268_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB268_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB268_235:                            # %if.end1522
                                        #   in Loop: Header=BB268_34 Depth=2
	jmp	.LBB268_236
.LBB268_236:                            # %if.end1523
                                        #   in Loop: Header=BB268_34 Depth=2
	jmp	.LBB268_237
.LBB268_237:                            # %for.inc1524
                                        #   in Loop: Header=BB268_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_34
.LBB268_238:                            # %for.end1526
                                        #   in Loop: Header=BB268_32 Depth=1
	jmp	.LBB268_239
.LBB268_239:                            # %for.inc1527
                                        #   in Loop: Header=BB268_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_32
.LBB268_240:                            # %for.end1529
	jmp	.LBB268_241
.LBB268_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB268_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB268_259
.LBB268_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB268_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB268_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB268_245 Depth=1
	movl	$0, -16(%rbp)
.LBB268_247:                            # %for.cond1546
                                        #   Parent Loop BB268_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB268_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB268_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB268_252
.LBB268_251:                            # %if.else1699
                                        #   in Loop: Header=BB268_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB268_252:                            # %if.end1829
                                        #   in Loop: Header=BB268_247 Depth=2
	jmp	.LBB268_253
.LBB268_253:                            # %if.end1830
                                        #   in Loop: Header=BB268_247 Depth=2
	jmp	.LBB268_254
.LBB268_254:                            # %for.inc1831
                                        #   in Loop: Header=BB268_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_247
.LBB268_255:                            # %for.end1833
                                        #   in Loop: Header=BB268_245 Depth=1
	jmp	.LBB268_256
.LBB268_256:                            # %for.inc1834
                                        #   in Loop: Header=BB268_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_245
.LBB268_257:                            # %for.end1836
	jmp	.LBB268_258
.LBB268_258:                            # %if.end1837
	jmp	.LBB268_259
.LBB268_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB268_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB268_260 Depth=1
	movl	$0, -16(%rbp)
.LBB268_262:                            # %for.cond1845
                                        #   Parent Loop BB268_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB268_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB268_314
.LBB268_265:                            # %if.then1856
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_268
.LBB268_267:                            # %cond.false1863
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_268:                            # %cond.end1865
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_271
.LBB268_270:                            # %cond.false1873
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_271:                            # %cond.end1875
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_274
.LBB268_273:                            # %cond.false1893
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_274:                            # %cond.end1895
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_277
.LBB268_276:                            # %cond.false1903
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_277:                            # %cond.end1905
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_280
.LBB268_279:                            # %cond.false1923
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_280:                            # %cond.end1925
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_283
.LBB268_282:                            # %cond.false1933
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_283:                            # %cond.end1935
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_286
.LBB268_285:                            # %cond.false1953
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_286:                            # %cond.end1955
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_289
.LBB268_288:                            # %cond.false1963
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_289:                            # %cond.end1965
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_292
.LBB268_291:                            # %cond.false1983
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_292:                            # %cond.end1985
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_295
.LBB268_294:                            # %cond.false1993
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_295:                            # %cond.end1995
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_298
.LBB268_297:                            # %cond.false2011
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_298:                            # %cond.end2013
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_301
.LBB268_300:                            # %cond.false2021
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_301:                            # %cond.end2023
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_304
.LBB268_303:                            # %cond.false2039
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_304:                            # %cond.end2041
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_307
.LBB268_306:                            # %cond.false2049
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_307:                            # %cond.end2051
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_310
.LBB268_309:                            # %cond.false2067
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_310:                            # %cond.end2069
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB268_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB268_313
.LBB268_312:                            # %cond.false2077
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB268_313:                            # %cond.end2079
                                        #   in Loop: Header=BB268_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB268_315
.LBB268_314:                            # %if.else2089
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB268_315:                            # %if.end2194
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB268_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB268_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB268_325
.LBB268_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB268_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB268_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB268_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB268_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB268_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB268_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB268_324:                            # %land.end2285
                                        #   in Loop: Header=BB268_262 Depth=2
.LBB268_325:                            # %lor.end2286
                                        #   in Loop: Header=BB268_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB268_326:                            # %if.end2295
                                        #   in Loop: Header=BB268_262 Depth=2
	jmp	.LBB268_327
.LBB268_327:                            # %for.inc2296
                                        #   in Loop: Header=BB268_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_262
.LBB268_328:                            # %for.end2298
                                        #   in Loop: Header=BB268_260 Depth=1
	jmp	.LBB268_329
.LBB268_329:                            # %for.inc2299
                                        #   in Loop: Header=BB268_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_260
.LBB268_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB268_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB268_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB268_332 Depth=1
	movl	$0, -16(%rbp)
.LBB268_334:                            # %for.cond2312
                                        #   Parent Loop BB268_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB268_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB268_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB268_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB268_340
.LBB268_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB268_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB268_341
.LBB268_340:                            # %if.then2342
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB268_345
.LBB268_341:                            # %if.else2363
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB268_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB268_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB268_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB268_344:                            # %if.end2394
                                        #   in Loop: Header=BB268_334 Depth=2
	jmp	.LBB268_345
.LBB268_345:                            # %if.end2395
                                        #   in Loop: Header=BB268_334 Depth=2
	jmp	.LBB268_346
.LBB268_346:                            # %for.inc2396
                                        #   in Loop: Header=BB268_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_334
.LBB268_347:                            # %for.end2398
                                        #   in Loop: Header=BB268_332 Depth=1
	jmp	.LBB268_348
.LBB268_348:                            # %for.inc2399
                                        #   in Loop: Header=BB268_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_332
.LBB268_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB268_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB268_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB268_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB268_350 Depth=1
	movl	$0, -16(%rbp)
.LBB268_352:                            # %for.cond2409
                                        #   Parent Loop BB268_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB268_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB268_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB268_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_360
.LBB268_356:                            # %cond.false2429
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_359
.LBB268_358:                            # %cond.false2441
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_359:                            # %cond.end2450
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_360:                            # %cond.end2452
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB268_377
.LBB268_361:                            # %if.else2454
                                        #   in Loop: Header=BB268_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB268_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_368
.LBB268_364:                            # %cond.false2468
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_367
.LBB268_366:                            # %cond.false2480
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_367:                            # %cond.end2489
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_368:                            # %cond.end2491
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB268_376
.LBB268_369:                            # %if.else2493
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_375
.LBB268_371:                            # %cond.false2504
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_374
.LBB268_373:                            # %cond.false2516
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_374:                            # %cond.end2525
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_375:                            # %cond.end2527
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB268_376:                            # %if.end2529
                                        #   in Loop: Header=BB268_352 Depth=2
	jmp	.LBB268_377
.LBB268_377:                            # %if.end2530
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB268_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB268_383
.LBB268_379:                            # %cond.false2546
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB268_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$127, %eax
	jmp	.LBB268_382
.LBB268_381:                            # %cond.false2562
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB268_382:                            # %cond.end2575
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_383:                            # %cond.end2577
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB268_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB268_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB268_390
.LBB268_386:                            # %cond.false2592
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB268_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB268_389
.LBB268_388:                            # %cond.false2599
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB268_389:                            # %cond.end2603
                                        #   in Loop: Header=BB268_352 Depth=2
.LBB268_390:                            # %cond.end2605
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB268_392
.LBB268_391:                            # %if.else2611
                                        #   in Loop: Header=BB268_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB268_392:                            # %if.end2617
                                        #   in Loop: Header=BB268_352 Depth=2
	jmp	.LBB268_393
.LBB268_393:                            # %for.inc2618
                                        #   in Loop: Header=BB268_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB268_352
.LBB268_394:                            # %for.end2620
                                        #   in Loop: Header=BB268_350 Depth=1
	jmp	.LBB268_395
.LBB268_395:                            # %for.inc2621
                                        #   in Loop: Header=BB268_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB268_350
.LBB268_396:                            # %for.end2623
	jmp	.LBB268_397
.LBB268_397:                            # %if.end2624
	cmpl	$380568013, -72(%rbp)   # imm = 0x16AF01CD
	jne	.LBB268_399
.LBB268_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_398
.Lfunc_end268:
	.size	compute_colocated.205, .Lfunc_end268-compute_colocated.205
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.206
	.type	compare_fs_by_lt_pic_idx_asc.206,@function
compare_fs_by_lt_pic_idx_asc.206:       # @compare_fs_by_lt_pic_idx_asc.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$125655585, -16(%rbp)   # imm = 0x77D5A21
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB269_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB269_5
.LBB269_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB269_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB269_5
.LBB269_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB269_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$125655585, -16(%rbp)   # imm = 0x77D5A21
	jne	.LBB269_7
.LBB269_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_6
.Lfunc_end269:
	.size	compare_fs_by_lt_pic_idx_asc.206, .Lfunc_end269-compare_fs_by_lt_pic_idx_asc.206
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.207 # -- Begin function reorder_ref_pic_list.207
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.207,@function
reorder_ref_pic_list.207:               # @reorder_ref_pic_list.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$578977946, -60(%rbp)   # imm = 0x2282809A
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB270_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB270_3
.LBB270_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB270_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB270_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB270_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB270_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB270_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB270_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB270_7:                              # %if.end9
                                        #   in Loop: Header=BB270_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB270_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB270_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB270_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB270_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB270_12
.LBB270_11:                             # %if.else28
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB270_12:                             # %if.end33
                                        #   in Loop: Header=BB270_4 Depth=1
	jmp	.LBB270_17
.LBB270_13:                             # %if.else34
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB270_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB270_16
.LBB270_15:                             # %if.else46
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB270_16:                             # %if.end51
                                        #   in Loop: Header=BB270_4 Depth=1
	jmp	.LBB270_17
.LBB270_17:                             # %if.end52
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB270_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB270_20
.LBB270_19:                             # %if.else56
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB270_20:                             # %if.end57
                                        #   in Loop: Header=BB270_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB270_22
.LBB270_21:                             # %if.else58
                                        #   in Loop: Header=BB270_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB270_22:                             # %if.end61
                                        #   in Loop: Header=BB270_4 Depth=1
	jmp	.LBB270_23
.LBB270_23:                             # %for.inc
                                        #   in Loop: Header=BB270_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB270_4
.LBB270_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$578977946, -60(%rbp)   # imm = 0x2282809A
	jne	.LBB270_26
.LBB270_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_25
.Lfunc_end270:
	.size	reorder_ref_pic_list.207, .Lfunc_end270-reorder_ref_pic_list.207
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.208
	.type	remove_frame_from_dpb.208,@function
remove_frame_from_dpb.208:              # @remove_frame_from_dpb.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1206409150, -20(%rbp)  # imm = 0x47E857BE
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB271_6
# %bb.1:                                # %entry
	movq	.LJTI271_0(,%rax,8), %rax
	jmpq	*%rax
.LBB271_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB271_7
.LBB271_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB271_7
.LBB271_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB271_7
.LBB271_5:                              # %sw.bb10
	jmp	.LBB271_7
.LBB271_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB271_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB271_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB271_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB271_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB271_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB271_8
.LBB271_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1206409150, -20(%rbp)  # imm = 0x47E857BE
	jne	.LBB271_13
.LBB271_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_12
.Lfunc_end271:
	.size	remove_frame_from_dpb.208, .Lfunc_end271-remove_frame_from_dpb.208
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI271_0:
	.quad	.LBB271_5
	.quad	.LBB271_4
	.quad	.LBB271_3
	.quad	.LBB271_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.209
	.type	compare_fs_by_frame_num_desc.209,@function
compare_fs_by_frame_num_desc.209:       # @compare_fs_by_frame_num_desc.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$279628197, -16(%rbp)   # imm = 0x10AAC9A5
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB272_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB272_5
.LBB272_2:                              # %if.end
	movq	-24(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-32(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB272_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB272_5
.LBB272_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB272_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$279628197, -16(%rbp)   # imm = 0x10AAC9A5
	jne	.LBB272_7
.LBB272_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_6
.Lfunc_end272:
	.size	compare_fs_by_frame_num_desc.209, .Lfunc_end272-compare_fs_by_frame_num_desc.209
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.210
	.type	remove_frame_from_dpb.210,@function
remove_frame_from_dpb.210:              # @remove_frame_from_dpb.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$151781193, -20(%rbp)   # imm = 0x90BFF49
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB273_6
# %bb.1:                                # %entry
	movq	.LJTI273_0(,%rax,8), %rax
	jmpq	*%rax
.LBB273_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB273_7
.LBB273_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB273_7
.LBB273_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB273_7
.LBB273_5:                              # %sw.bb10
	jmp	.LBB273_7
.LBB273_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB273_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB273_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB273_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB273_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB273_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB273_8
.LBB273_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$151781193, -20(%rbp)   # imm = 0x90BFF49
	jne	.LBB273_13
.LBB273_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_12
.Lfunc_end273:
	.size	remove_frame_from_dpb.210, .Lfunc_end273-remove_frame_from_dpb.210
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI273_0:
	.quad	.LBB273_5
	.quad	.LBB273_4
	.quad	.LBB273_3
	.quad	.LBB273_2
                                        # -- End function
	.text
	.globl	store_picture_in_dpb.211 # -- Begin function store_picture_in_dpb.211
	.p2align	4, 0x90
	.type	store_picture_in_dpb.211,@function
store_picture_in_dpb.211:               # @store_picture_in_dpb.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$208194468, -20(%rbp)   # imm = 0xC68CBA4
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB274_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB274_6
.LBB274_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB274_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB274_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB274_5:                              # %if.end
	jmp	.LBB274_6
.LBB274_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB274_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB274_23
.LBB274_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB274_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB274_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB274_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB274_14
.LBB274_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB274_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB274_20
.LBB274_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB274_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB274_18
.LBB274_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB274_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB274_19
.LBB274_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB274_50
.LBB274_19:                             # %if.end48
	jmp	.LBB274_20
.LBB274_20:                             # %if.end49
	jmp	.LBB274_21
.LBB274_21:                             # %if.end50
	jmp	.LBB274_22
.LBB274_22:                             # %if.end51
	jmp	.LBB274_23
.LBB274_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB274_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB274_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB274_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB274_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB274_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB274_29:                             # %if.end67
	jmp	.LBB274_30
.LBB274_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB274_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB274_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB274_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB274_30 Depth=1
	leaq	-24(%rbp), %rdi
	leaq	-16(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-16(%rbp), %eax
	je	.LBB274_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB274_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB274_35
.LBB274_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB274_50
.LBB274_35:                             # %if.end80
                                        #   in Loop: Header=BB274_30 Depth=1
	jmp	.LBB274_36
.LBB274_36:                             # %if.end81
                                        #   in Loop: Header=BB274_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB274_30
.LBB274_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB274_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB274_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB274_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB274_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB274_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB274_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB274_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB274_43:                             # %if.end94
                                        #   in Loop: Header=BB274_40 Depth=1
	jmp	.LBB274_44
.LBB274_44:                             # %for.inc
                                        #   in Loop: Header=BB274_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB274_40
.LBB274_45:                             # %for.end
	jmp	.LBB274_46
.LBB274_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB274_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB274_49
.LBB274_48:                             # %if.else104
	movq	$0, dpb+56
.LBB274_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB274_50:                             # %return
	cmpl	$208194468, -20(%rbp)   # imm = 0xC68CBA4
	jne	.LBB274_52
.LBB274_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_51
.Lfunc_end274:
	.size	store_picture_in_dpb.211, .Lfunc_end274-store_picture_in_dpb.211
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.212   # -- Begin function compute_colocated.212
	.p2align	4, 0x90
	.type	compute_colocated.212,@function
compute_colocated.212:                  # @compute_colocated.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$853697790, -72(%rbp)   # imm = 0x32E264FE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB275_11
.LBB275_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB275_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB275_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB275_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB275_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB275_8
.LBB275_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB275_8:                              # %if.end
	jmp	.LBB275_9
.LBB275_9:                              # %if.end20
	jmp	.LBB275_10
.LBB275_10:                             # %if.end21
	jmp	.LBB275_11
.LBB275_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB275_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB275_29
.LBB275_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB275_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB275_14 Depth=1
	movl	$0, -16(%rbp)
.LBB275_16:                             # %for.cond27
                                        #   Parent Loop BB275_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB275_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB275_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB275_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB275_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB275_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB275_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB275_22
.LBB275_21:                             # %if.else160
                                        #   in Loop: Header=BB275_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB275_22:                             # %if.end283
                                        #   in Loop: Header=BB275_16 Depth=2
	jmp	.LBB275_24
.LBB275_23:                             # %if.else284
                                        #   in Loop: Header=BB275_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB275_24:                             # %if.end391
                                        #   in Loop: Header=BB275_16 Depth=2
	jmp	.LBB275_25
.LBB275_25:                             # %for.inc
                                        #   in Loop: Header=BB275_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_16
.LBB275_26:                             # %for.end
                                        #   in Loop: Header=BB275_14 Depth=1
	jmp	.LBB275_27
.LBB275_27:                             # %for.inc392
                                        #   in Loop: Header=BB275_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_14
.LBB275_28:                             # %for.end394
	jmp	.LBB275_29
.LBB275_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB275_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_241
.LBB275_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB275_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB275_32 Depth=1
	movl	$0, -12(%rbp)
.LBB275_34:                             # %for.cond408
                                        #   Parent Loop BB275_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB275_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_39
.LBB275_38:                             # %cond.false
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_39:                             # %cond.end
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_42
.LBB275_41:                             # %cond.false427
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_42:                             # %cond.end429
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_45
.LBB275_44:                             # %cond.false447
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_45:                             # %cond.end449
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_48
.LBB275_47:                             # %cond.false457
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_48:                             # %cond.end459
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_51
.LBB275_50:                             # %cond.false477
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_51:                             # %cond.end479
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_54
.LBB275_53:                             # %cond.false487
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_54:                             # %cond.end489
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_57
.LBB275_56:                             # %cond.false507
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_57:                             # %cond.end509
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_60
.LBB275_59:                             # %cond.false517
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_60:                             # %cond.end519
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_63
.LBB275_62:                             # %cond.false537
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_63:                             # %cond.end539
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_66
.LBB275_65:                             # %cond.false547
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_66:                             # %cond.end549
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB275_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB275_81
.LBB275_68:                             # %if.else569
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_71
.LBB275_70:                             # %cond.false576
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_71:                             # %cond.end578
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_74
.LBB275_73:                             # %cond.false586
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_74:                             # %cond.end588
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_77
.LBB275_76:                             # %cond.false604
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_77:                             # %cond.end606
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_80
.LBB275_79:                             # %cond.false614
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_80:                             # %cond.end616
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_81:                             # %if.end626
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_84
.LBB275_83:                             # %cond.false633
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_84:                             # %cond.end635
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_87
.LBB275_86:                             # %cond.false643
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_87:                             # %cond.end645
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB275_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB275_102
.LBB275_89:                             # %if.else665
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_92
.LBB275_91:                             # %cond.false672
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_92:                             # %cond.end674
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_95
.LBB275_94:                             # %cond.false682
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_95:                             # %cond.end684
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_98
.LBB275_97:                             # %cond.false700
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_98:                             # %cond.end702
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_101
.LBB275_100:                            # %cond.false710
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_101:                            # %cond.end712
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_102:                            # %if.end722
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB275_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB275_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB275_112
.LBB275_107:                            # %lor.rhs
                                        #   in Loop: Header=BB275_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB275_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB275_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB275_111:                            # %land.end
                                        #   in Loop: Header=BB275_34 Depth=2
.LBB275_112:                            # %lor.end
                                        #   in Loop: Header=BB275_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB275_113:                            # %if.end814
                                        #   in Loop: Header=BB275_34 Depth=2
	jmp	.LBB275_236
.LBB275_114:                            # %if.else815
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_117
.LBB275_116:                            # %cond.false822
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_117:                            # %cond.end824
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_120
.LBB275_119:                            # %cond.false832
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_120:                            # %cond.end834
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_123
.LBB275_122:                            # %cond.false851
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_123:                            # %cond.end853
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_126
.LBB275_125:                            # %cond.false861
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_126:                            # %cond.end863
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_129
.LBB275_128:                            # %cond.false881
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_129:                            # %cond.end883
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_132
.LBB275_131:                            # %cond.false891
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_132:                            # %cond.end893
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_135
.LBB275_134:                            # %cond.false911
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_135:                            # %cond.end913
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_138
.LBB275_137:                            # %cond.false921
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_138:                            # %cond.end923
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_141
.LBB275_140:                            # %cond.false941
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_141:                            # %cond.end943
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_144
.LBB275_143:                            # %cond.false951
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_144:                            # %cond.end953
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_147
.LBB275_146:                            # %cond.false968
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_147:                            # %cond.end970
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_150
.LBB275_149:                            # %cond.false978
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_150:                            # %cond.end980
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_153
.LBB275_152:                            # %cond.false996
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_153:                            # %cond.end998
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_156
.LBB275_155:                            # %cond.false1006
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_156:                            # %cond.end1008
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_159
.LBB275_158:                            # %cond.false1023
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_159:                            # %cond.end1025
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_162
.LBB275_161:                            # %cond.false1033
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_162:                            # %cond.end1035
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB275_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB275_172
.LBB275_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB275_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB275_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB275_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB275_171:                            # %land.end1133
                                        #   in Loop: Header=BB275_34 Depth=2
.LBB275_172:                            # %lor.end1134
                                        #   in Loop: Header=BB275_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB275_173:                            # %if.end1142
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_176
.LBB275_175:                            # %cond.false1149
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_176:                            # %cond.end1151
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_179
.LBB275_178:                            # %cond.false1159
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_179:                            # %cond.end1161
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_182
.LBB275_181:                            # %cond.false1178
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_182:                            # %cond.end1180
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_185
.LBB275_184:                            # %cond.false1188
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_185:                            # %cond.end1190
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_188
.LBB275_187:                            # %cond.false1208
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_188:                            # %cond.end1210
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_191
.LBB275_190:                            # %cond.false1218
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_191:                            # %cond.end1220
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_194
.LBB275_193:                            # %cond.false1238
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_194:                            # %cond.end1240
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_197
.LBB275_196:                            # %cond.false1248
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_197:                            # %cond.end1250
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_200
.LBB275_199:                            # %cond.false1268
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_200:                            # %cond.end1270
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_203
.LBB275_202:                            # %cond.false1278
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_203:                            # %cond.end1280
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_206
.LBB275_205:                            # %cond.false1295
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_206:                            # %cond.end1297
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_209
.LBB275_208:                            # %cond.false1305
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_209:                            # %cond.end1307
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_212
.LBB275_211:                            # %cond.false1323
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_212:                            # %cond.end1325
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_215
.LBB275_214:                            # %cond.false1333
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_215:                            # %cond.end1335
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_218
.LBB275_217:                            # %cond.false1350
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_218:                            # %cond.end1352
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_221
.LBB275_220:                            # %cond.false1360
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_221:                            # %cond.end1362
                                        #   in Loop: Header=BB275_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB275_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB275_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB275_231
.LBB275_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB275_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB275_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB275_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB275_230:                            # %land.end1460
                                        #   in Loop: Header=BB275_34 Depth=2
.LBB275_231:                            # %lor.end1461
                                        #   in Loop: Header=BB275_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB275_232:                            # %if.end1469
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB275_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB275_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB275_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB275_235:                            # %if.end1522
                                        #   in Loop: Header=BB275_34 Depth=2
	jmp	.LBB275_236
.LBB275_236:                            # %if.end1523
                                        #   in Loop: Header=BB275_34 Depth=2
	jmp	.LBB275_237
.LBB275_237:                            # %for.inc1524
                                        #   in Loop: Header=BB275_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_34
.LBB275_238:                            # %for.end1526
                                        #   in Loop: Header=BB275_32 Depth=1
	jmp	.LBB275_239
.LBB275_239:                            # %for.inc1527
                                        #   in Loop: Header=BB275_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_32
.LBB275_240:                            # %for.end1529
	jmp	.LBB275_241
.LBB275_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB275_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB275_259
.LBB275_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB275_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB275_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB275_245 Depth=1
	movl	$0, -16(%rbp)
.LBB275_247:                            # %for.cond1546
                                        #   Parent Loop BB275_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB275_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB275_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB275_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB275_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB275_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB275_252
.LBB275_251:                            # %if.else1699
                                        #   in Loop: Header=BB275_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB275_252:                            # %if.end1829
                                        #   in Loop: Header=BB275_247 Depth=2
	jmp	.LBB275_253
.LBB275_253:                            # %if.end1830
                                        #   in Loop: Header=BB275_247 Depth=2
	jmp	.LBB275_254
.LBB275_254:                            # %for.inc1831
                                        #   in Loop: Header=BB275_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_247
.LBB275_255:                            # %for.end1833
                                        #   in Loop: Header=BB275_245 Depth=1
	jmp	.LBB275_256
.LBB275_256:                            # %for.inc1834
                                        #   in Loop: Header=BB275_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_245
.LBB275_257:                            # %for.end1836
	jmp	.LBB275_258
.LBB275_258:                            # %if.end1837
	jmp	.LBB275_259
.LBB275_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB275_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB275_260 Depth=1
	movl	$0, -16(%rbp)
.LBB275_262:                            # %for.cond1845
                                        #   Parent Loop BB275_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB275_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB275_314
.LBB275_265:                            # %if.then1856
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_268
.LBB275_267:                            # %cond.false1863
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_268:                            # %cond.end1865
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_271
.LBB275_270:                            # %cond.false1873
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_271:                            # %cond.end1875
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_274
.LBB275_273:                            # %cond.false1893
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_274:                            # %cond.end1895
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_277
.LBB275_276:                            # %cond.false1903
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_277:                            # %cond.end1905
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_280
.LBB275_279:                            # %cond.false1923
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_280:                            # %cond.end1925
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_283
.LBB275_282:                            # %cond.false1933
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_283:                            # %cond.end1935
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_286
.LBB275_285:                            # %cond.false1953
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_286:                            # %cond.end1955
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_289
.LBB275_288:                            # %cond.false1963
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_289:                            # %cond.end1965
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_292
.LBB275_291:                            # %cond.false1983
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_292:                            # %cond.end1985
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_295
.LBB275_294:                            # %cond.false1993
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_295:                            # %cond.end1995
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_298
.LBB275_297:                            # %cond.false2011
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_298:                            # %cond.end2013
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_301
.LBB275_300:                            # %cond.false2021
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_301:                            # %cond.end2023
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_304
.LBB275_303:                            # %cond.false2039
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_304:                            # %cond.end2041
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_307
.LBB275_306:                            # %cond.false2049
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_307:                            # %cond.end2051
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_310
.LBB275_309:                            # %cond.false2067
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_310:                            # %cond.end2069
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB275_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB275_313
.LBB275_312:                            # %cond.false2077
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB275_313:                            # %cond.end2079
                                        #   in Loop: Header=BB275_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB275_315
.LBB275_314:                            # %if.else2089
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB275_315:                            # %if.end2194
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB275_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB275_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB275_325
.LBB275_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB275_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB275_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB275_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB275_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB275_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB275_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB275_324:                            # %land.end2285
                                        #   in Loop: Header=BB275_262 Depth=2
.LBB275_325:                            # %lor.end2286
                                        #   in Loop: Header=BB275_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB275_326:                            # %if.end2295
                                        #   in Loop: Header=BB275_262 Depth=2
	jmp	.LBB275_327
.LBB275_327:                            # %for.inc2296
                                        #   in Loop: Header=BB275_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_262
.LBB275_328:                            # %for.end2298
                                        #   in Loop: Header=BB275_260 Depth=1
	jmp	.LBB275_329
.LBB275_329:                            # %for.inc2299
                                        #   in Loop: Header=BB275_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_260
.LBB275_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB275_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB275_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB275_332 Depth=1
	movl	$0, -16(%rbp)
.LBB275_334:                            # %for.cond2312
                                        #   Parent Loop BB275_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB275_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB275_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB275_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB275_340
.LBB275_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB275_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB275_341
.LBB275_340:                            # %if.then2342
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB275_345
.LBB275_341:                            # %if.else2363
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB275_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB275_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB275_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB275_344:                            # %if.end2394
                                        #   in Loop: Header=BB275_334 Depth=2
	jmp	.LBB275_345
.LBB275_345:                            # %if.end2395
                                        #   in Loop: Header=BB275_334 Depth=2
	jmp	.LBB275_346
.LBB275_346:                            # %for.inc2396
                                        #   in Loop: Header=BB275_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_334
.LBB275_347:                            # %for.end2398
                                        #   in Loop: Header=BB275_332 Depth=1
	jmp	.LBB275_348
.LBB275_348:                            # %for.inc2399
                                        #   in Loop: Header=BB275_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_332
.LBB275_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB275_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB275_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB275_350 Depth=1
	movl	$0, -16(%rbp)
.LBB275_352:                            # %for.cond2409
                                        #   Parent Loop BB275_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB275_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB275_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB275_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB275_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB275_360
.LBB275_356:                            # %cond.false2429
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB275_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$127, %eax
	jmp	.LBB275_359
.LBB275_358:                            # %cond.false2441
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB275_359:                            # %cond.end2450
                                        #   in Loop: Header=BB275_352 Depth=2
.LBB275_360:                            # %cond.end2452
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB275_377
.LBB275_361:                            # %if.else2454
                                        #   in Loop: Header=BB275_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB275_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB275_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB275_368
.LBB275_364:                            # %cond.false2468
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB275_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$127, %eax
	jmp	.LBB275_367
.LBB275_366:                            # %cond.false2480
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB275_367:                            # %cond.end2489
                                        #   in Loop: Header=BB275_352 Depth=2
.LBB275_368:                            # %cond.end2491
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB275_376
.LBB275_369:                            # %if.else2493
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB275_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB275_375
.LBB275_371:                            # %cond.false2504
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB275_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$127, %eax
	jmp	.LBB275_374
.LBB275_373:                            # %cond.false2516
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB275_374:                            # %cond.end2525
                                        #   in Loop: Header=BB275_352 Depth=2
.LBB275_375:                            # %cond.end2527
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB275_376:                            # %if.end2529
                                        #   in Loop: Header=BB275_352 Depth=2
	jmp	.LBB275_377
.LBB275_377:                            # %if.end2530
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB275_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB275_383
.LBB275_379:                            # %cond.false2546
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB275_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$127, %eax
	jmp	.LBB275_382
.LBB275_381:                            # %cond.false2562
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB275_382:                            # %cond.end2575
                                        #   in Loop: Header=BB275_352 Depth=2
.LBB275_383:                            # %cond.end2577
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB275_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB275_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB275_390
.LBB275_386:                            # %cond.false2592
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB275_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB275_389
.LBB275_388:                            # %cond.false2599
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB275_389:                            # %cond.end2603
                                        #   in Loop: Header=BB275_352 Depth=2
.LBB275_390:                            # %cond.end2605
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB275_392
.LBB275_391:                            # %if.else2611
                                        #   in Loop: Header=BB275_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB275_392:                            # %if.end2617
                                        #   in Loop: Header=BB275_352 Depth=2
	jmp	.LBB275_393
.LBB275_393:                            # %for.inc2618
                                        #   in Loop: Header=BB275_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_352
.LBB275_394:                            # %for.end2620
                                        #   in Loop: Header=BB275_350 Depth=1
	jmp	.LBB275_395
.LBB275_395:                            # %for.inc2621
                                        #   in Loop: Header=BB275_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_350
.LBB275_396:                            # %for.end2623
	jmp	.LBB275_397
.LBB275_397:                            # %if.end2624
	cmpl	$853697790, -72(%rbp)   # imm = 0x32E264FE
	jne	.LBB275_399
.LBB275_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_398
.Lfunc_end275:
	.size	compute_colocated.212, .Lfunc_end275-compute_colocated.212
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_lt_pic_idx_asc.213
	.type	compare_fs_by_lt_pic_idx_asc.213,@function
compare_fs_by_lt_pic_idx_asc.213:       # @compare_fs_by_lt_pic_idx_asc.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$429854180, -16(%rbp)   # imm = 0x199F0DE4
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jge	.LBB276_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB276_5
.LBB276_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	28(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	28(%rcx), %eax
	jle	.LBB276_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB276_5
.LBB276_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB276_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$429854180, -16(%rbp)   # imm = 0x199F0DE4
	jne	.LBB276_7
.LBB276_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_6
.Lfunc_end276:
	.size	compare_fs_by_lt_pic_idx_asc.213, .Lfunc_end276-compare_fs_by_lt_pic_idx_asc.213
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_fs_by_frame_num_desc.214
	.type	compare_fs_by_frame_num_desc.214,@function
compare_fs_by_frame_num_desc.214:       # @compare_fs_by_frame_num_desc.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1368839001, -16(%rbp)  # imm = 0x5196D359
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jge	.LBB277_2
# %bb.1:                                # %if.then
	movl	$1, -12(%rbp)
	jmp	.LBB277_5
.LBB277_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	24(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	24(%rcx), %eax
	jle	.LBB277_4
# %bb.3:                                # %if.then5
	movl	$-1, -12(%rbp)
	jmp	.LBB277_5
.LBB277_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB277_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1368839001, -16(%rbp)  # imm = 0x5196D359
	jne	.LBB277_7
.LBB277_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_6
.Lfunc_end277:
	.size	compare_fs_by_frame_num_desc.214, .Lfunc_end277-compare_fs_by_frame_num_desc.214
	.cfi_endproc
                                        # -- End function
	.globl	store_picture_in_dpb.215 # -- Begin function store_picture_in_dpb.215
	.p2align	4, 0x90
	.type	store_picture_in_dpb.215,@function
store_picture_in_dpb.215:               # @store_picture_in_dpb.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$614173024, -24(%rbp)   # imm = 0x249B8960
	movq	%rdi, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	img, %rax
	movl	$0, 72644(%rax)
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72640(%rcx)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB278_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rdi
	callq	idr_memory_management
	jmp	.LBB278_6
.LBB278_2:                              # %if.else
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB278_5
# %bb.3:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	je	.LBB278_5
# %bb.4:                                # %if.then6
	movq	-8(%rbp), %rdi
	callq	adaptive_memory_management
.LBB278_5:                              # %if.end
	jmp	.LBB278_6
.LBB278_6:                              # %if.end7
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	je	.LBB278_8
# %bb.7:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB278_23
.LBB278_8:                              # %if.then14
	cmpq	$0, dpb+56
	je	.LBB278_22
# %bb.9:                                # %if.then16
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6364(%rcx), %eax
	jne	.LBB278_21
# %bb.10:                               # %if.then19
	movq	-8(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB278_12
# %bb.11:                               # %land.lhs.true23
	movq	dpb+56, %rax
	cmpl	$2, (%rax)
	je	.LBB278_14
.LBB278_12:                             # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$2, (%rax)
	jne	.LBB278_20
# %bb.13:                               # %land.lhs.true30
	movq	dpb+56, %rax
	cmpl	$1, (%rax)
	jne	.LBB278_20
.LBB278_14:                             # %if.then34
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB278_16
# %bb.15:                               # %land.lhs.true37
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB278_18
.LBB278_16:                             # %lor.lhs.false40
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB278_19
# %bb.17:                               # %land.lhs.true43
	movq	dpb+56, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB278_19
.LBB278_18:                             # %if.then47
	movq	dpb+56, %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
	movq	$0, dpb+56
	jmp	.LBB278_50
.LBB278_19:                             # %if.end48
	jmp	.LBB278_20
.LBB278_20:                             # %if.end49
	jmp	.LBB278_21
.LBB278_21:                             # %if.end50
	jmp	.LBB278_22
.LBB278_22:                             # %if.end51
	jmp	.LBB278_23
.LBB278_23:                             # %if.end52
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	jne	.LBB278_27
# %bb.24:                               # %land.lhs.true56
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB278_27
# %bb.25:                               # %land.lhs.true59
	movq	img, %rax
	cmpl	$0, 72500(%rax)
	jne	.LBB278_27
# %bb.26:                               # %if.then62
	movq	-8(%rbp), %rdi
	callq	sliding_window_memory_management
.LBB278_27:                             # %if.end63
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB278_29
# %bb.28:                               # %if.then66
	callq	remove_unused_frame_from_dpb
.LBB278_29:                             # %if.end67
	jmp	.LBB278_30
.LBB278_30:                             # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	dpb+28, %eax
	cmpl	dpb+24, %eax
	jne	.LBB278_37
# %bb.31:                               # %while.body
                                        #   in Loop: Header=BB278_30 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	jne	.LBB278_36
# %bb.32:                               # %if.then72
                                        #   in Loop: Header=BB278_30 Depth=1
	leaq	-16(%rbp), %rdi
	leaq	-20(%rbp), %rsi
	callq	get_smallest_poc
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	cmpl	-20(%rbp), %eax
	je	.LBB278_34
# %bb.33:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB278_30 Depth=1
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB278_35
.LBB278_34:                             # %if.then79
	movq	-8(%rbp), %rdi
	movl	p_dec, %esi
	callq	direct_output
	jmp	.LBB278_50
.LBB278_35:                             # %if.end80
                                        #   in Loop: Header=BB278_30 Depth=1
	jmp	.LBB278_36
.LBB278_36:                             # %if.end81
                                        #   in Loop: Header=BB278_30 Depth=1
	callq	output_one_frame_from_dpb
	jmp	.LBB278_30
.LBB278_37:                             # %while.end
	movq	-8(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB278_46
# %bb.38:                               # %land.lhs.true84
	movq	-8(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB278_46
# %bb.39:                               # %if.then86
	movl	$0, -12(%rbp)
.LBB278_40:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB278_45
# %bb.41:                               # %for.body
                                        #   in Loop: Header=BB278_40 Depth=1
	movq	dpb+8, %rax
	movl	-12(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	cmpl	6360(%rcx), %eax
	jne	.LBB278_43
# %bb.42:                               # %if.then93
                                        #   in Loop: Header=BB278_40 Depth=1
	movabsq	$.L.str.13, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB278_43:                             # %if.end94
                                        #   in Loop: Header=BB278_40 Depth=1
	jmp	.LBB278_44
.LBB278_44:                             # %for.inc
                                        #   in Loop: Header=BB278_40 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB278_40
.LBB278_45:                             # %for.end
	jmp	.LBB278_46
.LBB278_46:                             # %if.end95
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rdi
	movq	-8(%rbp), %rsi
	callq	insert_picture_in_dpb
	movq	-8(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB278_48
# %bb.47:                               # %if.then101
	movq	dpb, %rax
	movl	dpb+28, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, dpb+56
	jmp	.LBB278_49
.LBB278_48:                             # %if.else104
	movq	$0, dpb+56
.LBB278_49:                             # %if.end105
	movl	dpb+28, %eax
	addl	$1, %eax
	movl	%eax, dpb+28
	callq	update_ref_list
	callq	update_ltref_list
	callq	dump_dpb
.LBB278_50:                             # %return
	cmpl	$614173024, -24(%rbp)   # imm = 0x249B8960
	jne	.LBB278_52
.LBB278_51:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_52:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_51
.Lfunc_end278:
	.size	store_picture_in_dpb.215, .Lfunc_end278-store_picture_in_dpb.215
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.216
	.type	get_pic_num_x.216,@function
get_pic_num_x.216:                      # @get_pic_num_x.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1439259195, -28(%rbp)  # imm = 0x55C95A3B
	movq	%rdi, -24(%rbp)
	movl	%esi, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB279_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB279_3
.LBB279_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB279_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-32(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$1439259195, -28(%rbp)  # imm = 0x55C95A3B
	jne	.LBB279_5
.LBB279_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_4
.Lfunc_end279:
	.size	get_pic_num_x.216, .Lfunc_end279-get_pic_num_x.216
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.217  # -- Begin function fill_frame_num_gap.217
	.p2align	4, 0x90
	.type	fill_frame_num_gap.217,@function
fill_frame_num_gap.217:                 # @fill_frame_num_gap.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$377710935, -40(%rbp)   # imm = 0x16836957
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB280_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB280_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB280_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB280_1
.LBB280_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$377710935, -40(%rbp)   # imm = 0x16836957
	jne	.LBB280_5
.LBB280_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_4
.Lfunc_end280:
	.size	fill_frame_num_gap.217, .Lfunc_end280-fill_frame_num_gap.217
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function remove_frame_from_dpb.218
	.type	remove_frame_from_dpb.218,@function
remove_frame_from_dpb.218:              # @remove_frame_from_dpb.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1237110187, -20(%rbp)  # imm = 0x49BCCDAB
	movl	%edi, -16(%rbp)
	movq	dpb(%rip), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	movl	(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB281_6
# %bb.1:                                # %entry
	movq	.LJTI281_0(,%rax,8), %rax
	jmpq	*%rax
.LBB281_2:                              # %sw.bb
	movq	-8(%rbp), %rax
	movq	40(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB281_7
.LBB281_3:                              # %sw.bb4
	movq	-8(%rbp), %rax
	movq	56(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 56(%rax)
	jmp	.LBB281_7
.LBB281_4:                              # %sw.bb7
	movq	-8(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-8(%rbp), %rax
	movq	$0, 48(%rax)
	jmp	.LBB281_7
.LBB281_5:                              # %sw.bb10
	jmp	.LBB281_7
.LBB281_6:                              # %sw.default
	movabsq	$.L.str.29, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB281_7:                              # %sw.epilog
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 4(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 12(%rax)
	movq	dpb, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -32(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB281_8:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movl	dpb+28, %ecx
	subl	$1, %ecx
	cmpl	%ecx, %eax
	jae	.LBB281_11
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB281_8 Depth=1
	movq	dpb, %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movl	%ecx, %ecx
	movq	(%rax,%rcx,8), %rax
	movq	dpb, %rcx
	movl	-12(%rbp), %edx
	movq	%rax, (%rcx,%rdx,8)
# %bb.10:                               # %for.inc
                                        #   in Loop: Header=BB281_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB281_8
.LBB281_11:                             # %for.end
	movq	-32(%rbp), %rax
	movq	dpb, %rcx
	movl	dpb+28, %edx
	subl	$1, %edx
	movl	%edx, %edx
	movq	%rax, (%rcx,%rdx,8)
	movl	dpb+28, %eax
	addl	$-1, %eax
	movl	%eax, dpb+28
	cmpl	$1237110187, -20(%rbp)  # imm = 0x49BCCDAB
	jne	.LBB281_13
.LBB281_12:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_12
.Lfunc_end281:
	.size	remove_frame_from_dpb.218, .Lfunc_end281-remove_frame_from_dpb.218
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI281_0:
	.quad	.LBB281_5
	.quad	.LBB281_4
	.quad	.LBB281_3
	.quad	.LBB281_2
                                        # -- End function
	.text
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.219
	.type	compare_pic_by_poc_asc.219,@function
compare_pic_by_poc_asc.219:             # @compare_pic_by_poc_asc.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1726880900, -16(%rbp)  # imm = 0x66EE1C84
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB282_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB282_5
.LBB282_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB282_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB282_5
.LBB282_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB282_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$1726880900, -16(%rbp)  # imm = 0x66EE1C84
	jne	.LBB282_7
.LBB282_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_6
.Lfunc_end282:
	.size	compare_pic_by_poc_asc.219, .Lfunc_end282-compare_pic_by_poc_asc.219
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function unmark_long_term_field_for_reference_by_frame_idx.220
	.type	unmark_long_term_field_for_reference_by_frame_idx.220,@function
unmark_long_term_field_for_reference_by_frame_idx.220: # @unmark_long_term_field_for_reference_by_frame_idx.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1363493551, -24(%rbp)  # imm = 0x514542AF
	movl	%edi, -12(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -8(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -8(%rbp)
	jge	.LBB283_2
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	shll	$1, %eax
	addl	-8(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB283_2:                              # %if.end
	movl	$0, -4(%rbp)
.LBB283_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB283_46
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-32(%rbp), %eax
	jne	.LBB283_44
# %bb.5:                                # %if.then5
                                        #   in Loop: Header=BB283_3 Depth=1
	cmpl	$1, -12(%rbp)
	jne	.LBB283_24
# %bb.6:                                # %if.then7
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB283_8
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB283_23
.LBB283_8:                              # %if.else
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, 8(%rax)
	jne	.LBB283_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB283_22
.LBB283_10:                             # %if.else21
                                        #   in Loop: Header=BB283_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB283_18
# %bb.11:                               # %if.then22
                                        #   in Loop: Header=BB283_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB283_16
# %bb.12:                               # %if.then24
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB283_14
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB283_15
.LBB283_14:                             # %if.then29
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB283_15:                             # %if.end32
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_17
.LBB283_16:                             # %if.else33
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB283_17:                             # %if.end36
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_21
.LBB283_18:                             # %if.else37
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB283_20
# %bb.19:                               # %if.then42
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB283_20:                             # %if.end45
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_21
.LBB283_21:                             # %if.end46
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_22
.LBB283_22:                             # %if.end47
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_23
.LBB283_23:                             # %if.end48
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_24
.LBB283_24:                             # %if.end49
                                        #   in Loop: Header=BB283_3 Depth=1
	cmpl	$2, -12(%rbp)
	jne	.LBB283_43
# %bb.25:                               # %if.then51
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB283_27
# %bb.26:                               # %if.then56
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB283_42
.LBB283_27:                             # %if.else59
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, 8(%rax)
	jne	.LBB283_29
# %bb.28:                               # %if.then64
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
	jmp	.LBB283_41
.LBB283_29:                             # %if.else67
                                        #   in Loop: Header=BB283_3 Depth=1
	cmpl	$0, -16(%rbp)
	je	.LBB283_37
# %bb.30:                               # %if.then69
                                        #   in Loop: Header=BB283_3 Depth=1
	cmpq	$0, dpb+56
	je	.LBB283_35
# %bb.31:                               # %if.then71
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+56, %rax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	cmpq	(%rcx,%rdx,8), %rax
	jne	.LBB283_33
# %bb.32:                               # %lor.lhs.false75
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+56, %rax
	movl	20(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB283_34
.LBB283_33:                             # %if.then78
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB283_34:                             # %if.end81
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_36
.LBB283_35:                             # %if.else82
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB283_36:                             # %if.end85
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_40
.LBB283_37:                             # %if.else86
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %ecx
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	je	.LBB283_39
# %bb.38:                               # %if.then92
                                        #   in Loop: Header=BB283_3 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_long_term_reference
.LBB283_39:                             # %if.end95
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_40
.LBB283_40:                             # %if.end96
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_41
.LBB283_41:                             # %if.end97
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_42
.LBB283_42:                             # %if.end98
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_43
.LBB283_43:                             # %if.end99
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_44
.LBB283_44:                             # %if.end100
                                        #   in Loop: Header=BB283_3 Depth=1
	jmp	.LBB283_45
.LBB283_45:                             # %for.inc
                                        #   in Loop: Header=BB283_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB283_3
.LBB283_46:                             # %for.end
	cmpl	$1363493551, -24(%rbp)  # imm = 0x514542AF
	jne	.LBB283_48
.LBB283_47:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_47
.Lfunc_end283:
	.size	unmark_long_term_field_for_reference_by_frame_idx.220, .Lfunc_end283-unmark_long_term_field_for_reference_by_frame_idx.220
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.221
	.type	mark_pic_long_term.221,@function
mark_pic_long_term.221:                 # @mark_pic_long_term.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$897959353, -24(%rbp)   # imm = 0x3585C5B9
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB284_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB284_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB284_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB284_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB284_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB284_39
.LBB284_7:                              # %if.end
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_8
.LBB284_8:                              # %if.end50
                                        #   in Loop: Header=BB284_2 Depth=1
	jmp	.LBB284_9
.LBB284_9:                              # %for.inc
                                        #   in Loop: Header=BB284_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_2
.LBB284_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB284_39
.LBB284_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB284_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB284_14
.LBB284_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -20(%rbp)
.LBB284_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB284_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB284_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB284_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB284_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB284_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB284_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB284_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB284_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB284_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB284_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB284_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB284_24:                             # %if.end123
	jmp	.LBB284_39
.LBB284_25:                             # %if.end124
                                        #   in Loop: Header=BB284_15 Depth=1
	jmp	.LBB284_26
.LBB284_26:                             # %if.end125
                                        #   in Loop: Header=BB284_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB284_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB284_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB284_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB284_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB284_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB284_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB284_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB284_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB284_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB284_34:                             # %if.end194
	jmp	.LBB284_39
.LBB284_35:                             # %if.end195
                                        #   in Loop: Header=BB284_15 Depth=1
	jmp	.LBB284_36
.LBB284_36:                             # %if.end196
                                        #   in Loop: Header=BB284_15 Depth=1
	jmp	.LBB284_37
.LBB284_37:                             # %for.inc197
                                        #   in Loop: Header=BB284_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB284_15
.LBB284_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB284_39:                             # %if.end201
	cmpl	$897959353, -24(%rbp)   # imm = 0x3585C5B9
	jne	.LBB284_41
.LBB284_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_40
.Lfunc_end284:
	.size	mark_pic_long_term.221, .Lfunc_end284-mark_pic_long_term.221
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.222  # -- Begin function fill_frame_num_gap.222
	.p2align	4, 0x90
	.type	fill_frame_num_gap.222,@function
fill_frame_num_gap.222:                 # @fill_frame_num_gap.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$510703557, -32(%rbp)   # imm = 0x1E70B7C5
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB285_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB285_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB285_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB285_1
.LBB285_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$510703557, -32(%rbp)   # imm = 0x1E70B7C5
	jne	.LBB285_5
.LBB285_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_4
.Lfunc_end285:
	.size	fill_frame_num_gap.222, .Lfunc_end285-fill_frame_num_gap.222
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.223   # -- Begin function compute_colocated.223
	.p2align	4, 0x90
	.type	compute_colocated.223,@function
compute_colocated.223:                  # @compute_colocated.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1411498180, -72(%rbp)  # imm = 0x5421C0C4
	movq	%rdi, -24(%rbp)
	movq	%rsi, -56(%rbp)
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_2
# %bb.1:                                # %if.then
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-56(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB286_11
.LBB286_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB286_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB286_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB286_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB286_7
# %bb.6:                                # %if.then14
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
	jmp	.LBB286_8
.LBB286_7:                              # %if.else17
	movq	-56(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -40(%rbp)
	movq	%rax, -48(%rbp)
.LBB286_8:                              # %if.end
	jmp	.LBB286_9
.LBB286_9:                              # %if.end20
	jmp	.LBB286_10
.LBB286_10:                             # %if.end21
	jmp	.LBB286_11
.LBB286_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB286_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB286_29
.LBB286_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB286_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB286_14 Depth=1
	movl	$0, -16(%rbp)
.LBB286_16:                             # %for.cond27
                                        #   Parent Loop BB286_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB286_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB286_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB286_22
.LBB286_21:                             # %if.else160
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB286_22:                             # %if.end283
                                        #   in Loop: Header=BB286_16 Depth=2
	jmp	.LBB286_24
.LBB286_23:                             # %if.else284
                                        #   in Loop: Header=BB286_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB286_24:                             # %if.end391
                                        #   in Loop: Header=BB286_16 Depth=2
	jmp	.LBB286_25
.LBB286_25:                             # %for.inc
                                        #   in Loop: Header=BB286_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_16
.LBB286_26:                             # %for.end
                                        #   in Loop: Header=BB286_14 Depth=1
	jmp	.LBB286_27
.LBB286_27:                             # %for.inc392
                                        #   in Loop: Header=BB286_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB286_14
.LBB286_28:                             # %for.end394
	jmp	.LBB286_29
.LBB286_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB286_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_241
.LBB286_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB286_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB286_32 Depth=1
	movl	$0, -12(%rbp)
.LBB286_34:                             # %for.cond408
                                        #   Parent Loop BB286_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB286_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_39
.LBB286_38:                             # %cond.false
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_39:                             # %cond.end
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_42
.LBB286_41:                             # %cond.false427
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_42:                             # %cond.end429
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_45
.LBB286_44:                             # %cond.false447
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_45:                             # %cond.end449
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_48
.LBB286_47:                             # %cond.false457
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_48:                             # %cond.end459
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_51
.LBB286_50:                             # %cond.false477
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_51:                             # %cond.end479
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_54
.LBB286_53:                             # %cond.false487
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_54:                             # %cond.end489
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_57
.LBB286_56:                             # %cond.false507
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_57:                             # %cond.end509
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_60
.LBB286_59:                             # %cond.false517
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_60:                             # %cond.end519
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_63
.LBB286_62:                             # %cond.false537
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_63:                             # %cond.end539
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_66
.LBB286_65:                             # %cond.false547
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_66:                             # %cond.end549
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB286_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB286_81
.LBB286_68:                             # %if.else569
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_71
.LBB286_70:                             # %cond.false576
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_71:                             # %cond.end578
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_74
.LBB286_73:                             # %cond.false586
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_74:                             # %cond.end588
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_77
.LBB286_76:                             # %cond.false604
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_77:                             # %cond.end606
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_80
.LBB286_79:                             # %cond.false614
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_80:                             # %cond.end616
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB286_81:                             # %if.end626
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_84
.LBB286_83:                             # %cond.false633
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_84:                             # %cond.end635
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_87
.LBB286_86:                             # %cond.false643
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_87:                             # %cond.end645
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB286_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB286_102
.LBB286_89:                             # %if.else665
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_92
.LBB286_91:                             # %cond.false672
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_92:                             # %cond.end674
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_95
.LBB286_94:                             # %cond.false682
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_95:                             # %cond.end684
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_98
.LBB286_97:                             # %cond.false700
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_98:                             # %cond.end702
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_101
.LBB286_100:                            # %cond.false710
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_101:                            # %cond.end712
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB286_102:                            # %if.end722
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB286_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB286_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB286_112
.LBB286_107:                            # %lor.rhs
                                        #   in Loop: Header=BB286_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB286_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB286_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB286_111:                            # %land.end
                                        #   in Loop: Header=BB286_34 Depth=2
.LBB286_112:                            # %lor.end
                                        #   in Loop: Header=BB286_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB286_113:                            # %if.end814
                                        #   in Loop: Header=BB286_34 Depth=2
	jmp	.LBB286_236
.LBB286_114:                            # %if.else815
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_117
.LBB286_116:                            # %cond.false822
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_117:                            # %cond.end824
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_120
.LBB286_119:                            # %cond.false832
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_120:                            # %cond.end834
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_123
.LBB286_122:                            # %cond.false851
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_123:                            # %cond.end853
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_126
.LBB286_125:                            # %cond.false861
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_126:                            # %cond.end863
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_129
.LBB286_128:                            # %cond.false881
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_129:                            # %cond.end883
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_132
.LBB286_131:                            # %cond.false891
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_132:                            # %cond.end893
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_135
.LBB286_134:                            # %cond.false911
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_135:                            # %cond.end913
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_138
.LBB286_137:                            # %cond.false921
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_138:                            # %cond.end923
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_141
.LBB286_140:                            # %cond.false941
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_141:                            # %cond.end943
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_144
.LBB286_143:                            # %cond.false951
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_144:                            # %cond.end953
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_147
.LBB286_146:                            # %cond.false968
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_147:                            # %cond.end970
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_150
.LBB286_149:                            # %cond.false978
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_150:                            # %cond.end980
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_153
.LBB286_152:                            # %cond.false996
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_153:                            # %cond.end998
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_156
.LBB286_155:                            # %cond.false1006
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_156:                            # %cond.end1008
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_159
.LBB286_158:                            # %cond.false1023
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_159:                            # %cond.end1025
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_162
.LBB286_161:                            # %cond.false1033
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_162:                            # %cond.end1035
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB286_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB286_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB286_172
.LBB286_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB286_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB286_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB286_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB286_171:                            # %land.end1133
                                        #   in Loop: Header=BB286_34 Depth=2
.LBB286_172:                            # %lor.end1134
                                        #   in Loop: Header=BB286_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB286_173:                            # %if.end1142
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_176
.LBB286_175:                            # %cond.false1149
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_176:                            # %cond.end1151
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_179
.LBB286_178:                            # %cond.false1159
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_179:                            # %cond.end1161
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_182
.LBB286_181:                            # %cond.false1178
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_182:                            # %cond.end1180
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_185
.LBB286_184:                            # %cond.false1188
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_185:                            # %cond.end1190
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_188
.LBB286_187:                            # %cond.false1208
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_188:                            # %cond.end1210
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_191
.LBB286_190:                            # %cond.false1218
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_191:                            # %cond.end1220
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_194
.LBB286_193:                            # %cond.false1238
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_194:                            # %cond.end1240
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_197
.LBB286_196:                            # %cond.false1248
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_197:                            # %cond.end1250
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_200
.LBB286_199:                            # %cond.false1268
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_200:                            # %cond.end1270
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_203
.LBB286_202:                            # %cond.false1278
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_203:                            # %cond.end1280
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_206
.LBB286_205:                            # %cond.false1295
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_206:                            # %cond.end1297
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_209
.LBB286_208:                            # %cond.false1305
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_209:                            # %cond.end1307
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_212
.LBB286_211:                            # %cond.false1323
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_212:                            # %cond.end1325
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_215
.LBB286_214:                            # %cond.false1333
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_215:                            # %cond.end1335
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_218
.LBB286_217:                            # %cond.false1350
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_218:                            # %cond.end1352
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_221
.LBB286_220:                            # %cond.false1360
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_221:                            # %cond.end1362
                                        #   in Loop: Header=BB286_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB286_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB286_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB286_231
.LBB286_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB286_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB286_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB286_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB286_230:                            # %land.end1460
                                        #   in Loop: Header=BB286_34 Depth=2
.LBB286_231:                            # %lor.end1461
                                        #   in Loop: Header=BB286_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB286_232:                            # %if.end1469
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB286_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB286_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB286_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB286_235:                            # %if.end1522
                                        #   in Loop: Header=BB286_34 Depth=2
	jmp	.LBB286_236
.LBB286_236:                            # %if.end1523
                                        #   in Loop: Header=BB286_34 Depth=2
	jmp	.LBB286_237
.LBB286_237:                            # %for.inc1524
                                        #   in Loop: Header=BB286_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB286_34
.LBB286_238:                            # %for.end1526
                                        #   in Loop: Header=BB286_32 Depth=1
	jmp	.LBB286_239
.LBB286_239:                            # %for.inc1527
                                        #   in Loop: Header=BB286_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_32
.LBB286_240:                            # %for.end1529
	jmp	.LBB286_241
.LBB286_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB286_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB286_259
.LBB286_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB286_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB286_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB286_245 Depth=1
	movl	$0, -16(%rbp)
.LBB286_247:                            # %for.cond1546
                                        #   Parent Loop BB286_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB286_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB286_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB286_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB286_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB286_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB286_252
.LBB286_251:                            # %if.else1699
                                        #   in Loop: Header=BB286_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB286_252:                            # %if.end1829
                                        #   in Loop: Header=BB286_247 Depth=2
	jmp	.LBB286_253
.LBB286_253:                            # %if.end1830
                                        #   in Loop: Header=BB286_247 Depth=2
	jmp	.LBB286_254
.LBB286_254:                            # %for.inc1831
                                        #   in Loop: Header=BB286_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_247
.LBB286_255:                            # %for.end1833
                                        #   in Loop: Header=BB286_245 Depth=1
	jmp	.LBB286_256
.LBB286_256:                            # %for.inc1834
                                        #   in Loop: Header=BB286_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB286_245
.LBB286_257:                            # %for.end1836
	jmp	.LBB286_258
.LBB286_258:                            # %if.end1837
	jmp	.LBB286_259
.LBB286_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB286_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB286_260 Depth=1
	movl	$0, -16(%rbp)
.LBB286_262:                            # %for.cond1845
                                        #   Parent Loop BB286_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB286_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB286_314
.LBB286_265:                            # %if.then1856
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_268
.LBB286_267:                            # %cond.false1863
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_268:                            # %cond.end1865
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_271
.LBB286_270:                            # %cond.false1873
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_271:                            # %cond.end1875
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_274
.LBB286_273:                            # %cond.false1893
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_274:                            # %cond.end1895
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_277
.LBB286_276:                            # %cond.false1903
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_277:                            # %cond.end1905
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_280
.LBB286_279:                            # %cond.false1923
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_280:                            # %cond.end1925
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_283
.LBB286_282:                            # %cond.false1933
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_283:                            # %cond.end1935
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_286
.LBB286_285:                            # %cond.false1953
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_286:                            # %cond.end1955
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_289
.LBB286_288:                            # %cond.false1963
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_289:                            # %cond.end1965
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_292
.LBB286_291:                            # %cond.false1983
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_292:                            # %cond.end1985
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_295
.LBB286_294:                            # %cond.false1993
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_295:                            # %cond.end1995
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_298
.LBB286_297:                            # %cond.false2011
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_298:                            # %cond.end2013
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_301
.LBB286_300:                            # %cond.false2021
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_301:                            # %cond.end2023
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_304
.LBB286_303:                            # %cond.false2039
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_304:                            # %cond.end2041
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_307
.LBB286_306:                            # %cond.false2049
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_307:                            # %cond.end2051
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_310
.LBB286_309:                            # %cond.false2067
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_310:                            # %cond.end2069
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB286_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB286_313
.LBB286_312:                            # %cond.false2077
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB286_313:                            # %cond.end2079
                                        #   in Loop: Header=BB286_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB286_315
.LBB286_314:                            # %if.else2089
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB286_315:                            # %if.end2194
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB286_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB286_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB286_325
.LBB286_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB286_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB286_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB286_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB286_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB286_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB286_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB286_324:                            # %land.end2285
                                        #   in Loop: Header=BB286_262 Depth=2
.LBB286_325:                            # %lor.end2286
                                        #   in Loop: Header=BB286_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB286_326:                            # %if.end2295
                                        #   in Loop: Header=BB286_262 Depth=2
	jmp	.LBB286_327
.LBB286_327:                            # %for.inc2296
                                        #   in Loop: Header=BB286_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_262
.LBB286_328:                            # %for.end2298
                                        #   in Loop: Header=BB286_260 Depth=1
	jmp	.LBB286_329
.LBB286_329:                            # %for.inc2299
                                        #   in Loop: Header=BB286_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB286_260
.LBB286_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB286_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB286_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB286_332 Depth=1
	movl	$0, -16(%rbp)
.LBB286_334:                            # %for.cond2312
                                        #   Parent Loop BB286_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB286_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB286_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB286_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB286_340
.LBB286_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB286_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB286_341
.LBB286_340:                            # %if.then2342
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB286_345
.LBB286_341:                            # %if.else2363
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB286_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB286_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB286_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB286_344:                            # %if.end2394
                                        #   in Loop: Header=BB286_334 Depth=2
	jmp	.LBB286_345
.LBB286_345:                            # %if.end2395
                                        #   in Loop: Header=BB286_334 Depth=2
	jmp	.LBB286_346
.LBB286_346:                            # %for.inc2396
                                        #   in Loop: Header=BB286_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_334
.LBB286_347:                            # %for.end2398
                                        #   in Loop: Header=BB286_332 Depth=1
	jmp	.LBB286_348
.LBB286_348:                            # %for.inc2399
                                        #   in Loop: Header=BB286_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB286_332
.LBB286_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB286_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB286_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB286_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB286_350 Depth=1
	movl	$0, -16(%rbp)
.LBB286_352:                            # %for.cond2409
                                        #   Parent Loop BB286_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB286_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB286_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB286_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB286_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB286_360
.LBB286_356:                            # %cond.false2429
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB286_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$127, %eax
	jmp	.LBB286_359
.LBB286_358:                            # %cond.false2441
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB286_359:                            # %cond.end2450
                                        #   in Loop: Header=BB286_352 Depth=2
.LBB286_360:                            # %cond.end2452
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB286_377
.LBB286_361:                            # %if.else2454
                                        #   in Loop: Header=BB286_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB286_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB286_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB286_368
.LBB286_364:                            # %cond.false2468
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB286_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$127, %eax
	jmp	.LBB286_367
.LBB286_366:                            # %cond.false2480
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB286_367:                            # %cond.end2489
                                        #   in Loop: Header=BB286_352 Depth=2
.LBB286_368:                            # %cond.end2491
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB286_376
.LBB286_369:                            # %if.else2493
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB286_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB286_375
.LBB286_371:                            # %cond.false2504
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB286_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$127, %eax
	jmp	.LBB286_374
.LBB286_373:                            # %cond.false2516
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB286_374:                            # %cond.end2525
                                        #   in Loop: Header=BB286_352 Depth=2
.LBB286_375:                            # %cond.end2527
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB286_376:                            # %if.end2529
                                        #   in Loop: Header=BB286_352 Depth=2
	jmp	.LBB286_377
.LBB286_377:                            # %if.end2530
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB286_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB286_383
.LBB286_379:                            # %cond.false2546
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB286_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$127, %eax
	jmp	.LBB286_382
.LBB286_381:                            # %cond.false2562
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	-56(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-56(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB286_382:                            # %cond.end2575
                                        #   in Loop: Header=BB286_352 Depth=2
.LBB286_383:                            # %cond.end2577
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB286_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB286_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB286_390
.LBB286_386:                            # %cond.false2592
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB286_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB286_389
.LBB286_388:                            # %cond.false2599
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB286_389:                            # %cond.end2603
                                        #   in Loop: Header=BB286_352 Depth=2
.LBB286_390:                            # %cond.end2605
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB286_392
.LBB286_391:                            # %if.else2611
                                        #   in Loop: Header=BB286_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB286_392:                            # %if.end2617
                                        #   in Loop: Header=BB286_352 Depth=2
	jmp	.LBB286_393
.LBB286_393:                            # %for.inc2618
                                        #   in Loop: Header=BB286_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB286_352
.LBB286_394:                            # %for.end2620
                                        #   in Loop: Header=BB286_350 Depth=1
	jmp	.LBB286_395
.LBB286_395:                            # %for.inc2621
                                        #   in Loop: Header=BB286_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB286_350
.LBB286_396:                            # %for.end2623
	jmp	.LBB286_397
.LBB286_397:                            # %if.end2624
	cmpl	$1411498180, -72(%rbp)  # imm = 0x5421C0C4
	jne	.LBB286_399
.LBB286_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_398
.Lfunc_end286:
	.size	compute_colocated.223, .Lfunc_end286-compute_colocated.223
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.224
	.type	reorder_short_term.224,@function
reorder_short_term.224:                 # @reorder_short_term.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$271914088, -44(%rbp)   # imm = 0x10351468
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB287_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB287_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB287_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB287_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_1
.LBB287_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB287_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB287_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB287_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB287_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB287_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB287_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB287_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB287_10
.LBB287_9:                              # %if.then17
                                        #   in Loop: Header=BB287_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB287_10:                             # %if.end
                                        #   in Loop: Header=BB287_5 Depth=1
	jmp	.LBB287_11
.LBB287_11:                             # %if.end23
                                        #   in Loop: Header=BB287_5 Depth=1
	jmp	.LBB287_12
.LBB287_12:                             # %for.inc24
                                        #   in Loop: Header=BB287_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB287_5
.LBB287_13:                             # %for.end26
	cmpl	$271914088, -44(%rbp)   # imm = 0x10351468
	jne	.LBB287_15
.LBB287_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_14
.Lfunc_end287:
	.size	reorder_short_term.224, .Lfunc_end287-reorder_short_term.224
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_pic_num_x.225
	.type	get_pic_num_x.225,@function
get_pic_num_x.225:                      # @get_pic_num_x.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$881659844, -32(%rbp)   # imm = 0x348D0FC4
	movq	%rdi, -24(%rbp)
	movl	%esi, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB288_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB288_3
.LBB288_2:                              # %if.else
	movq	-24(%rbp), %rax
	movl	6360(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
.LBB288_3:                              # %if.end
	movl	-12(%rbp), %ebx
	movl	-28(%rbp), %eax
	addl	$1, %eax
	subl	%eax, %ebx
	cmpl	$881659844, -32(%rbp)   # imm = 0x348D0FC4
	jne	.LBB288_5
.LBB288_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_4
.Lfunc_end288:
	.size	get_pic_num_x.225, .Lfunc_end288-get_pic_num_x.225
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.226 # -- Begin function replace_top_pic_with_frame.226
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.226,@function
replace_top_pic_with_frame.226:         # @replace_top_pic_with_frame.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1527624659, -32(%rbp)  # imm = 0x5B0DB3D3
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB289_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB289_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB289_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB289_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB289_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB289_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB289_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB289_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB289_10
.LBB289_7:                              # %if.end14
                                        #   in Loop: Header=BB289_3 Depth=1
	jmp	.LBB289_8
.LBB289_8:                              # %for.inc
                                        #   in Loop: Header=BB289_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_3
.LBB289_9:                              # %for.end.loopexit
	jmp	.LBB289_10
.LBB289_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB289_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB289_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB289_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB289_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB289_15:                             # %if.end26
	jmp	.LBB289_16
.LBB289_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$1527624659, -32(%rbp)  # imm = 0x5B0DB3D3
	jne	.LBB289_18
.LBB289_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_17
.Lfunc_end289:
	.size	replace_top_pic_with_frame.226, .Lfunc_end289-replace_top_pic_with_frame.226
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function gen_pic_list_from_frame_list.227
	.type	gen_pic_list_from_frame_list.227,@function
gen_pic_list_from_frame_list.227:       # @gen_pic_list_from_frame_list.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1341769052, -64(%rbp)  # imm = 0x4FF9C55C
	movl	%edi, -44(%rbp)
	movq	%rsi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -4(%rbp)
	cmpl	$0, -60(%rbp)
	je	.LBB290_2
# %bb.1:                                # %if.then
	movabsq	$is_long_ref, %rax
	movq	%rax, -40(%rbp)
	jmp	.LBB290_3
.LBB290_2:                              # %if.else
	movabsq	$is_short_ref, %rax
	movq	%rax, -40(%rbp)
.LBB290_3:                              # %if.end
	cmpl	$1, -44(%rbp)
	jne	.LBB290_28
# %bb.4:                                # %if.then1
	jmp	.LBB290_5
.LBB290_5:                              # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_9 Depth 2
                                        #     Child Loop BB290_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB290_7
# %bb.6:                                # %lor.rhs
                                        #   in Loop: Header=BB290_5 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB290_7:                              # %lor.end
                                        #   in Loop: Header=BB290_5 Depth=1
	testb	$1, %al
	jne	.LBB290_8
	jmp	.LBB290_27
.LBB290_8:                              # %while.body
                                        #   in Loop: Header=BB290_5 Depth=1
	jmp	.LBB290_9
.LBB290_9:                              # %for.cond
                                        #   Parent Loop BB290_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB290_16
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB290_9 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB290_14
# %bb.11:                               # %if.then6
                                        #   in Loop: Header=BB290_9 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB290_13
# %bb.12:                               # %if.then10
                                        #   in Loop: Header=BB290_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_17
.LBB290_13:                             # %if.end17
                                        #   in Loop: Header=BB290_9 Depth=2
	jmp	.LBB290_14
.LBB290_14:                             # %if.end18
                                        #   in Loop: Header=BB290_9 Depth=2
	jmp	.LBB290_15
.LBB290_15:                             # %for.inc
                                        #   in Loop: Header=BB290_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_9
.LBB290_16:                             # %for.end.loopexit
                                        #   in Loop: Header=BB290_5 Depth=1
	jmp	.LBB290_17
.LBB290_17:                             # %for.end
                                        #   in Loop: Header=BB290_5 Depth=1
	jmp	.LBB290_18
.LBB290_18:                             # %for.cond20
                                        #   Parent Loop BB290_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB290_25
# %bb.19:                               # %for.body22
                                        #   in Loop: Header=BB290_18 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB290_23
# %bb.20:                               # %if.then28
                                        #   in Loop: Header=BB290_18 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB290_22
# %bb.21:                               # %if.then33
                                        #   in Loop: Header=BB290_5 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_26
.LBB290_22:                             # %if.end41
                                        #   in Loop: Header=BB290_18 Depth=2
	jmp	.LBB290_23
.LBB290_23:                             # %if.end42
                                        #   in Loop: Header=BB290_18 Depth=2
	jmp	.LBB290_24
.LBB290_24:                             # %for.inc43
                                        #   in Loop: Header=BB290_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_18
.LBB290_25:                             # %for.end45.loopexit
                                        #   in Loop: Header=BB290_5 Depth=1
	jmp	.LBB290_26
.LBB290_26:                             # %for.end45
                                        #   in Loop: Header=BB290_5 Depth=1
	jmp	.LBB290_5
.LBB290_27:                             # %while.end
	jmp	.LBB290_28
.LBB290_28:                             # %if.end46
	cmpl	$2, -44(%rbp)
	jne	.LBB290_53
# %bb.29:                               # %if.then48
	jmp	.LBB290_30
.LBB290_30:                             # %while.cond49
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_34 Depth 2
                                        #     Child Loop BB290_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	movb	$1, %al
	jl	.LBB290_32
# %bb.31:                               # %lor.rhs51
                                        #   in Loop: Header=BB290_30 Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	setl	%al
.LBB290_32:                             # %lor.end53
                                        #   in Loop: Header=BB290_30 Depth=1
	testb	$1, %al
	jne	.LBB290_33
	jmp	.LBB290_52
.LBB290_33:                             # %while.body54
                                        #   in Loop: Header=BB290_30 Depth=1
	jmp	.LBB290_34
.LBB290_34:                             # %for.cond55
                                        #   Parent Loop BB290_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB290_41
# %bb.35:                               # %for.body57
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB290_39
# %bb.36:                               # %if.then63
                                        #   in Loop: Header=BB290_34 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB290_38
# %bb.37:                               # %if.then69
                                        #   in Loop: Header=BB290_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_42
.LBB290_38:                             # %if.end77
                                        #   in Loop: Header=BB290_34 Depth=2
	jmp	.LBB290_39
.LBB290_39:                             # %if.end78
                                        #   in Loop: Header=BB290_34 Depth=2
	jmp	.LBB290_40
.LBB290_40:                             # %for.inc79
                                        #   in Loop: Header=BB290_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB290_34
.LBB290_41:                             # %for.end81.loopexit
                                        #   in Loop: Header=BB290_30 Depth=1
	jmp	.LBB290_42
.LBB290_42:                             # %for.end81
                                        #   in Loop: Header=BB290_30 Depth=1
	jmp	.LBB290_43
.LBB290_43:                             # %for.cond82
                                        #   Parent Loop BB290_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB290_50
# %bb.44:                               # %for.body84
                                        #   in Loop: Header=BB290_43 Depth=2
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB290_48
# %bb.45:                               # %if.then90
                                        #   in Loop: Header=BB290_43 Depth=2
	movq	-40(%rbp), %rax
	movq	-24(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rdi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB290_47
# %bb.46:                               # %if.then96
                                        #   in Loop: Header=BB290_30 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movq	-56(%rbp), %rcx
	movq	-32(%rbp), %rdx
	movslq	(%rdx), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_51
.LBB290_47:                             # %if.end104
                                        #   in Loop: Header=BB290_43 Depth=2
	jmp	.LBB290_48
.LBB290_48:                             # %if.end105
                                        #   in Loop: Header=BB290_43 Depth=2
	jmp	.LBB290_49
.LBB290_49:                             # %for.inc106
                                        #   in Loop: Header=BB290_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB290_43
.LBB290_50:                             # %for.end108.loopexit
                                        #   in Loop: Header=BB290_30 Depth=1
	jmp	.LBB290_51
.LBB290_51:                             # %for.end108
                                        #   in Loop: Header=BB290_30 Depth=1
	jmp	.LBB290_30
.LBB290_52:                             # %while.end109
	jmp	.LBB290_53
.LBB290_53:                             # %if.end110
	cmpl	$1341769052, -64(%rbp)  # imm = 0x4FF9C55C
	jne	.LBB290_55
.LBB290_54:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_55:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_54
.Lfunc_end290:
	.size	gen_pic_list_from_frame_list.227, .Lfunc_end290-gen_pic_list_from_frame_list.227
	.cfi_endproc
                                        # -- End function
	.globl	dpb_combine_field.228   # -- Begin function dpb_combine_field.228
	.p2align	4, 0x90
	.type	dpb_combine_field.228,@function
dpb_combine_field.228:                  # @dpb_combine_field.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1811718220, -32(%rbp)  # imm = 0x6BFCA04C
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %edx
	shll	$1, %edx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6404(%rax), %r8d
	shll	$1, %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movl	$0, -4(%rbp)
.LBB291_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6396(%rcx), %eax
	jge	.LBB291_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB291_1 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB291_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_1
.LBB291_4:                              # %for.end
	movl	$0, -4(%rbp)
.LBB291_5:                              # %for.cond28
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	6404(%rcx), %eax
	jge	.LBB291_8
# %bb.6:                                # %for.body33
                                        #   in Loop: Header=BB291_5 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.7:                                # %for.inc95
                                        #   in Loop: Header=BB291_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_5
.LBB291_8:                              # %for.end97
	movq	-16(%rbp), %rax
	movq	40(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB291_10
# %bb.9:                                # %cond.true
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	4(%rax), %ecx
	jmp	.LBB291_11
.LBB291_10:                             # %cond.false
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	4(%rax), %ecx
.LBB291_11:                             # %cond.end
	xorl	%eax, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rdx
	movl	%ecx, 36(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 8(%rdx)
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rdx
	movq	56(%rdx), %rdx
	movl	%ecx, 16(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	48(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	4(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%ecx, 12(%rdx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	cmpl	$0, 6380(%rcx)
	je	.LBB291_13
# %bb.12:                               # %land.rhs
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6380(%rax)
	setne	%al
.LBB291_13:                             # %land.end
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movq	-16(%rbp), %rdx
	movq	40(%rdx), %rdx
	movl	%eax, 6380(%rdx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB291_15
# %bb.14:                               # %land.rhs138
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	setne	%cl
.LBB291_15:                             # %land.end142
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB291_17
# %bb.16:                               # %if.then
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB291_17:                             # %if.end
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	$0, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6560(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6560(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6560(%rax)
	je	.LBB291_19
# %bb.18:                               # %if.then167
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6572(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6572(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6576(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6576(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6564(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6564(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6568(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6568(%rcx)
.LBB291_19:                             # %if.end180
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movl	$0, -4(%rbp)
.LBB291_20:                             # %for.cond186
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize+4, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB291_26
# %bb.21:                               # %for.body190
                                        #   in Loop: Header=BB291_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	288(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB291_23
# %bb.22:                               # %cond.true208
                                        #   in Loop: Header=BB291_20 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB291_24
.LBB291_23:                             # %cond.false217
                                        #   in Loop: Header=BB291_20 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	288(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB291_24:                             # %cond.end226
                                        #   in Loop: Header=BB291_20 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.25:                               # %for.inc233
                                        #   in Loop: Header=BB291_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_20
.LBB291_26:                             # %for.end235
	movl	$0, -4(%rbp)
.LBB291_27:                             # %for.cond236
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	listXsize, %eax
	addl	$1, %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB291_33
# %bb.28:                               # %for.body241
                                        #   in Loop: Header=BB291_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %esi
	idivq	%rsi
	movq	%rax, %rcx
	shlq	$1, %rcx
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	24(%rax,%rdx,8), %rax
	cqto
	idivq	%rsi
	shlq	$1, %rax
	cmpq	%rax, %rcx
	jge	.LBB291_30
# %bb.29:                               # %cond.true260
                                        #   in Loop: Header=BB291_27 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
	jmp	.LBB291_31
.LBB291_30:                             # %cond.false269
                                        #   in Loop: Header=BB291_27 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	24(%rax,%rcx,8), %rax
	cqto
	movl	$2, %ecx
	idivq	%rcx
	shlq	$1, %rax
.LBB291_31:                             # %cond.end278
                                        #   in Loop: Header=BB291_27 Depth=1
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.32:                               # %for.inc285
                                        #   in Loop: Header=BB291_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_27
.LBB291_33:                             # %for.end287
	movl	$0, -4(%rbp)
.LBB291_34:                             # %for.cond288
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_36 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB291_65
# %bb.35:                               # %for.body294
                                        #   in Loop: Header=BB291_34 Depth=1
	movl	$0, -20(%rbp)
.LBB291_36:                             # %for.cond295
                                        #   Parent Loop BB291_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB291_63
# %bb.37:                               # %for.body301
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movb	$1, (%rdi,%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %di
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rsi,%rax,8), %rax
	movw	%di, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB291_39
# %bb.38:                               # %cond.true439
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB291_40
.LBB291_39:                             # %cond.false445
                                        #   in Loop: Header=BB291_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_40
.LBB291_40:                             # %cond.end446
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB291_42
# %bb.41:                               # %cond.true456
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB291_43
.LBB291_42:                             # %cond.false462
                                        #   in Loop: Header=BB291_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_43
.LBB291_43:                             # %cond.end463
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB291_45
# %bb.44:                               # %cond.true474
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB291_46
.LBB291_45:                             # %cond.false479
                                        #   in Loop: Header=BB291_36 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB291_46
.LBB291_46:                             # %cond.end480
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB291_48
# %bb.47:                               # %cond.true495
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %rdi
	jmp	.LBB291_49
.LBB291_48:                             # %cond.false501
                                        #   in Loop: Header=BB291_36 Depth=2
	xorl	%edi, %edi
	jmp	.LBB291_49
.LBB291_49:                             # %cond.end502
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	%rdi, (%rsi,%rax,8)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, (%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	%si, 2(%rax)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %si
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%r8d
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	%si, (%rdi,%rax,2)
	movswl	%si, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB291_51
# %bb.50:                               # %cond.true641
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB291_52
.LBB291_51:                             # %cond.false647
                                        #   in Loop: Header=BB291_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_52
.LBB291_52:                             # %cond.end648
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB291_54
# %bb.53:                               # %cond.true659
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB291_55
.LBB291_54:                             # %cond.false665
                                        #   in Loop: Header=BB291_36 Depth=2
	xorl	%eax, %eax
	jmp	.LBB291_55
.LBB291_55:                             # %cond.end666
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB291_57
# %bb.56:                               # %cond.true677
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	1608(%rax,%rcx,8), %r8
	jmp	.LBB291_58
.LBB291_57:                             # %cond.false683
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB291_58
.LBB291_58:                             # %cond.end684
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
	cmpl	$0, -28(%rbp)
	jl	.LBB291_60
# %bb.59:                               # %cond.true700
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	1872(%rax,%rcx,8), %r8
	jmp	.LBB291_61
.LBB291_60:                             # %cond.false706
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	$-1, %r8
	jmp	.LBB291_61
.LBB291_61:                             # %cond.end707
                                        #   in Loop: Header=BB291_36 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-20(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	%r8, (%rdi,%rax,8)
# %bb.62:                               # %for.inc721
                                        #   in Loop: Header=BB291_36 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB291_36
.LBB291_63:                             # %for.end723
                                        #   in Loop: Header=BB291_34 Depth=1
	jmp	.LBB291_64
.LBB291_64:                             # %for.inc724
                                        #   in Loop: Header=BB291_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_34
.LBB291_65:                             # %for.end726
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB291_67
# %bb.66:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB291_76
.LBB291_67:                             # %if.then729
	movl	$0, -4(%rbp)
.LBB291_68:                             # %for.cond730
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_70 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB291_75
# %bb.69:                               # %for.body736
                                        #   in Loop: Header=BB291_68 Depth=1
	movl	$0, -20(%rbp)
.LBB291_70:                             # %for.cond737
                                        #   Parent Loop BB291_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB291_73
# %bb.71:                               # %for.body743
                                        #   in Loop: Header=BB291_70 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.72:                               # %for.inc756
                                        #   in Loop: Header=BB291_70 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB291_70
.LBB291_73:                             # %for.end758
                                        #   in Loop: Header=BB291_68 Depth=1
	jmp	.LBB291_74
.LBB291_74:                             # %for.inc759
                                        #   in Loop: Header=BB291_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB291_68
.LBB291_75:                             # %for.end761
	jmp	.LBB291_76
.LBB291_76:                             # %if.end762
	cmpl	$1811718220, -32(%rbp)  # imm = 0x6BFCA04C
	jne	.LBB291_78
.LBB291_77:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_78:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_77
.Lfunc_end291:
	.size	dpb_combine_field.228, .Lfunc_end291-dpb_combine_field.228
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.229          # -- Begin function init_lists.229
	.p2align	4, 0x90
	.type	init_lists.229,@function
init_lists.229:                         # @init_lists.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$98673419, -76(%rbp)    # imm = 0x5E1A30B
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB292_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB292_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB292_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB292_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB292_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB292_9
.LBB292_8:                              # %if.else
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB292_9:                              # %if.end
                                        #   in Loop: Header=BB292_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB292_10:                             # %if.end36
                                        #   in Loop: Header=BB292_2 Depth=1
	jmp	.LBB292_11
.LBB292_11:                             # %if.end37
                                        #   in Loop: Header=BB292_2 Depth=1
	jmp	.LBB292_12
.LBB292_12:                             # %for.inc
                                        #   in Loop: Header=BB292_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_2
.LBB292_13:                             # %for.end
	jmp	.LBB292_31
.LBB292_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB292_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB292_17
.LBB292_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB292_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB292_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB292_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB292_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB292_23
.LBB292_22:                             # %if.else63
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB292_23:                             # %if.end70
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB292_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB292_25:                             # %if.end83
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB292_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB292_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB292_27:                             # %if.end98
                                        #   in Loop: Header=BB292_18 Depth=1
	jmp	.LBB292_28
.LBB292_28:                             # %if.end99
                                        #   in Loop: Header=BB292_18 Depth=1
	jmp	.LBB292_29
.LBB292_29:                             # %for.inc100
                                        #   in Loop: Header=BB292_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_18
.LBB292_30:                             # %for.end102
	jmp	.LBB292_31
.LBB292_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB292_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB292_34
.LBB292_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB292_181
.LBB292_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB292_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB292_75
.LBB292_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB292_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB292_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB292_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB292_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB292_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB292_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB292_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB292_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_43:                             # %if.end140
                                        #   in Loop: Header=BB292_38 Depth=1
	jmp	.LBB292_44
.LBB292_44:                             # %if.end141
                                        #   in Loop: Header=BB292_38 Depth=1
	jmp	.LBB292_45
.LBB292_45:                             # %for.inc142
                                        #   in Loop: Header=BB292_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_38
.LBB292_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB292_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB292_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB292_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB292_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB292_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB292_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_51:                             # %if.end177
                                        #   in Loop: Header=BB292_47 Depth=1
	jmp	.LBB292_52
.LBB292_52:                             # %if.end178
                                        #   in Loop: Header=BB292_47 Depth=1
	jmp	.LBB292_53
.LBB292_53:                             # %for.inc179
                                        #   in Loop: Header=BB292_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_47
.LBB292_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB292_74
.LBB292_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB292_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB292_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB292_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB292_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB292_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB292_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB292_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB292_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_63:                             # %if.end212
                                        #   in Loop: Header=BB292_60 Depth=1
	jmp	.LBB292_64
.LBB292_64:                             # %for.inc213
                                        #   in Loop: Header=BB292_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_60
.LBB292_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB292_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB292_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB292_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB292_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB292_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB292_69:                             # %if.end242
                                        #   in Loop: Header=BB292_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB292_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB292_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB292_71:                             # %if.end259
                                        #   in Loop: Header=BB292_66 Depth=1
	jmp	.LBB292_72
.LBB292_72:                             # %for.inc260
                                        #   in Loop: Header=BB292_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_66
.LBB292_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB292_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB292_155
.LBB292_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB292_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB292_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB292_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB292_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB292_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB292_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB292_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB292_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB292_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB292_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_83:                             # %if.end307
                                        #   in Loop: Header=BB292_77 Depth=1
	jmp	.LBB292_84
.LBB292_84:                             # %if.end308
                                        #   in Loop: Header=BB292_77 Depth=1
	jmp	.LBB292_85
.LBB292_85:                             # %if.end309
                                        #   in Loop: Header=BB292_77 Depth=1
	jmp	.LBB292_86
.LBB292_86:                             # %for.inc310
                                        #   in Loop: Header=BB292_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_77
.LBB292_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB292_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB292_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB292_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB292_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB292_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB292_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB292_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB292_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB292_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_94:                             # %if.end354
                                        #   in Loop: Header=BB292_88 Depth=1
	jmp	.LBB292_95
.LBB292_95:                             # %if.end355
                                        #   in Loop: Header=BB292_88 Depth=1
	jmp	.LBB292_96
.LBB292_96:                             # %if.end356
                                        #   in Loop: Header=BB292_88 Depth=1
	jmp	.LBB292_97
.LBB292_97:                             # %for.inc357
                                        #   in Loop: Header=BB292_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_88
.LBB292_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB292_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB292_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB292_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB292_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_99
.LBB292_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB292_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB292_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB292_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB292_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_103
.LBB292_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB292_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB292_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB292_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB292_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB292_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB292_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB292_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_111:                            # %if.end428
                                        #   in Loop: Header=BB292_107 Depth=1
	jmp	.LBB292_112
.LBB292_112:                            # %if.end429
                                        #   in Loop: Header=BB292_107 Depth=1
	jmp	.LBB292_113
.LBB292_113:                            # %for.inc430
                                        #   in Loop: Header=BB292_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_107
.LBB292_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB292_154
.LBB292_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB292_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB292_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB292_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB292_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB292_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB292_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB292_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB292_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB292_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB292_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB292_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB292_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_126:                            # %if.end480
                                        #   in Loop: Header=BB292_122 Depth=1
	jmp	.LBB292_127
.LBB292_127:                            # %if.end481
                                        #   in Loop: Header=BB292_122 Depth=1
	jmp	.LBB292_128
.LBB292_128:                            # %for.inc482
                                        #   in Loop: Header=BB292_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_122
.LBB292_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB292_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB292_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB292_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB292_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB292_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB292_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB292_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB292_134:                            # %if.end507
                                        #   in Loop: Header=BB292_130 Depth=1
	jmp	.LBB292_135
.LBB292_135:                            # %if.end508
                                        #   in Loop: Header=BB292_130 Depth=1
	jmp	.LBB292_136
.LBB292_136:                            # %for.inc509
                                        #   in Loop: Header=BB292_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_130
.LBB292_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB292_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB292_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB292_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB292_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_138
.LBB292_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB292_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB292_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB292_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB292_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_142
.LBB292_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB292_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB292_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB292_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB292_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB292_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB292_149:                            # %if.end566
                                        #   in Loop: Header=BB292_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB292_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB292_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB292_151:                            # %if.end583
                                        #   in Loop: Header=BB292_146 Depth=1
	jmp	.LBB292_152
.LBB292_152:                            # %for.inc584
                                        #   in Loop: Header=BB292_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_146
.LBB292_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB292_154:                            # %if.end588
	jmp	.LBB292_155
.LBB292_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB292_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB292_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB292_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB292_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB292_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB292_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB292_158 Depth=1
	movl	$1, -72(%rbp)
.LBB292_161:                            # %if.end607
                                        #   in Loop: Header=BB292_158 Depth=1
	jmp	.LBB292_162
.LBB292_162:                            # %for.inc608
                                        #   in Loop: Header=BB292_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_158
.LBB292_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB292_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB292_165:                            # %if.end617
	jmp	.LBB292_166
.LBB292_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB292_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB292_169
.LBB292_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB292_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB292_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB292_172
.LBB292_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB292_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB292_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB292_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB292_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB292_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_173
.LBB292_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB292_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB292_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB292_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB292_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB292_177
.LBB292_180:                            # %for.end646.loopexit
	jmp	.LBB292_181
.LBB292_181:                            # %for.end646
	cmpl	$98673419, -76(%rbp)    # imm = 0x5E1A30B
	jne	.LBB292_183
.LBB292_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_182
.Lfunc_end292:
	.size	init_lists.229, .Lfunc_end292-init_lists.229
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.230
	.type	compare_pic_by_poc_asc.230,@function
compare_pic_by_poc_asc.230:             # @compare_pic_by_poc_asc.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$176274749, -16(%rbp)   # imm = 0xA81BD3D
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB293_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB293_5
.LBB293_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB293_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB293_5
.LBB293_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB293_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$176274749, -16(%rbp)   # imm = 0xA81BD3D
	jne	.LBB293_7
.LBB293_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_6
.Lfunc_end293:
	.size	compare_pic_by_poc_asc.230, .Lfunc_end293-compare_pic_by_poc_asc.230
	.cfi_endproc
                                        # -- End function
	.globl	dpb_split_field.231     # -- Begin function dpb_split_field.231
	.p2align	4, 0x90
	.type	dpb_split_field.231,@function
dpb_split_field.231:                    # @dpb_split_field.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1614098420, -76(%rbp)  # imm = 0x60352FF4
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 36(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB294_28
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$1, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 48(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %esi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %r8d
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6400(%rax), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	idivl	%edi
	movl	$2, %edi
	movl	%r8d, %edx
	movl	%eax, %r8d
	callq	alloc_storable_picture
	movq	-16(%rbp), %rcx
	movq	%rax, 56(%rcx)
	movl	$0, -4(%rbp)
.LBB294_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_5
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB294_2 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.4:                                # %for.inc
                                        #   in Loop: Header=BB294_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_2
.LBB294_5:                              # %for.end
	movl	$0, -4(%rbp)
.LBB294_6:                              # %for.cond30
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_9
# %bb.7:                                # %for.body36
                                        #   in Loop: Header=BB294_6 Depth=1
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.8:                                # %for.inc66
                                        #   in Loop: Header=BB294_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_6
.LBB294_9:                              # %for.end68
	movl	$0, -4(%rbp)
.LBB294_10:                             # %for.cond69
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_13
# %bb.11:                               # %for.body75
                                        #   in Loop: Header=BB294_10 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6424(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6424(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6392(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.12:                               # %for.inc89
                                        #   in Loop: Header=BB294_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_10
.LBB294_13:                             # %for.end91
	movl	$0, -4(%rbp)
.LBB294_14:                             # %for.cond92
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6404(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_17
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB294_14 Depth=1
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	6400(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.16:                               # %for.inc131
                                        #   in Loop: Header=BB294_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_14
.LBB294_17:                             # %for.end133
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	56(%rax), %rdi
	callq	UnifiedOneForthPix
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6380(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6380(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6376(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6376(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movl	$1, 6412(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6416(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6416(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6536(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6528(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	%rax, 6544(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6552(%rax), %eax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6552(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB294_27
# %bb.18:                               # %if.then211
	movl	$0, -4(%rbp)
.LBB294_19:                             # %for.cond212
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize+4, %eax
	jge	.LBB294_22
# %bb.20:                               # %for.body215
                                        #   in Loop: Header=BB294_19 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	816(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1344(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 288(%rcx,%rdx,8)
# %bb.21:                               # %for.inc267
                                        #   in Loop: Header=BB294_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_19
.LBB294_22:                             # %for.end269
	movl	$0, -4(%rbp)
.LBB294_23:                             # %for.cond270
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB294_26
# %bb.24:                               # %for.body273
                                        #   in Loop: Header=BB294_23 Depth=1
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	552(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	1080(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	%rax, 24(%rcx,%rdx,8)
# %bb.25:                               # %for.inc326
                                        #   in Loop: Header=BB294_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_23
.LBB294_26:                             # %for.end328
	jmp	.LBB294_27
.LBB294_27:                             # %if.end
	jmp	.LBB294_29
.LBB294_28:                             # %if.else
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-16(%rbp), %rax
	movq	$0, 56(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6528(%rax)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	$0, 6536(%rax)
.LBB294_29:                             # %if.end335
	movl	$0, -8(%rbp)
.LBB294_30:                             # %for.cond336
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_32 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_59
# %bb.31:                               # %for.body342
                                        #   in Loop: Header=BB294_30 Depth=1
	movl	$0, -4(%rbp)
.LBB294_32:                             # %for.cond343
                                        #   Parent Loop BB294_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_57
# %bb.33:                               # %for.body349
                                        #   in Loop: Header=BB294_32 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -80(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-80(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-44(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB294_48
# %bb.34:                               # %land.lhs.true
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-36(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB294_48
# %bb.35:                               # %if.then369
                                        #   in Loop: Header=BB294_32 Depth=2
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB294_37
# %bb.36:                               # %cond.true
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB294_38
.LBB294_37:                             # %cond.false
                                        #   in Loop: Header=BB294_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_38
.LBB294_38:                             # %cond.end
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB294_40
# %bb.39:                               # %cond.true407
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB294_41
.LBB294_40:                             # %cond.false415
                                        #   in Loop: Header=BB294_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_41
.LBB294_41:                             # %cond.end416
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB294_43
# %bb.42:                               # %cond.true429
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB294_44
.LBB294_43:                             # %cond.false436
                                        #   in Loop: Header=BB294_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_44
.LBB294_44:                             # %cond.end437
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB294_46
# %bb.45:                               # %cond.true448
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	addq	$1608, %rax             # imm = 0x648
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB294_47
.LBB294_46:                             # %cond.false456
                                        #   in Loop: Header=BB294_32 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_47
.LBB294_47:                             # %cond.end457
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB294_55
.LBB294_48:                             # %if.else466
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB294_50
# %bb.49:                               # %cond.true485
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	24(%rax,%rcx,8), %rax
	jmp	.LBB294_51
.LBB294_50:                             # %cond.false491
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB294_51
.LBB294_51:                             # %cond.end492
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB294_53
# %bb.52:                               # %cond.true503
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	288(%rax,%rcx,8), %rax
	jmp	.LBB294_54
.LBB294_53:                             # %cond.false509
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	$-1, %rax
	jmp	.LBB294_54
.LBB294_54:                             # %cond.end510
                                        #   in Loop: Header=BB294_32 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB294_55:                             # %if.end519
                                        #   in Loop: Header=BB294_32 Depth=2
	jmp	.LBB294_56
.LBB294_56:                             # %for.inc520
                                        #   in Loop: Header=BB294_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_32
.LBB294_57:                             # %for.end522
                                        #   in Loop: Header=BB294_30 Depth=1
	jmp	.LBB294_58
.LBB294_58:                             # %for.inc523
                                        #   in Loop: Header=BB294_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB294_30
.LBB294_59:                             # %for.end525
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	je	.LBB294_61
# %bb.60:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB294_73
.LBB294_61:                             # %if.then530
	movl	$0, -4(%rbp)
.LBB294_62:                             # %for.cond531
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_64 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_72
# %bb.63:                               # %for.body537
                                        #   in Loop: Header=BB294_62 Depth=1
	movl	$0, -8(%rbp)
.LBB294_64:                             # %for.cond538
                                        #   Parent Loop BB294_62 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_70
# %bb.65:                               # %for.body544
                                        #   in Loop: Header=BB294_64 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-52(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB294_68
# %bb.66:                               # %land.lhs.true563
                                        #   in Loop: Header=BB294_64 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-72(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB294_68
# %bb.67:                               # %if.then570
                                        #   in Loop: Header=BB294_64 Depth=2
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$1, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	32(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	40(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movw	(%rdi,%rax,2), %ax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6496(%rax), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB294_68:                             # %if.end908
                                        #   in Loop: Header=BB294_64 Depth=2
	jmp	.LBB294_69
.LBB294_69:                             # %for.inc909
                                        #   in Loop: Header=BB294_64 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB294_64
.LBB294_70:                             # %for.end911
                                        #   in Loop: Header=BB294_62 Depth=1
	jmp	.LBB294_71
.LBB294_71:                             # %for.inc912
                                        #   in Loop: Header=BB294_62 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_62
.LBB294_72:                             # %for.end914
	jmp	.LBB294_73
.LBB294_73:                             # %if.end915
	movl	$0, -4(%rbp)
.LBB294_74:                             # %for.cond916
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_76 Depth 2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_152
# %bb.75:                               # %for.body922
                                        #   in Loop: Header=BB294_74 Depth=1
	movl	$0, -8(%rbp)
.LBB294_76:                             # %for.cond923
                                        #   Parent Loop BB294_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_150
# %bb.77:                               # %for.body929
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -56(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	imull	%eax, %ecx
	movl	-56(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB294_79
# %bb.78:                               # %lor.lhs.false948
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-68(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB294_148
.LBB294_79:                             # %if.then954
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6556(%rax)
	jne	.LBB294_147
# %bb.80:                               # %if.then973
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_82
# %bb.81:                               # %cond.true990
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_83
.LBB294_82:                             # %cond.false991
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_83:                             # %cond.end993
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_85
# %bb.84:                               # %cond.true999
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_86
.LBB294_85:                             # %cond.false1001
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_86:                             # %cond.end1003
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_88
# %bb.87:                               # %cond.true1030
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_89
.LBB294_88:                             # %cond.false1032
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_89:                             # %cond.end1034
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_91
# %bb.90:                               # %cond.true1040
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_92
.LBB294_91:                             # %cond.false1042
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_92:                             # %cond.end1044
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_94
# %bb.93:                               # %cond.true1071
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_95
.LBB294_94:                             # %cond.false1073
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_95:                             # %cond.end1075
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_97
# %bb.96:                               # %cond.true1081
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_98
.LBB294_97:                             # %cond.false1083
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_98:                             # %cond.end1085
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_100
# %bb.99:                               # %cond.true1112
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_101
.LBB294_100:                            # %cond.false1114
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_101:                            # %cond.end1116
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_103
# %bb.102:                              # %cond.true1122
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_104
.LBB294_103:                            # %cond.false1124
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_104:                            # %cond.end1126
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_106
# %bb.105:                              # %cond.true1153
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_107
.LBB294_106:                            # %cond.false1155
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_107:                            # %cond.end1157
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_109
# %bb.108:                              # %cond.true1163
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_110
.LBB294_109:                            # %cond.false1165
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_110:                            # %cond.end1167
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB294_112
# %bb.111:                              # %if.then1175
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB294_125
.LBB294_112:                            # %if.else1190
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_114
# %bb.113:                              # %cond.true1196
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_115
.LBB294_114:                            # %cond.false1198
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_115:                            # %cond.end1200
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_117
# %bb.116:                              # %cond.true1206
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_118
.LBB294_117:                            # %cond.false1208
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_118:                            # %cond.end1210
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -20(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB294_120
# %bb.119:                              # %cond.true1232
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	3192(%rax,%rcx,8), %rax
	jmp	.LBB294_121
.LBB294_120:                            # %cond.false1237
                                        #   in Loop: Header=BB294_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_121
.LBB294_121:                            # %cond.end1238
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -20(%rbp)
	jl	.LBB294_123
# %bb.122:                              # %cond.true1249
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	4776(%rax,%rcx,8), %rax
	jmp	.LBB294_124
.LBB294_123:                            # %cond.false1254
                                        #   in Loop: Header=BB294_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_124
.LBB294_124:                            # %cond.end1255
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB294_125:                            # %if.end1264
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_127
# %bb.126:                              # %cond.true1270
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_128
.LBB294_127:                            # %cond.false1272
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_128:                            # %cond.end1274
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_130
# %bb.129:                              # %cond.true1280
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_131
.LBB294_130:                            # %cond.false1282
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_131:                            # %cond.end1284
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB294_133
# %bb.132:                              # %if.then1292
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	56(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-16(%rbp), %rax
	movq	48(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	jmp	.LBB294_146
.LBB294_133:                            # %if.else1307
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_135
# %bb.134:                              # %cond.true1313
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_136
.LBB294_135:                            # %cond.false1315
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-4(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_136:                            # %cond.end1317
                                        #   in Loop: Header=BB294_76 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB294_138
# %bb.137:                              # %cond.true1323
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB294_139
.LBB294_138:                            # %cond.false1325
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %ecx
	andl	$-2, %ecx
.LBB294_139:                            # %cond.end1327
                                        #   in Loop: Header=BB294_76 Depth=2
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	cwtl
	movl	%eax, -24(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB294_141
# %bb.140:                              # %cond.true1349
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	3456(%rax,%rcx,8), %rax
	jmp	.LBB294_142
.LBB294_141:                            # %cond.false1355
                                        #   in Loop: Header=BB294_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_142
.LBB294_142:                            # %cond.end1356
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	48(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -24(%rbp)
	jl	.LBB294_144
# %bb.143:                              # %cond.true1367
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	5040(%rax,%rcx,8), %rax
	jmp	.LBB294_145
.LBB294_144:                            # %cond.false1373
                                        #   in Loop: Header=BB294_76 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_145
.LBB294_145:                            # %cond.end1374
                                        #   in Loop: Header=BB294_76 Depth=2
	movq	-16(%rbp), %rcx
	movq	56(%rcx), %rcx
	movq	6496(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB294_146:                            # %if.end1383
                                        #   in Loop: Header=BB294_76 Depth=2
	jmp	.LBB294_147
.LBB294_147:                            # %if.end1384
                                        #   in Loop: Header=BB294_76 Depth=2
	jmp	.LBB294_148
.LBB294_148:                            # %if.end1385
                                        #   in Loop: Header=BB294_76 Depth=2
	jmp	.LBB294_149
.LBB294_149:                            # %for.inc1386
                                        #   in Loop: Header=BB294_76 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB294_76
.LBB294_150:                            # %for.end1388
                                        #   in Loop: Header=BB294_74 Depth=1
	jmp	.LBB294_151
.LBB294_151:                            # %for.inc1389
                                        #   in Loop: Header=BB294_74 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_74
.LBB294_152:                            # %for.end1391
	movl	$0, -8(%rbp)
.LBB294_153:                            # %for.cond1392
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_155 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_160
# %bb.154:                              # %for.body1398
                                        #   in Loop: Header=BB294_153 Depth=1
	movl	$0, -4(%rbp)
.LBB294_155:                            # %for.cond1399
                                        #   Parent Loop BB294_153 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_158
# %bb.156:                              # %for.body1405
                                        #   in Loop: Header=BB294_155 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6520(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
# %bb.157:                              # %for.inc1412
                                        #   in Loop: Header=BB294_155 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_155
.LBB294_158:                            # %for.end1414
                                        #   in Loop: Header=BB294_153 Depth=1
	jmp	.LBB294_159
.LBB294_159:                            # %for.inc1415
                                        #   in Loop: Header=BB294_153 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB294_153
.LBB294_160:                            # %for.end1417
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB294_162
# %bb.161:                              # %lor.lhs.false1420
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB294_174
.LBB294_162:                            # %if.then1423
	movl	$0, -8(%rbp)
.LBB294_163:                            # %for.cond1424
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB294_165 Depth 2
	movl	-8(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_173
# %bb.164:                              # %for.body1430
                                        #   in Loop: Header=BB294_163 Depth=1
	movl	$0, -4(%rbp)
.LBB294_165:                            # %for.cond1431
                                        #   Parent Loop BB294_163 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB294_171
# %bb.166:                              # %for.body1437
                                        #   in Loop: Header=BB294_165 Depth=2
	movl	-4(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	imull	%eax, %ecx
	movl	-60(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %ecx
	movl	-48(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -64(%rbp)
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6416(%rax)
	je	.LBB294_168
# %bb.167:                              # %cond.true1456
                                        #   in Loop: Header=BB294_165 Depth=2
	movq	-16(%rbp), %rax
	movq	40(%rax), %rax
	movq	6472(%rax), %rax
	movslq	-64(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	jmp	.LBB294_169
.LBB294_168:                            # %cond.false1462
                                        #   in Loop: Header=BB294_165 Depth=2
	xorl	%eax, %eax
	jmp	.LBB294_169
.LBB294_169:                            # %cond.end1463
                                        #   in Loop: Header=BB294_165 Depth=2
	movq	-16(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	6520(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.170:                              # %for.inc1472
                                        #   in Loop: Header=BB294_165 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB294_165
.LBB294_171:                            # %for.end1474
                                        #   in Loop: Header=BB294_163 Depth=1
	jmp	.LBB294_172
.LBB294_172:                            # %for.inc1475
                                        #   in Loop: Header=BB294_163 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB294_163
.LBB294_173:                            # %for.end1477
	jmp	.LBB294_174
.LBB294_174:                            # %if.end1478
	cmpl	$1614098420, -76(%rbp)  # imm = 0x60352FF4
	jne	.LBB294_176
.LBB294_175:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_176:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_175
.Lfunc_end294:
	.size	dpb_split_field.231, .Lfunc_end294-dpb_split_field.231
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.232          # -- Begin function init_lists.232
	.p2align	4, 0x90
	.type	init_lists.232,@function
init_lists.232:                         # @init_lists.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1702330978, -76(%rbp)  # imm = 0x65778262
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB295_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB295_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB295_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB295_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB295_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB295_9
.LBB295_8:                              # %if.else
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB295_9:                              # %if.end
                                        #   in Loop: Header=BB295_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB295_10:                             # %if.end36
                                        #   in Loop: Header=BB295_2 Depth=1
	jmp	.LBB295_11
.LBB295_11:                             # %if.end37
                                        #   in Loop: Header=BB295_2 Depth=1
	jmp	.LBB295_12
.LBB295_12:                             # %for.inc
                                        #   in Loop: Header=BB295_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_2
.LBB295_13:                             # %for.end
	jmp	.LBB295_31
.LBB295_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB295_16
# %bb.15:                               # %if.then40
	movl	$1, -48(%rbp)
	movl	$0, -44(%rbp)
	jmp	.LBB295_17
.LBB295_16:                             # %if.else41
	movl	$0, -48(%rbp)
	movl	$1, -44(%rbp)
.LBB295_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB295_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB295_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB295_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-68(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB295_23
.LBB295_22:                             # %if.else63
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB295_23:                             # %if.end70
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB295_25:                             # %if.end83
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB295_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB295_27:                             # %if.end98
                                        #   in Loop: Header=BB295_18 Depth=1
	jmp	.LBB295_28
.LBB295_28:                             # %if.end99
                                        #   in Loop: Header=BB295_18 Depth=1
	jmp	.LBB295_29
.LBB295_29:                             # %for.inc100
                                        #   in Loop: Header=BB295_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_18
.LBB295_30:                             # %for.end102
	jmp	.LBB295_31
.LBB295_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB295_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB295_34
.LBB295_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB295_181
.LBB295_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB295_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB295_75
.LBB295_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB295_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB295_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB295_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB295_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB295_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB295_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB295_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB295_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_43:                             # %if.end140
                                        #   in Loop: Header=BB295_38 Depth=1
	jmp	.LBB295_44
.LBB295_44:                             # %if.end141
                                        #   in Loop: Header=BB295_38 Depth=1
	jmp	.LBB295_45
.LBB295_45:                             # %for.inc142
                                        #   in Loop: Header=BB295_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_38
.LBB295_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB295_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB295_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB295_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB295_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB295_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB295_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_51:                             # %if.end177
                                        #   in Loop: Header=BB295_47 Depth=1
	jmp	.LBB295_52
.LBB295_52:                             # %if.end178
                                        #   in Loop: Header=BB295_47 Depth=1
	jmp	.LBB295_53
.LBB295_53:                             # %for.inc179
                                        #   in Loop: Header=BB295_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_47
.LBB295_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB295_74
.LBB295_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB295_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB295_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB295_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB295_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB295_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB295_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB295_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB295_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_63:                             # %if.end212
                                        #   in Loop: Header=BB295_60 Depth=1
	jmp	.LBB295_64
.LBB295_64:                             # %for.inc213
                                        #   in Loop: Header=BB295_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_60
.LBB295_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB295_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB295_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB295_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB295_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB295_69:                             # %if.end242
                                        #   in Loop: Header=BB295_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB295_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB295_71:                             # %if.end259
                                        #   in Loop: Header=BB295_66 Depth=1
	jmp	.LBB295_72
.LBB295_72:                             # %for.inc260
                                        #   in Loop: Header=BB295_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_66
.LBB295_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB295_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB295_155
.LBB295_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB295_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB295_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB295_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB295_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB295_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB295_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB295_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB295_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB295_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB295_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_83:                             # %if.end307
                                        #   in Loop: Header=BB295_77 Depth=1
	jmp	.LBB295_84
.LBB295_84:                             # %if.end308
                                        #   in Loop: Header=BB295_77 Depth=1
	jmp	.LBB295_85
.LBB295_85:                             # %if.end309
                                        #   in Loop: Header=BB295_77 Depth=1
	jmp	.LBB295_86
.LBB295_86:                             # %for.inc310
                                        #   in Loop: Header=BB295_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_77
.LBB295_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB295_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB295_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB295_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB295_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB295_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB295_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB295_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB295_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB295_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_94:                             # %if.end354
                                        #   in Loop: Header=BB295_88 Depth=1
	jmp	.LBB295_95
.LBB295_95:                             # %if.end355
                                        #   in Loop: Header=BB295_88 Depth=1
	jmp	.LBB295_96
.LBB295_96:                             # %if.end356
                                        #   in Loop: Header=BB295_88 Depth=1
	jmp	.LBB295_97
.LBB295_97:                             # %for.inc357
                                        #   in Loop: Header=BB295_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_88
.LBB295_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB295_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB295_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB295_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB295_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_99
.LBB295_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB295_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB295_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB295_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB295_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_103
.LBB295_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB295_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB295_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB295_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB295_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB295_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB295_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB295_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_111:                            # %if.end428
                                        #   in Loop: Header=BB295_107 Depth=1
	jmp	.LBB295_112
.LBB295_112:                            # %if.end429
                                        #   in Loop: Header=BB295_107 Depth=1
	jmp	.LBB295_113
.LBB295_113:                            # %for.inc430
                                        #   in Loop: Header=BB295_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_107
.LBB295_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB295_154
.LBB295_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB295_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB295_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB295_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB295_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB295_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB295_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB295_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB295_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB295_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB295_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB295_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB295_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_126:                            # %if.end480
                                        #   in Loop: Header=BB295_122 Depth=1
	jmp	.LBB295_127
.LBB295_127:                            # %if.end481
                                        #   in Loop: Header=BB295_122 Depth=1
	jmp	.LBB295_128
.LBB295_128:                            # %for.inc482
                                        #   in Loop: Header=BB295_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_122
.LBB295_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB295_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB295_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB295_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB295_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB295_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB295_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB295_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB295_134:                            # %if.end507
                                        #   in Loop: Header=BB295_130 Depth=1
	jmp	.LBB295_135
.LBB295_135:                            # %if.end508
                                        #   in Loop: Header=BB295_130 Depth=1
	jmp	.LBB295_136
.LBB295_136:                            # %for.inc509
                                        #   in Loop: Header=BB295_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_130
.LBB295_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB295_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB295_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB295_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB295_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_138
.LBB295_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB295_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB295_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB295_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB295_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_142
.LBB295_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB295_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB295_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB295_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB295_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB295_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB295_149:                            # %if.end566
                                        #   in Loop: Header=BB295_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB295_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB295_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB295_151:                            # %if.end583
                                        #   in Loop: Header=BB295_146 Depth=1
	jmp	.LBB295_152
.LBB295_152:                            # %for.inc584
                                        #   in Loop: Header=BB295_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_146
.LBB295_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB295_154:                            # %if.end588
	jmp	.LBB295_155
.LBB295_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB295_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB295_166
# %bb.157:                              # %if.then595
	movl	$0, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB295_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB295_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB295_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB295_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB295_158 Depth=1
	movl	$1, -72(%rbp)
.LBB295_161:                            # %if.end607
                                        #   in Loop: Header=BB295_158 Depth=1
	jmp	.LBB295_162
.LBB295_162:                            # %for.inc608
                                        #   in Loop: Header=BB295_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_158
.LBB295_163:                            # %for.end610
	cmpl	$0, -72(%rbp)
	jne	.LBB295_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB295_165:                            # %if.end617
	jmp	.LBB295_166
.LBB295_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB295_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB295_169
.LBB295_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB295_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB295_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB295_172
.LBB295_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB295_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB295_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB295_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB295_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB295_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_173
.LBB295_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB295_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB295_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB295_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB295_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB295_177
.LBB295_180:                            # %for.end646.loopexit
	jmp	.LBB295_181
.LBB295_181:                            # %for.end646
	cmpl	$1702330978, -76(%rbp)  # imm = 0x65778262
	jne	.LBB295_183
.LBB295_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_182
.Lfunc_end295:
	.size	init_lists.232, .Lfunc_end295-init_lists.232
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.233
	.type	mark_pic_long_term.233,@function
mark_pic_long_term.233:                 # @mark_pic_long_term.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2000268252, -20(%rbp)  # imm = 0x7739ABDC
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB296_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB296_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB296_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB296_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB296_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB296_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB296_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB296_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB296_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB296_39
.LBB296_7:                              # %if.end
                                        #   in Loop: Header=BB296_2 Depth=1
	jmp	.LBB296_8
.LBB296_8:                              # %if.end50
                                        #   in Loop: Header=BB296_2 Depth=1
	jmp	.LBB296_9
.LBB296_9:                              # %for.inc
                                        #   in Loop: Header=BB296_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_2
.LBB296_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB296_39
.LBB296_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB296_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB296_14
.LBB296_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -24(%rbp)
.LBB296_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB296_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB296_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB296_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB296_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB296_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB296_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB296_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB296_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB296_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB296_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB296_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB296_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB296_24:                             # %if.end123
	jmp	.LBB296_39
.LBB296_25:                             # %if.end124
                                        #   in Loop: Header=BB296_15 Depth=1
	jmp	.LBB296_26
.LBB296_26:                             # %if.end125
                                        #   in Loop: Header=BB296_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB296_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB296_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB296_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB296_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB296_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB296_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB296_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB296_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB296_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB296_34:                             # %if.end194
	jmp	.LBB296_39
.LBB296_35:                             # %if.end195
                                        #   in Loop: Header=BB296_15 Depth=1
	jmp	.LBB296_36
.LBB296_36:                             # %if.end196
                                        #   in Loop: Header=BB296_15 Depth=1
	jmp	.LBB296_37
.LBB296_37:                             # %for.inc197
                                        #   in Loop: Header=BB296_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB296_15
.LBB296_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB296_39:                             # %if.end201
	cmpl	$2000268252, -20(%rbp)  # imm = 0x7739ABDC
	jne	.LBB296_41
.LBB296_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_40
.Lfunc_end296:
	.size	mark_pic_long_term.233, .Lfunc_end296-mark_pic_long_term.233
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.234 # -- Begin function reorder_ref_pic_list.234
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.234,@function
reorder_ref_pic_list.234:               # @reorder_ref_pic_list.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$138400928, -60(%rbp)   # imm = 0x83FD4A0
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB297_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB297_3
.LBB297_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB297_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB297_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB297_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB297_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB297_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB297_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB297_7:                              # %if.end9
                                        #   in Loop: Header=BB297_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB297_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB297_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB297_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB297_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB297_12
.LBB297_11:                             # %if.else28
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB297_12:                             # %if.end33
                                        #   in Loop: Header=BB297_4 Depth=1
	jmp	.LBB297_17
.LBB297_13:                             # %if.else34
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB297_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB297_16
.LBB297_15:                             # %if.else46
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB297_16:                             # %if.end51
                                        #   in Loop: Header=BB297_4 Depth=1
	jmp	.LBB297_17
.LBB297_17:                             # %if.end52
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB297_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB297_20
.LBB297_19:                             # %if.else56
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB297_20:                             # %if.end57
                                        #   in Loop: Header=BB297_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-40(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB297_22
.LBB297_21:                             # %if.else58
                                        #   in Loop: Header=BB297_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB297_22:                             # %if.end61
                                        #   in Loop: Header=BB297_4 Depth=1
	jmp	.LBB297_23
.LBB297_23:                             # %for.inc
                                        #   in Loop: Header=BB297_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB297_4
.LBB297_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$138400928, -60(%rbp)   # imm = 0x83FD4A0
	jne	.LBB297_26
.LBB297_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_25
.Lfunc_end297:
	.size	reorder_ref_pic_list.234, .Lfunc_end297-reorder_ref_pic_list.234
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.235          # -- Begin function init_lists.235
	.p2align	4, 0x90
	.type	init_lists.235,@function
init_lists.235:                         # @init_lists.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$2009931960, -76(%rbp)  # imm = 0x77CD20B8
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB298_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB298_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB298_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB298_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB298_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB298_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB298_9
.LBB298_8:                              # %if.else
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB298_9:                              # %if.end
                                        #   in Loop: Header=BB298_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB298_10:                             # %if.end36
                                        #   in Loop: Header=BB298_2 Depth=1
	jmp	.LBB298_11
.LBB298_11:                             # %if.end37
                                        #   in Loop: Header=BB298_2 Depth=1
	jmp	.LBB298_12
.LBB298_12:                             # %for.inc
                                        #   in Loop: Header=BB298_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_2
.LBB298_13:                             # %for.end
	jmp	.LBB298_31
.LBB298_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB298_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB298_17
.LBB298_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB298_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB298_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB298_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB298_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB298_23
.LBB298_22:                             # %if.else63
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB298_23:                             # %if.end70
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB298_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB298_25:                             # %if.end83
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB298_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB298_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB298_27:                             # %if.end98
                                        #   in Loop: Header=BB298_18 Depth=1
	jmp	.LBB298_28
.LBB298_28:                             # %if.end99
                                        #   in Loop: Header=BB298_18 Depth=1
	jmp	.LBB298_29
.LBB298_29:                             # %for.inc100
                                        #   in Loop: Header=BB298_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_18
.LBB298_30:                             # %for.end102
	jmp	.LBB298_31
.LBB298_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB298_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB298_34
.LBB298_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB298_181
.LBB298_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB298_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB298_75
.LBB298_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB298_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB298_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB298_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB298_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB298_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB298_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB298_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB298_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB298_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_43:                             # %if.end140
                                        #   in Loop: Header=BB298_38 Depth=1
	jmp	.LBB298_44
.LBB298_44:                             # %if.end141
                                        #   in Loop: Header=BB298_38 Depth=1
	jmp	.LBB298_45
.LBB298_45:                             # %for.inc142
                                        #   in Loop: Header=BB298_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_38
.LBB298_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB298_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB298_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB298_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB298_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB298_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB298_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB298_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_51:                             # %if.end177
                                        #   in Loop: Header=BB298_47 Depth=1
	jmp	.LBB298_52
.LBB298_52:                             # %if.end178
                                        #   in Loop: Header=BB298_47 Depth=1
	jmp	.LBB298_53
.LBB298_53:                             # %for.inc179
                                        #   in Loop: Header=BB298_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_47
.LBB298_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB298_74
.LBB298_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB298_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB298_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB298_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB298_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB298_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB298_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB298_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB298_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_63:                             # %if.end212
                                        #   in Loop: Header=BB298_60 Depth=1
	jmp	.LBB298_64
.LBB298_64:                             # %for.inc213
                                        #   in Loop: Header=BB298_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_60
.LBB298_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB298_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB298_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB298_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB298_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB298_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB298_69:                             # %if.end242
                                        #   in Loop: Header=BB298_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB298_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB298_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB298_71:                             # %if.end259
                                        #   in Loop: Header=BB298_66 Depth=1
	jmp	.LBB298_72
.LBB298_72:                             # %for.inc260
                                        #   in Loop: Header=BB298_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_66
.LBB298_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB298_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB298_155
.LBB298_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB298_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB298_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB298_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB298_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB298_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB298_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB298_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB298_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB298_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB298_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB298_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_83:                             # %if.end307
                                        #   in Loop: Header=BB298_77 Depth=1
	jmp	.LBB298_84
.LBB298_84:                             # %if.end308
                                        #   in Loop: Header=BB298_77 Depth=1
	jmp	.LBB298_85
.LBB298_85:                             # %if.end309
                                        #   in Loop: Header=BB298_77 Depth=1
	jmp	.LBB298_86
.LBB298_86:                             # %for.inc310
                                        #   in Loop: Header=BB298_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_77
.LBB298_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB298_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB298_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB298_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB298_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB298_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB298_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB298_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB298_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB298_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB298_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_94:                             # %if.end354
                                        #   in Loop: Header=BB298_88 Depth=1
	jmp	.LBB298_95
.LBB298_95:                             # %if.end355
                                        #   in Loop: Header=BB298_88 Depth=1
	jmp	.LBB298_96
.LBB298_96:                             # %if.end356
                                        #   in Loop: Header=BB298_88 Depth=1
	jmp	.LBB298_97
.LBB298_97:                             # %for.inc357
                                        #   in Loop: Header=BB298_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_88
.LBB298_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB298_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB298_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB298_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB298_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_99
.LBB298_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB298_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB298_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB298_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB298_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_103
.LBB298_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB298_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB298_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB298_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB298_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB298_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB298_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB298_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_111:                            # %if.end428
                                        #   in Loop: Header=BB298_107 Depth=1
	jmp	.LBB298_112
.LBB298_112:                            # %if.end429
                                        #   in Loop: Header=BB298_107 Depth=1
	jmp	.LBB298_113
.LBB298_113:                            # %for.inc430
                                        #   in Loop: Header=BB298_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_107
.LBB298_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB298_154
.LBB298_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB298_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB298_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB298_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB298_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB298_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB298_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB298_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB298_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB298_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB298_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB298_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB298_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_126:                            # %if.end480
                                        #   in Loop: Header=BB298_122 Depth=1
	jmp	.LBB298_127
.LBB298_127:                            # %if.end481
                                        #   in Loop: Header=BB298_122 Depth=1
	jmp	.LBB298_128
.LBB298_128:                            # %for.inc482
                                        #   in Loop: Header=BB298_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_122
.LBB298_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB298_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB298_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB298_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB298_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB298_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB298_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB298_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB298_134:                            # %if.end507
                                        #   in Loop: Header=BB298_130 Depth=1
	jmp	.LBB298_135
.LBB298_135:                            # %if.end508
                                        #   in Loop: Header=BB298_130 Depth=1
	jmp	.LBB298_136
.LBB298_136:                            # %for.inc509
                                        #   in Loop: Header=BB298_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_130
.LBB298_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB298_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB298_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB298_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB298_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_138
.LBB298_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB298_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB298_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB298_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB298_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_142
.LBB298_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB298_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB298_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB298_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB298_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB298_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB298_149:                            # %if.end566
                                        #   in Loop: Header=BB298_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB298_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB298_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB298_151:                            # %if.end583
                                        #   in Loop: Header=BB298_146 Depth=1
	jmp	.LBB298_152
.LBB298_152:                            # %for.inc584
                                        #   in Loop: Header=BB298_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_146
.LBB298_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB298_154:                            # %if.end588
	jmp	.LBB298_155
.LBB298_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB298_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB298_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB298_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB298_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB298_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB298_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB298_158 Depth=1
	movl	$1, -68(%rbp)
.LBB298_161:                            # %if.end607
                                        #   in Loop: Header=BB298_158 Depth=1
	jmp	.LBB298_162
.LBB298_162:                            # %for.inc608
                                        #   in Loop: Header=BB298_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_158
.LBB298_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB298_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB298_165:                            # %if.end617
	jmp	.LBB298_166
.LBB298_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB298_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB298_169
.LBB298_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB298_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB298_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB298_172
.LBB298_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB298_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB298_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB298_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB298_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB298_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_173
.LBB298_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB298_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB298_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB298_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB298_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB298_177
.LBB298_180:                            # %for.end646.loopexit
	jmp	.LBB298_181
.LBB298_181:                            # %for.end646
	cmpl	$2009931960, -76(%rbp)  # imm = 0x77CD20B8
	jne	.LBB298_183
.LBB298_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_182
.Lfunc_end298:
	.size	init_lists.235, .Lfunc_end298-init_lists.235
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.236
	.type	mm_unmark_short_term_for_reference.236,@function
mm_unmark_short_term_for_reference.236: # @mm_unmark_short_term_for_reference.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1568190560, -16(%rbp)  # imm = 0x5D78B060
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB299_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB299_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB299_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB299_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB299_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB299_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB299_27
.LBB299_7:                              # %if.end
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_8
.LBB299_8:                              # %if.end13
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_24
.LBB299_9:                              # %if.else
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB299_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB299_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB299_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB299_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB299_14:                             # %if.end44
	jmp	.LBB299_27
.LBB299_15:                             # %if.end45
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_16
.LBB299_16:                             # %if.end46
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB299_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB299_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB299_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB299_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB299_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB299_21:                             # %if.end81
	jmp	.LBB299_27
.LBB299_22:                             # %if.end82
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_23
.LBB299_23:                             # %if.end83
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_24
.LBB299_24:                             # %if.end84
                                        #   in Loop: Header=BB299_1 Depth=1
	jmp	.LBB299_25
.LBB299_25:                             # %for.inc
                                        #   in Loop: Header=BB299_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB299_1
.LBB299_26:                             # %for.end.loopexit
	jmp	.LBB299_27
.LBB299_27:                             # %for.end
	cmpl	$1568190560, -16(%rbp)  # imm = 0x5D78B060
	jne	.LBB299_29
.LBB299_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_28
.Lfunc_end299:
	.size	mm_unmark_short_term_for_reference.236, .Lfunc_end299-mm_unmark_short_term_for_reference.236
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function compare_pic_by_poc_asc.237
	.type	compare_pic_by_poc_asc.237,@function
compare_pic_by_poc_asc.237:             # @compare_pic_by_poc_asc.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2117252402, -16(%rbp)  # imm = 0x7E32B532
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB300_2
# %bb.1:                                # %if.then
	movl	$-1, -12(%rbp)
	jmp	.LBB300_5
.LBB300_2:                              # %if.end
	movq	-32(%rbp), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-24(%rbp), %rcx
	movq	(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB300_4
# %bb.3:                                # %if.then5
	movl	$1, -12(%rbp)
	jmp	.LBB300_5
.LBB300_4:                              # %if.else
	movl	$0, -12(%rbp)
.LBB300_5:                              # %return
	movl	-12(%rbp), %ebx
	cmpl	$2117252402, -16(%rbp)  # imm = 0x7E32B532
	jne	.LBB300_7
.LBB300_6:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_7:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_6
.Lfunc_end300:
	.size	compare_pic_by_poc_asc.237, .Lfunc_end300-compare_pic_by_poc_asc.237
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.238
	.type	mark_pic_long_term.238,@function
mark_pic_long_term.238:                 # @mark_pic_long_term.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$720156544, -24(%rbp)   # imm = 0x2AECB780
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -16(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB301_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB301_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB301_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB301_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB301_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB301_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB301_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB301_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB301_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB301_39
.LBB301_7:                              # %if.end
                                        #   in Loop: Header=BB301_2 Depth=1
	jmp	.LBB301_8
.LBB301_8:                              # %if.end50
                                        #   in Loop: Header=BB301_2 Depth=1
	jmp	.LBB301_9
.LBB301_9:                              # %for.inc
                                        #   in Loop: Header=BB301_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_2
.LBB301_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB301_39
.LBB301_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB301_13
# %bb.12:                               # %if.then53
	movl	$1, -12(%rbp)
	movl	$0, -20(%rbp)
	jmp	.LBB301_14
.LBB301_13:                             # %if.else54
	movl	$0, -12(%rbp)
	movl	$1, -20(%rbp)
.LBB301_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB301_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB301_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB301_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB301_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB301_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB301_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB301_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB301_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB301_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB301_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB301_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB301_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB301_24:                             # %if.end123
	jmp	.LBB301_39
.LBB301_25:                             # %if.end124
                                        #   in Loop: Header=BB301_15 Depth=1
	jmp	.LBB301_26
.LBB301_26:                             # %if.end125
                                        #   in Loop: Header=BB301_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB301_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB301_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB301_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB301_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB301_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB301_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB301_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB301_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-12(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB301_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB301_34:                             # %if.end194
	jmp	.LBB301_39
.LBB301_35:                             # %if.end195
                                        #   in Loop: Header=BB301_15 Depth=1
	jmp	.LBB301_36
.LBB301_36:                             # %if.end196
                                        #   in Loop: Header=BB301_15 Depth=1
	jmp	.LBB301_37
.LBB301_37:                             # %for.inc197
                                        #   in Loop: Header=BB301_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB301_15
.LBB301_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB301_39:                             # %if.end201
	cmpl	$720156544, -24(%rbp)   # imm = 0x2AECB780
	jne	.LBB301_41
.LBB301_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_40
.Lfunc_end301:
	.size	mark_pic_long_term.238, .Lfunc_end301-mark_pic_long_term.238
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.239 # -- Begin function reorder_ref_pic_list.239
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.239,@function
reorder_ref_pic_list.239:               # @reorder_ref_pic_list.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$307979762, -60(%rbp)   # imm = 0x125B65F2
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB302_2
# %bb.1:                                # %if.then
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB302_3
.LBB302_2:                              # %if.else
	movl	-44(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
.LBB302_3:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB302_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB302_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB302_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB302_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB302_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB302_7:                              # %if.end9
                                        #   in Loop: Header=BB302_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB302_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB302_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB302_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB302_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB302_12
.LBB302_11:                             # %if.else28
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB302_12:                             # %if.end33
                                        #   in Loop: Header=BB302_4 Depth=1
	jmp	.LBB302_17
.LBB302_13:                             # %if.else34
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB302_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB302_16
.LBB302_15:                             # %if.else46
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB302_16:                             # %if.end51
                                        #   in Loop: Header=BB302_4 Depth=1
	jmp	.LBB302_17
.LBB302_17:                             # %if.end52
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jle	.LBB302_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB302_20
.LBB302_19:                             # %if.else56
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB302_20:                             # %if.end57
                                        #   in Loop: Header=BB302_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB302_22
.LBB302_21:                             # %if.else58
                                        #   in Loop: Header=BB302_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-20(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB302_22:                             # %if.end61
                                        #   in Loop: Header=BB302_4 Depth=1
	jmp	.LBB302_23
.LBB302_23:                             # %for.inc
                                        #   in Loop: Header=BB302_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_4
.LBB302_24:                             # %for.end
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$307979762, -60(%rbp)   # imm = 0x125B65F2
	jne	.LBB302_26
.LBB302_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_25
.Lfunc_end302:
	.size	reorder_ref_pic_list.239, .Lfunc_end302-reorder_ref_pic_list.239
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.240   # -- Begin function compute_colocated.240
	.p2align	4, 0x90
	.type	compute_colocated.240,@function
compute_colocated.240:                  # @compute_colocated.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$614566071, -72(%rbp)   # imm = 0x24A188B7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB303_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-48(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB303_11
.LBB303_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB303_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB303_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB303_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB303_7
# %bb.6:                                # %if.then14
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
	jmp	.LBB303_8
.LBB303_7:                              # %if.else17
	movq	-48(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -56(%rbp)
	movq	%rax, -40(%rbp)
.LBB303_8:                              # %if.end
	jmp	.LBB303_9
.LBB303_9:                              # %if.end20
	jmp	.LBB303_10
.LBB303_10:                             # %if.end21
	jmp	.LBB303_11
.LBB303_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB303_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB303_29
.LBB303_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB303_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB303_14 Depth=1
	movl	$0, -16(%rbp)
.LBB303_16:                             # %for.cond27
                                        #   Parent Loop BB303_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB303_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB303_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB303_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB303_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB303_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-40(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB303_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB303_16 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB303_22
.LBB303_21:                             # %if.else160
                                        #   in Loop: Header=BB303_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB303_22:                             # %if.end283
                                        #   in Loop: Header=BB303_16 Depth=2
	jmp	.LBB303_24
.LBB303_23:                             # %if.else284
                                        #   in Loop: Header=BB303_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB303_24:                             # %if.end391
                                        #   in Loop: Header=BB303_16 Depth=2
	jmp	.LBB303_25
.LBB303_25:                             # %for.inc
                                        #   in Loop: Header=BB303_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_16
.LBB303_26:                             # %for.end
                                        #   in Loop: Header=BB303_14 Depth=1
	jmp	.LBB303_27
.LBB303_27:                             # %for.inc392
                                        #   in Loop: Header=BB303_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_14
.LBB303_28:                             # %for.end394
	jmp	.LBB303_29
.LBB303_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB303_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB303_241
.LBB303_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB303_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB303_32 Depth=1
	movl	$0, -12(%rbp)
.LBB303_34:                             # %for.cond408
                                        #   Parent Loop BB303_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB303_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_39
.LBB303_38:                             # %cond.false
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_39:                             # %cond.end
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_42
.LBB303_41:                             # %cond.false427
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_42:                             # %cond.end429
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_45
.LBB303_44:                             # %cond.false447
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_45:                             # %cond.end449
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_48
.LBB303_47:                             # %cond.false457
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_48:                             # %cond.end459
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_51
.LBB303_50:                             # %cond.false477
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_51:                             # %cond.end479
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_54
.LBB303_53:                             # %cond.false487
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_54:                             # %cond.end489
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_57
.LBB303_56:                             # %cond.false507
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_57:                             # %cond.end509
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_60
.LBB303_59:                             # %cond.false517
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_60:                             # %cond.end519
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_63
.LBB303_62:                             # %cond.false537
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_63:                             # %cond.end539
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_66
.LBB303_65:                             # %cond.false547
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_66:                             # %cond.end549
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB303_81
.LBB303_68:                             # %if.else569
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_71
.LBB303_70:                             # %cond.false576
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_71:                             # %cond.end578
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_74
.LBB303_73:                             # %cond.false586
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_74:                             # %cond.end588
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_77
.LBB303_76:                             # %cond.false604
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_77:                             # %cond.end606
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_80
.LBB303_79:                             # %cond.false614
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_80:                             # %cond.end616
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_81:                             # %if.end626
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_84
.LBB303_83:                             # %cond.false633
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_84:                             # %cond.end635
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_87
.LBB303_86:                             # %cond.false643
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_87:                             # %cond.end645
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB303_102
.LBB303_89:                             # %if.else665
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_92
.LBB303_91:                             # %cond.false672
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_92:                             # %cond.end674
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_95
.LBB303_94:                             # %cond.false682
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_95:                             # %cond.end684
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_98
.LBB303_97:                             # %cond.false700
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_98:                             # %cond.end702
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_101
.LBB303_100:                            # %cond.false710
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_101:                            # %cond.end712
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_102:                            # %if.end722
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB303_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB303_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB303_112
.LBB303_107:                            # %lor.rhs
                                        #   in Loop: Header=BB303_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB303_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB303_111:                            # %land.end
                                        #   in Loop: Header=BB303_34 Depth=2
.LBB303_112:                            # %lor.end
                                        #   in Loop: Header=BB303_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB303_113:                            # %if.end814
                                        #   in Loop: Header=BB303_34 Depth=2
	jmp	.LBB303_236
.LBB303_114:                            # %if.else815
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_117
.LBB303_116:                            # %cond.false822
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_117:                            # %cond.end824
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_120
.LBB303_119:                            # %cond.false832
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_120:                            # %cond.end834
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_123
.LBB303_122:                            # %cond.false851
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_123:                            # %cond.end853
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_126
.LBB303_125:                            # %cond.false861
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_126:                            # %cond.end863
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_129
.LBB303_128:                            # %cond.false881
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_129:                            # %cond.end883
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_132
.LBB303_131:                            # %cond.false891
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_132:                            # %cond.end893
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_135
.LBB303_134:                            # %cond.false911
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_135:                            # %cond.end913
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_138
.LBB303_137:                            # %cond.false921
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_138:                            # %cond.end923
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_141
.LBB303_140:                            # %cond.false941
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_141:                            # %cond.end943
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_144
.LBB303_143:                            # %cond.false951
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_144:                            # %cond.end953
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_147
.LBB303_146:                            # %cond.false968
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_147:                            # %cond.end970
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_150
.LBB303_149:                            # %cond.false978
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_150:                            # %cond.end980
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_153
.LBB303_152:                            # %cond.false996
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_153:                            # %cond.end998
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_156
.LBB303_155:                            # %cond.false1006
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_156:                            # %cond.end1008
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_159
.LBB303_158:                            # %cond.false1023
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_159:                            # %cond.end1025
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_162
.LBB303_161:                            # %cond.false1033
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_162:                            # %cond.end1035
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB303_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB303_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB303_172
.LBB303_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB303_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB303_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB303_171:                            # %land.end1133
                                        #   in Loop: Header=BB303_34 Depth=2
.LBB303_172:                            # %lor.end1134
                                        #   in Loop: Header=BB303_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB303_173:                            # %if.end1142
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_176
.LBB303_175:                            # %cond.false1149
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_176:                            # %cond.end1151
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_179
.LBB303_178:                            # %cond.false1159
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_179:                            # %cond.end1161
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_182
.LBB303_181:                            # %cond.false1178
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_182:                            # %cond.end1180
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_185
.LBB303_184:                            # %cond.false1188
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_185:                            # %cond.end1190
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_188
.LBB303_187:                            # %cond.false1208
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_188:                            # %cond.end1210
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_191
.LBB303_190:                            # %cond.false1218
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_191:                            # %cond.end1220
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_194
.LBB303_193:                            # %cond.false1238
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_194:                            # %cond.end1240
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_197
.LBB303_196:                            # %cond.false1248
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_197:                            # %cond.end1250
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_200
.LBB303_199:                            # %cond.false1268
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_200:                            # %cond.end1270
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_203
.LBB303_202:                            # %cond.false1278
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_203:                            # %cond.end1280
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_206
.LBB303_205:                            # %cond.false1295
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_206:                            # %cond.end1297
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_209
.LBB303_208:                            # %cond.false1305
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_209:                            # %cond.end1307
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_212
.LBB303_211:                            # %cond.false1323
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_212:                            # %cond.end1325
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_215
.LBB303_214:                            # %cond.false1333
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_215:                            # %cond.end1335
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_218
.LBB303_217:                            # %cond.false1350
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_218:                            # %cond.end1352
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_221
.LBB303_220:                            # %cond.false1360
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_221:                            # %cond.end1362
                                        #   in Loop: Header=BB303_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB303_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-40(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB303_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB303_231
.LBB303_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB303_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB303_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB303_230:                            # %land.end1460
                                        #   in Loop: Header=BB303_34 Depth=2
.LBB303_231:                            # %lor.end1461
                                        #   in Loop: Header=BB303_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB303_232:                            # %if.end1469
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB303_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB303_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB303_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB303_235:                            # %if.end1522
                                        #   in Loop: Header=BB303_34 Depth=2
	jmp	.LBB303_236
.LBB303_236:                            # %if.end1523
                                        #   in Loop: Header=BB303_34 Depth=2
	jmp	.LBB303_237
.LBB303_237:                            # %for.inc1524
                                        #   in Loop: Header=BB303_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_34
.LBB303_238:                            # %for.end1526
                                        #   in Loop: Header=BB303_32 Depth=1
	jmp	.LBB303_239
.LBB303_239:                            # %for.inc1527
                                        #   in Loop: Header=BB303_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_32
.LBB303_240:                            # %for.end1529
	jmp	.LBB303_241
.LBB303_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB303_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB303_259
.LBB303_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB303_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB303_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB303_245 Depth=1
	movl	$0, -16(%rbp)
.LBB303_247:                            # %for.cond1546
                                        #   Parent Loop BB303_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB303_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB303_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB303_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB303_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB303_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB303_252
.LBB303_251:                            # %if.else1699
                                        #   in Loop: Header=BB303_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB303_252:                            # %if.end1829
                                        #   in Loop: Header=BB303_247 Depth=2
	jmp	.LBB303_253
.LBB303_253:                            # %if.end1830
                                        #   in Loop: Header=BB303_247 Depth=2
	jmp	.LBB303_254
.LBB303_254:                            # %for.inc1831
                                        #   in Loop: Header=BB303_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_247
.LBB303_255:                            # %for.end1833
                                        #   in Loop: Header=BB303_245 Depth=1
	jmp	.LBB303_256
.LBB303_256:                            # %for.inc1834
                                        #   in Loop: Header=BB303_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_245
.LBB303_257:                            # %for.end1836
	jmp	.LBB303_258
.LBB303_258:                            # %if.end1837
	jmp	.LBB303_259
.LBB303_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB303_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB303_260 Depth=1
	movl	$0, -16(%rbp)
.LBB303_262:                            # %for.cond1845
                                        #   Parent Loop BB303_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB303_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB303_314
.LBB303_265:                            # %if.then1856
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_268
.LBB303_267:                            # %cond.false1863
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_268:                            # %cond.end1865
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_271
.LBB303_270:                            # %cond.false1873
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_271:                            # %cond.end1875
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_274
.LBB303_273:                            # %cond.false1893
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_274:                            # %cond.end1895
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_277
.LBB303_276:                            # %cond.false1903
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_277:                            # %cond.end1905
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_280
.LBB303_279:                            # %cond.false1923
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_280:                            # %cond.end1925
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_283
.LBB303_282:                            # %cond.false1933
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_283:                            # %cond.end1935
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_286
.LBB303_285:                            # %cond.false1953
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_286:                            # %cond.end1955
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_289
.LBB303_288:                            # %cond.false1963
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_289:                            # %cond.end1965
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_292
.LBB303_291:                            # %cond.false1983
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_292:                            # %cond.end1985
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_295
.LBB303_294:                            # %cond.false1993
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_295:                            # %cond.end1995
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_298
.LBB303_297:                            # %cond.false2011
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_298:                            # %cond.end2013
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_301
.LBB303_300:                            # %cond.false2021
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_301:                            # %cond.end2023
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_304
.LBB303_303:                            # %cond.false2039
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_304:                            # %cond.end2041
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_307
.LBB303_306:                            # %cond.false2049
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_307:                            # %cond.end2051
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_310
.LBB303_309:                            # %cond.false2067
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_310:                            # %cond.end2069
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB303_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB303_313
.LBB303_312:                            # %cond.false2077
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB303_313:                            # %cond.end2079
                                        #   in Loop: Header=BB303_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB303_315
.LBB303_314:                            # %if.else2089
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB303_315:                            # %if.end2194
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB303_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB303_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB303_325
.LBB303_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB303_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB303_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB303_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB303_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB303_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB303_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB303_324:                            # %land.end2285
                                        #   in Loop: Header=BB303_262 Depth=2
.LBB303_325:                            # %lor.end2286
                                        #   in Loop: Header=BB303_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB303_326:                            # %if.end2295
                                        #   in Loop: Header=BB303_262 Depth=2
	jmp	.LBB303_327
.LBB303_327:                            # %for.inc2296
                                        #   in Loop: Header=BB303_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_262
.LBB303_328:                            # %for.end2298
                                        #   in Loop: Header=BB303_260 Depth=1
	jmp	.LBB303_329
.LBB303_329:                            # %for.inc2299
                                        #   in Loop: Header=BB303_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_260
.LBB303_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB303_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB303_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB303_332 Depth=1
	movl	$0, -16(%rbp)
.LBB303_334:                            # %for.cond2312
                                        #   Parent Loop BB303_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB303_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB303_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB303_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB303_340
.LBB303_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB303_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB303_341
.LBB303_340:                            # %if.then2342
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB303_345
.LBB303_341:                            # %if.else2363
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB303_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB303_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB303_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB303_344:                            # %if.end2394
                                        #   in Loop: Header=BB303_334 Depth=2
	jmp	.LBB303_345
.LBB303_345:                            # %if.end2395
                                        #   in Loop: Header=BB303_334 Depth=2
	jmp	.LBB303_346
.LBB303_346:                            # %for.inc2396
                                        #   in Loop: Header=BB303_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_334
.LBB303_347:                            # %for.end2398
                                        #   in Loop: Header=BB303_332 Depth=1
	jmp	.LBB303_348
.LBB303_348:                            # %for.inc2399
                                        #   in Loop: Header=BB303_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_332
.LBB303_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB303_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB303_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB303_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB303_350 Depth=1
	movl	$0, -16(%rbp)
.LBB303_352:                            # %for.cond2409
                                        #   Parent Loop BB303_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB303_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB303_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB303_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB303_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB303_360
.LBB303_356:                            # %cond.false2429
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB303_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$127, %eax
	jmp	.LBB303_359
.LBB303_358:                            # %cond.false2441
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB303_359:                            # %cond.end2450
                                        #   in Loop: Header=BB303_352 Depth=2
.LBB303_360:                            # %cond.end2452
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB303_377
.LBB303_361:                            # %if.else2454
                                        #   in Loop: Header=BB303_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB303_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB303_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB303_368
.LBB303_364:                            # %cond.false2468
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB303_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$127, %eax
	jmp	.LBB303_367
.LBB303_366:                            # %cond.false2480
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB303_367:                            # %cond.end2489
                                        #   in Loop: Header=BB303_352 Depth=2
.LBB303_368:                            # %cond.end2491
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB303_376
.LBB303_369:                            # %if.else2493
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB303_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB303_375
.LBB303_371:                            # %cond.false2504
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB303_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$127, %eax
	jmp	.LBB303_374
.LBB303_373:                            # %cond.false2516
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB303_374:                            # %cond.end2525
                                        #   in Loop: Header=BB303_352 Depth=2
.LBB303_375:                            # %cond.end2527
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB303_376:                            # %if.end2529
                                        #   in Loop: Header=BB303_352 Depth=2
	jmp	.LBB303_377
.LBB303_377:                            # %if.end2530
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB303_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB303_383
.LBB303_379:                            # %cond.false2546
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB303_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$127, %eax
	jmp	.LBB303_382
.LBB303_381:                            # %cond.false2562
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	-48(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB303_382:                            # %cond.end2575
                                        #   in Loop: Header=BB303_352 Depth=2
.LBB303_383:                            # %cond.end2577
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	%eax, -68(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB303_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-68(%rbp)
	movl	%eax, -64(%rbp)
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB303_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB303_390
.LBB303_386:                            # %cond.false2592
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB303_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB303_389
.LBB303_388:                            # %cond.false2599
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-64(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB303_389:                            # %cond.end2603
                                        #   in Loop: Header=BB303_352 Depth=2
.LBB303_390:                            # %cond.end2605
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB303_392
.LBB303_391:                            # %if.else2611
                                        #   in Loop: Header=BB303_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB303_392:                            # %if.end2617
                                        #   in Loop: Header=BB303_352 Depth=2
	jmp	.LBB303_393
.LBB303_393:                            # %for.inc2618
                                        #   in Loop: Header=BB303_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB303_352
.LBB303_394:                            # %for.end2620
                                        #   in Loop: Header=BB303_350 Depth=1
	jmp	.LBB303_395
.LBB303_395:                            # %for.inc2621
                                        #   in Loop: Header=BB303_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_350
.LBB303_396:                            # %for.end2623
	jmp	.LBB303_397
.LBB303_397:                            # %if.end2624
	cmpl	$614566071, -72(%rbp)   # imm = 0x24A188B7
	jne	.LBB303_399
.LBB303_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_398
.Lfunc_end303:
	.size	compute_colocated.240, .Lfunc_end303-compute_colocated.240
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_short_term.241
	.type	reorder_short_term.241,@function
reorder_short_term.241:                 # @reorder_short_term.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1323620556, -44(%rbp)  # imm = 0x4EE4D8CC
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	get_short_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB304_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB304_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB304_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB304_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_1
.LBB304_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB304_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB304_13
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB304_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpq	$0, (%rax,%rcx,8)
	je	.LBB304_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB304_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB304_9
# %bb.8:                                # %lor.lhs.false
                                        #   in Loop: Header=BB304_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6364(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB304_10
.LBB304_9:                              # %if.then17
                                        #   in Loop: Header=BB304_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB304_10:                             # %if.end
                                        #   in Loop: Header=BB304_5 Depth=1
	jmp	.LBB304_11
.LBB304_11:                             # %if.end23
                                        #   in Loop: Header=BB304_5 Depth=1
	jmp	.LBB304_12
.LBB304_12:                             # %for.inc24
                                        #   in Loop: Header=BB304_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB304_5
.LBB304_13:                             # %for.end26
	cmpl	$1323620556, -44(%rbp)  # imm = 0x4EE4D8CC
	jne	.LBB304_15
.LBB304_14:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_15:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_14
.Lfunc_end304:
	.size	reorder_short_term.241, .Lfunc_end304-reorder_short_term.241
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.242
	.type	mm_unmark_short_term_for_reference.242,@function
mm_unmark_short_term_for_reference.242: # @mm_unmark_short_term_for_reference.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$652540421, -16(%rbp)   # imm = 0x26E4FA05
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB305_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB305_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB305_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB305_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB305_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB305_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB305_27
.LBB305_7:                              # %if.end
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_8
.LBB305_8:                              # %if.end13
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_24
.LBB305_9:                              # %if.else
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB305_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB305_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB305_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB305_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB305_14:                             # %if.end44
	jmp	.LBB305_27
.LBB305_15:                             # %if.end45
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_16
.LBB305_16:                             # %if.end46
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB305_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB305_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB305_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB305_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB305_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB305_21:                             # %if.end81
	jmp	.LBB305_27
.LBB305_22:                             # %if.end82
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_23
.LBB305_23:                             # %if.end83
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_24
.LBB305_24:                             # %if.end84
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_25
.LBB305_25:                             # %for.inc
                                        #   in Loop: Header=BB305_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB305_1
.LBB305_26:                             # %for.end.loopexit
	jmp	.LBB305_27
.LBB305_27:                             # %for.end
	cmpl	$652540421, -16(%rbp)   # imm = 0x26E4FA05
	jne	.LBB305_29
.LBB305_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_28
.Lfunc_end305:
	.size	mm_unmark_short_term_for_reference.242, .Lfunc_end305-mm_unmark_short_term_for_reference.242
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function get_smallest_poc.243
	.type	get_smallest_poc.243,@function
get_smallest_poc.243:                   # @get_smallest_poc.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$128434625, -20(%rbp)   # imm = 0x7A7C1C1
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	cmpl	$1, dpb+28
	jae	.LBB306_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.28, %rdi
	movl	$150, %esi
	callq	error
.LBB306_2:                              # %if.end
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-16(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB306_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB306_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB306_3 Depth=1
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	dpb, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jle	.LBB306_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB306_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 32(%rax)
	jne	.LBB306_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB306_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	36(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB306_7:                              # %if.end10
                                        #   in Loop: Header=BB306_3 Depth=1
	jmp	.LBB306_8
.LBB306_8:                              # %for.inc
                                        #   in Loop: Header=BB306_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB306_3
.LBB306_9:                              # %for.end
	cmpl	$128434625, -20(%rbp)   # imm = 0x7A7C1C1
	jne	.LBB306_11
.LBB306_10:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_11:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_10
.Lfunc_end306:
	.size	get_smallest_poc.243, .Lfunc_end306-get_smallest_poc.243
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.244  # -- Begin function fill_frame_num_gap.244
	.p2align	4, 0x90
	.type	fill_frame_num_gap.244,@function
fill_frame_num_gap.244:                 # @fill_frame_num_gap.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1630905164, -36(%rbp)  # imm = 0x6135A34C
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB307_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB307_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB307_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB307_1
.LBB307_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1630905164, -36(%rbp)  # imm = 0x6135A34C
	jne	.LBB307_5
.LBB307_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_4
.Lfunc_end307:
	.size	fill_frame_num_gap.244, .Lfunc_end307-fill_frame_num_gap.244
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mark_pic_long_term.245
	.type	mark_pic_long_term.245,@function
mark_pic_long_term.245:                 # @mark_pic_long_term.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$429644570, -20(%rbp)   # imm = 0x199BDB1A
	movq	%rdi, -32(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB308_11
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB308_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB308_10
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB308_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB308_8
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB308_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB308_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB308_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB308_7
# %bb.6:                                # %if.then10
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	$3, 8(%rax)
	jmp	.LBB308_39
.LBB308_7:                              # %if.end
                                        #   in Loop: Header=BB308_2 Depth=1
	jmp	.LBB308_8
.LBB308_8:                              # %if.end50
                                        #   in Loop: Header=BB308_2 Depth=1
	jmp	.LBB308_9
.LBB308_9:                              # %for.inc
                                        #   in Loop: Header=BB308_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_2
.LBB308_10:                             # %for.end
	movabsq	$.L.str.25, %rdi
	movb	$0, %al
	callq	printf
	jmp	.LBB308_39
.LBB308_11:                             # %if.else
	movq	-32(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB308_13
# %bb.12:                               # %if.then53
	movl	$1, -16(%rbp)
	movl	$0, -24(%rbp)
	jmp	.LBB308_14
.LBB308_13:                             # %if.else54
	movl	$0, -16(%rbp)
	movl	$1, -24(%rbp)
.LBB308_14:                             # %if.end55
	movl	$0, -4(%rbp)
.LBB308_15:                             # %for.cond56
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB308_38
# %bb.16:                               # %for.body58
                                        #   in Loop: Header=BB308_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB308_26
# %bb.17:                               # %if.then63
                                        #   in Loop: Header=BB308_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB308_25
# %bb.18:                               # %land.lhs.true69
                                        #   in Loop: Header=BB308_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB308_25
# %bb.19:                               # %if.then75
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB308_22
# %bb.20:                               # %land.lhs.true80
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB308_22
# %bb.21:                               # %if.then85
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB308_22:                             # %if.end87
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$1, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB308_24
# %bb.23:                               # %if.then110
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB308_24:                             # %if.end123
	jmp	.LBB308_39
.LBB308_25:                             # %if.end124
                                        #   in Loop: Header=BB308_15 Depth=1
	jmp	.LBB308_26
.LBB308_26:                             # %if.end125
                                        #   in Loop: Header=BB308_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB308_36
# %bb.27:                               # %if.then131
                                        #   in Loop: Header=BB308_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB308_35
# %bb.28:                               # %land.lhs.true137
                                        #   in Loop: Header=BB308_15 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-12(%rbp), %eax
	jne	.LBB308_35
# %bb.29:                               # %if.then143
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	je	.LBB308_32
# %bb.30:                               # %land.lhs.true148
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	28(%rax), %eax
	cmpl	-8(%rbp), %eax
	je	.LBB308_32
# %bb.31:                               # %if.then153
	movabsq	$.L.str.26, %rdi
	movb	$0, %al
	callq	printf
.LBB308_32:                             # %if.end155
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6372(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 28(%rcx)
	movl	-8(%rbp), %eax
	shll	$1, %eax
	addl	-16(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$1, 6376(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %ecx
	orl	$2, %ecx
	movl	%ecx, 8(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 8(%rax)
	jne	.LBB308_34
# %bb.33:                               # %if.then181
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$1, 6376(%rax)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6372(%rcx)
.LBB308_34:                             # %if.end194
	jmp	.LBB308_39
.LBB308_35:                             # %if.end195
                                        #   in Loop: Header=BB308_15 Depth=1
	jmp	.LBB308_36
.LBB308_36:                             # %if.end196
                                        #   in Loop: Header=BB308_15 Depth=1
	jmp	.LBB308_37
.LBB308_37:                             # %for.inc197
                                        #   in Loop: Header=BB308_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB308_15
.LBB308_38:                             # %for.end199
	movabsq	$.L.str.27, %rdi
	movb	$0, %al
	callq	printf
.LBB308_39:                             # %if.end201
	cmpl	$429644570, -20(%rbp)   # imm = 0x199BDB1A
	jne	.LBB308_41
.LBB308_40:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_40
.Lfunc_end308:
	.size	mark_pic_long_term.245, .Lfunc_end308-mark_pic_long_term.245
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.246  # -- Begin function fill_frame_num_gap.246
	.p2align	4, 0x90
	.type	fill_frame_num_gap.246,@function
fill_frame_num_gap.246:                 # @fill_frame_num_gap.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$987793867, -40(%rbp)   # imm = 0x3AE089CB
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB309_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB309_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB309_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB309_1
.LBB309_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$987793867, -40(%rbp)   # imm = 0x3AE089CB
	jne	.LBB309_5
.LBB309_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_4
.Lfunc_end309:
	.size	fill_frame_num_gap.246, .Lfunc_end309-fill_frame_num_gap.246
	.cfi_endproc
                                        # -- End function
	.globl	compute_colocated.247   # -- Begin function compute_colocated.247
	.p2align	4, 0x90
	.type	compute_colocated.247,@function
compute_colocated.247:                  # @compute_colocated.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$836209477, -72(%rbp)   # imm = 0x31D78B45
	movq	%rdi, -24(%rbp)
	movq	%rsi, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_2
# %bb.1:                                # %if.then
	movq	-40(%rbp), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-40(%rbp), %rax
	movq	40(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB310_11
.LBB310_2:                              # %if.else
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB310_10
# %bb.3:                                # %if.then6
	movq	img, %rax
	movl	28(%rax), %eax
	movq	-32(%rbp), %rcx
	cmpl	(%rcx), %eax
	je	.LBB310_9
# %bb.4:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$0, 6412(%rax)
	je	.LBB310_9
# %bb.5:                                # %if.then11
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB310_7
# %bb.6:                                # %if.then14
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6528(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
	jmp	.LBB310_8
.LBB310_7:                              # %if.else17
	movq	-40(%rbp), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movq	6536(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	%rax, -48(%rbp)
	movq	%rax, -56(%rbp)
.LBB310_8:                              # %if.end
	jmp	.LBB310_9
.LBB310_9:                              # %if.end20
	jmp	.LBB310_10
.LBB310_10:                             # %if.end21
	jmp	.LBB310_11
.LBB310_11:                             # %if.end22
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB310_13
# %bb.12:                               # %lor.lhs.false
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB310_29
.LBB310_13:                             # %if.then25
	movl	$0, -12(%rbp)
.LBB310_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_16 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_28
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB310_14 Depth=1
	movl	$0, -16(%rbp)
.LBB310_16:                             # %for.cond27
                                        #   Parent Loop BB310_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_26
# %bb.17:                               # %for.body30
                                        #   in Loop: Header=BB310_16 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_23
# %bb.18:                               # %land.lhs.true33
                                        #   in Loop: Header=BB310_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB310_23
# %bb.19:                               # %if.then38
                                        #   in Loop: Header=BB310_16 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-48(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-56(%rbp), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB310_21
# %bb.20:                               # %if.then46
                                        #   in Loop: Header=BB310_16 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB310_22
.LBB310_21:                             # %if.else160
                                        #   in Loop: Header=BB310_16 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB310_22:                             # %if.end283
                                        #   in Loop: Header=BB310_16 Depth=2
	jmp	.LBB310_24
.LBB310_23:                             # %if.else284
                                        #   in Loop: Header=BB310_16 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB310_24:                             # %if.end391
                                        #   in Loop: Header=BB310_16 Depth=2
	jmp	.LBB310_25
.LBB310_25:                             # %for.inc
                                        #   in Loop: Header=BB310_16 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_16
.LBB310_26:                             # %for.end
                                        #   in Loop: Header=BB310_14 Depth=1
	jmp	.LBB310_27
.LBB310_27:                             # %for.inc392
                                        #   in Loop: Header=BB310_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB310_14
.LBB310_28:                             # %for.end394
	jmp	.LBB310_29
.LBB310_29:                             # %if.end395
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB310_31
# %bb.30:                               # %lor.lhs.false398
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_241
.LBB310_31:                             # %if.then401
	movl	$0, -16(%rbp)
.LBB310_32:                             # %for.cond402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_34 Depth 2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_240
# %bb.33:                               # %for.body407
                                        #   in Loop: Header=BB310_32 Depth=1
	movl	$0, -12(%rbp)
.LBB310_34:                             # %for.cond408
                                        #   Parent Loop BB310_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_238
# %bb.35:                               # %for.body413
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB310_114
# %bb.36:                               # %if.then416
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_38
# %bb.37:                               # %cond.true
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_39
.LBB310_38:                             # %cond.false
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_39:                             # %cond.end
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_41
# %bb.40:                               # %cond.true425
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_42
.LBB310_41:                             # %cond.false427
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_42:                             # %cond.end429
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_44
# %bb.43:                               # %cond.true445
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_45
.LBB310_44:                             # %cond.false447
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_45:                             # %cond.end449
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_47
# %bb.46:                               # %cond.true455
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_48
.LBB310_47:                             # %cond.false457
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_48:                             # %cond.end459
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_50
# %bb.49:                               # %cond.true475
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_51
.LBB310_50:                             # %cond.false477
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_51:                             # %cond.end479
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_53
# %bb.52:                               # %cond.true485
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_54
.LBB310_53:                             # %cond.false487
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_54:                             # %cond.end489
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_56
# %bb.55:                               # %cond.true505
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_57
.LBB310_56:                             # %cond.false507
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_57:                             # %cond.end509
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_59
# %bb.58:                               # %cond.true515
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_60
.LBB310_59:                             # %cond.false517
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_60:                             # %cond.end519
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_62
# %bb.61:                               # %cond.true535
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_63
.LBB310_62:                             # %cond.false537
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_63:                             # %cond.end539
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_65
# %bb.64:                               # %cond.true545
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_66
.LBB310_65:                             # %cond.false547
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_66:                             # %cond.end549
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB310_68
# %bb.67:                               # %if.then556
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB310_81
.LBB310_68:                             # %if.else569
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_70
# %bb.69:                               # %cond.true574
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_71
.LBB310_70:                             # %cond.false576
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_71:                             # %cond.end578
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_73
# %bb.72:                               # %cond.true584
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_74
.LBB310_73:                             # %cond.false586
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_74:                             # %cond.end588
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_76
# %bb.75:                               # %cond.true602
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_77
.LBB310_76:                             # %cond.false604
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_77:                             # %cond.end606
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_79
# %bb.78:                               # %cond.true612
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_80
.LBB310_79:                             # %cond.false614
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_80:                             # %cond.end616
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB310_81:                             # %if.end626
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_83
# %bb.82:                               # %cond.true631
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_84
.LBB310_83:                             # %cond.false633
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_84:                             # %cond.end635
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_86
# %bb.85:                               # %cond.true641
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_87
.LBB310_86:                             # %cond.false643
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_87:                             # %cond.end645
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB310_89
# %bb.88:                               # %if.then652
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	$-1, (%rax,%rcx,8)
	jmp	.LBB310_102
.LBB310_89:                             # %if.else665
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_91
# %bb.90:                               # %cond.true670
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_92
.LBB310_91:                             # %cond.false672
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_92:                             # %cond.end674
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_94
# %bb.93:                               # %cond.true680
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_95
.LBB310_94:                             # %cond.false682
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_95:                             # %cond.end684
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_97
# %bb.96:                               # %cond.true698
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_98
.LBB310_97:                             # %cond.false700
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_98:                             # %cond.end702
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_100
# %bb.99:                               # %cond.true708
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_101
.LBB310_100:                            # %cond.false710
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_101:                            # %cond.end712
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB310_102:                            # %if.end722
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB310_113
# %bb.103:                              # %if.then727
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB310_107
# %bb.104:                              # %land.lhs.true730
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_107
# %bb.105:                              # %land.lhs.true740
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_107
# %bb.106:                              # %land.lhs.true752
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB310_112
.LBB310_107:                            # %lor.rhs
                                        #   in Loop: Header=BB310_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB310_111
# %bb.108:                              # %land.lhs.true774
                                        #   in Loop: Header=BB310_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_111
# %bb.109:                              # %land.lhs.true784
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_111
# %bb.110:                              # %land.rhs
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB310_111:                            # %land.end
                                        #   in Loop: Header=BB310_34 Depth=2
.LBB310_112:                            # %lor.end
                                        #   in Loop: Header=BB310_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB310_113:                            # %if.end814
                                        #   in Loop: Header=BB310_34 Depth=2
	jmp	.LBB310_236
.LBB310_114:                            # %if.else815
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_116
# %bb.115:                              # %cond.true820
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_117
.LBB310_116:                            # %cond.false822
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_117:                            # %cond.end824
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_119
# %bb.118:                              # %cond.true830
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_120
.LBB310_119:                            # %cond.false832
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_120:                            # %cond.end834
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_122
# %bb.121:                              # %cond.true849
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_123
.LBB310_122:                            # %cond.false851
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_123:                            # %cond.end853
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_125
# %bb.124:                              # %cond.true859
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_126
.LBB310_125:                            # %cond.false861
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_126:                            # %cond.end863
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_128
# %bb.127:                              # %cond.true879
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_129
.LBB310_128:                            # %cond.false881
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_129:                            # %cond.end883
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_131
# %bb.130:                              # %cond.true889
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_132
.LBB310_131:                            # %cond.false891
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_132:                            # %cond.end893
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_134
# %bb.133:                              # %cond.true909
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_135
.LBB310_134:                            # %cond.false911
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_135:                            # %cond.end913
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_137
# %bb.136:                              # %cond.true919
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_138
.LBB310_137:                            # %cond.false921
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_138:                            # %cond.end923
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	4848(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_140
# %bb.139:                              # %cond.true939
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_141
.LBB310_140:                            # %cond.false941
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_141:                            # %cond.end943
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_143
# %bb.142:                              # %cond.true949
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_144
.LBB310_143:                            # %cond.false951
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_144:                            # %cond.end953
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_146
# %bb.145:                              # %cond.true966
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_147
.LBB310_146:                            # %cond.false968
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_147:                            # %cond.end970
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_149
# %bb.148:                              # %cond.true976
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_150
.LBB310_149:                            # %cond.false978
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_150:                            # %cond.end980
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	4832(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_152
# %bb.151:                              # %cond.true994
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_153
.LBB310_152:                            # %cond.false996
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_153:                            # %cond.end998
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_155
# %bb.154:                              # %cond.true1004
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_156
.LBB310_155:                            # %cond.false1006
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_156:                            # %cond.end1008
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-48(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_158
# %bb.157:                              # %cond.true1021
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_159
.LBB310_158:                            # %cond.false1023
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_159:                            # %cond.end1025
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_161
# %bb.160:                              # %cond.true1031
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_162
.LBB310_161:                            # %cond.false1033
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_162:                            # %cond.end1035
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	4840(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB310_173
# %bb.163:                              # %if.then1048
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB310_167
# %bb.164:                              # %land.lhs.true1051
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_167
# %bb.165:                              # %land.lhs.true1061
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_167
# %bb.166:                              # %land.lhs.true1074
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB310_172
.LBB310_167:                            # %lor.rhs1087
                                        #   in Loop: Header=BB310_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB310_171
# %bb.168:                              # %land.lhs.true1097
                                        #   in Loop: Header=BB310_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	4832(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_171
# %bb.169:                              # %land.lhs.true1107
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_171
# %bb.170:                              # %land.rhs1120
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB310_171:                            # %land.end1133
                                        #   in Loop: Header=BB310_34 Depth=2
.LBB310_172:                            # %lor.end1134
                                        #   in Loop: Header=BB310_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	4856(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB310_173:                            # %if.end1142
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_175
# %bb.174:                              # %cond.true1147
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_176
.LBB310_175:                            # %cond.false1149
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_176:                            # %cond.end1151
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_178
# %bb.177:                              # %cond.true1157
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_179
.LBB310_178:                            # %cond.false1159
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_179:                            # %cond.end1161
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_181
# %bb.180:                              # %cond.true1176
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_182
.LBB310_181:                            # %cond.false1178
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_182:                            # %cond.end1180
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_184
# %bb.183:                              # %cond.true1186
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_185
.LBB310_184:                            # %cond.false1188
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_185:                            # %cond.end1190
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_187
# %bb.186:                              # %cond.true1206
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_188
.LBB310_187:                            # %cond.false1208
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_188:                            # %cond.end1210
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_190
# %bb.189:                              # %cond.true1216
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_191
.LBB310_190:                            # %cond.false1218
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_191:                            # %cond.end1220
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_193
# %bb.192:                              # %cond.true1236
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_194
.LBB310_193:                            # %cond.false1238
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_194:                            # %cond.end1240
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_196
# %bb.195:                              # %cond.true1246
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_197
.LBB310_196:                            # %cond.false1248
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_197:                            # %cond.end1250
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	3232(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_199
# %bb.198:                              # %cond.true1266
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_200
.LBB310_199:                            # %cond.false1268
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_200:                            # %cond.end1270
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_202
# %bb.201:                              # %cond.true1276
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_203
.LBB310_202:                            # %cond.false1278
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_203:                            # %cond.end1280
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_205
# %bb.204:                              # %cond.true1293
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_206
.LBB310_205:                            # %cond.false1295
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_206:                            # %cond.end1297
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_208
# %bb.207:                              # %cond.true1303
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_209
.LBB310_208:                            # %cond.false1305
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_209:                            # %cond.end1307
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	3216(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_211
# %bb.210:                              # %cond.true1321
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_212
.LBB310_211:                            # %cond.false1323
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_212:                            # %cond.end1325
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_214
# %bb.213:                              # %cond.true1331
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_215
.LBB310_214:                            # %cond.false1333
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_215:                            # %cond.end1335
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-56(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_217
# %bb.216:                              # %cond.true1348
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_218
.LBB310_217:                            # %cond.false1350
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_218:                            # %cond.end1352
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_220
# %bb.219:                              # %cond.true1358
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_221
.LBB310_220:                            # %cond.false1360
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_221:                            # %cond.end1362
                                        #   in Loop: Header=BB310_34 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	3224(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB310_232
# %bb.222:                              # %if.then1375
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-56(%rbp), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB310_226
# %bb.223:                              # %land.lhs.true1378
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_226
# %bb.224:                              # %land.lhs.true1388
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_226
# %bb.225:                              # %land.lhs.true1401
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB310_231
.LBB310_226:                            # %lor.rhs1414
                                        #   in Loop: Header=BB310_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB310_230
# %bb.227:                              # %land.lhs.true1424
                                        #   in Loop: Header=BB310_34 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	3216(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_230
# %bb.228:                              # %land.lhs.true1434
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_230
# %bb.229:                              # %land.rhs1447
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB310_230:                            # %land.end1460
                                        #   in Loop: Header=BB310_34 Depth=2
.LBB310_231:                            # %lor.end1461
                                        #   in Loop: Header=BB310_34 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	3240(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB310_232:                            # %if.end1469
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB310_235
# %bb.233:                              # %land.lhs.true1473
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB310_235
# %bb.234:                              # %if.then1481
                                        #   in Loop: Header=BB310_34 Depth=2
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	3232(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
	movq	-24(%rbp), %rax
	movq	4848(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movq	(%rax,%rdx,8), %rsi
	movswl	2(%rsi), %eax
	cltd
	idivl	%ecx
	movw	%ax, 2(%rsi)
.LBB310_235:                            # %if.end1522
                                        #   in Loop: Header=BB310_34 Depth=2
	jmp	.LBB310_236
.LBB310_236:                            # %if.end1523
                                        #   in Loop: Header=BB310_34 Depth=2
	jmp	.LBB310_237
.LBB310_237:                            # %for.inc1524
                                        #   in Loop: Header=BB310_34 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB310_34
.LBB310_238:                            # %for.end1526
                                        #   in Loop: Header=BB310_32 Depth=1
	jmp	.LBB310_239
.LBB310_239:                            # %for.inc1527
                                        #   in Loop: Header=BB310_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_32
.LBB310_240:                            # %for.end1529
	jmp	.LBB310_241
.LBB310_241:                            # %if.end1530
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB310_243
# %bb.242:                              # %lor.lhs.false1533
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB310_259
.LBB310_243:                            # %if.then1536
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB310_258
# %bb.244:                              # %if.then1539
	movl	$0, -12(%rbp)
.LBB310_245:                            # %for.cond1540
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_247 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_257
# %bb.246:                              # %for.body1545
                                        #   in Loop: Header=BB310_245 Depth=1
	movl	$0, -16(%rbp)
.LBB310_247:                            # %for.cond1546
                                        #   Parent Loop BB310_245 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_255
# %bb.248:                              # %for.body1551
                                        #   in Loop: Header=BB310_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB310_253
# %bb.249:                              # %if.then1558
                                        #   in Loop: Header=BB310_247 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	movl	%eax, %ebx
	movq	enc_picture, %rax
	movl	4(%rax), %edi
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	subl	4(%rax), %edi
	callq	abs
	cmpl	%eax, %ebx
	jle	.LBB310_251
# %bb.250:                              # %if.then1571
                                        #   in Loop: Header=BB310_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6528(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	jmp	.LBB310_252
.LBB310_251:                            # %if.else1699
                                        #   in Loop: Header=BB310_247 Depth=2
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rcx,%rax,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$8, %ebx
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	shll	$2, %eax
	addl	%eax, %ecx
	addl	$4, %ecx
	movslq	%ecx, %rax
	movq	(%rdi,%rax,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6536(%rax), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
.LBB310_252:                            # %if.end1829
                                        #   in Loop: Header=BB310_247 Depth=2
	jmp	.LBB310_253
.LBB310_253:                            # %if.end1830
                                        #   in Loop: Header=BB310_247 Depth=2
	jmp	.LBB310_254
.LBB310_254:                            # %for.inc1831
                                        #   in Loop: Header=BB310_247 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_247
.LBB310_255:                            # %for.end1833
                                        #   in Loop: Header=BB310_245 Depth=1
	jmp	.LBB310_256
.LBB310_256:                            # %for.inc1834
                                        #   in Loop: Header=BB310_245 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB310_245
.LBB310_257:                            # %for.end1836
	jmp	.LBB310_258
.LBB310_258:                            # %if.end1837
	jmp	.LBB310_259
.LBB310_259:                            # %if.end1838
	movl	$0, -12(%rbp)
.LBB310_260:                            # %for.cond1839
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_262 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_330
# %bb.261:                              # %for.body1844
                                        #   in Loop: Header=BB310_260 Depth=1
	movl	$0, -16(%rbp)
.LBB310_262:                            # %for.cond1845
                                        #   Parent Loop BB310_260 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_328
# %bb.263:                              # %for.body1850
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB310_265
# %bb.264:                              # %lor.lhs.false1853
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB310_314
.LBB310_265:                            # %if.then1856
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_267
# %bb.266:                              # %cond.true1861
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_268
.LBB310_267:                            # %cond.false1863
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_268:                            # %cond.end1865
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_270
# %bb.269:                              # %cond.true1871
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_271
.LBB310_270:                            # %cond.false1873
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_271:                            # %cond.end1875
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_273
# %bb.272:                              # %cond.true1891
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_274
.LBB310_273:                            # %cond.false1893
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_274:                            # %cond.end1895
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_276
# %bb.275:                              # %cond.true1901
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_277
.LBB310_276:                            # %cond.false1903
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_277:                            # %cond.end1905
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_279
# %bb.278:                              # %cond.true1921
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_280
.LBB310_279:                            # %cond.false1923
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_280:                            # %cond.end1925
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_282
# %bb.281:                              # %cond.true1931
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_283
.LBB310_282:                            # %cond.false1933
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_283:                            # %cond.end1935
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_285
# %bb.284:                              # %cond.true1951
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_286
.LBB310_285:                            # %cond.false1953
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_286:                            # %cond.end1955
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_288
# %bb.287:                              # %cond.true1961
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_289
.LBB310_288:                            # %cond.false1963
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_289:                            # %cond.end1965
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_291
# %bb.290:                              # %cond.true1981
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_292
.LBB310_291:                            # %cond.false1983
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_292:                            # %cond.end1985
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_294
# %bb.293:                              # %cond.true1991
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_295
.LBB310_294:                            # %cond.false1993
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_295:                            # %cond.end1995
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_297
# %bb.296:                              # %cond.true2009
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_298
.LBB310_297:                            # %cond.false2011
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_298:                            # %cond.end2013
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_300
# %bb.299:                              # %cond.true2019
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_301
.LBB310_300:                            # %cond.false2021
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_301:                            # %cond.end2023
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_303
# %bb.302:                              # %cond.true2037
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_304
.LBB310_303:                            # %cond.false2039
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_304:                            # %cond.end2041
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_306
# %bb.305:                              # %cond.true2047
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_307
.LBB310_306:                            # %cond.false2049
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_307:                            # %cond.end2051
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-24(%rbp), %rax
	movq	1608(%rax), %rax
	movq	8(%rax), %rax
	movl	-16(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_309
# %bb.308:                              # %cond.true2065
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_310
.LBB310_309:                            # %cond.false2067
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_310:                            # %cond.end2069
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	andl	$2, %ecx
	cmpl	$0, %ecx
	je	.LBB310_312
# %bb.311:                              # %cond.true2075
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	orl	$1, %ecx
	jmp	.LBB310_313
.LBB310_312:                            # %cond.false2077
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-12(%rbp), %ecx
	andl	$-2, %ecx
.LBB310_313:                            # %cond.end2079
                                        #   in Loop: Header=BB310_262 Depth=2
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB310_315
.LBB310_314:                            # %if.else2089
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	-24(%rbp), %rcx
	movq	1616(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-24(%rbp), %rcx
	movq	1600(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-32(%rbp), %rax
	movq	6496(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-24(%rbp), %rcx
	movq	1608(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB310_315:                            # %if.end2194
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-32(%rbp), %rax
	movl	6376(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4864(%rcx)
	movq	img, %rax
	cmpl	$1, 71996(%rax)
	jne	.LBB310_326
# %bb.316:                              # %if.then2200
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 4864(%rax)
	jne	.LBB310_320
# %bb.317:                              # %land.lhs.true2203
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_320
# %bb.318:                              # %land.lhs.true2213
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_320
# %bb.319:                              # %land.lhs.true2226
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	movb	$1, %cl
	je	.LBB310_325
.LBB310_320:                            # %lor.rhs2239
                                        #   in Loop: Header=BB310_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$-1, %eax
	jne	.LBB310_324
# %bb.321:                              # %land.lhs.true2249
                                        #   in Loop: Header=BB310_262 Depth=2
	xorl	%ecx, %ecx
	movq	-24(%rbp), %rax
	movq	1600(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-12(%rbp), %rdx
	movswl	(%rax,%rdx,2), %eax
	cmpl	$0, %eax
	jne	.LBB310_324
# %bb.322:                              # %land.lhs.true2259
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %edi
	callq	abs
	xorl	%ecx, %ecx
	sarl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB310_324
# %bb.323:                              # %land.rhs2272
                                        #   in Loop: Header=BB310_262 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %edi
	callq	abs
	sarl	$1, %eax
	cmpl	$0, %eax
	sete	%cl
.LBB310_324:                            # %land.end2285
                                        #   in Loop: Header=BB310_262 Depth=2
.LBB310_325:                            # %lor.end2286
                                        #   in Loop: Header=BB310_262 Depth=2
	xorb	$-1, %cl
	andb	$1, %cl
	movzbl	%cl, %eax
	movq	-24(%rbp), %rcx
	movq	1624(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
.LBB310_326:                            # %if.end2295
                                        #   in Loop: Header=BB310_262 Depth=2
	jmp	.LBB310_327
.LBB310_327:                            # %for.inc2296
                                        #   in Loop: Header=BB310_262 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_262
.LBB310_328:                            # %for.end2298
                                        #   in Loop: Header=BB310_260 Depth=1
	jmp	.LBB310_329
.LBB310_329:                            # %for.inc2299
                                        #   in Loop: Header=BB310_260 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB310_260
.LBB310_330:                            # %for.end2301
	movq	img, %rax
	cmpl	$0, 71996(%rax)
	jne	.LBB310_397
# %bb.331:                              # %if.then2305
	movl	$0, -12(%rbp)
.LBB310_332:                            # %for.cond2306
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_334 Depth 2
	movl	-12(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6396(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_349
# %bb.333:                              # %for.body2311
                                        #   in Loop: Header=BB310_332 Depth=1
	movl	$0, -16(%rbp)
.LBB310_334:                            # %for.cond2312
                                        #   Parent Loop BB310_332 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %ecx
	movq	-32(%rbp), %rax
	movl	6392(%rax), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB310_347
# %bb.335:                              # %for.body2317
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB310_338
# %bb.336:                              # %land.lhs.true2320
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB310_338
# %bb.337:                              # %land.lhs.true2323
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB310_340
.LBB310_338:                            # %lor.lhs.false2331
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB310_341
# %bb.339:                              # %land.lhs.true2334
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	je	.LBB310_341
.LBB310_340:                            # %if.then2342
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %ecx
	shll	$1, %ecx
	movw	%cx, 2(%rax)
	jmp	.LBB310_345
.LBB310_341:                            # %if.else2363
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB310_344
# %bb.342:                              # %land.lhs.true2366
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	-32(%rbp), %rax
	movq	6520(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	jne	.LBB310_344
# %bb.343:                              # %if.then2373
                                        #   in Loop: Header=BB310_334 Depth=2
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movw	%ax, 2(%rcx)
	movq	-24(%rbp), %rax
	movq	1616(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movswl	2(%rcx), %eax
	cltd
	idivl	%esi
	movw	%ax, 2(%rcx)
.LBB310_344:                            # %if.end2394
                                        #   in Loop: Header=BB310_334 Depth=2
	jmp	.LBB310_345
.LBB310_345:                            # %if.end2395
                                        #   in Loop: Header=BB310_334 Depth=2
	jmp	.LBB310_346
.LBB310_346:                            # %for.inc2396
                                        #   in Loop: Header=BB310_334 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_334
.LBB310_347:                            # %for.end2398
                                        #   in Loop: Header=BB310_332 Depth=1
	jmp	.LBB310_348
.LBB310_348:                            # %for.inc2399
                                        #   in Loop: Header=BB310_332 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB310_332
.LBB310_349:                            # %for.end2401
	movl	$0, -12(%rbp)
.LBB310_350:                            # %for.cond2402
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB310_352 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	72400(%rcx), %ecx
	shll	$2, %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB310_396
# %bb.351:                              # %for.body2408
                                        #   in Loop: Header=BB310_350 Depth=1
	movl	$0, -16(%rbp)
.LBB310_352:                            # %for.cond2409
                                        #   Parent Loop BB310_350 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movslq	-12(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB310_394
# %bb.353:                              # %for.body2414
                                        #   in Loop: Header=BB310_352 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB310_361
# %bb.354:                              # %if.then2417
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB310_356
# %bb.355:                              # %cond.true2428
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB310_360
.LBB310_356:                            # %cond.false2429
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB310_358
# %bb.357:                              # %cond.true2440
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$127, %eax
	jmp	.LBB310_359
.LBB310_358:                            # %cond.false2441
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB310_359:                            # %cond.end2450
                                        #   in Loop: Header=BB310_352 Depth=2
.LBB310_360:                            # %cond.end2452
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB310_377
.LBB310_361:                            # %if.else2454
                                        #   in Loop: Header=BB310_352 Depth=2
	cmpl	$2, -12(%rbp)
	jne	.LBB310_369
# %bb.362:                              # %if.then2457
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB310_364
# %bb.363:                              # %cond.true2467
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB310_368
.LBB310_364:                            # %cond.false2468
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB310_366
# %bb.365:                              # %cond.true2479
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$127, %eax
	jmp	.LBB310_367
.LBB310_366:                            # %cond.false2480
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	8(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB310_367:                            # %cond.end2489
                                        #   in Loop: Header=BB310_352 Depth=2
.LBB310_368:                            # %cond.end2491
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	%eax, -60(%rbp)
	jmp	.LBB310_376
.LBB310_369:                            # %if.else2493
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB310_371
# %bb.370:                              # %cond.true2503
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB310_375
.LBB310_371:                            # %cond.false2504
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB310_373
# %bb.372:                              # %cond.true2515
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$127, %eax
	jmp	.LBB310_374
.LBB310_373:                            # %cond.false2516
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	enc_picture, %rax
	movl	12(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB310_374:                            # %cond.end2525
                                        #   in Loop: Header=BB310_352 Depth=2
.LBB310_375:                            # %cond.end2527
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	%eax, -60(%rbp)
.LBB310_376:                            # %if.end2529
                                        #   in Loop: Header=BB310_352 Depth=2
	jmp	.LBB310_377
.LBB310_377:                            # %if.end2530
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$-128, %eax
	jge	.LBB310_379
# %bb.378:                              # %cond.true2545
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$4294967168, %eax       # imm = 0xFFFFFF80
	jmp	.LBB310_383
.LBB310_379:                            # %cond.false2546
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
	cmpl	$127, %eax
	jle	.LBB310_381
# %bb.380:                              # %cond.true2561
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$127, %eax
	jmp	.LBB310_382
.LBB310_381:                            # %cond.false2562
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	-40(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movl	4(%rax), %eax
	movq	-40(%rbp), %rcx
	movl	-12(%rbp), %edx
	addl	$0, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	subl	4(%rcx), %eax
.LBB310_382:                            # %cond.end2575
                                        #   in Loop: Header=BB310_352 Depth=2
.LBB310_383:                            # %cond.end2577
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	%eax, -64(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB310_391
# %bb.384:                              # %if.then2581
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, %edi
	callq	abs
	addl	$16384, %eax            # imm = 0x4000
	cltd
	idivl	-64(%rbp)
	movl	%eax, -68(%rbp)
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$-1024, %eax            # imm = 0xFC00
	jge	.LBB310_386
# %bb.385:                              # %cond.true2591
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$4294966272, %eax       # imm = 0xFFFFFC00
	jmp	.LBB310_390
.LBB310_386:                            # %cond.false2592
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
	cmpl	$1023, %eax             # imm = 0x3FF
	jle	.LBB310_388
# %bb.387:                              # %cond.true2598
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	$1023, %eax             # imm = 0x3FF
	jmp	.LBB310_389
.LBB310_388:                            # %cond.false2599
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	-60(%rbp), %eax
	imull	-68(%rbp), %eax
	addl	$32, %eax
	sarl	$6, %eax
.LBB310_389:                            # %cond.end2603
                                        #   in Loop: Header=BB310_352 Depth=2
.LBB310_390:                            # %cond.end2605
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	img, %rcx
	addq	$72016, %rcx            # imm = 0x11950
	movslq	-12(%rbp), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB310_392
.LBB310_391:                            # %if.else2611
                                        #   in Loop: Header=BB310_352 Depth=2
	movq	img, %rax
	addq	$72016, %rax            # imm = 0x11950
	movslq	-12(%rbp), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$9999, (%rax,%rcx,4)    # imm = 0x270F
.LBB310_392:                            # %if.end2617
                                        #   in Loop: Header=BB310_352 Depth=2
	jmp	.LBB310_393
.LBB310_393:                            # %for.inc2618
                                        #   in Loop: Header=BB310_352 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB310_352
.LBB310_394:                            # %for.end2620
                                        #   in Loop: Header=BB310_350 Depth=1
	jmp	.LBB310_395
.LBB310_395:                            # %for.inc2621
                                        #   in Loop: Header=BB310_350 Depth=1
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB310_350
.LBB310_396:                            # %for.end2623
	jmp	.LBB310_397
.LBB310_397:                            # %if.end2624
	cmpl	$836209477, -72(%rbp)   # imm = 0x31D78B45
	jne	.LBB310_399
.LBB310_398:
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_399:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_398
.Lfunc_end310:
	.size	compute_colocated.247, .Lfunc_end310-compute_colocated.247
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.248 # -- Begin function replace_top_pic_with_frame.248
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.248,@function
replace_top_pic_with_frame.248:         # @replace_top_pic_with_frame.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2105671685, -32(%rbp)  # imm = 0x7D820005
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB311_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB311_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB311_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB311_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB311_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB311_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB311_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB311_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB311_10
.LBB311_7:                              # %if.end14
                                        #   in Loop: Header=BB311_3 Depth=1
	jmp	.LBB311_8
.LBB311_8:                              # %for.inc
                                        #   in Loop: Header=BB311_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB311_3
.LBB311_9:                              # %for.end.loopexit
	jmp	.LBB311_10
.LBB311_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB311_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB311_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB311_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB311_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB311_15:                             # %if.end26
	jmp	.LBB311_16
.LBB311_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$2105671685, -32(%rbp)  # imm = 0x7D820005
	jne	.LBB311_18
.LBB311_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_17
.Lfunc_end311:
	.size	replace_top_pic_with_frame.248, .Lfunc_end311-replace_top_pic_with_frame.248
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.249
	.type	mm_unmark_short_term_for_reference.249,@function
mm_unmark_short_term_for_reference.249: # @mm_unmark_short_term_for_reference.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1526052614, -16(%rbp)  # imm = 0x5AF5B706
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB312_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB312_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB312_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB312_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB312_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB312_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB312_27
.LBB312_7:                              # %if.end
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_8
.LBB312_8:                              # %if.end13
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_24
.LBB312_9:                              # %if.else
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB312_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB312_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB312_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB312_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB312_14:                             # %if.end44
	jmp	.LBB312_27
.LBB312_15:                             # %if.end45
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_16
.LBB312_16:                             # %if.end46
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB312_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB312_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB312_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB312_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB312_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB312_21:                             # %if.end81
	jmp	.LBB312_27
.LBB312_22:                             # %if.end82
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_23
.LBB312_23:                             # %if.end83
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_24
.LBB312_24:                             # %if.end84
                                        #   in Loop: Header=BB312_1 Depth=1
	jmp	.LBB312_25
.LBB312_25:                             # %for.inc
                                        #   in Loop: Header=BB312_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB312_1
.LBB312_26:                             # %for.end.loopexit
	jmp	.LBB312_27
.LBB312_27:                             # %for.end
	cmpl	$1526052614, -16(%rbp)  # imm = 0x5AF5B706
	jne	.LBB312_29
.LBB312_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_28
.Lfunc_end312:
	.size	mm_unmark_short_term_for_reference.249, .Lfunc_end312-mm_unmark_short_term_for_reference.249
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.250 # -- Begin function reorder_ref_pic_list.250
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.250,@function
reorder_ref_pic_list.250:               # @reorder_ref_pic_list.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1181430691, -60(%rbp)  # imm = 0x466B33A3
	movq	%rdi, -72(%rbp)
	movq	%rsi, -80(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -88(%rbp)
	movl	$0, -44(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB313_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB313_3
.LBB313_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB313_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB313_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB313_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB313_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB313_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB313_7:                              # %if.end9
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB313_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB313_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB313_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_12
.LBB313_11:                             # %if.else28
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB313_12:                             # %if.end33
                                        #   in Loop: Header=BB313_4 Depth=1
	jmp	.LBB313_17
.LBB313_13:                             # %if.else34
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB313_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB313_16
.LBB313_15:                             # %if.else46
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB313_16:                             # %if.end51
                                        #   in Loop: Header=BB313_4 Depth=1
	jmp	.LBB313_17
.LBB313_17:                             # %if.end52
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB313_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB313_20
.LBB313_19:                             # %if.else56
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB313_20:                             # %if.end57
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-36(%rbp), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB313_22
.LBB313_21:                             # %if.else58
                                        #   in Loop: Header=BB313_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-88(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-44(%rbp), %rcx
	callq	reorder_long_term
.LBB313_22:                             # %if.end61
                                        #   in Loop: Header=BB313_4 Depth=1
	jmp	.LBB313_23
.LBB313_23:                             # %for.inc
                                        #   in Loop: Header=BB313_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB313_4
.LBB313_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-80(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1181430691, -60(%rbp)  # imm = 0x466B33A3
	jne	.LBB313_26
.LBB313_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_25
.Lfunc_end313:
	.size	reorder_ref_pic_list.250, .Lfunc_end313-reorder_ref_pic_list.250
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.251 # -- Begin function reorder_ref_pic_list.251
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.251,@function
reorder_ref_pic_list.251:               # @reorder_ref_pic_list.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$615054726, -60(%rbp)   # imm = 0x24A8FD86
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -40(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB314_2
# %bb.1:                                # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB314_3
.LBB314_2:                              # %if.else
	movl	-36(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB314_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB314_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB314_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB314_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB314_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB314_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB314_7:                              # %if.end9
                                        #   in Loop: Header=BB314_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB314_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB314_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB314_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB314_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_12
.LBB314_11:                             # %if.else28
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB314_12:                             # %if.end33
                                        #   in Loop: Header=BB314_4 Depth=1
	jmp	.LBB314_17
.LBB314_13:                             # %if.else34
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB314_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB314_16
.LBB314_15:                             # %if.else46
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
.LBB314_16:                             # %if.end51
                                        #   in Loop: Header=BB314_4 Depth=1
	jmp	.LBB314_17
.LBB314_17:                             # %if.end52
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB314_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB314_20
.LBB314_19:                             # %if.else56
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-8(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB314_20:                             # %if.end57
                                        #   in Loop: Header=BB314_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB314_22
.LBB314_21:                             # %if.else58
                                        #   in Loop: Header=BB314_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-40(%rbp), %rcx
	callq	reorder_long_term
.LBB314_22:                             # %if.end61
                                        #   in Loop: Header=BB314_4 Depth=1
	jmp	.LBB314_23
.LBB314_23:                             # %for.inc
                                        #   in Loop: Header=BB314_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB314_4
.LBB314_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$615054726, -60(%rbp)   # imm = 0x24A8FD86
	jne	.LBB314_26
.LBB314_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_25
.Lfunc_end314:
	.size	reorder_ref_pic_list.251, .Lfunc_end314-reorder_ref_pic_list.251
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.252  # -- Begin function fill_frame_num_gap.252
	.p2align	4, 0x90
	.type	fill_frame_num_gap.252,@function
fill_frame_num_gap.252:                 # @fill_frame_num_gap.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1243098255, -36(%rbp)  # imm = 0x4A182C8F
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -40(%rbp)
.LBB315_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB315_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB315_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB315_1
.LBB315_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1243098255, -36(%rbp)  # imm = 0x4A182C8F
	jne	.LBB315_5
.LBB315_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_4
.Lfunc_end315:
	.size	fill_frame_num_gap.252, .Lfunc_end315-fill_frame_num_gap.252
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.253
	.type	mm_unmark_short_term_for_reference.253,@function
mm_unmark_short_term_for_reference.253: # @mm_unmark_short_term_for_reference.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$928761114, -16(%rbp)   # imm = 0x375BC51A
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB316_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB316_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB316_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB316_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB316_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB316_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB316_27
.LBB316_7:                              # %if.end
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_8
.LBB316_8:                              # %if.end13
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_24
.LBB316_9:                              # %if.else
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB316_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB316_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB316_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB316_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB316_14:                             # %if.end44
	jmp	.LBB316_27
.LBB316_15:                             # %if.end45
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_16
.LBB316_16:                             # %if.end46
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB316_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB316_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB316_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB316_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB316_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB316_21:                             # %if.end81
	jmp	.LBB316_27
.LBB316_22:                             # %if.end82
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_23
.LBB316_23:                             # %if.end83
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_24
.LBB316_24:                             # %if.end84
                                        #   in Loop: Header=BB316_1 Depth=1
	jmp	.LBB316_25
.LBB316_25:                             # %for.inc
                                        #   in Loop: Header=BB316_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_1
.LBB316_26:                             # %for.end.loopexit
	jmp	.LBB316_27
.LBB316_27:                             # %for.end
	cmpl	$928761114, -16(%rbp)   # imm = 0x375BC51A
	jne	.LBB316_29
.LBB316_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_28
.Lfunc_end316:
	.size	mm_unmark_short_term_for_reference.253, .Lfunc_end316-mm_unmark_short_term_for_reference.253
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.254
	.type	reorder_long_term.254,@function
reorder_long_term.254:                  # @reorder_long_term.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$381528989, -44(%rbp)   # imm = 0x16BDAB9D
	movq	%rdi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB317_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB317_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB317_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB317_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_1
.LBB317_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB317_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB317_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB317_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB317_9
.LBB317_8:                              # %if.then
                                        #   in Loop: Header=BB317_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB317_9:                              # %if.end
                                        #   in Loop: Header=BB317_5 Depth=1
	jmp	.LBB317_10
.LBB317_10:                             # %for.inc19
                                        #   in Loop: Header=BB317_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB317_5
.LBB317_11:                             # %for.end21
	cmpl	$381528989, -44(%rbp)   # imm = 0x16BDAB9D
	jne	.LBB317_13
.LBB317_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_12
.Lfunc_end317:
	.size	reorder_long_term.254, .Lfunc_end317-reorder_long_term.254
	.cfi_endproc
                                        # -- End function
	.globl	reorder_ref_pic_list.255 # -- Begin function reorder_ref_pic_list.255
	.p2align	4, 0x90
	.type	reorder_ref_pic_list.255,@function
reorder_ref_pic_list.255:               # @reorder_ref_pic_list.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$430792359, -60(%rbp)   # imm = 0x19AD5EA7
	movq	%rdi, -72(%rbp)
	movq	%rsi, -88(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB318_2
# %bb.1:                                # %if.then
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_3
.LBB318_2:                              # %if.else
	movl	-40(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	72464(%rax), %eax
	shll	$1, %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB318_3:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB318_4:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	je	.LBB318_24
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB318_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$3, (%rax,%rcx,4)
	jle	.LBB318_7
# %bb.6:                                # %if.then8
                                        #   in Loop: Header=BB318_4 Depth=1
	movabsq	$.L.str.12, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB318_7:                              # %if.end9
                                        #   in Loop: Header=BB318_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$2, (%rax,%rcx,4)
	jge	.LBB318_21
# %bb.8:                                # %if.then13
                                        #   in Loop: Header=BB318_4 Depth=1
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, (%rax,%rcx,4)
	jne	.LBB318_13
# %bb.9:                                # %if.then17
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	cmpl	$0, %eax
	jge	.LBB318_11
# %bb.10:                               # %if.then22
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_12
.LBB318_11:                             # %if.else28
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	subl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB318_12:                             # %if.end33
                                        #   in Loop: Header=BB318_4 Depth=1
	jmp	.LBB318_17
.LBB318_13:                             # %if.else34
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	cmpl	-16(%rbp), %eax
	jl	.LBB318_15
# %bb.14:                               # %if.then40
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	subl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_16
.LBB318_15:                             # %if.else46
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	addl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
.LBB318_16:                             # %if.end51
                                        #   in Loop: Header=BB318_4 Depth=1
	jmp	.LBB318_17
.LBB318_17:                             # %if.end52
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jle	.LBB318_19
# %bb.18:                               # %if.then54
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-12(%rbp), %eax
	subl	-16(%rbp), %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB318_20
.LBB318_19:                             # %if.else56
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -44(%rbp)
.LBB318_20:                             # %if.end57
                                        #   in Loop: Header=BB318_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-44(%rbp), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_short_term
	jmp	.LBB318_22
.LBB318_21:                             # %if.else58
                                        #   in Loop: Header=BB318_4 Depth=1
	movq	-72(%rbp), %rdi
	movl	-24(%rbp), %esi
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %edx
	leaq	-36(%rbp), %rcx
	callq	reorder_long_term
.LBB318_22:                             # %if.end61
                                        #   in Loop: Header=BB318_4 Depth=1
	jmp	.LBB318_23
.LBB318_23:                             # %for.inc
                                        #   in Loop: Header=BB318_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB318_4
.LBB318_24:                             # %for.end
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$430792359, -60(%rbp)   # imm = 0x19AD5EA7
	jne	.LBB318_26
.LBB318_25:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_26:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_25
.Lfunc_end318:
	.size	reorder_ref_pic_list.255, .Lfunc_end318-reorder_ref_pic_list.255
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.256
	.type	reorder_long_term.256,@function
reorder_long_term.256:                  # @reorder_long_term.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$747592075, -44(%rbp)   # imm = 0x2C8F598B
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB319_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB319_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB319_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB319_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_1
.LBB319_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB319_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB319_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB319_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB319_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB319_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB319_9
.LBB319_8:                              # %if.then
                                        #   in Loop: Header=BB319_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB319_9:                              # %if.end
                                        #   in Loop: Header=BB319_5 Depth=1
	jmp	.LBB319_10
.LBB319_10:                             # %for.inc19
                                        #   in Loop: Header=BB319_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_5
.LBB319_11:                             # %for.end21
	cmpl	$747592075, -44(%rbp)   # imm = 0x2C8F598B
	jne	.LBB319_13
.LBB319_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_12
.Lfunc_end319:
	.size	reorder_long_term.256, .Lfunc_end319-reorder_long_term.256
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.257
	.type	reorder_long_term.257,@function
reorder_long_term.257:                  # @reorder_long_term.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1830545838, -44(%rbp)  # imm = 0x6D1BE9AE
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB320_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB320_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB320_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB320_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_1
.LBB320_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB320_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB320_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB320_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB320_9
.LBB320_8:                              # %if.then
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB320_9:                              # %if.end
                                        #   in Loop: Header=BB320_5 Depth=1
	jmp	.LBB320_10
.LBB320_10:                             # %for.inc19
                                        #   in Loop: Header=BB320_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB320_5
.LBB320_11:                             # %for.end21
	cmpl	$1830545838, -44(%rbp)  # imm = 0x6D1BE9AE
	jne	.LBB320_13
.LBB320_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_12
.Lfunc_end320:
	.size	reorder_long_term.257, .Lfunc_end320-reorder_long_term.257
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.258
	.type	reorder_long_term.258,@function
reorder_long_term.258:                  # @reorder_long_term.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$436173415, -44(%rbp)   # imm = 0x19FF7A67
	movq	%rdi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-28(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB321_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB321_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB321_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB321_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_1
.LBB321_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB321_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB321_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB321_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-28(%rbp), %eax
	je	.LBB321_9
.LBB321_8:                              # %if.then
                                        #   in Loop: Header=BB321_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB321_9:                              # %if.end
                                        #   in Loop: Header=BB321_5 Depth=1
	jmp	.LBB321_10
.LBB321_10:                             # %for.inc19
                                        #   in Loop: Header=BB321_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB321_5
.LBB321_11:                             # %for.end21
	cmpl	$436173415, -44(%rbp)   # imm = 0x19FF7A67
	jne	.LBB321_13
.LBB321_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_12
.Lfunc_end321:
	.size	reorder_long_term.258, .Lfunc_end321-reorder_long_term.258
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function mm_unmark_short_term_for_reference.259
	.type	mm_unmark_short_term_for_reference.259,@function
mm_unmark_short_term_for_reference.259: # @mm_unmark_short_term_for_reference.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1862333877, -16(%rbp)  # imm = 0x6F00F5B5
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	-24(%rbp), %rdi
	movl	-12(%rbp), %esi
	callq	get_pic_num_x
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB322_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB322_26
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	-24(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB322_9
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, 4(%rax)
	jne	.LBB322_8
# %bb.4:                                # %land.lhs.true
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 8(%rax)
	jne	.LBB322_8
# %bb.5:                                # %if.then6
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB322_7
# %bb.6:                                # %if.then10
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rdi
	callq	unmark_for_reference
	jmp	.LBB322_27
.LBB322_7:                              # %if.end
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_8
.LBB322_8:                              # %if.end13
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_24
.LBB322_9:                              # %if.else
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB322_16
# %bb.10:                               # %land.lhs.true17
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB322_16
# %bb.11:                               # %if.then23
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB322_15
# %bb.12:                               # %if.then28
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$2, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB322_14
# %bb.13:                               # %if.then39
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB322_14:                             # %if.end44
	jmp	.LBB322_27
.LBB322_15:                             # %if.end45
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_16
.LBB322_16:                             # %if.end46
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB322_23
# %bb.17:                               # %land.lhs.true52
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	jne	.LBB322_23
# %bb.18:                               # %if.then58
                                        #   in Loop: Header=BB322_1 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6364(%rax), %eax
	cmpl	-8(%rbp), %eax
	jne	.LBB322_22
# %bb.19:                               # %if.then63
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	$0, 6380(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %ecx
	andl	$1, %ecx
	movl	%ecx, 4(%rax)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB322_21
# %bb.20:                               # %if.then76
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	$0, 6380(%rax)
.LBB322_21:                             # %if.end81
	jmp	.LBB322_27
.LBB322_22:                             # %if.end82
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_23
.LBB322_23:                             # %if.end83
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_24
.LBB322_24:                             # %if.end84
                                        #   in Loop: Header=BB322_1 Depth=1
	jmp	.LBB322_25
.LBB322_25:                             # %for.inc
                                        #   in Loop: Header=BB322_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB322_1
.LBB322_26:                             # %for.end.loopexit
	jmp	.LBB322_27
.LBB322_27:                             # %for.end
	cmpl	$1862333877, -16(%rbp)  # imm = 0x6F00F5B5
	jne	.LBB322_29
.LBB322_28:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_28
.Lfunc_end322:
	.size	mm_unmark_short_term_for_reference.259, .Lfunc_end322-mm_unmark_short_term_for_reference.259
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function reorder_long_term.260
	.type	reorder_long_term.260,@function
reorder_long_term.260:                  # @reorder_long_term.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1364282185, -44(%rbp)  # imm = 0x51514B49
	movq	%rdi, -16(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	get_long_term_pic
	movq	%rax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
.LBB323_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	-40(%rbp), %rcx
	cmpl	(%rcx), %eax
	jle	.LBB323_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB323_1 Depth=1
	movq	-16(%rbp), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB323_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_1
.LBB323_4:                              # %for.end
	movq	-56(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	-40(%rbp), %rdx
	movl	(%rdx), %esi
	movl	%esi, %edi
	addl	$1, %edi
	movl	%edi, (%rdx)
	movslq	%esi, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB323_5:                              # %for.cond5
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jg	.LBB323_11
# %bb.6:                                # %for.body8
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB323_8
# %bb.7:                                # %lor.lhs.false
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6368(%rax), %eax
	cmpl	-24(%rbp), %eax
	je	.LBB323_9
.LBB323_8:                              # %if.then
                                        #   in Loop: Header=BB323_5 Depth=1
	movq	-16(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-16(%rbp), %rcx
	movl	-20(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -20(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB323_9:                              # %if.end
                                        #   in Loop: Header=BB323_5 Depth=1
	jmp	.LBB323_10
.LBB323_10:                             # %for.inc19
                                        #   in Loop: Header=BB323_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB323_5
.LBB323_11:                             # %for.end21
	cmpl	$1364282185, -44(%rbp)  # imm = 0x51514B49
	jne	.LBB323_13
.LBB323_12:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_12
.Lfunc_end323:
	.size	reorder_long_term.260, .Lfunc_end323-reorder_long_term.260
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.261  # -- Begin function fill_frame_num_gap.261
	.p2align	4, 0x90
	.type	fill_frame_num_gap.261,@function
fill_frame_num_gap.261:                 # @fill_frame_num_gap.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1739107673, -40(%rbp)  # imm = 0x67A8AD59
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB324_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB324_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB324_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB324_1
.LBB324_3:                              # %while.end
	movl	-32(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1739107673, -40(%rbp)  # imm = 0x67A8AD59
	jne	.LBB324_5
.LBB324_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_4
.Lfunc_end324:
	.size	fill_frame_num_gap.261, .Lfunc_end324-fill_frame_num_gap.261
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.262  # -- Begin function fill_frame_num_gap.262
	.p2align	4, 0x90
	.type	fill_frame_num_gap.262,@function
fill_frame_num_gap.262:                 # @fill_frame_num_gap.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1370266725, -40(%rbp)  # imm = 0x51AC9C65
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -32(%rbp)
.LBB325_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-32(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB325_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB325_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB325_1
.LBB325_3:                              # %while.end
	movl	-36(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$1370266725, -40(%rbp)  # imm = 0x51AC9C65
	jne	.LBB325_5
.LBB325_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_4
.Lfunc_end325:
	.size	fill_frame_num_gap.262, .Lfunc_end325-fill_frame_num_gap.262
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.263 # -- Begin function replace_top_pic_with_frame.263
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.263,@function
replace_top_pic_with_frame.263:         # @replace_top_pic_with_frame.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$237711876, -32(%rbp)   # imm = 0xE2B3204
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB326_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB326_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB326_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB326_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB326_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB326_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB326_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB326_10
.LBB326_7:                              # %if.end14
                                        #   in Loop: Header=BB326_3 Depth=1
	jmp	.LBB326_8
.LBB326_8:                              # %for.inc
                                        #   in Loop: Header=BB326_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB326_3
.LBB326_9:                              # %for.end.loopexit
	jmp	.LBB326_10
.LBB326_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB326_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB326_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB326_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB326_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB326_15:                             # %if.end26
	jmp	.LBB326_16
.LBB326_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$237711876, -32(%rbp)   # imm = 0xE2B3204
	jne	.LBB326_18
.LBB326_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_17
.Lfunc_end326:
	.size	replace_top_pic_with_frame.263, .Lfunc_end326-replace_top_pic_with_frame.263
	.cfi_endproc
                                        # -- End function
	.globl	fill_frame_num_gap.264  # -- Begin function fill_frame_num_gap.264
	.p2align	4, 0x90
	.type	fill_frame_num_gap.264,@function
fill_frame_num_gap.264:                 # @fill_frame_num_gap.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$157039390, -32(%rbp)   # imm = 0x95C3B1E
	movq	%rdi, -8(%rbp)
	movq	$0, -24(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -28(%rbp)
	movq	-8(%rbp), %rax
	movl	72496(%rax), %eax
	movl	%eax, -40(%rbp)
	movq	-8(%rbp), %rax
	movl	$1, 72496(%rax)
	movq	-8(%rbp), %rax
	movl	72648(%rax), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	movq	-8(%rbp), %rax
	movl	72464(%rax), %eax
	movl	%eax, -36(%rbp)
.LBB327_1:                              # %while.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-36(%rbp), %eax
	cmpl	-12(%rbp), %eax
	je	.LBB327_3
# %bb.2:                                # %while.body
                                        #   in Loop: Header=BB327_1 Depth=1
	movq	-8(%rbp), %rax
	movl	52(%rax), %esi
	movq	-8(%rbp), %rax
	movl	60(%rax), %edx
	movq	-8(%rbp), %rax
	movl	56(%rax), %ecx
	movq	-8(%rbp), %rax
	movl	64(%rax), %r8d
	xorl	%edi, %edi
	callq	alloc_storable_picture
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	$1, 6412(%rax)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6364(%rcx)
	movq	-24(%rbp), %rax
	movl	$1, 6388(%rax)
	movq	-24(%rbp), %rax
	movl	$1, 6384(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 72500(%rax)
	movq	-24(%rbp), %rdi
	callq	store_picture_in_dpb
	movq	$0, -24(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	cltd
	idivl	-28(%rbp)
	movl	%edx, -12(%rbp)
	jmp	.LBB327_1
.LBB327_3:                              # %while.end
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 72496(%rcx)
	cmpl	$157039390, -32(%rbp)   # imm = 0x95C3B1E
	jne	.LBB327_5
.LBB327_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_4
.Lfunc_end327:
	.size	fill_frame_num_gap.264, .Lfunc_end327-fill_frame_num_gap.264
	.cfi_endproc
                                        # -- End function
	.globl	replace_top_pic_with_frame.265 # -- Begin function replace_top_pic_with_frame.265
	.p2align	4, 0x90
	.type	replace_top_pic_with_frame.265,@function
replace_top_pic_with_frame.265:         # @replace_top_pic_with_frame.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$302302587, -32(%rbp)   # imm = 0x1204C57B
	movq	%rdi, -24(%rbp)
	movq	$0, -16(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 6380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB328_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rdi
	callq	UnifiedOneForthPix
.LBB328_2:                              # %if.end
	movl	$0, -28(%rbp)
	movl	$0, -4(%rbp)
.LBB328_3:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+28, %eax
	jae	.LBB328_9
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB328_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jne	.LBB328_7
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB328_3 Depth=1
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB328_7
# %bb.6:                                # %if.then11
	movl	$1, -28(%rbp)
	movq	dpb, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	jmp	.LBB328_10
.LBB328_7:                              # %if.end14
                                        #   in Loop: Header=BB328_3 Depth=1
	jmp	.LBB328_8
.LBB328_8:                              # %for.inc
                                        #   in Loop: Header=BB328_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_3
.LBB328_9:                              # %for.end.loopexit
	jmp	.LBB328_10
.LBB328_10:                             # %for.end
	cmpl	$0, -28(%rbp)
	jne	.LBB328_12
# %bb.11:                               # %if.then16
	movabsq	$.L.str.14, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB328_12:                             # %if.end17
	movq	-16(%rbp), %rax
	movq	48(%rax), %rdi
	callq	free_storable_picture
	movq	-16(%rbp), %rax
	movq	$0, 48(%rax)
	movq	-24(%rbp), %rax
	movq	-16(%rbp), %rcx
	movq	%rax, 40(%rcx)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB328_16
# %bb.13:                               # %if.then22
	movq	-16(%rbp), %rax
	movl	$3, 4(%rax)
	movq	-24(%rbp), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB328_15
# %bb.14:                               # %if.then24
	movq	-16(%rbp), %rax
	movl	$3, 8(%rax)
.LBB328_15:                             # %if.end26
	jmp	.LBB328_16
.LBB328_16:                             # %if.end27
	movq	-16(%rbp), %rdi
	callq	dpb_split_field
	callq	update_ref_list
	callq	update_ltref_list
	cmpl	$302302587, -32(%rbp)   # imm = 0x1204C57B
	jne	.LBB328_18
.LBB328_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_17
.Lfunc_end328:
	.size	replace_top_pic_with_frame.265, .Lfunc_end328-replace_top_pic_with_frame.265
	.cfi_endproc
                                        # -- End function
	.globl	init_lists.266          # -- Begin function init_lists.266
	.p2align	4, 0x90
	.type	init_lists.266,@function
init_lists.266:                         # @init_lists.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1612331658, -76(%rbp)  # imm = 0x601A3A8A
	movl	%edi, -52(%rbp)
	movl	%esi, -20(%rbp)
	movl	$0, -44(%rbp)
	movl	$0, -48(%rbp)
	movl	log2_max_frame_num_minus4, %ecx
	addl	$4, %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -8(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jne	.LBB329_14
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB329_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_13
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB329_11
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB329_10
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB329_10
# %bb.6:                                # %if.then10
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB329_8
# %bb.7:                                # %if.then15
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB329_9
.LBB329_8:                              # %if.else
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB329_9:                              # %if.end
                                        #   in Loop: Header=BB329_2 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6364(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
.LBB329_10:                             # %if.end36
                                        #   in Loop: Header=BB329_2 Depth=1
	jmp	.LBB329_11
.LBB329_11:                             # %if.end37
                                        #   in Loop: Header=BB329_2 Depth=1
	jmp	.LBB329_12
.LBB329_12:                             # %for.inc
                                        #   in Loop: Header=BB329_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_2
.LBB329_13:                             # %for.end
	jmp	.LBB329_31
.LBB329_14:                             # %if.else38
	cmpl	$1, -20(%rbp)
	jne	.LBB329_16
# %bb.15:                               # %if.then40
	movl	$1, -44(%rbp)
	movl	$0, -48(%rbp)
	jmp	.LBB329_17
.LBB329_16:                             # %if.else41
	movl	$0, -44(%rbp)
	movl	$1, -48(%rbp)
.LBB329_17:                             # %if.end42
	movl	$0, -4(%rbp)
.LBB329_18:                             # %for.cond43
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_30
# %bb.19:                               # %for.body45
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB329_28
# %bb.20:                               # %if.then49
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	72464(%rcx), %eax
	jbe	.LBB329_22
# %bb.21:                               # %if.then55
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	subl	-72(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
	jmp	.LBB329_23
.LBB329_22:                             # %if.else63
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	20(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movl	%eax, 24(%rcx)
.LBB329_23:                             # %if.end70
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB329_25
# %bb.24:                               # %if.then75
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB329_25:                             # %if.end83
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	4(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB329_27
# %bb.26:                               # %if.then89
                                        #   in Loop: Header=BB329_18 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	24(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6364(%rcx)
.LBB329_27:                             # %if.end98
                                        #   in Loop: Header=BB329_18 Depth=1
	jmp	.LBB329_28
.LBB329_28:                             # %if.end99
                                        #   in Loop: Header=BB329_18 Depth=1
	jmp	.LBB329_29
.LBB329_29:                             # %for.inc100
                                        #   in Loop: Header=BB329_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_18
.LBB329_30:                             # %for.end102
	jmp	.LBB329_31
.LBB329_31:                             # %if.end103
	cmpl	$2, -52(%rbp)
	je	.LBB329_33
# %bb.32:                               # %lor.lhs.false
	cmpl	$4, -52(%rbp)
	jne	.LBB329_34
.LBB329_33:                             # %if.then106
	movl	$0, listXsize
	movl	$0, listXsize+4
	jmp	.LBB329_181
.LBB329_34:                             # %if.end107
	cmpl	$0, -52(%rbp)
	je	.LBB329_36
# %bb.35:                               # %lor.lhs.false109
	cmpl	$3, -52(%rbp)
	jne	.LBB329_75
.LBB329_36:                             # %if.then111
	cmpl	$0, -20(%rbp)
	jne	.LBB329_55
# %bb.37:                               # %if.then113
	movl	$0, -4(%rbp)
.LBB329_38:                             # %for.cond114
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_46
# %bb.39:                               # %for.body116
                                        #   in Loop: Header=BB329_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB329_44
# %bb.40:                               # %if.then121
                                        #   in Loop: Header=BB329_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB329_43
# %bb.41:                               # %land.lhs.true127
                                        #   in Loop: Header=BB329_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB329_43
# %bb.42:                               # %if.then133
                                        #   in Loop: Header=BB329_38 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_43:                             # %if.end140
                                        #   in Loop: Header=BB329_38 Depth=1
	jmp	.LBB329_44
.LBB329_44:                             # %if.end141
                                        #   in Loop: Header=BB329_38 Depth=1
	jmp	.LBB329_45
.LBB329_45:                             # %for.inc142
                                        #   in Loop: Header=BB329_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_38
.LBB329_46:                             # %for.end144
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_pic_num_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB329_47:                             # %for.cond145
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB329_54
# %bb.48:                               # %for.body148
                                        #   in Loop: Header=BB329_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB329_52
# %bb.49:                               # %if.then154
                                        #   in Loop: Header=BB329_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB329_51
# %bb.50:                               # %if.then160
                                        #   in Loop: Header=BB329_47 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_51:                             # %if.end177
                                        #   in Loop: Header=BB329_47 Depth=1
	jmp	.LBB329_52
.LBB329_52:                             # %if.end178
                                        #   in Loop: Header=BB329_47 Depth=1
	jmp	.LBB329_53
.LBB329_53:                             # %for.inc179
                                        #   in Loop: Header=BB329_47 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_47
.LBB329_54:                             # %for.end181
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize
	jmp	.LBB329_74
.LBB329_55:                             # %if.else186
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB329_57
# %bb.56:                               # %if.then190
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB329_57:                             # %if.end191
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB329_59
# %bb.58:                               # %if.then196
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB329_59:                             # %if.end197
	movl	$0, -4(%rbp)
.LBB329_60:                             # %for.cond198
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_65
# %bb.61:                               # %for.body201
                                        #   in Loop: Header=BB329_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, 4(%rax)
	je	.LBB329_63
# %bb.62:                               # %if.then206
                                        #   in Loop: Header=BB329_60 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_63:                             # %if.end212
                                        #   in Loop: Header=BB329_60 Depth=1
	jmp	.LBB329_64
.LBB329_64:                             # %for.inc213
                                        #   in Loop: Header=BB329_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_60
.LBB329_65:                             # %for.end215
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_frame_num_desc, %rcx
	callq	qsort
	movl	$0, listXsize
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB329_66:                             # %for.cond217
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB329_73
# %bb.67:                               # %for.body220
                                        #   in Loop: Header=BB329_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB329_69
# %bb.68:                               # %if.then231
                                        #   in Loop: Header=BB329_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB329_69:                             # %if.end242
                                        #   in Loop: Header=BB329_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB329_71
# %bb.70:                               # %if.then248
                                        #   in Loop: Header=BB329_66 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB329_71:                             # %if.end259
                                        #   in Loop: Header=BB329_66 Depth=1
	jmp	.LBB329_72
.LBB329_72:                             # %for.inc260
                                        #   in Loop: Header=BB329_66 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_66
.LBB329_73:                             # %for.end262
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB329_74:                             # %if.end264
	movl	$0, listXsize+4
	jmp	.LBB329_155
.LBB329_75:                             # %if.else265
	cmpl	$0, -20(%rbp)
	jne	.LBB329_115
# %bb.76:                               # %if.then268
	movl	$0, -4(%rbp)
.LBB329_77:                             # %for.cond269
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_87
# %bb.78:                               # %for.body272
                                        #   in Loop: Header=BB329_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB329_85
# %bb.79:                               # %if.then278
                                        #   in Loop: Header=BB329_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB329_84
# %bb.80:                               # %land.lhs.true284
                                        #   in Loop: Header=BB329_77 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB329_84
# %bb.81:                               # %if.then290
                                        #   in Loop: Header=BB329_77 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jle	.LBB329_83
# %bb.82:                               # %if.then296
                                        #   in Loop: Header=BB329_77 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_83:                             # %if.end307
                                        #   in Loop: Header=BB329_77 Depth=1
	jmp	.LBB329_84
.LBB329_84:                             # %if.end308
                                        #   in Loop: Header=BB329_77 Depth=1
	jmp	.LBB329_85
.LBB329_85:                             # %if.end309
                                        #   in Loop: Header=BB329_77 Depth=1
	jmp	.LBB329_86
.LBB329_86:                             # %for.inc310
                                        #   in Loop: Header=BB329_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_77
.LBB329_87:                             # %for.end312
	movq	listX, %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB329_88:                             # %for.cond314
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_98
# %bb.89:                               # %for.body317
                                        #   in Loop: Header=BB329_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB329_96
# %bb.90:                               # %if.then323
                                        #   in Loop: Header=BB329_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6380(%rax)
	je	.LBB329_95
# %bb.91:                               # %land.lhs.true329
                                        #   in Loop: Header=BB329_88 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	jne	.LBB329_95
# %bb.92:                               # %if.then335
                                        #   in Loop: Header=BB329_88 Depth=1
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	cmpl	4(%rcx), %eax
	jge	.LBB329_94
# %bb.93:                               # %if.then343
                                        #   in Loop: Header=BB329_88 Depth=1
	movl	-8(%rbp), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_94:                             # %if.end354
                                        #   in Loop: Header=BB329_88 Depth=1
	jmp	.LBB329_95
.LBB329_95:                             # %if.end355
                                        #   in Loop: Header=BB329_88 Depth=1
	jmp	.LBB329_96
.LBB329_96:                             # %if.end356
                                        #   in Loop: Header=BB329_88 Depth=1
	jmp	.LBB329_97
.LBB329_97:                             # %for.inc357
                                        #   in Loop: Header=BB329_88 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_88
.LBB329_98:                             # %for.end359
	movq	listX, %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB329_99:                             # %for.cond364
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB329_102
# %bb.100:                              # %for.body367
                                        #   in Loop: Header=BB329_99 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.101:                              # %for.inc374
                                        #   in Loop: Header=BB329_99 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB329_99
.LBB329_102:                            # %for.end376
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB329_103:                            # %for.cond377
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB329_106
# %bb.104:                              # %for.body380
                                        #   in Loop: Header=BB329_103 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.105:                              # %for.inc386
                                        #   in Loop: Header=BB329_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB329_103
.LBB329_106:                            # %for.end388
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	movl	$0, -4(%rbp)
.LBB329_107:                            # %for.cond389
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB329_114
# %bb.108:                              # %for.body392
                                        #   in Loop: Header=BB329_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$3, (%rax)
	jne	.LBB329_112
# %bb.109:                              # %if.then398
                                        #   in Loop: Header=BB329_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	cmpl	$0, 6376(%rax)
	je	.LBB329_111
# %bb.110:                              # %if.then404
                                        #   in Loop: Header=BB329_107 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movl	6372(%rax), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 6368(%rcx)
	movl	-8(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	40(%rcx), %rcx
	movl	%eax, 20(%rcx)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX, %rcx
	movslq	-8(%rbp), %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	40(%rax), %rax
	movq	listX+8, %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_111:                            # %if.end428
                                        #   in Loop: Header=BB329_107 Depth=1
	jmp	.LBB329_112
.LBB329_112:                            # %if.end429
                                        #   in Loop: Header=BB329_107 Depth=1
	jmp	.LBB329_113
.LBB329_113:                            # %for.inc430
                                        #   in Loop: Header=BB329_107 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_107
.LBB329_114:                            # %for.end432
	movq	listX, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movq	listX+8, %rdi
	movslq	listXsize, %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	listXsize, %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_pic_by_lt_pic_num_asc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, listXsize+4
	movl	%eax, listXsize
	jmp	.LBB329_154
.LBB329_115:                            # %if.else441
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -32(%rbp)
	cmpq	-32(%rbp), %rcx
	jne	.LBB329_117
# %bb.116:                              # %if.then446
	movabsq	$.L.str.9, %rdi
	callq	no_mem_exit
.LBB329_117:                            # %if.end447
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -64(%rbp)
	cmpq	-64(%rbp), %rcx
	jne	.LBB329_119
# %bb.118:                              # %if.then452
	movabsq	$.L.str.11, %rdi
	callq	no_mem_exit
.LBB329_119:                            # %if.end453
	movl	dpb+24, %edi
	movl	$8, %esi
	callq	calloc
	xorl	%ecx, %ecx
	movq	%rax, -40(%rbp)
	cmpq	-40(%rbp), %rcx
	jne	.LBB329_121
# %bb.120:                              # %if.then458
	movabsq	$.L.str.10, %rdi
	callq	no_mem_exit
.LBB329_121:                            # %if.end459
	movl	$0, listXsize
	movl	$1, listXsize+4
	movl	$0, -4(%rbp)
.LBB329_122:                            # %for.cond460
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_129
# %bb.123:                              # %for.body463
                                        #   in Loop: Header=BB329_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB329_127
# %bb.124:                              # %if.then468
                                        #   in Loop: Header=BB329_122 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jl	.LBB329_126
# %bb.125:                              # %if.then474
                                        #   in Loop: Header=BB329_122 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_126:                            # %if.end480
                                        #   in Loop: Header=BB329_122 Depth=1
	jmp	.LBB329_127
.LBB329_127:                            # %if.end481
                                        #   in Loop: Header=BB329_122 Depth=1
	jmp	.LBB329_128
.LBB329_128:                            # %for.inc482
                                        #   in Loop: Header=BB329_122 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_122
.LBB329_129:                            # %for.end484
	movq	-32(%rbp), %rdi
	movslq	-8(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_desc, %rcx
	callq	qsort
	movl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB329_130:                            # %for.cond486
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+32, %eax
	jae	.LBB329_137
# %bb.131:                              # %for.body489
                                        #   in Loop: Header=BB329_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	cmpl	$0, (%rax)
	je	.LBB329_135
# %bb.132:                              # %if.then494
                                        #   in Loop: Header=BB329_130 Depth=1
	movq	img, %rax
	movl	72460(%rax), %eax
	movq	dpb+8, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB329_134
# %bb.133:                              # %if.then501
                                        #   in Loop: Header=BB329_130 Depth=1
	movq	dpb+8, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-32(%rbp), %rcx
	movl	-8(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -8(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB329_134:                            # %if.end507
                                        #   in Loop: Header=BB329_130 Depth=1
	jmp	.LBB329_135
.LBB329_135:                            # %if.end508
                                        #   in Loop: Header=BB329_130 Depth=1
	jmp	.LBB329_136
.LBB329_136:                            # %for.inc509
                                        #   in Loop: Header=BB329_130 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_130
.LBB329_137:                            # %for.end511
	movq	-32(%rbp), %rdi
	movslq	-16(%rbp), %rax
	shlq	$3, %rax
	addq	%rax, %rdi
	movl	-8(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	%eax, %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_poc_asc, %rcx
	callq	qsort
	movl	$0, -12(%rbp)
.LBB329_138:                            # %for.cond516
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB329_141
# %bb.139:                              # %for.body519
                                        #   in Loop: Header=BB329_138 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-8(%rbp), %edx
	subl	-16(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.140:                              # %for.inc526
                                        #   in Loop: Header=BB329_138 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB329_138
.LBB329_141:                            # %for.end528
	movl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB329_142:                            # %for.cond529
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-8(%rbp), %eax
	jge	.LBB329_145
# %bb.143:                              # %for.body532
                                        #   in Loop: Header=BB329_142 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	-12(%rbp), %edx
	subl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.144:                              # %for.inc538
                                        #   in Loop: Header=BB329_142 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB329_142
.LBB329_145:                            # %for.end540
	movl	$0, listXsize
	movl	$0, listXsize+4
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %edx
	movq	listX+8, %rcx
	xorl	%r9d, %r9d
	callq	gen_pic_list_from_frame_list
	movl	$0, -4(%rbp)
.LBB329_146:                            # %for.cond541
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	dpb+36, %eax
	jae	.LBB329_153
# %bb.147:                              # %for.body544
                                        #   in Loop: Header=BB329_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	-40(%rbp), %rcx
	movl	-24(%rbp), %edx
	movl	%edx, %esi
	addl	$1, %esi
	movl	%esi, -24(%rbp)
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	je	.LBB329_149
# %bb.148:                              # %if.then555
                                        #   in Loop: Header=BB329_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	48(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	48(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB329_149:                            # %if.end566
                                        #   in Loop: Header=BB329_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movl	8(%rax), %eax
	andl	$2, %eax
	cmpl	$0, %eax
	je	.LBB329_151
# %bb.150:                              # %if.then572
                                        #   in Loop: Header=BB329_146 Depth=1
	movq	dpb+16, %rax
	movl	-4(%rbp), %ecx
	movq	(%rax,%rcx,8), %rax
	movq	56(%rax), %rax
	movl	6372(%rax), %eax
	shll	$1, %eax
	addl	-48(%rbp), %eax
	movq	dpb+16, %rcx
	movl	-4(%rbp), %edx
	movq	(%rcx,%rdx,8), %rcx
	movq	56(%rcx), %rcx
	movl	%eax, 6368(%rcx)
.LBB329_151:                            # %if.end583
                                        #   in Loop: Header=BB329_146 Depth=1
	jmp	.LBB329_152
.LBB329_152:                            # %for.inc584
                                        #   in Loop: Header=BB329_146 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_146
.LBB329_153:                            # %for.end586
	movq	-40(%rbp), %rdi
	movslq	-24(%rbp), %rsi
	movl	$8, %edx
	movabsq	$compare_fs_by_lt_pic_idx_asc, %rcx
	callq	qsort
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX, %rcx
	movabsq	$listXsize, %r8
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movabsq	$listXsize, %r8
	addq	$4, %r8
	movl	-20(%rbp), %edi
	movq	-40(%rbp), %rsi
	movl	-24(%rbp), %edx
	movq	listX+8, %rcx
	movl	$1, %r9d
	callq	gen_pic_list_from_frame_list
	movq	-32(%rbp), %rdi
	callq	free
	movq	-64(%rbp), %rdi
	callq	free
	movq	-40(%rbp), %rdi
	callq	free
.LBB329_154:                            # %if.end588
	jmp	.LBB329_155
.LBB329_155:                            # %if.end589
	movl	listXsize, %eax
	cmpl	listXsize+4, %eax
	jne	.LBB329_166
# %bb.156:                              # %land.lhs.true592
	cmpl	$1, listXsize
	jle	.LBB329_166
# %bb.157:                              # %if.then595
	movl	$0, -68(%rbp)
	movl	$0, -12(%rbp)
.LBB329_158:                            # %for.cond596
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	listXsize, %eax
	jge	.LBB329_163
# %bb.159:                              # %for.body599
                                        #   in Loop: Header=BB329_158 Depth=1
	movq	listX, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	listX+8, %rcx
	movslq	-12(%rbp), %rdx
	cmpq	(%rcx,%rdx,8), %rax
	je	.LBB329_161
# %bb.160:                              # %if.then606
                                        #   in Loop: Header=BB329_158 Depth=1
	movl	$1, -68(%rbp)
.LBB329_161:                            # %if.end607
                                        #   in Loop: Header=BB329_158 Depth=1
	jmp	.LBB329_162
.LBB329_162:                            # %for.inc608
                                        #   in Loop: Header=BB329_158 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB329_158
.LBB329_163:                            # %for.end610
	cmpl	$0, -68(%rbp)
	jne	.LBB329_165
# %bb.164:                              # %if.then612
	movq	listX+8, %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	listX+8, %rax
	movq	8(%rax), %rax
	movq	listX+8, %rcx
	movq	%rax, (%rcx)
	movq	-88(%rbp), %rax
	movq	listX+8, %rcx
	movq	%rax, 8(%rcx)
.LBB329_165:                            # %if.end617
	jmp	.LBB329_166
.LBB329_166:                            # %if.end618
	movl	listXsize, %eax
	movq	img, %rcx
	cmpl	72000(%rcx), %eax
	jge	.LBB329_168
# %bb.167:                              # %cond.true
	movl	listXsize, %eax
	jmp	.LBB329_169
.LBB329_168:                            # %cond.false
	movq	img, %rax
	movl	72000(%rax), %eax
.LBB329_169:                            # %cond.end
	movl	%eax, listXsize
	movl	listXsize+4, %eax
	movq	img, %rcx
	cmpl	72004(%rcx), %eax
	jge	.LBB329_171
# %bb.170:                              # %cond.true624
	movl	listXsize+4, %eax
	jmp	.LBB329_172
.LBB329_171:                            # %cond.false625
	movq	img, %rax
	movl	72004(%rax), %eax
.LBB329_172:                            # %cond.end627
	movl	%eax, listXsize+4
	movl	listXsize, %eax
	movl	%eax, -4(%rbp)
.LBB329_173:                            # %for.cond629
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB329_176
# %bb.174:                              # %for.body632
                                        #   in Loop: Header=BB329_173 Depth=1
	movq	listX, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.175:                              # %for.inc635
                                        #   in Loop: Header=BB329_173 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_173
.LBB329_176:                            # %for.end637
	movl	listXsize+4, %eax
	movl	%eax, -4(%rbp)
.LBB329_177:                            # %for.cond638
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$33, -4(%rbp)
	jae	.LBB329_180
# %bb.178:                              # %for.body641
                                        #   in Loop: Header=BB329_177 Depth=1
	movq	listX+8, %rax
	movl	-4(%rbp), %ecx
	movq	$0, (%rax,%rcx,8)
# %bb.179:                              # %for.inc644
                                        #   in Loop: Header=BB329_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_177
.LBB329_180:                            # %for.end646.loopexit
	jmp	.LBB329_181
.LBB329_181:                            # %for.end646
	cmpl	$1612331658, -76(%rbp)  # imm = 0x601A3A8A
	jne	.LBB329_183
.LBB329_182:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_183:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_182
.Lfunc_end329:
	.size	init_lists.266, .Lfunc_end329-init_lists.266
	.cfi_endproc
                                        # -- End function
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"undefined level"
	.size	.L.str, 16

	.type	dpb,@object             # @dpb
	.comm	dpb,64,8
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"DPB size at specified level is smaller than the specified number of reference frames. This is not allowed.\n"
	.size	.L.str.1, 108

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"init_dpb: dpb->fs"
	.size	.L.str.2, 18

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"init_dpb: dpb->fs_ref"
	.size	.L.str.3, 22

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"init_dpb: dpb->fs_ltref"
	.size	.L.str.4, 24

	.type	listX,@object           # @listX
	.comm	listX,48,16
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"init_dpb: listX[i]"
	.size	.L.str.5, 19

	.type	listXsize,@object       # @listXsize
	.comm	listXsize,24,16
	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"alloc_frame_store: f"
	.size	.L.str.6, 21

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"alloc_storable_picture: s"
	.size	.L.str.7, 26

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"alloc_storable_picture: s->mb_field"
	.size	.L.str.8, 36

	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"init_lists: fs_list0"
	.size	.L.str.9, 21

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"init_lists: fs_listlt"
	.size	.L.str.10, 22

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"init_lists: fs_list1"
	.size	.L.str.11, 21

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"Invalid remapping_of_pic_nums_idc command"
	.size	.L.str.12, 42

	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"duplicate frame_num im short-term reference picture buffer"
	.size	.L.str.13, 59

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"replace_top_pic_with_frame: error storing reference frame (top field not found)"
	.size	.L.str.14, 80

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l0"
	.size	.L.str.15, 67

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l0"
	.size	.L.str.16, 65

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l0"
	.size	.L.str.17, 59

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"alloc_ref_pic_list_reordering_buffer: remapping_of_pic_nums_idc_l1"
	.size	.L.str.18, 67

	.type	.L.str.19,@object       # @.str.19
.L.str.19:
	.asciz	"alloc_ref_pic_list_reordering_buffer: abs_diff_pic_num_minus1_l1"
	.size	.L.str.19, 65

	.type	.L.str.20,@object       # @.str.20
.L.str.20:
	.asciz	"alloc_ref_pic_list_reordering_buffer: long_term_pic_idx_l1"
	.size	.L.str.20, 59

	.type	.L.str.21,@object       # @.str.21
.L.str.21:
	.asciz	"alloc_colocated: s"
	.size	.L.str.21, 19

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	Co_located,@object      # @Co_located
	.bss
	.globl	Co_located
	.p2align	3
Co_located:
	.quad	0
	.size	Co_located, 8

	.type	.L.str.22,@object       # @.str.22
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.22:
	.asciz	"memory_management_control_operation = 0 not last operation in buffer"
	.size	.L.str.22, 69

	.type	.L.str.23,@object       # @.str.23
.L.str.23:
	.asciz	"invalid memory_management_control_operation in buffer"
	.size	.L.str.23, 54

	.type	.L.str.24,@object       # @.str.24
.L.str.24:
	.asciz	"field for long term marking not found"
	.size	.L.str.24, 38

	.type	.L.str.25,@object       # @.str.25
.L.str.25:
	.asciz	"Warning: reference frame for long term marking not found\n"
	.size	.L.str.25, 58

	.type	.L.str.26,@object       # @.str.26
.L.str.26:
	.asciz	"Warning: assigning long_term_frame_idx different from other field\n"
	.size	.L.str.26, 67

	.type	.L.str.27,@object       # @.str.27
.L.str.27:
	.asciz	"Warning: reference field for long term marking not found\n"
	.size	.L.str.27, 58

	.type	.L.str.28,@object       # @.str.28
.L.str.28:
	.asciz	"Cannot determine smallest POC, DPB empty."
	.size	.L.str.28, 42

	.type	.L.str.29,@object       # @.str.29
.L.str.29:
	.asciz	"invalid frame store type"
	.size	.L.str.29, 25

	.type	.L.str.30,@object       # @.str.30
.L.str.30:
	.asciz	"Cannot output frame, DPB empty."
	.size	.L.str.30, 32

	.type	.L.str.31,@object       # @.str.31
.L.str.31:
	.asciz	"no frames for output available"
	.size	.L.str.31, 31

	.type	.L.str.32,@object       # @.str.32
.L.str.32:
	.asciz	"output POC must be in ascending order"
	.size	.L.str.32, 38


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
