	.text
	.file	"rdopt.c"
	.globl	clear_rdopt             # -- Begin function clear_rdopt
	.p2align	4, 0x90
	.type	clear_rdopt,@function
clear_rdopt:                            # @clear_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cofDC, %rdi
	callq	free_mem_DCcoeff
	movq	cofAC, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC8x8, %rdi
	callq	free_mem_ACcoeff
	movq	cofAC4x4intern, %rdi
	callq	free_mem_ACcoeff
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB0_2
# %bb.1:                                # %if.then
	movq	cofAC_8x8ts, %rdi
	callq	free_mem_ACcoeff
.LBB0_2:                                # %if.end
	movq	cs_mb, %rdi
	callq	delete_coding_state
	movq	cs_b8, %rdi
	callq	delete_coding_state
	movq	cs_cm, %rdi
	callq	delete_coding_state
	movq	cs_imb, %rdi
	callq	delete_coding_state
	movq	cs_ib8, %rdi
	callq	delete_coding_state
	movq	cs_ib4, %rdi
	callq	delete_coding_state
	movq	cs_pc, %rdi
	callq	delete_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	clear_rdopt, .Lfunc_end0-clear_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	init_rdopt              # -- Begin function init_rdopt
	.p2align	4, 0x90
	.type	init_rdopt,@function
init_rdopt:                             # @init_rdopt
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	$0, rdopt
	movabsq	$cofDC, %rdi
	callq	get_mem_DCcoeff
	movabsq	$cofAC, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC8x8, %rdi
	callq	get_mem_ACcoeff
	movabsq	$cofAC4x4intern, %rdi
	callq	get_mem_ACcoeff
	movq	cofAC4x4intern, %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, cofAC4x4
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB1_2
# %bb.1:                                # %if.then
	movabsq	$cofAC_8x8ts, %rdi
	callq	get_mem_ACcoeff
.LBB1_2:                                # %if.end
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_mb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_b8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_cm
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_imb
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib8
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_ib4
	movb	$0, %al
	callq	create_coding_state
	movq	%rax, cs_pc
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	init_rdopt, .Lfunc_end1-init_rdopt
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap          # -- Begin function UpdatePixelMap
	.p2align	4, 0x90
	.type	UpdatePixelMap,@function
UpdatePixelMap:                         # @UpdatePixelMap
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB2_5
# %bb.1:                                # %func_UpdatePixelMap.8
	callq	UpdatePixelMap.8
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_UpdatePixelMap.11
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.11
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_UpdatePixelMap.15
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_UpdatePixelMap.20
	.cfi_def_cfa %rbp, 16
	callq	UpdatePixelMap.20
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
	jmp	.LBB2_4
.Lfunc_end2:
	.size	UpdatePixelMap, .Lfunc_end2-UpdatePixelMap
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef   # -- Begin function CheckReliabilityOfRef
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef,@function
CheckReliabilityOfRef:                  # @CheckReliabilityOfRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_5
# %bb.1:                                # %func_CheckReliabilityOfRef.21
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.21
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_CheckReliabilityOfRef.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.28
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_CheckReliabilityOfRef.32
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.32
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_CheckReliabilityOfRef.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	CheckReliabilityOfRef.57
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
	jmp	.LBB3_4
.Lfunc_end3:
	.size	CheckReliabilityOfRef, .Lfunc_end3-CheckReliabilityOfRef
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks # -- Begin function RDCost_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks,@function
RDCost_for_4x4IntraBlocks:              # @RDCost_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	vmovsd	%xmm1, -56(%rbp)        # 8-byte Spill
	vmovsd	%xmm0, -48(%rbp)        # 8-byte Spill
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_5
# %bb.1:                                # %func_RDCost_for_4x4IntraBlocks.18
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.18
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_RDCost_for_4x4IntraBlocks.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.31
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_RDCost_for_4x4IntraBlocks.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.61
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_RDCost_for_4x4IntraBlocks.82
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	RDCost_for_4x4IntraBlocks.82
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-48(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	vmovsd	-56(%rbp), %xmm1        # 8-byte Reload
                                        # xmm1 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
	jmp	.LBB4_4
.Lfunc_end4:
	.size	RDCost_for_4x4IntraBlocks, .Lfunc_end4-RDCost_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma # -- Begin function RDCost_for_4x4Blocks_Chroma
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma,@function
RDCost_for_4x4Blocks_Chroma:            # @RDCost_for_4x4Blocks_Chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_5
# %bb.1:                                # %func_RDCost_for_4x4Blocks_Chroma.4
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_RDCost_for_4x4Blocks_Chroma.27
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_RDCost_for_4x4Blocks_Chroma.30
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_RDCost_for_4x4Blocks_Chroma.68
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	RDCost_for_4x4Blocks_Chroma.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
	jmp	.LBB5_4
.Lfunc_end5:
	.size	RDCost_for_4x4Blocks_Chroma, .Lfunc_end5-RDCost_for_4x4Blocks_Chroma
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_4x4IntraBlocks # -- Begin function Mode_Decision_for_4x4IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks,@function
Mode_Decision_for_4x4IntraBlocks:       # @Mode_Decision_for_4x4IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_5
# %bb.1:                                # %func_Mode_Decision_for_4x4IntraBlocks.12
	movl	%ebx, %edi
	movl	%r15d, %esi
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Mode_Decision_for_4x4IntraBlocks.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.34
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Mode_Decision_for_4x4IntraBlocks.37
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Mode_Decision_for_4x4IntraBlocks.39
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movq	%r14, %rdx
	callq	Mode_Decision_for_4x4IntraBlocks.39
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
	jmp	.LBB6_4
.Lfunc_end6:
	.size	Mode_Decision_for_4x4IntraBlocks, .Lfunc_end6-Mode_Decision_for_4x4IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_8x8IntraBlocks # -- Begin function Mode_Decision_for_8x8IntraBlocks
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks,@function
Mode_Decision_for_8x8IntraBlocks:       # @Mode_Decision_for_8x8IntraBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$16, %rsp
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	vmovsd	%xmm0, -24(%rbp)        # 8-byte Spill
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_5
# %bb.1:                                # %func_Mode_Decision_for_8x8IntraBlocks.14
	movl	%ebx, %edi
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.14
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_Mode_Decision_for_8x8IntraBlocks.23
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.23
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_Mode_Decision_for_8x8IntraBlocks.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.33
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_Mode_Decision_for_8x8IntraBlocks.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	Mode_Decision_for_8x8IntraBlocks.54
	addq	$16, %rsp
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-24(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
	jmp	.LBB7_4
.Lfunc_end7:
	.size	Mode_Decision_for_8x8IntraBlocks, .Lfunc_end7-Mode_Decision_for_8x8IntraBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock # -- Begin function Mode_Decision_for_Intra4x4Macroblock
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock,@function
Mode_Decision_for_Intra4x4Macroblock:   # @Mode_Decision_for_Intra4x4Macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	vmovsd	%xmm0, -16(%rbp)        # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_5
# %bb.1:                                # %func_Mode_Decision_for_Intra4x4Macroblock.10
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_Mode_Decision_for_Intra4x4Macroblock.52
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_Mode_Decision_for_Intra4x4Macroblock.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_Mode_Decision_for_Intra4x4Macroblock.75
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock.75
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-16(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
	jmp	.LBB8_4
.Lfunc_end8:
	.size	Mode_Decision_for_Intra4x4Macroblock, .Lfunc_end8-Mode_Decision_for_Intra4x4Macroblock
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_8x8blocks    # -- Begin function RDCost_for_8x8blocks
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks,@function
RDCost_for_8x8blocks:                   # @RDCost_for_8x8blocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	vmovsd	%xmm0, -56(%rbp)        # 8-byte Spill
	movq	%rsi, %r15
	movq	%rdi, %r14
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_5
# %bb.1:                                # %func_RDCost_for_8x8blocks.22
	movq	%r14, %rdi
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.22
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_RDCost_for_8x8blocks.97
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.97
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_RDCost_for_8x8blocks.99
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.99
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_RDCost_for_8x8blocks.100
	.cfi_def_cfa %rbp, 16
	movq	%r14, %rdi
	movswl	%r12w, %r8d
	movswl	%r15w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks.100
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rsi
	vmovsd	-56(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movw	16(%rbp), %r10w
	movl	-44(%rbp), %r15d        # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r13d, %ecx
	movl	%ebx, %edx
	je	.LBB9_3
	jmp	.LBB9_4
.Lfunc_end9:
	.size	RDCost_for_8x8blocks, .Lfunc_end9-RDCost_for_8x8blocks
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset               # -- Begin function I16Offset
	.p2align	4, 0x90
	.type	I16Offset,@function
I16Offset:                              # @I16Offset
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_2
# %bb.1:                                # %func_I16Offset.56
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.56
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_I16Offset.62
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	I16Offset.62
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end10:
	.size	I16Offset, .Lfunc_end10-I16Offset
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks # -- Begin function SetModesAndRefframeForBlocks
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks,@function
SetModesAndRefframeForBlocks:           # @SetModesAndRefframeForBlocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_5
# %bb.1:                                # %func_SetModesAndRefframeForBlocks.50
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.50
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_SetModesAndRefframeForBlocks.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_SetModesAndRefframeForBlocks.87
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.87
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_SetModesAndRefframeForBlocks.91
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	SetModesAndRefframeForBlocks.91
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
	jmp	.LBB11_4
.Lfunc_end11:
	.size	SetModesAndRefframeForBlocks, .Lfunc_end11-SetModesAndRefframeForBlocks
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision # -- Begin function Intra16x16_Mode_Decision
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision,@function
Intra16x16_Mode_Decision:               # @Intra16x16_Mode_Decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_5
# %bb.1:                                # %func_Intra16x16_Mode_Decision.65
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.65
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_Intra16x16_Mode_Decision.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.89
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_Intra16x16_Mode_Decision.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.93
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_Intra16x16_Mode_Decision.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	Intra16x16_Mode_Decision.98
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
	jmp	.LBB12_4
.Lfunc_end12:
	.size	Intra16x16_Mode_Decision, .Lfunc_end12-Intra16x16_Mode_Decision
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8 # -- Begin function SetCoeffAndReconstruction8x8
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8,@function
SetCoeffAndReconstruction8x8:           # @SetCoeffAndReconstruction8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_5
# %bb.1:                                # %func_SetCoeffAndReconstruction8x8.13
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.13
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetCoeffAndReconstruction8x8.42
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.42
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetCoeffAndReconstruction8x8.45
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.45
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetCoeffAndReconstruction8x8.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	SetCoeffAndReconstruction8x8.71
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
	jmp	.LBB13_4
.Lfunc_end13:
	.size	SetCoeffAndReconstruction8x8, .Lfunc_end13-SetCoeffAndReconstruction8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8              # -- Begin function StoreMV8x8
	.p2align	4, 0x90
	.type	StoreMV8x8,@function
StoreMV8x8:                             # @StoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_5
# %bb.1:                                # %func_StoreMV8x8.6
	movl	%ebx, %edi
	callq	StoreMV8x8.6
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_StoreMV8x8.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_StoreMV8x8.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.59
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_StoreMV8x8.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	StoreMV8x8.74
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
	jmp	.LBB14_4
.Lfunc_end14:
	.size	StoreMV8x8, .Lfunc_end14-StoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8            # -- Begin function RestoreMV8x8
	.p2align	4, 0x90
	.type	RestoreMV8x8,@function
RestoreMV8x8:                           # @RestoreMV8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_5
# %bb.1:                                # %func_RestoreMV8x8.2
	movl	%ebx, %edi
	callq	RestoreMV8x8.2
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_RestoreMV8x8.48
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.48
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_RestoreMV8x8.67
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_RestoreMV8x8.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	RestoreMV8x8.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
	jmp	.LBB15_4
.Lfunc_end15:
	.size	RestoreMV8x8, .Lfunc_end15-RestoreMV8x8
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB      # -- Begin function SetMotionVectorsMB
	.p2align	4, 0x90
	.type	SetMotionVectorsMB,@function
SetMotionVectorsMB:                     # @SetMotionVectorsMB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_5
# %bb.1:                                # %func_SetMotionVectorsMB.24
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_SetMotionVectorsMB.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.38
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_SetMotionVectorsMB.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_SetMotionVectorsMB.96
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	SetMotionVectorsMB.96
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
	jmp	.LBB16_4
.Lfunc_end16:
	.size	SetMotionVectorsMB, .Lfunc_end16-SetMotionVectorsMB
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_macroblocks  # -- Begin function RDCost_for_macroblocks
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks,@function
RDCost_for_macroblocks:                 # @RDCost_for_macroblocks
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movq	%rsi, %r15
	movl	%edi, %ebx
	vmovsd	%xmm0, -32(%rbp)        # 8-byte Spill
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_5
# %bb.1:                                # %func_RDCost_for_macroblocks.29
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_RDCost_for_macroblocks.64
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_RDCost_for_macroblocks.69
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.69
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_RDCost_for_macroblocks.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r15, %rsi
	movl	%r14d, %edx
	callq	RDCost_for_macroblocks.92
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovsd	-32(%rbp), %xmm0        # 8-byte Reload
                                        # xmm0 = mem[0],zero
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
	jmp	.LBB17_4
.Lfunc_end17:
	.size	RDCost_for_macroblocks, .Lfunc_end17-RDCost_for_macroblocks
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters # -- Begin function store_macroblock_parameters
	.p2align	4, 0x90
	.type	store_macroblock_parameters,@function
store_macroblock_parameters:            # @store_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_5
# %bb.1:                                # %func_store_macroblock_parameters.7
	movl	%ebx, %edi
	callq	store_macroblock_parameters.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_store_macroblock_parameters.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.35
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_store_macroblock_parameters.44
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_store_macroblock_parameters.63
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	store_macroblock_parameters.63
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
	jmp	.LBB18_4
.Lfunc_end18:
	.size	store_macroblock_parameters, .Lfunc_end18-store_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters # -- Begin function set_stored_macroblock_parameters
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters,@function
set_stored_macroblock_parameters:       # @set_stored_macroblock_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_5
# %bb.1:                                # %func_set_stored_macroblock_parameters.41
	callq	set_stored_macroblock_parameters.41
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_set_stored_macroblock_parameters.66
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.66
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_set_stored_macroblock_parameters.79
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.79
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_set_stored_macroblock_parameters.84
	.cfi_def_cfa %rbp, 16
	callq	set_stored_macroblock_parameters.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
	jmp	.LBB19_4
.Lfunc_end19:
	.size	set_stored_macroblock_parameters, .Lfunc_end19-set_stored_macroblock_parameters
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors  # -- Begin function SetRefAndMotionVectors
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors,@function
SetRefAndMotionVectors:                 # @SetRefAndMotionVectors
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_5
# %bb.1:                                # %func_SetRefAndMotionVectors.40
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_SetRefAndMotionVectors.73
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.73
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_SetRefAndMotionVectors.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.88
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_SetRefAndMotionVectors.94
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	SetRefAndMotionVectors.94
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
	jmp	.LBB20_4
.Lfunc_end20:
	.size	SetRefAndMotionVectors, .Lfunc_end20-SetRefAndMotionVectors
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference    # -- Begin function field_flag_inference
	.p2align	4, 0x90
	.type	field_flag_inference,@function
field_flag_inference:                   # @field_flag_inference
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_2
# %bb.1:                                # %func_field_flag_inference.83
	callq	field_flag_inference.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_field_flag_inference.86
	.cfi_def_cfa %rbp, 16
	callq	field_flag_inference.86
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end21:
	.size	field_flag_inference, .Lfunc_end21-field_flag_inference
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8         # -- Begin function StoreMVBlock8x8
	.p2align	4, 0x90
	.type	StoreMVBlock8x8,@function
StoreMVBlock8x8:                        # @StoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_5
# %bb.1:                                # %func_StoreMVBlock8x8.51
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_StoreMVBlock8x8.55
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreMVBlock8x8.55
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_StoreMVBlock8x8.78
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.78
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_StoreMVBlock8x8.85
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8.85
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB22_3
	jmp	.LBB22_4
.Lfunc_end22:
	.size	StoreMVBlock8x8, .Lfunc_end22-StoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8       # -- Begin function RestoreMVBlock8x8
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8,@function
RestoreMVBlock8x8:                      # @RestoreMVBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_5
# %bb.1:                                # %func_RestoreMVBlock8x8.36
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.36
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_RestoreMVBlock8x8.43
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	RestoreMVBlock8x8.43
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_RestoreMVBlock8x8.53
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.53
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_RestoreMVBlock8x8.72
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8.72
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB23_3
	jmp	.LBB23_4
.Lfunc_end23:
	.size	RestoreMVBlock8x8, .Lfunc_end23-RestoreMVBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8 # -- Begin function StoreNewMotionVectorsBlock8x8
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8,@function
StoreNewMotionVectorsBlock8x8:          # @StoreNewMotionVectorsBlock8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_5
# %bb.1:                                # %func_StoreNewMotionVectorsBlock8x8.1
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.1
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_StoreNewMotionVectorsBlock8x8.3
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	%r10d, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.3
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_StoreNewMotionVectorsBlock8x8.9
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.9
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_StoreNewMotionVectorsBlock8x8.19
	.cfi_def_cfa %rbp, 16
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8.19
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	16(%rbp), %r10d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	movl	%r10d, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB24_3
	jmp	.LBB24_4
.Lfunc_end24:
	.size	StoreNewMotionVectorsBlock8x8, .Lfunc_end24-StoreNewMotionVectorsBlock8x8
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8    # -- Begin function GetBestTransformP8x8
	.p2align	4, 0x90
	.type	GetBestTransformP8x8,@function
GetBestTransformP8x8:                   # @GetBestTransformP8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_5
# %bb.1:                                # %func_GetBestTransformP8x8.26
	callq	GetBestTransformP8x8.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_GetBestTransformP8x8.46
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_GetBestTransformP8x8.70
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.70
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_GetBestTransformP8x8.76
	.cfi_def_cfa %rbp, 16
	callq	GetBestTransformP8x8.76
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
	jmp	.LBB25_4
.Lfunc_end25:
	.size	GetBestTransformP8x8, .Lfunc_end25-GetBestTransformP8x8
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_macroblock   # -- Begin function encode_one_macroblock
	.p2align	4, 0x90
	.type	encode_one_macroblock,@function
encode_one_macroblock:                  # @encode_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_5
# %bb.1:                                # %func_encode_one_macroblock.49
	callq	encode_one_macroblock.49
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_encode_one_macroblock.58
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.58
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_encode_one_macroblock.80
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_encode_one_macroblock.95
	.cfi_def_cfa %rbp, 16
	callq	encode_one_macroblock.95
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
	jmp	.LBB26_4
.Lfunc_end26:
	.size	encode_one_macroblock, .Lfunc_end26-encode_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters    # -- Begin function set_mbaff_parameters
	.p2align	4, 0x90
	.type	set_mbaff_parameters,@function
set_mbaff_parameters:                   # @set_mbaff_parameters
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB27_5
# %bb.1:                                # %func_set_mbaff_parameters.5
	callq	set_mbaff_parameters.5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_2:                               # %func_set_mbaff_parameters.16
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.16
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_3:                               # %func_set_mbaff_parameters.17
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.17
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_4:                               # %func_set_mbaff_parameters.25
	.cfi_def_cfa %rbp, 16
	callq	set_mbaff_parameters.25
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_5:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB27_2
# %bb.6:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB27_3
	jmp	.LBB27_4
.Lfunc_end27:
	.size	set_mbaff_parameters, .Lfunc_end27-set_mbaff_parameters
	.cfi_endproc
                                        # -- End function
	.globl	store_coding_state_cs_cm # -- Begin function store_coding_state_cs_cm
	.p2align	4, 0x90
	.type	store_coding_state_cs_cm,@function
store_coding_state_cs_cm:               # @store_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	store_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end28:
	.size	store_coding_state_cs_cm, .Lfunc_end28-store_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	reset_coding_state_cs_cm # -- Begin function reset_coding_state_cs_cm
	.p2align	4, 0x90
	.type	reset_coding_state_cs_cm,@function
reset_coding_state_cs_cm:               # @reset_coding_state_cs_cm
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	cs_cm, %rdi
	callq	reset_coding_state
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	reset_coding_state_cs_cm, .Lfunc_end29-reset_coding_state_cs_cm
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.1 # -- Begin function StoreNewMotionVectorsBlock8x8.1
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.1,@function
StoreNewMotionVectorsBlock8x8.1:        # @StoreNewMotionVectorsBlock8x8.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1758969849, -72(%rbp)  # imm = 0x68D7BFF9
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -24(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB30_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_4:                               # %for.cond6
                                        #   Parent Loop BB30_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB30_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB30_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB30_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_4
.LBB30_7:                               # %for.end
                                        #   in Loop: Header=BB30_2 Depth=1
	jmp	.LBB30_8
.LBB30_8:                               # %for.inc39
                                        #   in Loop: Header=BB30_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_2
.LBB30_9:                               # %for.end41
	jmp	.LBB30_61
.LBB30_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB30_20
# %bb.11:                               # %if.then42
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB30_12 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_14:                              # %for.cond46
                                        #   Parent Loop BB30_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB30_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB30_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB30_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_14
.LBB30_17:                              # %for.end119
                                        #   in Loop: Header=BB30_12 Depth=1
	jmp	.LBB30_18
.LBB30_18:                              # %for.inc120
                                        #   in Loop: Header=BB30_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_12
.LBB30_19:                              # %for.end122
	jmp	.LBB30_61
.LBB30_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB30_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB30_31
.LBB30_22:                              # %if.then125
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_25:                              # %for.cond129
                                        #   Parent Loop BB30_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB30_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB30_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB30_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_25
.LBB30_28:                              # %for.end206
                                        #   in Loop: Header=BB30_23 Depth=1
	jmp	.LBB30_29
.LBB30_29:                              # %for.inc207
                                        #   in Loop: Header=BB30_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_23
.LBB30_30:                              # %for.end209
	jmp	.LBB30_40
.LBB30_31:                              # %if.else210
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_34:                              # %for.cond214
                                        #   Parent Loop BB30_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB30_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB30_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB30_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_34
.LBB30_37:                              # %for.end235
                                        #   in Loop: Header=BB30_32 Depth=1
	jmp	.LBB30_38
.LBB30_38:                              # %for.inc236
                                        #   in Loop: Header=BB30_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_32
.LBB30_39:                              # %for.end238
	jmp	.LBB30_40
.LBB30_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB30_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB30_51
.LBB30_42:                              # %if.then243
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB30_43 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_45:                              # %for.cond247
                                        #   Parent Loop BB30_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB30_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB30_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB30_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_45
.LBB30_48:                              # %for.end324
                                        #   in Loop: Header=BB30_43 Depth=1
	jmp	.LBB30_49
.LBB30_49:                              # %for.inc325
                                        #   in Loop: Header=BB30_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_43
.LBB30_50:                              # %for.end327
	jmp	.LBB30_60
.LBB30_51:                              # %if.else328
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB30_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB30_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB30_54:                              # %for.cond332
                                        #   Parent Loop BB30_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB30_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB30_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB30_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_54
.LBB30_57:                              # %for.end353
                                        #   in Loop: Header=BB30_52 Depth=1
	jmp	.LBB30_58
.LBB30_58:                              # %for.inc354
                                        #   in Loop: Header=BB30_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_52
.LBB30_59:                              # %for.end356
	jmp	.LBB30_60
.LBB30_60:                              # %if.end357
	jmp	.LBB30_61
.LBB30_61:                              # %if.end358
	cmpl	$1758969849, -72(%rbp)  # imm = 0x68D7BFF9
	jne	.LBB30_63
.LBB30_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_62
.Lfunc_end30:
	.size	StoreNewMotionVectorsBlock8x8.1, .Lfunc_end30-StoreNewMotionVectorsBlock8x8.1
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.2          # -- Begin function RestoreMV8x8.2
	.p2align	4, 0x90
	.type	RestoreMV8x8.2,@function
RestoreMV8x8.2:                         # @RestoreMV8x8.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$934495584, -12(%rbp)   # imm = 0x37B34560
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB31_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB31_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB31_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB31_1
.LBB31_4:                               # %for.end
	cmpl	$934495584, -12(%rbp)   # imm = 0x37B34560
	jne	.LBB31_6
.LBB31_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_5
.Lfunc_end31:
	.size	RestoreMV8x8.2, .Lfunc_end31-RestoreMV8x8.2
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.3 # -- Begin function StoreNewMotionVectorsBlock8x8.3
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.3,@function
StoreNewMotionVectorsBlock8x8.3:        # @StoreNewMotionVectorsBlock8x8.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$202298450, -72(%rbp)   # imm = 0xC0ED452
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB32_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_4:                               # %for.cond6
                                        #   Parent Loop BB32_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB32_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB32_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_4
.LBB32_7:                               # %for.end
                                        #   in Loop: Header=BB32_2 Depth=1
	jmp	.LBB32_8
.LBB32_8:                               # %for.inc39
                                        #   in Loop: Header=BB32_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_2
.LBB32_9:                               # %for.end41
	jmp	.LBB32_61
.LBB32_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB32_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_14:                              # %for.cond46
                                        #   Parent Loop BB32_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB32_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB32_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_14
.LBB32_17:                              # %for.end119
                                        #   in Loop: Header=BB32_12 Depth=1
	jmp	.LBB32_18
.LBB32_18:                              # %for.inc120
                                        #   in Loop: Header=BB32_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_12
.LBB32_19:                              # %for.end122
	jmp	.LBB32_61
.LBB32_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB32_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB32_31
.LBB32_22:                              # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_25:                              # %for.cond129
                                        #   Parent Loop BB32_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB32_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB32_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_25
.LBB32_28:                              # %for.end206
                                        #   in Loop: Header=BB32_23 Depth=1
	jmp	.LBB32_29
.LBB32_29:                              # %for.inc207
                                        #   in Loop: Header=BB32_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_23
.LBB32_30:                              # %for.end209
	jmp	.LBB32_40
.LBB32_31:                              # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB32_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_34:                              # %for.cond214
                                        #   Parent Loop BB32_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB32_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB32_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_34
.LBB32_37:                              # %for.end235
                                        #   in Loop: Header=BB32_32 Depth=1
	jmp	.LBB32_38
.LBB32_38:                              # %for.inc236
                                        #   in Loop: Header=BB32_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_32
.LBB32_39:                              # %for.end238
	jmp	.LBB32_40
.LBB32_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB32_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB32_51
.LBB32_42:                              # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB32_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_45:                              # %for.cond247
                                        #   Parent Loop BB32_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB32_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB32_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_45
.LBB32_48:                              # %for.end324
                                        #   in Loop: Header=BB32_43 Depth=1
	jmp	.LBB32_49
.LBB32_49:                              # %for.inc325
                                        #   in Loop: Header=BB32_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_43
.LBB32_50:                              # %for.end327
	jmp	.LBB32_60
.LBB32_51:                              # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB32_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB32_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB32_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB32_54:                              # %for.cond332
                                        #   Parent Loop BB32_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB32_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB32_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB32_54
.LBB32_57:                              # %for.end353
                                        #   in Loop: Header=BB32_52 Depth=1
	jmp	.LBB32_58
.LBB32_58:                              # %for.inc354
                                        #   in Loop: Header=BB32_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_52
.LBB32_59:                              # %for.end356
	jmp	.LBB32_60
.LBB32_60:                              # %if.end357
	jmp	.LBB32_61
.LBB32_61:                              # %if.end358
	cmpl	$202298450, -72(%rbp)   # imm = 0xC0ED452
	jne	.LBB32_63
.LBB32_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_62
.Lfunc_end32:
	.size	StoreNewMotionVectorsBlock8x8.3, .Lfunc_end32-StoreNewMotionVectorsBlock8x8.3
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.4 # -- Begin function RDCost_for_4x4Blocks_Chroma.4
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.4,@function
RDCost_for_4x4Blocks_Chroma.4:          # @RDCost_for_4x4Blocks_Chroma.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$519546720, -60(%rbp)   # imm = 0x1EF7A760
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB33_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB33_3
.LBB33_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB33_3:                               # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB33_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB33_18
.LBB33_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB33_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB33_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB33_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB33_8:                               # %land.end
                                        #   in Loop: Header=BB33_6 Depth=1
	testb	$1, %al
	jne	.LBB33_9
	jmp	.LBB33_17
.LBB33_9:                               # %for.body
                                        #   in Loop: Header=BB33_6 Depth=1
	movq	-88(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-104(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB33_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB33_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB33_12
.LBB33_11:                              # %if.else54
                                        #   in Loop: Header=BB33_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB33_12:                              # %if.end55
                                        #   in Loop: Header=BB33_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB33_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB33_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB33_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB33_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB33_15:                              # %lor.end
                                        #   in Loop: Header=BB33_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB33_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB33_6
.LBB33_17:                              # %for.end
	jmp	.LBB33_18
.LBB33_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$519546720, -60(%rbp)   # imm = 0x1EF7A760
	jne	.LBB33_20
.LBB33_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_19
.Lfunc_end33:
	.size	RDCost_for_4x4Blocks_Chroma.4, .Lfunc_end33-RDCost_for_4x4Blocks_Chroma.4
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.5  # -- Begin function set_mbaff_parameters.5
	.p2align	4, 0x90
	.type	set_mbaff_parameters.5,@function
set_mbaff_parameters.5:                 # @set_mbaff_parameters.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$737293969, -32(%rbp)   # imm = 0x2BF23691
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB34_2
# %bb.1:                                # %if.then
	jmp	.LBB34_82
.LBB34_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB34_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	$0, -4(%rbp)
.LBB34_5:                               # %for.cond3
                                        #   Parent Loop BB34_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB34_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB34_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB34_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_5
.LBB34_8:                               # %for.end
                                        #   in Loop: Header=BB34_3 Depth=1
	jmp	.LBB34_9
.LBB34_9:                               # %for.inc17
                                        #   in Loop: Header=BB34_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB34_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB34_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB34_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB34_12 Depth=1
	movl	$0, -4(%rbp)
.LBB34_14:                              # %for.cond27
                                        #   Parent Loop BB34_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB34_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB34_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB34_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_14
.LBB34_17:                              # %for.end60
                                        #   in Loop: Header=BB34_12 Depth=1
	jmp	.LBB34_18
.LBB34_18:                              # %for.inc61
                                        #   in Loop: Header=BB34_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_12
.LBB34_19:                              # %for.end63
	jmp	.LBB34_20
.LBB34_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB34_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB34_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB34_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB34_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_26 Depth 2
                                        #       Child Loop BB34_28 Depth 3
                                        #         Child Loop BB34_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	$0, -8(%rbp)
.LBB34_26:                              # %for.cond84
                                        #   Parent Loop BB34_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_28 Depth 3
                                        #         Child Loop BB34_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB34_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	$0, -12(%rbp)
.LBB34_28:                              # %for.cond88
                                        #   Parent Loop BB34_24 Depth=1
                                        #     Parent Loop BB34_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB34_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB34_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	$0, -16(%rbp)
.LBB34_30:                              # %for.cond92
                                        #   Parent Loop BB34_24 Depth=1
                                        #     Parent Loop BB34_26 Depth=2
                                        #       Parent Loop BB34_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB34_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB34_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB34_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_30
.LBB34_33:                              # %for.end115
                                        #   in Loop: Header=BB34_28 Depth=3
	jmp	.LBB34_34
.LBB34_34:                              # %for.inc116
                                        #   in Loop: Header=BB34_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_28
.LBB34_35:                              # %for.end118
                                        #   in Loop: Header=BB34_26 Depth=2
	jmp	.LBB34_36
.LBB34_36:                              # %for.inc119
                                        #   in Loop: Header=BB34_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_26
.LBB34_37:                              # %for.end121
                                        #   in Loop: Header=BB34_24 Depth=1
	jmp	.LBB34_38
.LBB34_38:                              # %for.inc122
                                        #   in Loop: Header=BB34_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_24
.LBB34_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB34_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_42 Depth 2
                                        #       Child Loop BB34_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB34_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB34_40 Depth=1
	movl	$0, -12(%rbp)
.LBB34_42:                              # %for.cond129
                                        #   Parent Loop BB34_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB34_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB34_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB34_42 Depth=2
	movl	$0, -16(%rbp)
.LBB34_44:                              # %for.cond133
                                        #   Parent Loop BB34_40 Depth=1
                                        #     Parent Loop BB34_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB34_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB34_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB34_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB34_44
.LBB34_47:                              # %for.end152
                                        #   in Loop: Header=BB34_42 Depth=2
	jmp	.LBB34_48
.LBB34_48:                              # %for.inc153
                                        #   in Loop: Header=BB34_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_42
.LBB34_49:                              # %for.end155
                                        #   in Loop: Header=BB34_40 Depth=1
	jmp	.LBB34_50
.LBB34_50:                              # %for.inc156
                                        #   in Loop: Header=BB34_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_40
.LBB34_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB34_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB34_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB34_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB34_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_52
.LBB34_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB34_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB34_56 Depth=1
	movl	$0, -4(%rbp)
.LBB34_58:                              # %for.cond180
                                        #   Parent Loop BB34_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB34_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB34_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_58
.LBB34_61:                              # %for.end198
                                        #   in Loop: Header=BB34_56 Depth=1
	jmp	.LBB34_62
.LBB34_62:                              # %for.inc199
                                        #   in Loop: Header=BB34_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_56
.LBB34_63:                              # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB34_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB34_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB34_65 Depth=1
	movl	$0, -4(%rbp)
.LBB34_67:                              # %for.cond208
                                        #   Parent Loop BB34_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB34_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB34_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_67
.LBB34_70:                              # %for.end230
                                        #   in Loop: Header=BB34_65 Depth=1
	jmp	.LBB34_71
.LBB34_71:                              # %for.inc231
                                        #   in Loop: Header=BB34_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_65
.LBB34_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB34_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB34_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB34_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB34_76:                              # %for.cond244
                                        #   Parent Loop BB34_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB34_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB34_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB34_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB34_76
.LBB34_79:                              # %for.end267
                                        #   in Loop: Header=BB34_74 Depth=1
	jmp	.LBB34_80
.LBB34_80:                              # %for.inc268
                                        #   in Loop: Header=BB34_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_74
.LBB34_81:                              # %for.end270.loopexit
	jmp	.LBB34_82
.LBB34_82:                              # %for.end270
	cmpl	$737293969, -32(%rbp)   # imm = 0x2BF23691
	jne	.LBB34_84
.LBB34_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_83
.Lfunc_end34:
	.size	set_mbaff_parameters.5, .Lfunc_end34-set_mbaff_parameters.5
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.6            # -- Begin function StoreMV8x8.6
	.p2align	4, 0x90
	.type	StoreMV8x8.6,@function
StoreMV8x8.6:                           # @StoreMV8x8.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$22356672, -8(%rbp)     # imm = 0x15522C0
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB35_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_4:                               # %for.end
	cmpl	$22356672, -8(%rbp)     # imm = 0x15522C0
	jne	.LBB35_6
.LBB35_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_5
.Lfunc_end35:
	.size	StoreMV8x8.6, .Lfunc_end35-StoreMV8x8.6
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.7 # -- Begin function store_macroblock_parameters.7
	.p2align	4, 0x90
	.type	store_macroblock_parameters.7,@function
store_macroblock_parameters.7:          # @store_macroblock_parameters.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1232972786, -36(%rbp)  # imm = 0x497DABF2
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB36_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB36_3
.LBB36_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB36_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB36_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB36_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB36_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB36_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_4
.LBB36_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB36_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB36_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB36_10:                              # %for.cond20
                                        #   Parent Loop BB36_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB36_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB36_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_10
.LBB36_13:                              # %for.end39
                                        #   in Loop: Header=BB36_8 Depth=1
	jmp	.LBB36_14
.LBB36_14:                              # %for.inc40
                                        #   in Loop: Header=BB36_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_8
.LBB36_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB36_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB36_16 Depth=1
	movl	$0, -8(%rbp)
.LBB36_18:                              # %for.cond47
                                        #   Parent Loop BB36_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB36_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB36_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_18
.LBB36_21:                              # %for.end70
                                        #   in Loop: Header=BB36_16 Depth=1
	jmp	.LBB36_22
.LBB36_22:                              # %for.inc71
                                        #   in Loop: Header=BB36_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_16
.LBB36_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB36_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB36_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB36_24 Depth=1
	movl	$0, -4(%rbp)
.LBB36_26:                              # %for.cond78
                                        #   Parent Loop BB36_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB36_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB36_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB36_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_26
.LBB36_29:                              # %for.end94
                                        #   in Loop: Header=BB36_24 Depth=1
	jmp	.LBB36_30
.LBB36_30:                              # %for.inc95
                                        #   in Loop: Header=BB36_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_24
.LBB36_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB36_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB36_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB36_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	$0, -4(%rbp)
.LBB36_35:                              # %for.cond105
                                        #   Parent Loop BB36_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB36_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB36_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB36_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_35
.LBB36_38:                              # %for.end136
                                        #   in Loop: Header=BB36_33 Depth=1
	jmp	.LBB36_39
.LBB36_39:                              # %for.inc137
                                        #   in Loop: Header=BB36_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_33
.LBB36_40:                              # %for.end139
	jmp	.LBB36_41
.LBB36_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB36_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB36_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB36_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_46 Depth 2
                                        #       Child Loop BB36_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB36_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB36_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB36_46:                              # %for.cond152
                                        #   Parent Loop BB36_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB36_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB36_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB36_48:                              # %for.cond159
                                        #   Parent Loop BB36_44 Depth=1
                                        #     Parent Loop BB36_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB36_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB36_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB36_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_48
.LBB36_51:                              # %for.end179
                                        #   in Loop: Header=BB36_46 Depth=2
	jmp	.LBB36_52
.LBB36_52:                              # %for.inc180
                                        #   in Loop: Header=BB36_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_46
.LBB36_53:                              # %for.end182
                                        #   in Loop: Header=BB36_44 Depth=1
	jmp	.LBB36_54
.LBB36_54:                              # %for.inc183
                                        #   in Loop: Header=BB36_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB36_44
.LBB36_55:                              # %for.end185
	jmp	.LBB36_56
.LBB36_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB36_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB36_59
.LBB36_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB36_60
.LBB36_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB36_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB36_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB36_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB36_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB36_61 Depth=1
	movl	$0, -4(%rbp)
.LBB36_63:                              # %for.cond197
                                        #   Parent Loop BB36_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB36_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB36_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB36_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB36_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB36_66:                              # %if.end230
                                        #   in Loop: Header=BB36_63 Depth=2
	jmp	.LBB36_67
.LBB36_67:                              # %for.inc231
                                        #   in Loop: Header=BB36_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_63
.LBB36_68:                              # %for.end233
                                        #   in Loop: Header=BB36_61 Depth=1
	jmp	.LBB36_69
.LBB36_69:                              # %for.inc234
                                        #   in Loop: Header=BB36_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB36_61
.LBB36_70:                              # %for.end236
	cmpl	$1232972786, -36(%rbp)  # imm = 0x497DABF2
	jne	.LBB36_72
.LBB36_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_71
.Lfunc_end36:
	.size	store_macroblock_parameters.7, .Lfunc_end36-store_macroblock_parameters.7
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.8        # -- Begin function UpdatePixelMap.8
	.p2align	4, 0x90
	.type	UpdatePixelMap.8,@function
UpdatePixelMap.8:                       # @UpdatePixelMap.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$170725621, -28(%rbp)   # imm = 0xA2D10F5
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB37_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB37_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB37_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	$0, -8(%rbp)
.LBB37_4:                               # %for.cond2
                                        #   Parent Loop BB37_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB37_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB37_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB37_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_4
.LBB37_7:                               # %for.end
                                        #   in Loop: Header=BB37_2 Depth=1
	jmp	.LBB37_8
.LBB37_8:                               # %for.inc7
                                        #   in Loop: Header=BB37_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_2
.LBB37_9:                               # %for.end9
	jmp	.LBB37_41
.LBB37_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB37_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_13 Depth 2
                                        #       Child Loop BB37_16 Depth 3
                                        #         Child Loop BB37_18 Depth 4
                                        #       Child Loop BB37_25 Depth 3
                                        #         Child Loop BB37_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB37_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	$0, -12(%rbp)
.LBB37_13:                              # %for.cond14
                                        #   Parent Loop BB37_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_16 Depth 3
                                        #         Child Loop BB37_18 Depth 4
                                        #       Child Loop BB37_25 Depth 3
                                        #         Child Loop BB37_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB37_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB37_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB37_16:                              # %for.cond27
                                        #   Parent Loop BB37_11 Depth=1
                                        #     Parent Loop BB37_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB37_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB37_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB37_18:                              # %for.cond31
                                        #   Parent Loop BB37_11 Depth=1
                                        #     Parent Loop BB37_13 Depth=2
                                        #       Parent Loop BB37_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB37_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB37_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_18
.LBB37_21:                              # %for.end40
                                        #   in Loop: Header=BB37_16 Depth=3
	jmp	.LBB37_22
.LBB37_22:                              # %for.inc41
                                        #   in Loop: Header=BB37_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_16
.LBB37_23:                              # %for.end43
                                        #   in Loop: Header=BB37_13 Depth=2
	jmp	.LBB37_36
.LBB37_24:                              # %if.else44
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB37_25:                              # %for.cond46
                                        #   Parent Loop BB37_11 Depth=1
                                        #     Parent Loop BB37_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB37_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB37_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB37_27:                              # %for.cond50
                                        #   Parent Loop BB37_11 Depth=1
                                        #     Parent Loop BB37_13 Depth=2
                                        #       Parent Loop BB37_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB37_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB37_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB37_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB37_31
.LBB37_30:                              # %cond.false
                                        #   in Loop: Header=BB37_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB37_31:                              # %cond.end
                                        #   in Loop: Header=BB37_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB37_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_27
.LBB37_33:                              # %for.end76
                                        #   in Loop: Header=BB37_25 Depth=3
	jmp	.LBB37_34
.LBB37_34:                              # %for.inc77
                                        #   in Loop: Header=BB37_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_25
.LBB37_35:                              # %for.end79
                                        #   in Loop: Header=BB37_13 Depth=2
	jmp	.LBB37_36
.LBB37_36:                              # %if.end
                                        #   in Loop: Header=BB37_13 Depth=2
	jmp	.LBB37_37
.LBB37_37:                              # %for.inc80
                                        #   in Loop: Header=BB37_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_13
.LBB37_38:                              # %for.end82
                                        #   in Loop: Header=BB37_11 Depth=1
	jmp	.LBB37_39
.LBB37_39:                              # %for.inc83
                                        #   in Loop: Header=BB37_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_11
.LBB37_40:                              # %for.end85
	jmp	.LBB37_41
.LBB37_41:                              # %if.end86
	cmpl	$170725621, -28(%rbp)   # imm = 0xA2D10F5
	jne	.LBB37_43
.LBB37_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_42
.Lfunc_end37:
	.size	UpdatePixelMap.8, .Lfunc_end37-UpdatePixelMap.8
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.9 # -- Begin function StoreNewMotionVectorsBlock8x8.9
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.9,@function
StoreNewMotionVectorsBlock8x8.9:        # @StoreNewMotionVectorsBlock8x8.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$200514253, -72(%rbp)   # imm = 0xBF39ACD
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB38_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_4:                               # %for.cond6
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB38_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc39
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end41
	jmp	.LBB38_61
.LBB38_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB38_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_14 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB38_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_14:                              # %for.cond46
                                        #   Parent Loop BB38_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB38_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB38_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB38_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_14
.LBB38_17:                              # %for.end119
                                        #   in Loop: Header=BB38_12 Depth=1
	jmp	.LBB38_18
.LBB38_18:                              # %for.inc120
                                        #   in Loop: Header=BB38_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_12
.LBB38_19:                              # %for.end122
	jmp	.LBB38_61
.LBB38_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB38_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB38_31
.LBB38_22:                              # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_25:                              # %for.cond129
                                        #   Parent Loop BB38_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB38_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB38_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end206
                                        #   in Loop: Header=BB38_23 Depth=1
	jmp	.LBB38_29
.LBB38_29:                              # %for.inc207
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_23
.LBB38_30:                              # %for.end209
	jmp	.LBB38_40
.LBB38_31:                              # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB38_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_34:                              # %for.cond214
                                        #   Parent Loop BB38_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB38_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB38_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB38_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_34
.LBB38_37:                              # %for.end235
                                        #   in Loop: Header=BB38_32 Depth=1
	jmp	.LBB38_38
.LBB38_38:                              # %for.inc236
                                        #   in Loop: Header=BB38_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_32
.LBB38_39:                              # %for.end238
	jmp	.LBB38_40
.LBB38_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB38_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB38_51
.LBB38_42:                              # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_45 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_45:                              # %for.cond247
                                        #   Parent Loop BB38_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB38_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB38_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB38_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_45
.LBB38_48:                              # %for.end324
                                        #   in Loop: Header=BB38_43 Depth=1
	jmp	.LBB38_49
.LBB38_49:                              # %for.inc325
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_43
.LBB38_50:                              # %for.end327
	jmp	.LBB38_60
.LBB38_51:                              # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB38_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_54:                              # %for.cond332
                                        #   Parent Loop BB38_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB38_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB38_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_54
.LBB38_57:                              # %for.end353
                                        #   in Loop: Header=BB38_52 Depth=1
	jmp	.LBB38_58
.LBB38_58:                              # %for.inc354
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_52
.LBB38_59:                              # %for.end356
	jmp	.LBB38_60
.LBB38_60:                              # %if.end357
	jmp	.LBB38_61
.LBB38_61:                              # %if.end358
	cmpl	$200514253, -72(%rbp)   # imm = 0xBF39ACD
	jne	.LBB38_63
.LBB38_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_62
.Lfunc_end38:
	.size	StoreNewMotionVectorsBlock8x8.9, .Lfunc_end38-StoreNewMotionVectorsBlock8x8.9
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.10 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.10
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.10,@function
Mode_Decision_for_Intra4x4Macroblock.10: # @Mode_Decision_for_Intra4x4Macroblock.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$342187359, -24(%rbp)   # imm = 0x14655D5F
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB39_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB39_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB39_4:                               # %if.end
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB39_1
.LBB39_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$342187359, -24(%rbp)   # imm = 0x14655D5F
	jne	.LBB39_8
.LBB39_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_7
.Lfunc_end39:
	.size	Mode_Decision_for_Intra4x4Macroblock.10, .Lfunc_end39-Mode_Decision_for_Intra4x4Macroblock.10
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.11       # -- Begin function UpdatePixelMap.11
	.p2align	4, 0x90
	.type	UpdatePixelMap.11,@function
UpdatePixelMap.11:                      # @UpdatePixelMap.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1876132806, -28(%rbp)  # imm = 0x6FD383C6
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB40_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB40_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_4 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB40_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	$0, -4(%rbp)
.LBB40_4:                               # %for.cond2
                                        #   Parent Loop BB40_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB40_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB40_4 Depth=2
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB40_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_4
.LBB40_7:                               # %for.end
                                        #   in Loop: Header=BB40_2 Depth=1
	jmp	.LBB40_8
.LBB40_8:                               # %for.inc7
                                        #   in Loop: Header=BB40_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_2
.LBB40_9:                               # %for.end9
	jmp	.LBB40_41
.LBB40_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB40_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_13 Depth 2
                                        #       Child Loop BB40_16 Depth 3
                                        #         Child Loop BB40_18 Depth 4
                                        #       Child Loop BB40_25 Depth 3
                                        #         Child Loop BB40_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	$0, -12(%rbp)
.LBB40_13:                              # %for.cond14
                                        #   Parent Loop BB40_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB40_16 Depth 3
                                        #         Child Loop BB40_18 Depth 4
                                        #       Child Loop BB40_25 Depth 3
                                        #         Child Loop BB40_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB40_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB40_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB40_16:                              # %for.cond27
                                        #   Parent Loop BB40_11 Depth=1
                                        #     Parent Loop BB40_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_18 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB40_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB40_18:                              # %for.cond31
                                        #   Parent Loop BB40_11 Depth=1
                                        #     Parent Loop BB40_13 Depth=2
                                        #       Parent Loop BB40_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB40_18 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB40_18 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_18
.LBB40_21:                              # %for.end40
                                        #   in Loop: Header=BB40_16 Depth=3
	jmp	.LBB40_22
.LBB40_22:                              # %for.inc41
                                        #   in Loop: Header=BB40_16 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_16
.LBB40_23:                              # %for.end43
                                        #   in Loop: Header=BB40_13 Depth=2
	jmp	.LBB40_36
.LBB40_24:                              # %if.else44
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB40_25:                              # %for.cond46
                                        #   Parent Loop BB40_11 Depth=1
                                        #     Parent Loop BB40_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB40_27 Depth 4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB40_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB40_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB40_27:                              # %for.cond50
                                        #   Parent Loop BB40_11 Depth=1
                                        #     Parent Loop BB40_13 Depth=2
                                        #       Parent Loop BB40_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB40_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB40_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB40_27 Depth=4
	movq	pixel_map, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB40_31
.LBB40_30:                              # %cond.false
                                        #   in Loop: Header=BB40_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB40_31:                              # %cond.end
                                        #   in Loop: Header=BB40_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB40_27 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_27
.LBB40_33:                              # %for.end76
                                        #   in Loop: Header=BB40_25 Depth=3
	jmp	.LBB40_34
.LBB40_34:                              # %for.inc77
                                        #   in Loop: Header=BB40_25 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_25
.LBB40_35:                              # %for.end79
                                        #   in Loop: Header=BB40_13 Depth=2
	jmp	.LBB40_36
.LBB40_36:                              # %if.end
                                        #   in Loop: Header=BB40_13 Depth=2
	jmp	.LBB40_37
.LBB40_37:                              # %for.inc80
                                        #   in Loop: Header=BB40_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB40_13
.LBB40_38:                              # %for.end82
                                        #   in Loop: Header=BB40_11 Depth=1
	jmp	.LBB40_39
.LBB40_39:                              # %for.inc83
                                        #   in Loop: Header=BB40_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB40_11
.LBB40_40:                              # %for.end85
	jmp	.LBB40_41
.LBB40_41:                              # %if.end86
	cmpl	$1876132806, -28(%rbp)  # imm = 0x6FD383C6
	jne	.LBB40_43
.LBB40_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_42
.Lfunc_end40:
	.size	UpdatePixelMap.11, .Lfunc_end40-UpdatePixelMap.11
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.12
.LCPI41_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI41_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.12
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.12,@function
Mode_Decision_for_4x4IntraBlocks.12:    # @Mode_Decision_for_4x4IntraBlocks.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI41_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1006583470, -184(%rbp) # imm = 0x3BFF3EAE
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -176(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -160(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB41_8
# %bb.1:                                # %if.then
	cmpl	$0, -232(%rbp)
	je	.LBB41_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_4
.LBB41_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB41_4
.LBB41_4:                               # %cond.end
	movl	%eax, -232(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB41_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_7
.LBB41_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB41_7
.LBB41_7:                               # %cond.end31
	movl	%eax, -208(%rbp)
.LBB41_8:                               # %if.end
	cmpl	$0, -208(%rbp)
	je	.LBB41_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_11
.LBB41_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB41_11
.LBB41_11:                              # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB41_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB41_14
.LBB41_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB41_14
.LBB41_14:                              # %cond.end55
	movl	%eax, -108(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB41_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -108(%rbp)
	jge	.LBB41_17
.LBB41_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB41_21
.LBB41_17:                              # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB41_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB41_20
.LBB41_19:                              # %cond.false62
	movl	-108(%rbp), %eax
.LBB41_20:                              # %cond.end63
.LBB41_21:                              # %cond.end65
	movl	%eax, -92(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-168(%rbp), %rdx
	leaq	-180(%rbp), %rcx
	leaq	-156(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB41_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_49 Depth 2
                                        #       Child Loop BB41_51 Depth 3
                                        #     Child Loop BB41_64 Depth 2
                                        #       Child Loop BB41_66 Depth 3
                                        #     Child Loop BB41_73 Depth 2
                                        #       Child Loop BB41_75 Depth 3
                                        #     Child Loop BB41_81 Depth 2
                                        #       Child Loop BB41_83 Depth 3
                                        #     Child Loop BB41_91 Depth 2
                                        #       Child Loop BB41_93 Depth 3
                                        #     Child Loop BB41_99 Depth 2
                                        #       Child Loop BB41_101 Depth 3
                                        #     Child Loop BB41_107 Depth 2
                                        #       Child Loop BB41_109 Depth 3
                                        #     Child Loop BB41_115 Depth 2
                                        #       Child Loop BB41_117 Depth 3
                                        #     Child Loop BB41_123 Depth 2
                                        #       Child Loop BB41_125 Depth 3
                                        #     Child Loop BB41_131 Depth 2
                                        #       Child Loop BB41_133 Depth 3
                                        #     Child Loop BB41_166 Depth 2
                                        #       Child Loop BB41_168 Depth 3
                                        #     Child Loop BB41_175 Depth 2
                                        #       Child Loop BB41_177 Depth 3
                                        #     Child Loop BB41_183 Depth 2
                                        #       Child Loop BB41_185 Depth 3
                                        #     Child Loop BB41_191 Depth 2
                                        #       Child Loop BB41_193 Depth 3
                                        #     Child Loop BB41_199 Depth 2
                                        #       Child Loop BB41_201 Depth 3
                                        #         Child Loop BB41_203 Depth 4
                                        #     Child Loop BB41_211 Depth 2
                                        #       Child Loop BB41_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB41_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB41_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB41_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB41_28
.LBB41_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -180(%rbp)
	movb	$1, %al
	jne	.LBB41_32
.LBB41_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB41_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB41_31
.LBB41_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -168(%rbp)
	movb	$1, %al
	jne	.LBB41_32
.LBB41_31:                              # %lor.rhs
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -156(%rbp)
	setne	%al
.LBB41_32:                              # %lor.end
                                        #   in Loop: Header=BB41_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB41_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB41_46
.LBB41_34:                              # %if.then86
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB41_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB41_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB41_38
.LBB41_37:                              # %if.then92
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_38:                              # %if.end93
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB41_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB41_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB41_42
.LBB41_41:                              # %if.then99
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_42:                              # %if.end100
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB41_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB41_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_45:                              # %if.end105
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_46
.LBB41_46:                              # %if.end106
                                        #   in Loop: Header=BB41_22 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB41_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -112(%rbp)
.LBB41_49:                              # %for.cond111
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB41_49 Depth=2
	movl	$0, -12(%rbp)
.LBB41_51:                              # %for.cond114
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB41_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB41_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB41_51
.LBB41_54:                              # %for.end
                                        #   in Loop: Header=BB41_49 Depth=2
	jmp	.LBB41_55
.LBB41_55:                              # %for.inc133
                                        #   in Loop: Header=BB41_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_49
.LBB41_56:                              # %for.end135
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jne	.LBB41_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB41_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB41_59
.LBB41_58:                              # %cond.false139
                                        #   in Loop: Header=BB41_22 Depth=1
	vmovsd	.LCPI41_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB41_59:                              # %cond.end142
                                        #   in Loop: Header=BB41_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB41_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB41_61:                              # %if.end148
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_221
.LBB41_62:                              # %if.else
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_64:                              # %for.cond151
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB41_64 Depth=2
	movl	$0, -12(%rbp)
.LBB41_66:                              # %for.cond155
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB41_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB41_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_66
.LBB41_69:                              # %for.end194
                                        #   in Loop: Header=BB41_64 Depth=2
	jmp	.LBB41_70
.LBB41_70:                              # %for.inc195
                                        #   in Loop: Header=BB41_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_64
.LBB41_71:                              # %for.end197
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_73:                              # %for.cond202
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB41_73 Depth=2
	movl	$0, -12(%rbp)
.LBB41_75:                              # %for.cond206
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB41_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB41_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_75
.LBB41_78:                              # %for.end224
                                        #   in Loop: Header=BB41_73 Depth=2
	jmp	.LBB41_79
.LBB41_79:                              # %for.inc225
                                        #   in Loop: Header=BB41_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_73
.LBB41_80:                              # %for.end227
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -20(%rbp)
.LBB41_81:                              # %for.cond228
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB41_81 Depth=2
	movl	$0, -24(%rbp)
.LBB41_83:                              # %for.cond232
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB41_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB41_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_83
.LBB41_86:                              # %for.end249
                                        #   in Loop: Header=BB41_81 Depth=2
	jmp	.LBB41_87
.LBB41_87:                              # %for.inc250
                                        #   in Loop: Header=BB41_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_81
.LBB41_88:                              # %for.end252
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_89:                              # %if.end253
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB41_220
.LBB41_90:                              # %if.else254
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_91:                              # %for.cond255
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB41_91 Depth=2
	movl	$0, -12(%rbp)
.LBB41_93:                              # %for.cond259
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB41_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB41_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_93
.LBB41_96:                              # %for.end345
                                        #   in Loop: Header=BB41_91 Depth=2
	jmp	.LBB41_97
.LBB41_97:                              # %for.inc346
                                        #   in Loop: Header=BB41_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_91
.LBB41_98:                              # %for.end348
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_99:                              # %for.cond349
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB41_99 Depth=2
	movl	$0, -12(%rbp)
.LBB41_101:                             # %for.cond353
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB41_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB41_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_101
.LBB41_104:                             # %for.end368
                                        #   in Loop: Header=BB41_99 Depth=2
	jmp	.LBB41_105
.LBB41_105:                             # %for.inc369
                                        #   in Loop: Header=BB41_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_99
.LBB41_106:                             # %for.end371
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-92(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB41_107:                             # %for.cond374
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB41_107 Depth=2
	movl	$0, -12(%rbp)
.LBB41_109:                             # %for.cond378
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB41_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB41_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_109
.LBB41_112:                             # %for.end402
                                        #   in Loop: Header=BB41_107 Depth=2
	jmp	.LBB41_113
.LBB41_113:                             # %for.inc403
                                        #   in Loop: Header=BB41_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_107
.LBB41_114:                             # %for.end405
                                        #   in Loop: Header=BB41_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB41_115:                             # %for.cond409
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB41_115 Depth=2
	movl	$0, -12(%rbp)
.LBB41_117:                             # %for.cond413
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB41_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB41_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_117
.LBB41_120:                             # %for.end437
                                        #   in Loop: Header=BB41_115 Depth=2
	jmp	.LBB41_121
.LBB41_121:                             # %for.inc438
                                        #   in Loop: Header=BB41_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_115
.LBB41_122:                             # %for.end440
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB41_123:                             # %for.cond444
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB41_123 Depth=2
	movl	$0, -12(%rbp)
.LBB41_125:                             # %for.cond448
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB41_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB41_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_125
.LBB41_128:                             # %for.end463
                                        #   in Loop: Header=BB41_123 Depth=2
	jmp	.LBB41_129
.LBB41_129:                             # %for.inc464
                                        #   in Loop: Header=BB41_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_123
.LBB41_130:                             # %for.end466
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_131:                             # %for.cond467
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB41_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	$0, -12(%rbp)
.LBB41_133:                             # %for.cond471
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB41_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB41_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_137
.LBB41_136:                             # %cond.false516
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB41_137:                             # %cond.end529
                                        #   in Loop: Header=BB41_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB41_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_143
.LBB41_139:                             # %cond.false535
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_142
.LBB41_141:                             # %cond.false551
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_142:                             # %cond.end564
                                        #   in Loop: Header=BB41_133 Depth=3
.LBB41_143:                             # %cond.end566
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_146
.LBB41_145:                             # %cond.false588
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_146:                             # %cond.end598
                                        #   in Loop: Header=BB41_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB41_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_152
.LBB41_148:                             # %cond.false604
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_151
.LBB41_150:                             # %cond.false617
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_151:                             # %cond.end627
                                        #   in Loop: Header=BB41_133 Depth=3
.LBB41_152:                             # %cond.end629
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB41_155
.LBB41_154:                             # %cond.false655
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_155:                             # %cond.end668
                                        #   in Loop: Header=BB41_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB41_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_161
.LBB41_157:                             # %cond.false674
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB41_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB41_160
.LBB41_159:                             # %cond.false690
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_160:                             # %cond.end703
                                        #   in Loop: Header=BB41_133 Depth=3
.LBB41_161:                             # %cond.end705
                                        #   in Loop: Header=BB41_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB41_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_133
.LBB41_163:                             # %for.end718
                                        #   in Loop: Header=BB41_131 Depth=2
	jmp	.LBB41_164
.LBB41_164:                             # %for.inc719
                                        #   in Loop: Header=BB41_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_131
.LBB41_165:                             # %for.end721
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB41_166:                             # %for.cond722
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB41_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB41_168:                             # %for.cond726
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB41_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB41_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB41_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_168
.LBB41_171:                             # %for.end831
                                        #   in Loop: Header=BB41_166 Depth=2
	jmp	.LBB41_172
.LBB41_172:                             # %for.inc832
                                        #   in Loop: Header=BB41_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_166
.LBB41_173:                             # %for.end834
                                        #   in Loop: Header=BB41_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-96(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB41_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_175:                             # %for.cond842
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB41_175 Depth=2
	movl	$0, -12(%rbp)
.LBB41_177:                             # %for.cond846
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB41_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB41_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_177
.LBB41_180:                             # %for.end865
                                        #   in Loop: Header=BB41_175 Depth=2
	jmp	.LBB41_181
.LBB41_181:                             # %for.inc866
                                        #   in Loop: Header=BB41_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_175
.LBB41_182:                             # %for.end868
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_183:                             # %for.cond869
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB41_183 Depth=2
	movl	$0, -12(%rbp)
.LBB41_185:                             # %for.cond873
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB41_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB41_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_185
.LBB41_188:                             # %for.end893
                                        #   in Loop: Header=BB41_183 Depth=2
	jmp	.LBB41_189
.LBB41_189:                             # %for.inc894
                                        #   in Loop: Header=BB41_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_183
.LBB41_190:                             # %for.end896
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -16(%rbp)
.LBB41_191:                             # %for.cond897
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB41_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB41_191 Depth=2
	movl	$0, -12(%rbp)
.LBB41_193:                             # %for.cond901
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB41_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB41_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB41_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_193
.LBB41_196:                             # %for.end921
                                        #   in Loop: Header=BB41_191 Depth=2
	jmp	.LBB41_197
.LBB41_197:                             # %for.inc922
                                        #   in Loop: Header=BB41_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_191
.LBB41_198:                             # %for.end924
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -12(%rbp)
.LBB41_199:                             # %for.cond925
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_201 Depth 3
                                        #         Child Loop BB41_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB41_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB41_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB41_201:                             # %for.cond985
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB41_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB41_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB41_201 Depth=3
	movl	$0, -24(%rbp)
.LBB41_203:                             # %for.cond989
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_199 Depth=2
                                        #       Parent Loop BB41_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB41_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB41_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB41_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_203
.LBB41_206:                             # %for.end1011
                                        #   in Loop: Header=BB41_201 Depth=3
	jmp	.LBB41_207
.LBB41_207:                             # %for.inc1012
                                        #   in Loop: Header=BB41_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_201
.LBB41_208:                             # %for.end1014
                                        #   in Loop: Header=BB41_199 Depth=2
	jmp	.LBB41_209
.LBB41_209:                             # %for.inc1015
                                        #   in Loop: Header=BB41_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_199
.LBB41_210:                             # %for.end1017
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	$0, -20(%rbp)
.LBB41_211:                             # %for.cond1018
                                        #   Parent Loop BB41_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB41_211 Depth=2
	movl	$0, -24(%rbp)
.LBB41_213:                             # %for.cond1022
                                        #   Parent Loop BB41_22 Depth=1
                                        #     Parent Loop BB41_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB41_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB41_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_213
.LBB41_216:                             # %for.end1040
                                        #   in Loop: Header=BB41_211 Depth=2
	jmp	.LBB41_217
.LBB41_217:                             # %for.inc1041
                                        #   in Loop: Header=BB41_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_211
.LBB41_218:                             # %for.end1043
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB41_219:                             # %if.end1044
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_220
.LBB41_220:                             # %if.end1045
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_221
.LBB41_221:                             # %if.end1046
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_222
.LBB41_222:                             # %if.end1047
                                        #   in Loop: Header=BB41_22 Depth=1
	jmp	.LBB41_223
.LBB41_223:                             # %for.inc1048
                                        #   in Loop: Header=BB41_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB41_22
.LBB41_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-176(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-160(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB41_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB41_230
.LBB41_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB41_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB41_229
.LBB41_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB41_229:                             # %cond.end1065
.LBB41_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB41_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB41_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB41_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB41_233 Depth=1
	movl	$0, -12(%rbp)
.LBB41_235:                             # %for.cond1087
                                        #   Parent Loop BB41_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB41_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB41_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_235
.LBB41_238:                             # %for.end1128
                                        #   in Loop: Header=BB41_233 Depth=1
	jmp	.LBB41_239
.LBB41_239:                             # %for.inc1129
                                        #   in Loop: Header=BB41_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_233
.LBB41_240:                             # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB41_317
.LBB41_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB41_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB41_242 Depth=1
	movl	$0, -12(%rbp)
.LBB41_244:                             # %for.cond1138
                                        #   Parent Loop BB41_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB41_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB41_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_244
.LBB41_247:                             # %for.end1226
                                        #   in Loop: Header=BB41_242 Depth=1
	jmp	.LBB41_248
.LBB41_248:                             # %for.inc1227
                                        #   in Loop: Header=BB41_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_242
.LBB41_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB41_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB41_250 Depth=1
	movl	$0, -12(%rbp)
.LBB41_252:                             # %for.cond1234
                                        #   Parent Loop BB41_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB41_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB41_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_252
.LBB41_255:                             # %for.end1249
                                        #   in Loop: Header=BB41_250 Depth=1
	jmp	.LBB41_256
.LBB41_256:                             # %for.inc1250
                                        #   in Loop: Header=BB41_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_250
.LBB41_257:                             # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-172(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB41_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB41_258 Depth=1
	movl	$0, -12(%rbp)
.LBB41_260:                             # %for.cond1258
                                        #   Parent Loop BB41_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB41_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB41_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_260
.LBB41_263:                             # %for.end1282
                                        #   in Loop: Header=BB41_258 Depth=1
	jmp	.LBB41_264
.LBB41_264:                             # %for.inc1283
                                        #   in Loop: Header=BB41_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_258
.LBB41_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB41_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB41_266 Depth=1
	movl	$0, -12(%rbp)
.LBB41_268:                             # %for.cond1328
                                        #   Parent Loop BB41_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB41_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB41_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_268
.LBB41_271:                             # %for.end1352
                                        #   in Loop: Header=BB41_266 Depth=1
	jmp	.LBB41_272
.LBB41_272:                             # %for.inc1353
                                        #   in Loop: Header=BB41_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_266
.LBB41_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB41_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB41_274 Depth=1
	movl	$0, -12(%rbp)
.LBB41_276:                             # %for.cond1398
                                        #   Parent Loop BB41_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB41_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB41_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_276
.LBB41_279:                             # %for.end1413
                                        #   in Loop: Header=BB41_274 Depth=1
	jmp	.LBB41_280
.LBB41_280:                             # %for.inc1414
                                        #   in Loop: Header=BB41_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_274
.LBB41_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB41_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB41_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB41_282 Depth=1
	movl	$0, -12(%rbp)
.LBB41_284:                             # %for.cond1421
                                        #   Parent Loop BB41_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB41_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB41_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_288
.LBB41_287:                             # %cond.false1467
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB41_288:                             # %cond.end1480
                                        #   in Loop: Header=BB41_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB41_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_294
.LBB41_290:                             # %cond.false1486
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_293
.LBB41_292:                             # %cond.false1502
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_293:                             # %cond.end1515
                                        #   in Loop: Header=BB41_284 Depth=2
.LBB41_294:                             # %cond.end1517
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_297
.LBB41_296:                             # %cond.false1541
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_297:                             # %cond.end1551
                                        #   in Loop: Header=BB41_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB41_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB41_303
.LBB41_299:                             # %cond.false1557
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_302
.LBB41_301:                             # %cond.false1570
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_302:                             # %cond.end1580
                                        #   in Loop: Header=BB41_284 Depth=2
.LBB41_303:                             # %cond.end1582
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB41_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB41_306
.LBB41_305:                             # %cond.false1608
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB41_306:                             # %cond.end1621
                                        #   in Loop: Header=BB41_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB41_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB41_312
.LBB41_308:                             # %cond.false1627
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB41_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB41_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB41_311
.LBB41_310:                             # %cond.false1643
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB41_311:                             # %cond.end1656
                                        #   in Loop: Header=BB41_284 Depth=2
.LBB41_312:                             # %cond.end1658
                                        #   in Loop: Header=BB41_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB41_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_284
.LBB41_314:                             # %for.end1671
                                        #   in Loop: Header=BB41_282 Depth=1
	jmp	.LBB41_315
.LBB41_315:                             # %for.inc1672
                                        #   in Loop: Header=BB41_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_282
.LBB41_316:                             # %for.end1674
	jmp	.LBB41_317
.LBB41_317:                             # %if.end1675
	jmp	.LBB41_367
.LBB41_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB41_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB41_319 Depth=1
	movl	$0, -12(%rbp)
.LBB41_321:                             # %for.cond1681
                                        #   Parent Loop BB41_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB41_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB41_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB41_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_321
.LBB41_324:                             # %for.end1700
                                        #   in Loop: Header=BB41_319 Depth=1
	jmp	.LBB41_325
.LBB41_325:                             # %for.inc1701
                                        #   in Loop: Header=BB41_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_319
.LBB41_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB41_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB41_328 Depth=1
	movl	$0, -12(%rbp)
.LBB41_330:                             # %for.cond1711
                                        #   Parent Loop BB41_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB41_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB41_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB41_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_330
.LBB41_333:                             # %for.end1731
                                        #   in Loop: Header=BB41_328 Depth=1
	jmp	.LBB41_334
.LBB41_334:                             # %for.inc1732
                                        #   in Loop: Header=BB41_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_328
.LBB41_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB41_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB41_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB41_336 Depth=1
	movl	$0, -12(%rbp)
.LBB41_338:                             # %for.cond1739
                                        #   Parent Loop BB41_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB41_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB41_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB41_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_338
.LBB41_341:                             # %for.end1759
                                        #   in Loop: Header=BB41_336 Depth=1
	jmp	.LBB41_342
.LBB41_342:                             # %for.inc1760
                                        #   in Loop: Header=BB41_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB41_336
.LBB41_343:                             # %for.end1762
	jmp	.LBB41_344
.LBB41_344:                             # %if.end1763
	movl	$0, -20(%rbp)
.LBB41_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB41_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB41_345 Depth=1
	movl	$0, -24(%rbp)
.LBB41_347:                             # %for.cond1768
                                        #   Parent Loop BB41_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB41_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB41_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB41_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_347
.LBB41_350:                             # %for.end1800
                                        #   in Loop: Header=BB41_345 Depth=1
	jmp	.LBB41_351
.LBB41_351:                             # %for.inc1801
                                        #   in Loop: Header=BB41_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_345
.LBB41_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB41_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB41_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_356 Depth 2
                                        #       Child Loop BB41_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB41_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB41_354 Depth=1
	movl	$0, -20(%rbp)
.LBB41_356:                             # %for.cond1811
                                        #   Parent Loop BB41_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB41_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB41_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB41_356 Depth=2
	movl	$0, -24(%rbp)
.LBB41_358:                             # %for.cond1815
                                        #   Parent Loop BB41_354 Depth=1
                                        #     Parent Loop BB41_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB41_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB41_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB41_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB41_358
.LBB41_361:                             # %for.end1837
                                        #   in Loop: Header=BB41_356 Depth=2
	jmp	.LBB41_362
.LBB41_362:                             # %for.inc1838
                                        #   in Loop: Header=BB41_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB41_356
.LBB41_363:                             # %for.end1840
                                        #   in Loop: Header=BB41_354 Depth=1
	jmp	.LBB41_364
.LBB41_364:                             # %for.inc1841
                                        #   in Loop: Header=BB41_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB41_354
.LBB41_365:                             # %for.end1843
	jmp	.LBB41_366
.LBB41_366:                             # %if.end1844
	jmp	.LBB41_367
.LBB41_367:                             # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$1006583470, -184(%rbp) # imm = 0x3BFF3EAE
	jne	.LBB41_369
.LBB41_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_368
.Lfunc_end41:
	.size	Mode_Decision_for_4x4IntraBlocks.12, .Lfunc_end41-Mode_Decision_for_4x4IntraBlocks.12
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.13 # -- Begin function SetCoeffAndReconstruction8x8.13
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.13,@function
SetCoeffAndReconstruction8x8.13:        # @SetCoeffAndReconstruction8x8.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1158496047, -40(%rbp)  # imm = 0x450D3F2F
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB42_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB42_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB42_4
.LBB42_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB42_4
.LBB42_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB42_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB42_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB42_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB42_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB42_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_6
.LBB42_9:                               # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB42_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB42_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	$0, -4(%rbp)
.LBB42_13:                              # %for.cond20
                                        #   Parent Loop BB42_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB42_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_13
.LBB42_16:                              # %for.end52
                                        #   in Loop: Header=BB42_11 Depth=1
	jmp	.LBB42_17
.LBB42_17:                              # %for.inc53
                                        #   in Loop: Header=BB42_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_11
.LBB42_18:                              # %for.end55
	jmp	.LBB42_28
.LBB42_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB42_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	$0, -4(%rbp)
.LBB42_22:                              # %for.cond60
                                        #   Parent Loop BB42_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB42_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_22
.LBB42_25:                              # %for.end86
                                        #   in Loop: Header=BB42_20 Depth=1
	jmp	.LBB42_26
.LBB42_26:                              # %for.inc87
                                        #   in Loop: Header=BB42_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_20
.LBB42_27:                              # %for.end89
	jmp	.LBB42_28
.LBB42_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB42_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB42_29 Depth=1
	movl	$0, -4(%rbp)
.LBB42_31:                              # %for.cond94
                                        #   Parent Loop BB42_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB42_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB42_35
.LBB42_34:                              # %cond.false127
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB42_35
.LBB42_35:                              # %cond.end128
                                        #   in Loop: Header=BB42_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB42_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_31
.LBB42_37:                              # %for.end141
                                        #   in Loop: Header=BB42_29 Depth=1
	jmp	.LBB42_38
.LBB42_38:                              # %for.inc142
                                        #   in Loop: Header=BB42_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_29
.LBB42_39:                              # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB42_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB42_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB42_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	$0, -4(%rbp)
.LBB42_43:                              # %for.cond151
                                        #   Parent Loop BB42_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB42_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB42_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB42_47
.LBB42_46:                              # %cond.false185
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB42_47
.LBB42_47:                              # %cond.end186
                                        #   in Loop: Header=BB42_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB42_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_43
.LBB42_49:                              # %for.end200
                                        #   in Loop: Header=BB42_41 Depth=1
	jmp	.LBB42_50
.LBB42_50:                              # %for.inc201
                                        #   in Loop: Header=BB42_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_41
.LBB42_51:                              # %for.end203
	jmp	.LBB42_52
.LBB42_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB42_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_55 Depth 2
                                        #       Child Loop BB42_57 Depth 3
                                        #         Child Loop BB42_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB42_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	$0, -12(%rbp)
.LBB42_55:                              # %for.cond209
                                        #   Parent Loop BB42_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_57 Depth 3
                                        #         Child Loop BB42_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB42_55 Depth=2
	movl	$0, -8(%rbp)
.LBB42_57:                              # %for.cond213
                                        #   Parent Loop BB42_53 Depth=1
                                        #     Parent Loop BB42_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB42_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB42_57 Depth=3
	movl	$0, -4(%rbp)
.LBB42_59:                              # %for.cond217
                                        #   Parent Loop BB42_53 Depth=1
                                        #     Parent Loop BB42_55 Depth=2
                                        #       Parent Loop BB42_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB42_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB42_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB42_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_59
.LBB42_62:                              # %for.end239
                                        #   in Loop: Header=BB42_57 Depth=3
	jmp	.LBB42_63
.LBB42_63:                              # %for.inc240
                                        #   in Loop: Header=BB42_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_57
.LBB42_64:                              # %for.end242
                                        #   in Loop: Header=BB42_55 Depth=2
	jmp	.LBB42_65
.LBB42_65:                              # %for.inc243
                                        #   in Loop: Header=BB42_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_55
.LBB42_66:                              # %for.end245
                                        #   in Loop: Header=BB42_53 Depth=1
	jmp	.LBB42_67
.LBB42_67:                              # %for.inc246
                                        #   in Loop: Header=BB42_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_53
.LBB42_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB42_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB42_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB42_83
.LBB42_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB42_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB42_72 Depth=1
	movl	$0, -4(%rbp)
.LBB42_74:                              # %for.cond262
                                        #   Parent Loop BB42_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB42_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB42_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_78
.LBB42_77:                              # %if.else278
                                        #   in Loop: Header=BB42_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB42_78:                              # %if.end283
                                        #   in Loop: Header=BB42_74 Depth=2
	jmp	.LBB42_79
.LBB42_79:                              # %for.inc284
                                        #   in Loop: Header=BB42_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_74
.LBB42_80:                              # %for.end286
                                        #   in Loop: Header=BB42_72 Depth=1
	jmp	.LBB42_81
.LBB42_81:                              # %for.inc287
                                        #   in Loop: Header=BB42_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_72
.LBB42_82:                              # %for.end289
	jmp	.LBB42_95
.LBB42_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB42_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB42_84 Depth=1
	movl	$0, -4(%rbp)
.LBB42_86:                              # %for.cond297
                                        #   Parent Loop BB42_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB42_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB42_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_90
.LBB42_89:                              # %if.else317
                                        #   in Loop: Header=BB42_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB42_90:                              # %if.end326
                                        #   in Loop: Header=BB42_86 Depth=2
	jmp	.LBB42_91
.LBB42_91:                              # %for.inc327
                                        #   in Loop: Header=BB42_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_86
.LBB42_92:                              # %for.end329
                                        #   in Loop: Header=BB42_84 Depth=1
	jmp	.LBB42_93
.LBB42_93:                              # %for.inc330
                                        #   in Loop: Header=BB42_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_84
.LBB42_94:                              # %for.end332
	jmp	.LBB42_95
.LBB42_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB42_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB42_96 Depth=1
	movl	$0, -4(%rbp)
.LBB42_98:                              # %for.cond338
                                        #   Parent Loop BB42_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB42_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB42_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_98
.LBB42_101:                             # %for.end384
                                        #   in Loop: Header=BB42_96 Depth=1
	jmp	.LBB42_102
.LBB42_102:                             # %for.inc385
                                        #   in Loop: Header=BB42_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_96
.LBB42_103:                             # %for.end387
	jmp	.LBB42_157
.LBB42_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB42_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_107 Depth 2
                                        #       Child Loop BB42_109 Depth 3
                                        #         Child Loop BB42_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB42_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB42_105 Depth=1
	movl	$0, -12(%rbp)
.LBB42_107:                             # %for.cond394
                                        #   Parent Loop BB42_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB42_109 Depth 3
                                        #         Child Loop BB42_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB42_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB42_107 Depth=2
	movl	$0, -8(%rbp)
.LBB42_109:                             # %for.cond398
                                        #   Parent Loop BB42_105 Depth=1
                                        #     Parent Loop BB42_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB42_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB42_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB42_109 Depth=3
	movl	$0, -4(%rbp)
.LBB42_111:                             # %for.cond402
                                        #   Parent Loop BB42_105 Depth=1
                                        #     Parent Loop BB42_107 Depth=2
                                        #       Parent Loop BB42_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB42_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB42_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB42_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_111
.LBB42_114:                             # %for.end425
                                        #   in Loop: Header=BB42_109 Depth=3
	jmp	.LBB42_115
.LBB42_115:                             # %for.inc426
                                        #   in Loop: Header=BB42_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_109
.LBB42_116:                             # %for.end428
                                        #   in Loop: Header=BB42_107 Depth=2
	jmp	.LBB42_117
.LBB42_117:                             # %for.inc429
                                        #   in Loop: Header=BB42_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB42_107
.LBB42_118:                             # %for.end431
                                        #   in Loop: Header=BB42_105 Depth=1
	jmp	.LBB42_119
.LBB42_119:                             # %for.inc432
                                        #   in Loop: Header=BB42_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB42_105
.LBB42_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB42_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB42_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB42_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB42_136
.LBB42_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB42_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB42_125 Depth=1
	movl	$0, -4(%rbp)
.LBB42_127:                             # %for.cond458
                                        #   Parent Loop BB42_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB42_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB42_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_131
.LBB42_130:                             # %if.else478
                                        #   in Loop: Header=BB42_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB42_131:                             # %if.end483
                                        #   in Loop: Header=BB42_127 Depth=2
	jmp	.LBB42_132
.LBB42_132:                             # %for.inc484
                                        #   in Loop: Header=BB42_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_127
.LBB42_133:                             # %for.end486
                                        #   in Loop: Header=BB42_125 Depth=1
	jmp	.LBB42_134
.LBB42_134:                             # %for.inc487
                                        #   in Loop: Header=BB42_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_125
.LBB42_135:                             # %for.end489
	jmp	.LBB42_148
.LBB42_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB42_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	$0, -4(%rbp)
.LBB42_139:                             # %for.cond498
                                        #   Parent Loop BB42_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB42_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB42_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB42_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB42_143
.LBB42_142:                             # %if.else518
                                        #   in Loop: Header=BB42_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB42_143:                             # %if.end527
                                        #   in Loop: Header=BB42_139 Depth=2
	jmp	.LBB42_144
.LBB42_144:                             # %for.inc528
                                        #   in Loop: Header=BB42_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_139
.LBB42_145:                             # %for.end530
                                        #   in Loop: Header=BB42_137 Depth=1
	jmp	.LBB42_146
.LBB42_146:                             # %for.inc531
                                        #   in Loop: Header=BB42_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_137
.LBB42_147:                             # %for.end533
	jmp	.LBB42_148
.LBB42_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB42_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB42_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB42_149 Depth=1
	movl	$0, -4(%rbp)
.LBB42_151:                             # %for.cond539
                                        #   Parent Loop BB42_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB42_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB42_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB42_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_151
.LBB42_154:                             # %for.end585
                                        #   in Loop: Header=BB42_149 Depth=1
	jmp	.LBB42_155
.LBB42_155:                             # %for.inc586
                                        #   in Loop: Header=BB42_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_149
.LBB42_156:                             # %for.end588
	jmp	.LBB42_157
.LBB42_157:                             # %if.end589
	cmpl	$1158496047, -40(%rbp)  # imm = 0x450D3F2F
	jne	.LBB42_159
.LBB42_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_158
.Lfunc_end42:
	.size	SetCoeffAndReconstruction8x8.13, .Lfunc_end42-SetCoeffAndReconstruction8x8.13
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.14
.LCPI43_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI43_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.14
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.14,@function
Mode_Decision_for_8x8IntraBlocks.14:    # @Mode_Decision_for_8x8IntraBlocks.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI43_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI43_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$345680585, -28(%rbp)   # imm = 0x149AAAC9
	movl	%edi, -20(%rbp)
	vmovsd	%xmm0, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-40(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB43_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB43_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-20(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB43_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	$1, -16(%rbp)
.LBB43_4:                               # %if.end
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-48(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB43_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_1
.LBB43_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$345680585, -28(%rbp)   # imm = 0x149AAAC9
	jne	.LBB43_8
.LBB43_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_7
.Lfunc_end43:
	.size	Mode_Decision_for_8x8IntraBlocks.14, .Lfunc_end43-Mode_Decision_for_8x8IntraBlocks.14
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.15       # -- Begin function UpdatePixelMap.15
	.p2align	4, 0x90
	.type	UpdatePixelMap.15,@function
UpdatePixelMap.15:                      # @UpdatePixelMap.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$795741453, -28(%rbp)   # imm = 0x2F6E0D0D
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB44_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB44_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB44_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	$0, -8(%rbp)
.LBB44_4:                               # %for.cond2
                                        #   Parent Loop BB44_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB44_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB44_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB44_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_4
.LBB44_7:                               # %for.end
                                        #   in Loop: Header=BB44_2 Depth=1
	jmp	.LBB44_8
.LBB44_8:                               # %for.inc7
                                        #   in Loop: Header=BB44_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_2
.LBB44_9:                               # %for.end9
	jmp	.LBB44_41
.LBB44_10:                              # %if.else
	movl	$0, -16(%rbp)
.LBB44_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_13 Depth 2
                                        #       Child Loop BB44_16 Depth 3
                                        #         Child Loop BB44_18 Depth 4
                                        #       Child Loop BB44_25 Depth 3
                                        #         Child Loop BB44_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	$0, -12(%rbp)
.LBB44_13:                              # %for.cond14
                                        #   Parent Loop BB44_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB44_16 Depth 3
                                        #         Child Loop BB44_18 Depth 4
                                        #       Child Loop BB44_25 Depth 3
                                        #         Child Loop BB44_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movq	refresh_map, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB44_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB44_16:                              # %for.cond27
                                        #   Parent Loop BB44_11 Depth=1
                                        #     Parent Loop BB44_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB44_16 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB44_18:                              # %for.cond31
                                        #   Parent Loop BB44_11 Depth=1
                                        #     Parent Loop BB44_13 Depth=2
                                        #       Parent Loop BB44_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB44_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB44_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB44_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_18
.LBB44_21:                              # %for.end40
                                        #   in Loop: Header=BB44_16 Depth=3
	jmp	.LBB44_22
.LBB44_22:                              # %for.inc41
                                        #   in Loop: Header=BB44_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_16
.LBB44_23:                              # %for.end43
                                        #   in Loop: Header=BB44_13 Depth=2
	jmp	.LBB44_36
.LBB44_24:                              # %if.else44
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB44_25:                              # %for.cond46
                                        #   Parent Loop BB44_11 Depth=1
                                        #     Parent Loop BB44_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB44_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB44_25 Depth=3
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB44_27:                              # %for.cond50
                                        #   Parent Loop BB44_11 Depth=1
                                        #     Parent Loop BB44_13 Depth=2
                                        #       Parent Loop BB44_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB44_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB44_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB44_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB44_31
.LBB44_30:                              # %cond.false
                                        #   in Loop: Header=BB44_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB44_31:                              # %cond.end
                                        #   in Loop: Header=BB44_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB44_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB44_27
.LBB44_33:                              # %for.end76
                                        #   in Loop: Header=BB44_25 Depth=3
	jmp	.LBB44_34
.LBB44_34:                              # %for.inc77
                                        #   in Loop: Header=BB44_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB44_25
.LBB44_35:                              # %for.end79
                                        #   in Loop: Header=BB44_13 Depth=2
	jmp	.LBB44_36
.LBB44_36:                              # %if.end
                                        #   in Loop: Header=BB44_13 Depth=2
	jmp	.LBB44_37
.LBB44_37:                              # %for.inc80
                                        #   in Loop: Header=BB44_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_13
.LBB44_38:                              # %for.end82
                                        #   in Loop: Header=BB44_11 Depth=1
	jmp	.LBB44_39
.LBB44_39:                              # %for.inc83
                                        #   in Loop: Header=BB44_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_11
.LBB44_40:                              # %for.end85
	jmp	.LBB44_41
.LBB44_41:                              # %if.end86
	cmpl	$795741453, -28(%rbp)   # imm = 0x2F6E0D0D
	jne	.LBB44_43
.LBB44_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_42
.Lfunc_end44:
	.size	UpdatePixelMap.15, .Lfunc_end44-UpdatePixelMap.15
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.16 # -- Begin function set_mbaff_parameters.16
	.p2align	4, 0x90
	.type	set_mbaff_parameters.16,@function
set_mbaff_parameters.16:                # @set_mbaff_parameters.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$572736759, -32(%rbp)   # imm = 0x222344F7
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB45_2
# %bb.1:                                # %if.then
	jmp	.LBB45_82
.LBB45_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB45_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB45_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB45_3 Depth=1
	movl	$0, -4(%rbp)
.LBB45_5:                               # %for.cond3
                                        #   Parent Loop BB45_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB45_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB45_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB45_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_5
.LBB45_8:                               # %for.end
                                        #   in Loop: Header=BB45_3 Depth=1
	jmp	.LBB45_9
.LBB45_9:                               # %for.inc17
                                        #   in Loop: Header=BB45_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_3
.LBB45_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB45_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB45_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB45_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB45_12 Depth=1
	movl	$0, -4(%rbp)
.LBB45_14:                              # %for.cond27
                                        #   Parent Loop BB45_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB45_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB45_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB45_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_14
.LBB45_17:                              # %for.end60
                                        #   in Loop: Header=BB45_12 Depth=1
	jmp	.LBB45_18
.LBB45_18:                              # %for.inc61
                                        #   in Loop: Header=BB45_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_12
.LBB45_19:                              # %for.end63
	jmp	.LBB45_20
.LBB45_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB45_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB45_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB45_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB45_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_26 Depth 2
                                        #       Child Loop BB45_28 Depth 3
                                        #         Child Loop BB45_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB45_24 Depth=1
	movl	$0, -8(%rbp)
.LBB45_26:                              # %for.cond84
                                        #   Parent Loop BB45_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_28 Depth 3
                                        #         Child Loop BB45_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB45_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB45_26 Depth=2
	movl	$0, -12(%rbp)
.LBB45_28:                              # %for.cond88
                                        #   Parent Loop BB45_24 Depth=1
                                        #     Parent Loop BB45_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB45_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB45_28 Depth=3
	movl	$0, -16(%rbp)
.LBB45_30:                              # %for.cond92
                                        #   Parent Loop BB45_24 Depth=1
                                        #     Parent Loop BB45_26 Depth=2
                                        #       Parent Loop BB45_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB45_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB45_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB45_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_30
.LBB45_33:                              # %for.end115
                                        #   in Loop: Header=BB45_28 Depth=3
	jmp	.LBB45_34
.LBB45_34:                              # %for.inc116
                                        #   in Loop: Header=BB45_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_28
.LBB45_35:                              # %for.end118
                                        #   in Loop: Header=BB45_26 Depth=2
	jmp	.LBB45_36
.LBB45_36:                              # %for.inc119
                                        #   in Loop: Header=BB45_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_26
.LBB45_37:                              # %for.end121
                                        #   in Loop: Header=BB45_24 Depth=1
	jmp	.LBB45_38
.LBB45_38:                              # %for.inc122
                                        #   in Loop: Header=BB45_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_24
.LBB45_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB45_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_42 Depth 2
                                        #       Child Loop BB45_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB45_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB45_40 Depth=1
	movl	$0, -12(%rbp)
.LBB45_42:                              # %for.cond129
                                        #   Parent Loop BB45_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB45_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB45_42 Depth=2
	movl	$0, -16(%rbp)
.LBB45_44:                              # %for.cond133
                                        #   Parent Loop BB45_40 Depth=1
                                        #     Parent Loop BB45_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB45_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB45_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB45_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_44
.LBB45_47:                              # %for.end152
                                        #   in Loop: Header=BB45_42 Depth=2
	jmp	.LBB45_48
.LBB45_48:                              # %for.inc153
                                        #   in Loop: Header=BB45_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_42
.LBB45_49:                              # %for.end155
                                        #   in Loop: Header=BB45_40 Depth=1
	jmp	.LBB45_50
.LBB45_50:                              # %for.inc156
                                        #   in Loop: Header=BB45_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_40
.LBB45_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB45_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB45_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB45_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_52
.LBB45_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB45_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB45_56 Depth=1
	movl	$0, -4(%rbp)
.LBB45_58:                              # %for.cond180
                                        #   Parent Loop BB45_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB45_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB45_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_58
.LBB45_61:                              # %for.end198
                                        #   in Loop: Header=BB45_56 Depth=1
	jmp	.LBB45_62
.LBB45_62:                              # %for.inc199
                                        #   in Loop: Header=BB45_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_56
.LBB45_63:                              # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB45_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB45_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB45_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB45_65 Depth=1
	movl	$0, -4(%rbp)
.LBB45_67:                              # %for.cond208
                                        #   Parent Loop BB45_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB45_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB45_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB45_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_67
.LBB45_70:                              # %for.end230
                                        #   in Loop: Header=BB45_65 Depth=1
	jmp	.LBB45_71
.LBB45_71:                              # %for.inc231
                                        #   in Loop: Header=BB45_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_65
.LBB45_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB45_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB45_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB45_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB45_76:                              # %for.cond244
                                        #   Parent Loop BB45_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB45_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB45_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_76
.LBB45_79:                              # %for.end267
                                        #   in Loop: Header=BB45_74 Depth=1
	jmp	.LBB45_80
.LBB45_80:                              # %for.inc268
                                        #   in Loop: Header=BB45_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_74
.LBB45_81:                              # %for.end270.loopexit
	jmp	.LBB45_82
.LBB45_82:                              # %for.end270
	cmpl	$572736759, -32(%rbp)   # imm = 0x222344F7
	jne	.LBB45_84
.LBB45_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_83
.Lfunc_end45:
	.size	set_mbaff_parameters.16, .Lfunc_end45-set_mbaff_parameters.16
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.17 # -- Begin function set_mbaff_parameters.17
	.p2align	4, 0x90
	.type	set_mbaff_parameters.17,@function
set_mbaff_parameters.17:                # @set_mbaff_parameters.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1073009805, -32(%rbp)  # imm = 0x3FF4D48D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB46_2
# %bb.1:                                # %if.then
	jmp	.LBB46_82
.LBB46_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB46_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	$0, -4(%rbp)
.LBB46_5:                               # %for.cond3
                                        #   Parent Loop BB46_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB46_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB46_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_5
.LBB46_8:                               # %for.end
                                        #   in Loop: Header=BB46_3 Depth=1
	jmp	.LBB46_9
.LBB46_9:                               # %for.inc17
                                        #   in Loop: Header=BB46_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_3
.LBB46_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB46_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB46_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB46_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB46_12 Depth=1
	movl	$0, -4(%rbp)
.LBB46_14:                              # %for.cond27
                                        #   Parent Loop BB46_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB46_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB46_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB46_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_14
.LBB46_17:                              # %for.end60
                                        #   in Loop: Header=BB46_12 Depth=1
	jmp	.LBB46_18
.LBB46_18:                              # %for.inc61
                                        #   in Loop: Header=BB46_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_12
.LBB46_19:                              # %for.end63
	jmp	.LBB46_20
.LBB46_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB46_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB46_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB46_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB46_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_26 Depth 2
                                        #       Child Loop BB46_28 Depth 3
                                        #         Child Loop BB46_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	$0, -8(%rbp)
.LBB46_26:                              # %for.cond84
                                        #   Parent Loop BB46_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_28 Depth 3
                                        #         Child Loop BB46_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	$0, -12(%rbp)
.LBB46_28:                              # %for.cond88
                                        #   Parent Loop BB46_24 Depth=1
                                        #     Parent Loop BB46_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB46_28 Depth=3
	movl	$0, -16(%rbp)
.LBB46_30:                              # %for.cond92
                                        #   Parent Loop BB46_24 Depth=1
                                        #     Parent Loop BB46_26 Depth=2
                                        #       Parent Loop BB46_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB46_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB46_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB46_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_30
.LBB46_33:                              # %for.end115
                                        #   in Loop: Header=BB46_28 Depth=3
	jmp	.LBB46_34
.LBB46_34:                              # %for.inc116
                                        #   in Loop: Header=BB46_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_28
.LBB46_35:                              # %for.end118
                                        #   in Loop: Header=BB46_26 Depth=2
	jmp	.LBB46_36
.LBB46_36:                              # %for.inc119
                                        #   in Loop: Header=BB46_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_26
.LBB46_37:                              # %for.end121
                                        #   in Loop: Header=BB46_24 Depth=1
	jmp	.LBB46_38
.LBB46_38:                              # %for.inc122
                                        #   in Loop: Header=BB46_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_24
.LBB46_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB46_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_42 Depth 2
                                        #       Child Loop BB46_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB46_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	$0, -12(%rbp)
.LBB46_42:                              # %for.cond129
                                        #   Parent Loop BB46_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB46_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB46_42 Depth=2
	movl	$0, -16(%rbp)
.LBB46_44:                              # %for.cond133
                                        #   Parent Loop BB46_40 Depth=1
                                        #     Parent Loop BB46_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB46_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB46_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB46_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_44
.LBB46_47:                              # %for.end152
                                        #   in Loop: Header=BB46_42 Depth=2
	jmp	.LBB46_48
.LBB46_48:                              # %for.inc153
                                        #   in Loop: Header=BB46_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_42
.LBB46_49:                              # %for.end155
                                        #   in Loop: Header=BB46_40 Depth=1
	jmp	.LBB46_50
.LBB46_50:                              # %for.inc156
                                        #   in Loop: Header=BB46_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_40
.LBB46_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB46_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB46_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_52
.LBB46_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB46_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB46_56 Depth=1
	movl	$0, -4(%rbp)
.LBB46_58:                              # %for.cond180
                                        #   Parent Loop BB46_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB46_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB46_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_58
.LBB46_61:                              # %for.end198
                                        #   in Loop: Header=BB46_56 Depth=1
	jmp	.LBB46_62
.LBB46_62:                              # %for.inc199
                                        #   in Loop: Header=BB46_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_56
.LBB46_63:                              # %for.end201
	cmpl	$0, -36(%rbp)
	je	.LBB46_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB46_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB46_65 Depth=1
	movl	$0, -4(%rbp)
.LBB46_67:                              # %for.cond208
                                        #   Parent Loop BB46_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB46_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB46_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_67
.LBB46_70:                              # %for.end230
                                        #   in Loop: Header=BB46_65 Depth=1
	jmp	.LBB46_71
.LBB46_71:                              # %for.inc231
                                        #   in Loop: Header=BB46_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_65
.LBB46_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB46_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB46_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_76:                              # %for.cond244
                                        #   Parent Loop BB46_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB46_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB46_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_76
.LBB46_79:                              # %for.end267
                                        #   in Loop: Header=BB46_74 Depth=1
	jmp	.LBB46_80
.LBB46_80:                              # %for.inc268
                                        #   in Loop: Header=BB46_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_74
.LBB46_81:                              # %for.end270.loopexit
	jmp	.LBB46_82
.LBB46_82:                              # %for.end270
	cmpl	$1073009805, -32(%rbp)  # imm = 0x3FF4D48D
	jne	.LBB46_84
.LBB46_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_83
.Lfunc_end46:
	.size	set_mbaff_parameters.17, .Lfunc_end46-set_mbaff_parameters.17
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.18 # -- Begin function RDCost_for_4x4IntraBlocks.18
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.18,@function
RDCost_for_4x4IntraBlocks.18:           # @RDCost_for_4x4IntraBlocks.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$2124811968, -80(%rbp)  # imm = 0x7EA60EC0
	movq	%rdi, -128(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$0, -72(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-128(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB47_10
# %bb.1:                                # %if.then
	movl	$0, -8(%rbp)
.LBB47_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_4 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB47_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB47_4:                               # %for.cond15
                                        #   Parent Loop BB47_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB47_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB47_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-68(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-120(%rbp), %rdx
	movl	-76(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB47_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_4
.LBB47_7:                               # %for.end
                                        #   in Loop: Header=BB47_2 Depth=1
	jmp	.LBB47_8
.LBB47_8:                               # %for.inc33
                                        #   in Loop: Header=BB47_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_2
.LBB47_9:                               # %for.end35
	jmp	.LBB47_10
.LBB47_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB47_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB47_16
.LBB47_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB47_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB47_15
.LBB47_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB47_15:                              # %cond.end
.LBB47_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB47_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB47_18:                              # %if.end50
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB47_21
.LBB47_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB47_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB47_23
# %bb.22:                               # %if.then66
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB47_24
.LBB47_23:                              # %if.else69
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB47_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -152(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB47_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB47_27
.LBB47_26:                              # %if.else81
	vmovsd	-152(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB47_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$2124811968, -80(%rbp)  # imm = 0x7EA60EC0
	jne	.LBB47_29
.LBB47_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB47_28
.Lfunc_end47:
	.size	RDCost_for_4x4IntraBlocks.18, .Lfunc_end47-RDCost_for_4x4IntraBlocks.18
	.cfi_endproc
                                        # -- End function
	.globl	StoreNewMotionVectorsBlock8x8.19 # -- Begin function StoreNewMotionVectorsBlock8x8.19
	.p2align	4, 0x90
	.type	StoreNewMotionVectorsBlock8x8.19,@function
StoreNewMotionVectorsBlock8x8.19:       # @StoreNewMotionVectorsBlock8x8.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$224370654, -72(%rbp)   # imm = 0xD5F9FDE
	movl	%edi, -12(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -56(%rbp)
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-68(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -40(%rbp)
	jge	.LBB48_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB48_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_4:                               # %for.cond6
                                        #   Parent Loop BB48_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_7
# %bb.5:                                # %for.body8
                                        #   in Loop: Header=BB48_4 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	$0, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, 2(%rax,%rcx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB48_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_4
.LBB48_7:                               # %for.end
                                        #   in Loop: Header=BB48_2 Depth=1
	jmp	.LBB48_8
.LBB48_8:                               # %for.inc39
                                        #   in Loop: Header=BB48_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_2
.LBB48_9:                               # %for.end41
	jmp	.LBB48_61
.LBB48_10:                              # %if.end
	cmpl	$0, 16(%rbp)
	jne	.LBB48_20
# %bb.11:                               # %if.then42
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_12:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_14 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB48_19
# %bb.13:                               # %for.body45
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_14:                              # %for.cond46
                                        #   Parent Loop BB48_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_17
# %bb.15:                               # %for.body48
                                        #   in Loop: Header=BB48_14 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.16:                               # %for.inc117
                                        #   in Loop: Header=BB48_14 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_14
.LBB48_17:                              # %for.end119
                                        #   in Loop: Header=BB48_12 Depth=1
	jmp	.LBB48_18
.LBB48_18:                              # %for.inc120
                                        #   in Loop: Header=BB48_12 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_12
.LBB48_19:                              # %for.end122
	jmp	.LBB48_61
.LBB48_20:                              # %if.else
	cmpl	$0, -40(%rbp)
	je	.LBB48_22
# %bb.21:                               # %lor.lhs.false
	cmpl	$2, -40(%rbp)
	jne	.LBB48_31
.LBB48_22:                              # %if.then125
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_23:                              # %for.cond126
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_25 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB48_30
# %bb.24:                               # %for.body128
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_25:                              # %for.cond129
                                        #   Parent Loop BB48_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_28
# %bb.26:                               # %for.body131
                                        #   in Loop: Header=BB48_25 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.27:                               # %for.inc204
                                        #   in Loop: Header=BB48_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_25
.LBB48_28:                              # %for.end206
                                        #   in Loop: Header=BB48_23 Depth=1
	jmp	.LBB48_29
.LBB48_29:                              # %for.inc207
                                        #   in Loop: Header=BB48_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_23
.LBB48_30:                              # %for.end209
	jmp	.LBB48_40
.LBB48_31:                              # %if.else210
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_32:                              # %for.cond211
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB48_39
# %bb.33:                               # %for.body213
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_34:                              # %for.cond214
                                        #   Parent Loop BB48_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_37
# %bb.35:                               # %for.body216
                                        #   in Loop: Header=BB48_34 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.36:                               # %for.inc233
                                        #   in Loop: Header=BB48_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_34
.LBB48_37:                              # %for.end235
                                        #   in Loop: Header=BB48_32 Depth=1
	jmp	.LBB48_38
.LBB48_38:                              # %for.inc236
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_32
.LBB48_39:                              # %for.end238
	jmp	.LBB48_40
.LBB48_40:                              # %if.end239
	cmpl	$1, -40(%rbp)
	je	.LBB48_42
# %bb.41:                               # %lor.lhs.false241
	cmpl	$2, -40(%rbp)
	jne	.LBB48_51
.LBB48_42:                              # %if.then243
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_43:                              # %for.cond244
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_45 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB48_50
# %bb.44:                               # %for.body246
                                        #   in Loop: Header=BB48_43 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_45:                              # %for.cond247
                                        #   Parent Loop BB48_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_48
# %bb.46:                               # %for.body249
                                        #   in Loop: Header=BB48_45 Depth=2
	movq	-64(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-64(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-56(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-56(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.47:                               # %for.inc322
                                        #   in Loop: Header=BB48_45 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_45
.LBB48_48:                              # %for.end324
                                        #   in Loop: Header=BB48_43 Depth=1
	jmp	.LBB48_49
.LBB48_49:                              # %for.inc325
                                        #   in Loop: Header=BB48_43 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_43
.LBB48_50:                              # %for.end327
	jmp	.LBB48_60
.LBB48_51:                              # %if.else328
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB48_52:                              # %for.cond329
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB48_59
# %bb.53:                               # %for.body331
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB48_54:                              # %for.cond332
                                        #   Parent Loop BB48_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB48_57
# %bb.55:                               # %for.body334
                                        #   in Loop: Header=BB48_54 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	$0, (%rdx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	$0, 2(%rcx,%rax,4)
# %bb.56:                               # %for.inc351
                                        #   in Loop: Header=BB48_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_54
.LBB48_57:                              # %for.end353
                                        #   in Loop: Header=BB48_52 Depth=1
	jmp	.LBB48_58
.LBB48_58:                              # %for.inc354
                                        #   in Loop: Header=BB48_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_52
.LBB48_59:                              # %for.end356
	jmp	.LBB48_60
.LBB48_60:                              # %if.end357
	jmp	.LBB48_61
.LBB48_61:                              # %if.end358
	cmpl	$224370654, -72(%rbp)   # imm = 0xD5F9FDE
	jne	.LBB48_63
.LBB48_62:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_62
.Lfunc_end48:
	.size	StoreNewMotionVectorsBlock8x8.19, .Lfunc_end48-StoreNewMotionVectorsBlock8x8.19
	.cfi_endproc
                                        # -- End function
	.globl	UpdatePixelMap.20       # -- Begin function UpdatePixelMap.20
	.p2align	4, 0x90
	.type	UpdatePixelMap.20,@function
UpdatePixelMap.20:                      # @UpdatePixelMap.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$309934371, -28(%rbp)   # imm = 0x12793923
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB49_10
# %bb.1:                                # %if.then
	movl	$0, -4(%rbp)
.LBB49_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_4 Depth 2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB49_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	$0, -8(%rbp)
.LBB49_4:                               # %for.cond2
                                        #   Parent Loop BB49_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	52(%rcx), %eax
	jge	.LBB49_7
# %bb.5:                                # %for.body4
                                        #   in Loop: Header=BB49_4 Depth=2
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB49_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_4
.LBB49_7:                               # %for.end
                                        #   in Loop: Header=BB49_2 Depth=1
	jmp	.LBB49_8
.LBB49_8:                               # %for.inc7
                                        #   in Loop: Header=BB49_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_2
.LBB49_9:                               # %for.end9
	jmp	.LBB49_41
.LBB49_10:                              # %if.else
	movl	$0, -12(%rbp)
.LBB49_11:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_13 Depth 2
                                        #       Child Loop BB49_16 Depth 3
                                        #         Child Loop BB49_18 Depth 4
                                        #       Child Loop BB49_25 Depth 3
                                        #         Child Loop BB49_27 Depth 4
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_40
# %bb.12:                               # %for.body13
                                        #   in Loop: Header=BB49_11 Depth=1
	movl	$0, -16(%rbp)
.LBB49_13:                              # %for.cond14
                                        #   Parent Loop BB49_11 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_16 Depth 3
                                        #         Child Loop BB49_18 Depth 4
                                        #       Child Loop BB49_25 Depth 3
                                        #         Child Loop BB49_27 Depth 4
	movl	-16(%rbp), %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$8, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB49_38
# %bb.14:                               # %for.body18
                                        #   in Loop: Header=BB49_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	shll	$3, %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movq	refresh_map, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB49_24
# %bb.15:                               # %if.then25
                                        #   in Loop: Header=BB49_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB49_16:                              # %for.cond27
                                        #   Parent Loop BB49_11 Depth=1
                                        #     Parent Loop BB49_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_18 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB49_23
# %bb.17:                               # %for.body29
                                        #   in Loop: Header=BB49_16 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB49_18:                              # %for.cond31
                                        #   Parent Loop BB49_11 Depth=1
                                        #     Parent Loop BB49_13 Depth=2
                                        #       Parent Loop BB49_16 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB49_21
# %bb.19:                               # %for.body33
                                        #   in Loop: Header=BB49_18 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
# %bb.20:                               # %for.inc38
                                        #   in Loop: Header=BB49_18 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_18
.LBB49_21:                              # %for.end40
                                        #   in Loop: Header=BB49_16 Depth=3
	jmp	.LBB49_22
.LBB49_22:                              # %for.inc41
                                        #   in Loop: Header=BB49_16 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_16
.LBB49_23:                              # %for.end43
                                        #   in Loop: Header=BB49_13 Depth=2
	jmp	.LBB49_36
.LBB49_24:                              # %if.else44
                                        #   in Loop: Header=BB49_13 Depth=2
	movl	-12(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -4(%rbp)
.LBB49_25:                              # %for.cond46
                                        #   Parent Loop BB49_11 Depth=1
                                        #     Parent Loop BB49_13 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB49_27 Depth 4
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB49_35
# %bb.26:                               # %for.body48
                                        #   in Loop: Header=BB49_25 Depth=3
	movl	-16(%rbp), %eax
	shll	$3, %eax
	movl	%eax, -8(%rbp)
.LBB49_27:                              # %for.cond50
                                        #   Parent Loop BB49_11 Depth=1
                                        #     Parent Loop BB49_13 Depth=2
                                        #       Parent Loop BB49_25 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB49_33
# %bb.28:                               # %for.body52
                                        #   in Loop: Header=BB49_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	movq	input, %rcx
	movl	36(%rcx), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB49_30
# %bb.29:                               # %cond.true
                                        #   in Loop: Header=BB49_27 Depth=4
	movq	pixel_map, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$1, %eax
	jmp	.LBB49_31
.LBB49_30:                              # %cond.false
                                        #   in Loop: Header=BB49_27 Depth=4
	movq	input, %rax
	movl	36(%rax), %eax
	addl	$1, %eax
.LBB49_31:                              # %cond.end
                                        #   in Loop: Header=BB49_27 Depth=4
	movq	pixel_map, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
# %bb.32:                               # %for.inc74
                                        #   in Loop: Header=BB49_27 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB49_27
.LBB49_33:                              # %for.end76
                                        #   in Loop: Header=BB49_25 Depth=3
	jmp	.LBB49_34
.LBB49_34:                              # %for.inc77
                                        #   in Loop: Header=BB49_25 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_25
.LBB49_35:                              # %for.end79
                                        #   in Loop: Header=BB49_13 Depth=2
	jmp	.LBB49_36
.LBB49_36:                              # %if.end
                                        #   in Loop: Header=BB49_13 Depth=2
	jmp	.LBB49_37
.LBB49_37:                              # %for.inc80
                                        #   in Loop: Header=BB49_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_13
.LBB49_38:                              # %for.end82
                                        #   in Loop: Header=BB49_11 Depth=1
	jmp	.LBB49_39
.LBB49_39:                              # %for.inc83
                                        #   in Loop: Header=BB49_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_11
.LBB49_40:                              # %for.end85
	jmp	.LBB49_41
.LBB49_41:                              # %if.end86
	cmpl	$309934371, -28(%rbp)   # imm = 0x12793923
	jne	.LBB49_43
.LBB49_42:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_43:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_42
.Lfunc_end49:
	.size	UpdatePixelMap.20, .Lfunc_end49-UpdatePixelMap.20
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.21 # -- Begin function CheckReliabilityOfRef.21
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.21,@function
CheckReliabilityOfRef.21:               # @CheckReliabilityOfRef.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2124004609, -104(%rbp) # imm = 0x7E99BD01
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB50_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB50_6
.LBB50_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB50_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB50_5
.LBB50_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB50_5
.LBB50_5:                               # %cond.end
.LBB50_6:                               # %cond.end6
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB50_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB50_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB50_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB50_14
.LBB50_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB50_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB50_13
.LBB50_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB50_13
.LBB50_13:                              # %cond.end20
.LBB50_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB50_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB50_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB50_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_19 Depth 2
                                        #       Child Loop BB50_23 Depth 3
                                        #         Child Loop BB50_25 Depth 4
                                        #       Child Loop BB50_53 Depth 3
                                        #         Child Loop BB50_55 Depth 4
                                        #           Child Loop BB50_66 Depth 5
                                        #       Child Loop BB50_87 Depth 3
                                        #         Child Loop BB50_89 Depth 4
                                        #           Child Loop BB50_100 Depth 5
                                        #       Child Loop BB50_121 Depth 3
                                        #         Child Loop BB50_123 Depth 4
                                        #           Child Loop BB50_125 Depth 5
                                        #             Child Loop BB50_136 Depth 6
                                        #       Child Loop BB50_159 Depth 3
                                        #         Child Loop BB50_161 Depth 4
                                        #           Child Loop BB50_163 Depth 5
                                        #             Child Loop BB50_174 Depth 6
                                        #       Child Loop BB50_196 Depth 3
                                        #         Child Loop BB50_198 Depth 4
                                        #           Child Loop BB50_212 Depth 5
                                        #           Child Loop BB50_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB50_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB50_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB50_19:                              # %for.cond31
                                        #   Parent Loop BB50_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB50_23 Depth 3
                                        #         Child Loop BB50_25 Depth 4
                                        #       Child Loop BB50_53 Depth 3
                                        #         Child Loop BB50_55 Depth 4
                                        #           Child Loop BB50_66 Depth 5
                                        #       Child Loop BB50_87 Depth 3
                                        #         Child Loop BB50_89 Depth 4
                                        #           Child Loop BB50_100 Depth 5
                                        #       Child Loop BB50_121 Depth 3
                                        #         Child Loop BB50_123 Depth 4
                                        #           Child Loop BB50_125 Depth 5
                                        #             Child Loop BB50_136 Depth 6
                                        #       Child Loop BB50_159 Depth 3
                                        #         Child Loop BB50_161 Depth 4
                                        #           Child Loop BB50_163 Depth 5
                                        #             Child Loop BB50_174 Depth 6
                                        #       Child Loop BB50_196 Depth 3
                                        #         Child Loop BB50_198 Depth 4
                                        #           Child Loop BB50_212 Depth 5
                                        #           Child Loop BB50_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB50_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB50_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB50_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB50_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB50_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$0, -12(%rbp)
.LBB50_23:                              # %for.cond75
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB50_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB50_23 Depth=3
	movl	$0, -16(%rbp)
.LBB50_25:                              # %for.cond79
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB50_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB50_25 Depth=4
	movq	pixel_map, %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB50_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB50_29
.LBB50_28:                              # %cond.false87
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB50_29:                              # %cond.end89
                                        #   in Loop: Header=BB50_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB50_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB50_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB50_35
.LBB50_31:                              # %cond.false94
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB50_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB50_34
.LBB50_33:                              # %cond.false99
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB50_34:                              # %cond.end101
                                        #   in Loop: Header=BB50_25 Depth=4
.LBB50_35:                              # %cond.end103
                                        #   in Loop: Header=BB50_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB50_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB50_38
.LBB50_37:                              # %cond.false111
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB50_38:                              # %cond.end113
                                        #   in Loop: Header=BB50_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB50_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB50_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB50_44
.LBB50_40:                              # %cond.false118
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB50_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB50_43
.LBB50_42:                              # %cond.false123
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB50_43:                              # %cond.end125
                                        #   in Loop: Header=BB50_25 Depth=4
.LBB50_44:                              # %cond.end127
                                        #   in Loop: Header=BB50_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_46:                              # %if.end
                                        #   in Loop: Header=BB50_25 Depth=4
	jmp	.LBB50_47
.LBB50_47:                              # %for.inc
                                        #   in Loop: Header=BB50_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_25
.LBB50_48:                              # %for.end
                                        #   in Loop: Header=BB50_23 Depth=3
	jmp	.LBB50_49
.LBB50_49:                              # %for.inc135
                                        #   in Loop: Header=BB50_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_23
.LBB50_50:                              # %for.end137
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_262
.LBB50_51:                              # %if.else
                                        #   in Loop: Header=BB50_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB50_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$0, -12(%rbp)
.LBB50_53:                              # %for.cond141
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_55 Depth 4
                                        #           Child Loop BB50_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB50_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB50_53 Depth=3
	movl	$0, -16(%rbp)
.LBB50_55:                              # %for.cond145
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB50_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB50_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB50_59
.LBB50_58:                              # %cond.false153
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_59:                              # %cond.end155
                                        #   in Loop: Header=BB50_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB50_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB50_65
.LBB50_61:                              # %cond.false160
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB50_64
.LBB50_63:                              # %cond.false165
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_64:                              # %cond.end167
                                        #   in Loop: Header=BB50_55 Depth=4
.LBB50_65:                              # %cond.end169
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB50_66:                              # %for.cond171
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_53 Depth=3
                                        #         Parent Loop BB50_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB50_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB50_70
.LBB50_69:                              # %cond.false180
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB50_70:                              # %cond.end183
                                        #   in Loop: Header=BB50_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB50_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB50_76
.LBB50_72:                              # %cond.false188
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB50_75
.LBB50_74:                              # %cond.false194
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB50_75:                              # %cond.end197
                                        #   in Loop: Header=BB50_66 Depth=5
.LBB50_76:                              # %cond.end199
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_78:                              # %if.end209
                                        #   in Loop: Header=BB50_66 Depth=5
	jmp	.LBB50_79
.LBB50_79:                              # %for.inc210
                                        #   in Loop: Header=BB50_66 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_66
.LBB50_80:                              # %for.end212
                                        #   in Loop: Header=BB50_55 Depth=4
	jmp	.LBB50_81
.LBB50_81:                              # %for.inc213
                                        #   in Loop: Header=BB50_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_55
.LBB50_82:                              # %for.end215
                                        #   in Loop: Header=BB50_53 Depth=3
	jmp	.LBB50_83
.LBB50_83:                              # %for.inc216
                                        #   in Loop: Header=BB50_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_53
.LBB50_84:                              # %for.end218
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_261
.LBB50_85:                              # %if.else219
                                        #   in Loop: Header=BB50_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB50_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$0, -12(%rbp)
.LBB50_87:                              # %for.cond223
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_89 Depth 4
                                        #           Child Loop BB50_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB50_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB50_87 Depth=3
	movl	$0, -16(%rbp)
.LBB50_89:                              # %for.cond227
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB50_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB50_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB50_93
.LBB50_92:                              # %cond.false235
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_93:                              # %cond.end237
                                        #   in Loop: Header=BB50_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB50_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB50_99
.LBB50_95:                              # %cond.false242
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB50_98
.LBB50_97:                              # %cond.false247
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_98:                              # %cond.end249
                                        #   in Loop: Header=BB50_89 Depth=4
.LBB50_99:                              # %cond.end251
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB50_100:                             # %for.cond253
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_87 Depth=3
                                        #         Parent Loop BB50_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB50_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB50_104
.LBB50_103:                             # %cond.false262
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_104:                             # %cond.end265
                                        #   in Loop: Header=BB50_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB50_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB50_110
.LBB50_106:                             # %cond.false270
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB50_109
.LBB50_108:                             # %cond.false276
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_109:                             # %cond.end279
                                        #   in Loop: Header=BB50_100 Depth=5
.LBB50_110:                             # %cond.end281
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_112:                             # %if.end291
                                        #   in Loop: Header=BB50_100 Depth=5
	jmp	.LBB50_113
.LBB50_113:                             # %for.inc292
                                        #   in Loop: Header=BB50_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_100
.LBB50_114:                             # %for.end294
                                        #   in Loop: Header=BB50_89 Depth=4
	jmp	.LBB50_115
.LBB50_115:                             # %for.inc295
                                        #   in Loop: Header=BB50_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_89
.LBB50_116:                             # %for.end297
                                        #   in Loop: Header=BB50_87 Depth=3
	jmp	.LBB50_117
.LBB50_117:                             # %for.inc298
                                        #   in Loop: Header=BB50_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_87
.LBB50_118:                             # %for.end300
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_260
.LBB50_119:                             # %if.else301
                                        #   in Loop: Header=BB50_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB50_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$0, -12(%rbp)
.LBB50_121:                             # %for.cond305
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_123 Depth 4
                                        #           Child Loop BB50_125 Depth 5
                                        #             Child Loop BB50_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB50_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB50_121 Depth=3
	movl	$0, -16(%rbp)
.LBB50_123:                             # %for.cond309
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB50_125 Depth 5
                                        #             Child Loop BB50_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB50_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB50_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB50_125:                             # %for.cond313
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_121 Depth=3
                                        #         Parent Loop BB50_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB50_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB50_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB50_129
.LBB50_128:                             # %cond.false322
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_129:                             # %cond.end325
                                        #   in Loop: Header=BB50_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB50_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB50_135
.LBB50_131:                             # %cond.false330
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB50_134
.LBB50_133:                             # %cond.false336
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_134:                             # %cond.end339
                                        #   in Loop: Header=BB50_125 Depth=5
.LBB50_135:                             # %cond.end341
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB50_136:                             # %for.cond343
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_121 Depth=3
                                        #         Parent Loop BB50_123 Depth=4
                                        #           Parent Loop BB50_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB50_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB50_140
.LBB50_139:                             # %cond.false352
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_140:                             # %cond.end355
                                        #   in Loop: Header=BB50_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB50_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB50_146
.LBB50_142:                             # %cond.false360
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB50_145
.LBB50_144:                             # %cond.false366
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_145:                             # %cond.end369
                                        #   in Loop: Header=BB50_136 Depth=6
.LBB50_146:                             # %cond.end371
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_148:                             # %if.end381
                                        #   in Loop: Header=BB50_136 Depth=6
	jmp	.LBB50_149
.LBB50_149:                             # %for.inc382
                                        #   in Loop: Header=BB50_136 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_136
.LBB50_150:                             # %for.end384
                                        #   in Loop: Header=BB50_125 Depth=5
	jmp	.LBB50_151
.LBB50_151:                             # %for.inc385
                                        #   in Loop: Header=BB50_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_125
.LBB50_152:                             # %for.end387
                                        #   in Loop: Header=BB50_123 Depth=4
	jmp	.LBB50_153
.LBB50_153:                             # %for.inc388
                                        #   in Loop: Header=BB50_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_123
.LBB50_154:                             # %for.end390
                                        #   in Loop: Header=BB50_121 Depth=3
	jmp	.LBB50_155
.LBB50_155:                             # %for.inc391
                                        #   in Loop: Header=BB50_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_121
.LBB50_156:                             # %for.end393
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_259
.LBB50_157:                             # %if.else394
                                        #   in Loop: Header=BB50_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB50_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$0, -12(%rbp)
.LBB50_159:                             # %for.cond398
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_161 Depth 4
                                        #           Child Loop BB50_163 Depth 5
                                        #             Child Loop BB50_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB50_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB50_159 Depth=3
	movl	$0, -16(%rbp)
.LBB50_161:                             # %for.cond402
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB50_163 Depth 5
                                        #             Child Loop BB50_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB50_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB50_161 Depth=4
	movl	$-2, -28(%rbp)
.LBB50_163:                             # %for.cond406
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_159 Depth=3
                                        #         Parent Loop BB50_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB50_174 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB50_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB50_167
.LBB50_166:                             # %cond.false415
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_167:                             # %cond.end418
                                        #   in Loop: Header=BB50_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB50_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB50_173
.LBB50_169:                             # %cond.false423
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB50_172
.LBB50_171:                             # %cond.false429
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_172:                             # %cond.end432
                                        #   in Loop: Header=BB50_163 Depth=5
.LBB50_173:                             # %cond.end434
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB50_174:                             # %for.cond436
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_159 Depth=3
                                        #         Parent Loop BB50_161 Depth=4
                                        #           Parent Loop BB50_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB50_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB50_178
.LBB50_177:                             # %cond.false445
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_178:                             # %cond.end448
                                        #   in Loop: Header=BB50_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB50_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB50_184
.LBB50_180:                             # %cond.false453
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB50_183
.LBB50_182:                             # %cond.false459
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_183:                             # %cond.end462
                                        #   in Loop: Header=BB50_174 Depth=6
.LBB50_184:                             # %cond.end464
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_186:                             # %if.end474
                                        #   in Loop: Header=BB50_174 Depth=6
	jmp	.LBB50_187
.LBB50_187:                             # %for.inc475
                                        #   in Loop: Header=BB50_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_174
.LBB50_188:                             # %for.end477
                                        #   in Loop: Header=BB50_163 Depth=5
	jmp	.LBB50_189
.LBB50_189:                             # %for.inc478
                                        #   in Loop: Header=BB50_163 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_163
.LBB50_190:                             # %for.end480
                                        #   in Loop: Header=BB50_161 Depth=4
	jmp	.LBB50_191
.LBB50_191:                             # %for.inc481
                                        #   in Loop: Header=BB50_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_161
.LBB50_192:                             # %for.end483
                                        #   in Loop: Header=BB50_159 Depth=3
	jmp	.LBB50_193
.LBB50_193:                             # %for.inc484
                                        #   in Loop: Header=BB50_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_159
.LBB50_194:                             # %for.end486
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_258
.LBB50_195:                             # %if.else487
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	$0, -12(%rbp)
.LBB50_196:                             # %for.cond488
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB50_198 Depth 4
                                        #           Child Loop BB50_212 Depth 5
                                        #           Child Loop BB50_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB50_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB50_196 Depth=3
	movl	$0, -16(%rbp)
.LBB50_198:                             # %for.cond492
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB50_212 Depth 5
                                        #           Child Loop BB50_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB50_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB50_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB50_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB50_202
.LBB50_201:                             # %cond.false500
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB50_202:                             # %cond.end503
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB50_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB50_205
.LBB50_204:                             # %cond.false508
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-48(%rbp), %eax
.LBB50_205:                             # %cond.end509
                                        #   in Loop: Header=BB50_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB50_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB50_211
.LBB50_207:                             # %cond.false514
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB50_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB50_210
.LBB50_209:                             # %cond.false518
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-48(%rbp), %eax
.LBB50_210:                             # %cond.end519
                                        #   in Loop: Header=BB50_198 Depth=4
.LBB50_211:                             # %cond.end521
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB50_212:                             # %for.cond523
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_196 Depth=3
                                        #         Parent Loop BB50_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB50_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB50_216
.LBB50_215:                             # %cond.false532
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_216:                             # %cond.end535
                                        #   in Loop: Header=BB50_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB50_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB50_222
.LBB50_218:                             # %cond.false540
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB50_221
.LBB50_220:                             # %cond.false546
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB50_221:                             # %cond.end549
                                        #   in Loop: Header=BB50_212 Depth=5
.LBB50_222:                             # %cond.end551
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_224:                             # %if.end561
                                        #   in Loop: Header=BB50_212 Depth=5
	jmp	.LBB50_225
.LBB50_225:                             # %for.inc562
                                        #   in Loop: Header=BB50_212 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB50_212
.LBB50_226:                             # %for.end564
                                        #   in Loop: Header=BB50_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB50_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB50_229
.LBB50_228:                             # %cond.false569
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB50_229:                             # %cond.end572
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB50_232
.LBB50_231:                             # %cond.false577
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-44(%rbp), %eax
.LBB50_232:                             # %cond.end578
                                        #   in Loop: Header=BB50_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB50_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB50_238
.LBB50_234:                             # %cond.false583
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB50_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB50_237
.LBB50_236:                             # %cond.false587
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-44(%rbp), %eax
.LBB50_237:                             # %cond.end588
                                        #   in Loop: Header=BB50_198 Depth=4
.LBB50_238:                             # %cond.end590
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB50_239:                             # %for.cond592
                                        #   Parent Loop BB50_17 Depth=1
                                        #     Parent Loop BB50_19 Depth=2
                                        #       Parent Loop BB50_196 Depth=3
                                        #         Parent Loop BB50_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB50_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB50_243
.LBB50_242:                             # %cond.false601
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_243:                             # %cond.end604
                                        #   in Loop: Header=BB50_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB50_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB50_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB50_249
.LBB50_245:                             # %cond.false609
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB50_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB50_248
.LBB50_247:                             # %cond.false615
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB50_248:                             # %cond.end618
                                        #   in Loop: Header=BB50_239 Depth=5
.LBB50_249:                             # %cond.end620
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB50_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB50_267
.LBB50_251:                             # %if.end630
                                        #   in Loop: Header=BB50_239 Depth=5
	jmp	.LBB50_252
.LBB50_252:                             # %for.inc631
                                        #   in Loop: Header=BB50_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB50_239
.LBB50_253:                             # %for.end633
                                        #   in Loop: Header=BB50_198 Depth=4
	jmp	.LBB50_254
.LBB50_254:                             # %for.inc634
                                        #   in Loop: Header=BB50_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_198
.LBB50_255:                             # %for.end636
                                        #   in Loop: Header=BB50_196 Depth=3
	jmp	.LBB50_256
.LBB50_256:                             # %for.inc637
                                        #   in Loop: Header=BB50_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_196
.LBB50_257:                             # %for.end639
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_258
.LBB50_258:                             # %if.end640
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_259
.LBB50_259:                             # %if.end641
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_260
.LBB50_260:                             # %if.end642
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_261
.LBB50_261:                             # %if.end643
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_262
.LBB50_262:                             # %if.end644
                                        #   in Loop: Header=BB50_19 Depth=2
	jmp	.LBB50_263
.LBB50_263:                             # %for.inc645
                                        #   in Loop: Header=BB50_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB50_19
.LBB50_264:                             # %for.end647
                                        #   in Loop: Header=BB50_17 Depth=1
	jmp	.LBB50_265
.LBB50_265:                             # %for.inc648
                                        #   in Loop: Header=BB50_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB50_17
.LBB50_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB50_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$2124004609, -104(%rbp) # imm = 0x7E99BD01
	jne	.LBB50_269
.LBB50_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_268
.Lfunc_end50:
	.size	CheckReliabilityOfRef.21, .Lfunc_end50-CheckReliabilityOfRef.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.22
.LCPI51_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.22
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.22,@function
RDCost_for_8x8blocks.22:                # @RDCost_for_8x8blocks.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1029336207, -164(%rbp) # imm = 0x3D5A6C8F
	movq	%rdi, -144(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -124(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -156(%rbp)
	cmpl	$0, -156(%rbp)
	je	.LBB51_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB51_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -116(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -192(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB51_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB51_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI51_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	%xmm0, -184(%rbp)
	jmp	.LBB51_139
.LBB51_5:                               # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB51_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB51_8
.LBB51_7:                               # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB51_8:                               # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-124(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB51_19
.LBB51_10:                              # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB51_13
.LBB51_12:                              # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB51_14
.LBB51_13:                              # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB51_14
.LBB51_14:                              # %cond.end71
	movl	%eax, -172(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB51_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB51_17
.LBB51_16:                              # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB51_18
.LBB51_17:                              # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB51_18
.LBB51_18:                              # %cond.end82
	movl	%eax, -160(%rbp)
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-172(%rbp), %r8d
	movl	-160(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-124(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB51_19:                              # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB51_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB51_21:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_23 Depth 2
                                        #       Child Loop BB51_25 Depth 3
                                        #     Child Loop BB51_31 Depth 2
                                        #       Child Loop BB51_33 Depth 3
                                        #     Child Loop BB51_39 Depth 2
                                        #       Child Loop BB51_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB51_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	$0, -12(%rbp)
.LBB51_23:                              # %for.cond96
                                        #   Parent Loop BB51_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_25 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB51_23 Depth=2
	movl	$0, -16(%rbp)
.LBB51_25:                              # %for.cond100
                                        #   Parent Loop BB51_21 Depth=1
                                        #     Parent Loop BB51_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB51_25 Depth=3
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB51_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_25
.LBB51_28:                              # %for.end
                                        #   in Loop: Header=BB51_23 Depth=2
	jmp	.LBB51_29
.LBB51_29:                              # %for.inc114
                                        #   in Loop: Header=BB51_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_23
.LBB51_30:                              # %for.end116
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB51_31:                              # %for.cond120
                                        #   Parent Loop BB51_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB51_31 Depth=2
	movl	$0, -16(%rbp)
.LBB51_33:                              # %for.cond124
                                        #   Parent Loop BB51_21 Depth=1
                                        #     Parent Loop BB51_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB51_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB51_33 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_33
.LBB51_36:                              # %for.end152
                                        #   in Loop: Header=BB51_31 Depth=2
	jmp	.LBB51_37
.LBB51_37:                              # %for.inc153
                                        #   in Loop: Header=BB51_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_31
.LBB51_38:                              # %for.end155
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB51_39:                              # %for.cond159
                                        #   Parent Loop BB51_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB51_39 Depth=2
	movl	$0, -16(%rbp)
.LBB51_41:                              # %for.cond163
                                        #   Parent Loop BB51_21 Depth=1
                                        #     Parent Loop BB51_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB51_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB51_41 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_41
.LBB51_44:                              # %for.end180
                                        #   in Loop: Header=BB51_39 Depth=2
	jmp	.LBB51_45
.LBB51_45:                              # %for.inc181
                                        #   in Loop: Header=BB51_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_39
.LBB51_46:                              # %for.end183
                                        #   in Loop: Header=BB51_21 Depth=1
	jmp	.LBB51_47
.LBB51_47:                              # %for.inc184
                                        #   in Loop: Header=BB51_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB51_21
.LBB51_48:                              # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB51_49:                              # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_51 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB51_51:                              # %for.cond192
                                        #   Parent Loop BB51_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -120(%rbp)
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-12(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-120(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-120(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-12(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-12(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB51_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_55
.LBB51_54:                              # %cond.false229
                                        #   in Loop: Header=BB51_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB51_55:                              # %cond.end235
                                        #   in Loop: Header=BB51_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB51_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB51_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB51_61
.LBB51_57:                              # %cond.false241
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB51_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_60
.LBB51_59:                              # %cond.false250
                                        #   in Loop: Header=BB51_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB51_60:                              # %cond.end256
                                        #   in Loop: Header=BB51_51 Depth=2
.LBB51_61:                              # %cond.end258
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-12(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB51_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB51_64
.LBB51_63:                              # %cond.false276
                                        #   in Loop: Header=BB51_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB51_64:                              # %cond.end282
                                        #   in Loop: Header=BB51_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB51_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB51_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB51_70
.LBB51_66:                              # %cond.false288
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB51_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_69
.LBB51_68:                              # %cond.false297
                                        #   in Loop: Header=BB51_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB51_69:                              # %cond.end303
                                        #   in Loop: Header=BB51_51 Depth=2
.LBB51_70:                              # %cond.end305
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-16(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-12(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB51_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB51_73
.LBB51_72:                              # %cond.false325
                                        #   in Loop: Header=BB51_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB51_73:                              # %cond.end331
                                        #   in Loop: Header=BB51_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB51_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB51_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB51_79
.LBB51_75:                              # %cond.false337
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-16(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-12(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB51_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB51_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB51_78
.LBB51_77:                              # %cond.false346
                                        #   in Loop: Header=BB51_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB51_78:                              # %cond.end352
                                        #   in Loop: Header=BB51_51 Depth=2
.LBB51_79:                              # %cond.end354
                                        #   in Loop: Header=BB51_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB51_51 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_51
.LBB51_81:                              # %for.end369
                                        #   in Loop: Header=BB51_49 Depth=1
	jmp	.LBB51_82
.LBB51_82:                              # %for.inc370
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_49
.LBB51_83:                              # %for.end372
	jmp	.LBB51_84
.LBB51_84:                              # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB51_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB51_87:                              # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB51_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB51_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB51_90:                              # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_92 Depth 2
                                        #       Child Loop BB51_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB51_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB51_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB51_92:                              # %for.cond395
                                        #   Parent Loop BB51_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_94 Depth 3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB51_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB51_94:                              # %for.cond403
                                        #   Parent Loop BB51_90 Depth=1
                                        #     Parent Loop BB51_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB51_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB51_94 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_94
.LBB51_97:                              # %for.end429
                                        #   in Loop: Header=BB51_92 Depth=2
	jmp	.LBB51_98
.LBB51_98:                              # %for.inc430
                                        #   in Loop: Header=BB51_92 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_92
.LBB51_99:                              # %for.end432
                                        #   in Loop: Header=BB51_90 Depth=1
	jmp	.LBB51_100
.LBB51_100:                             # %for.inc433
                                        #   in Loop: Header=BB51_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB51_90
.LBB51_101:                             # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB51_113
.LBB51_102:                             # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB51_103:                             # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_105 Depth 2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB51_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB51_105:                             # %for.cond447
                                        #   Parent Loop BB51_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB51_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB51_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB51_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB51_108:                             # %if.end524
                                        #   in Loop: Header=BB51_105 Depth=2
	jmp	.LBB51_109
.LBB51_109:                             # %for.inc525
                                        #   in Loop: Header=BB51_105 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_105
.LBB51_110:                             # %for.end527
                                        #   in Loop: Header=BB51_103 Depth=1
	jmp	.LBB51_111
.LBB51_111:                             # %for.inc528
                                        #   in Loop: Header=BB51_103 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_103
.LBB51_112:                             # %for.end530
	jmp	.LBB51_113
.LBB51_113:                             # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB51_115
# %bb.114:                              # %if.then534
	movl	-116(%rbp), %edi
	movl	-168(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_116
.LBB51_115:                             # %if.else536
	movl	-116(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-192(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB51_116:                             # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB51_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB51_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB51_121
.LBB51_120:                             # %if.then560
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB51_121:                             # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB51_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB51_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB51_126
.LBB51_125:                             # %if.then579
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB51_126:                             # %if.end583
	jmp	.LBB51_127
.LBB51_127:                             # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB51_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB51_130
.LBB51_129:                             # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB51_130:                             # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB51_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB51_133
.LBB51_132:                             # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB51_133:                             # %if.end612
	jmp	.LBB51_134
.LBB51_134:                             # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB51_136
# %bb.135:                              # %if.then617
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-192(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB51_136:                             # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB51_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB51_138:                             # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -184(%rbp)
.LBB51_139:                             # %return
	vmovsd	-184(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1029336207, -164(%rbp) # imm = 0x3D5A6C8F
	jne	.LBB51_141
.LBB51_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB51_140
.Lfunc_end51:
	.size	RDCost_for_8x8blocks.22, .Lfunc_end51-RDCost_for_8x8blocks.22
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.23
.LCPI52_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI52_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.23
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.23,@function
Mode_Decision_for_8x8IntraBlocks.23:    # @Mode_Decision_for_8x8IntraBlocks.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI52_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI52_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$2027365919, -20(%rbp)  # imm = 0x78D7261F
	movl	%edi, -28(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB52_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB52_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-28(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB52_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	$1, -16(%rbp)
.LBB52_4:                               # %if.end
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB52_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB52_1
.LBB52_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$2027365919, -20(%rbp)  # imm = 0x78D7261F
	jne	.LBB52_8
.LBB52_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_7
.Lfunc_end52:
	.size	Mode_Decision_for_8x8IntraBlocks.23, .Lfunc_end52-Mode_Decision_for_8x8IntraBlocks.23
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.24   # -- Begin function SetMotionVectorsMB.24
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.24,@function
SetMotionVectorsMB.24:                  # @SetMotionVectorsMB.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1433195157, -72(%rbp)  # imm = 0x556CD295
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB53_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	$0, -4(%rbp)
.LBB53_3:                               # %for.cond3
                                        #   Parent Loop BB53_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB53_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB53_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB53_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB53_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB53_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB53_10
.LBB53_9:                               # %cond.false
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB53_10:                              # %cond.end
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB53_11:                              # %if.end
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB53_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB53_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB53_15
.LBB53_14:                              # %if.else
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB53_15:                              # %if.end89
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_29
.LBB53_16:                              # %if.else90
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB53_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB53_28
.LBB53_18:                              # %if.else122
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB53_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB53_27
.LBB53_20:                              # %if.else174
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB53_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB53_26
.LBB53_22:                              # %if.else226
                                        #   in Loop: Header=BB53_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB53_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB53_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB53_25
.LBB53_24:                              # %if.else298
                                        #   in Loop: Header=BB53_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB53_25:                              # %if.end299
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_26
.LBB53_26:                              # %if.end300
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_27
.LBB53_27:                              # %if.end301
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_28
.LBB53_28:                              # %if.end302
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_29
.LBB53_29:                              # %if.end303
                                        #   in Loop: Header=BB53_3 Depth=2
	jmp	.LBB53_30
.LBB53_30:                              # %for.inc
                                        #   in Loop: Header=BB53_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_3
.LBB53_31:                              # %for.end
                                        #   in Loop: Header=BB53_1 Depth=1
	jmp	.LBB53_32
.LBB53_32:                              # %for.inc304
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_1
.LBB53_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB53_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB53_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_37 Depth 2
                                        #       Child Loop BB53_39 Depth 3
                                        #         Child Loop BB53_41 Depth 4
                                        #           Child Loop BB53_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB53_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB53_35 Depth=1
	movl	$0, -8(%rbp)
.LBB53_37:                              # %for.cond313
                                        #   Parent Loop BB53_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_39 Depth 3
                                        #         Child Loop BB53_41 Depth 4
                                        #           Child Loop BB53_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB53_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB53_37 Depth=2
	movl	$0, -20(%rbp)
.LBB53_39:                              # %for.cond317
                                        #   Parent Loop BB53_35 Depth=1
                                        #     Parent Loop BB53_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB53_41 Depth 4
                                        #           Child Loop BB53_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB53_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB53_39 Depth=3
	movl	$0, -24(%rbp)
.LBB53_41:                              # %for.cond321
                                        #   Parent Loop BB53_35 Depth=1
                                        #     Parent Loop BB53_37 Depth=2
                                        #       Parent Loop BB53_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB53_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB53_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB53_41 Depth=4
	movl	$0, -28(%rbp)
.LBB53_43:                              # %for.cond325
                                        #   Parent Loop BB53_35 Depth=1
                                        #     Parent Loop BB53_37 Depth=2
                                        #       Parent Loop BB53_39 Depth=3
                                        #         Parent Loop BB53_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB53_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB53_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB53_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB53_43
.LBB53_46:                              # %for.end423
                                        #   in Loop: Header=BB53_41 Depth=4
	jmp	.LBB53_47
.LBB53_47:                              # %for.inc424
                                        #   in Loop: Header=BB53_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB53_41
.LBB53_48:                              # %for.end426
                                        #   in Loop: Header=BB53_39 Depth=3
	jmp	.LBB53_49
.LBB53_49:                              # %for.inc427
                                        #   in Loop: Header=BB53_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB53_39
.LBB53_50:                              # %for.end429
                                        #   in Loop: Header=BB53_37 Depth=2
	jmp	.LBB53_51
.LBB53_51:                              # %for.inc430
                                        #   in Loop: Header=BB53_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_37
.LBB53_52:                              # %for.end432
                                        #   in Loop: Header=BB53_35 Depth=1
	jmp	.LBB53_53
.LBB53_53:                              # %for.inc433
                                        #   in Loop: Header=BB53_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_35
.LBB53_54:                              # %for.end435
	jmp	.LBB53_55
.LBB53_55:                              # %if.end436
	cmpl	$1433195157, -72(%rbp)  # imm = 0x556CD295
	jne	.LBB53_57
.LBB53_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_56
.Lfunc_end53:
	.size	SetMotionVectorsMB.24, .Lfunc_end53-SetMotionVectorsMB.24
	.cfi_endproc
                                        # -- End function
	.globl	set_mbaff_parameters.25 # -- Begin function set_mbaff_parameters.25
	.p2align	4, 0x90
	.type	set_mbaff_parameters.25,@function
set_mbaff_parameters.25:                # @set_mbaff_parameters.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$645002668, -36(%rbp)   # imm = 0x2671F5AC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB54_2
# %bb.1:                                # %if.then
	jmp	.LBB54_82
.LBB54_2:                               # %if.end
	movl	$0, -8(%rbp)
.LBB54_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_5 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB54_3 Depth=1
	movl	$0, -4(%rbp)
.LBB54_5:                               # %for.cond3
                                        #   Parent Loop BB54_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_8
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB54_5 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB54_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_5
.LBB54_8:                               # %for.end
                                        #   in Loop: Header=BB54_3 Depth=1
	jmp	.LBB54_9
.LBB54_9:                               # %for.inc17
                                        #   in Loop: Header=BB54_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_3
.LBB54_10:                              # %for.end19
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB54_20
# %bb.11:                               # %if.then22
	movl	$0, -8(%rbp)
.LBB54_12:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_14 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB54_19
# %bb.13:                               # %for.body26
                                        #   in Loop: Header=BB54_12 Depth=1
	movl	$0, -4(%rbp)
.LBB54_14:                              # %for.cond27
                                        #   Parent Loop BB54_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB54_17
# %bb.15:                               # %for.body30
                                        #   in Loop: Header=BB54_14 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.16:                               # %for.inc58
                                        #   in Loop: Header=BB54_14 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_14
.LBB54_17:                              # %for.end60
                                        #   in Loop: Header=BB54_12 Depth=1
	jmp	.LBB54_18
.LBB54_18:                              # %for.inc61
                                        #   in Loop: Header=BB54_12 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_12
.LBB54_19:                              # %for.end63
	jmp	.LBB54_20
.LBB54_20:                              # %if.end64
	movl	-28(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	rdopt, %rax
	cmpl	$0, 3096(%rax)
	jne	.LBB54_23
# %bb.21:                               # %land.lhs.true
	cmpl	$0, -28(%rbp)
	je	.LBB54_23
# %bb.22:                               # %if.then76
	movl	$0, -28(%rbp)
	movq	rdopt, %rax
	movl	$0, 3224(%rax)
.LBB54_23:                              # %if.end78
	movl	$0, -4(%rbp)
.LBB54_24:                              # %for.cond79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_26 Depth 2
                                        #       Child Loop BB54_28 Depth 3
                                        #         Child Loop BB54_30 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_39
# %bb.25:                               # %for.body83
                                        #   in Loop: Header=BB54_24 Depth=1
	movl	$0, -8(%rbp)
.LBB54_26:                              # %for.cond84
                                        #   Parent Loop BB54_24 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_28 Depth 3
                                        #         Child Loop BB54_30 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB54_37
# %bb.27:                               # %for.body87
                                        #   in Loop: Header=BB54_26 Depth=2
	movl	$0, -12(%rbp)
.LBB54_28:                              # %for.cond88
                                        #   Parent Loop BB54_24 Depth=1
                                        #     Parent Loop BB54_26 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_30 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB54_35
# %bb.29:                               # %for.body91
                                        #   in Loop: Header=BB54_28 Depth=3
	movl	$0, -16(%rbp)
.LBB54_30:                              # %for.cond92
                                        #   Parent Loop BB54_24 Depth=1
                                        #     Parent Loop BB54_26 Depth=2
                                        #       Parent Loop BB54_28 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB54_33
# %bb.31:                               # %for.body95
                                        #   in Loop: Header=BB54_30 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc113
                                        #   in Loop: Header=BB54_30 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_30
.LBB54_33:                              # %for.end115
                                        #   in Loop: Header=BB54_28 Depth=3
	jmp	.LBB54_34
.LBB54_34:                              # %for.inc116
                                        #   in Loop: Header=BB54_28 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_28
.LBB54_35:                              # %for.end118
                                        #   in Loop: Header=BB54_26 Depth=2
	jmp	.LBB54_36
.LBB54_36:                              # %for.inc119
                                        #   in Loop: Header=BB54_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_26
.LBB54_37:                              # %for.end121
                                        #   in Loop: Header=BB54_24 Depth=1
	jmp	.LBB54_38
.LBB54_38:                              # %for.inc122
                                        #   in Loop: Header=BB54_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_24
.LBB54_39:                              # %for.end124
	movl	$0, -4(%rbp)
.LBB54_40:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_42 Depth 2
                                        #       Child Loop BB54_44 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB54_51
# %bb.41:                               # %for.body128
                                        #   in Loop: Header=BB54_40 Depth=1
	movl	$0, -12(%rbp)
.LBB54_42:                              # %for.cond129
                                        #   Parent Loop BB54_40 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_44 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB54_49
# %bb.43:                               # %for.body132
                                        #   in Loop: Header=BB54_42 Depth=2
	movl	$0, -16(%rbp)
.LBB54_44:                              # %for.cond133
                                        #   Parent Loop BB54_40 Depth=1
                                        #     Parent Loop BB54_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB54_47
# %bb.45:                               # %for.body136
                                        #   in Loop: Header=BB54_44 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.46:                               # %for.inc150
                                        #   in Loop: Header=BB54_44 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_44
.LBB54_47:                              # %for.end152
                                        #   in Loop: Header=BB54_42 Depth=2
	jmp	.LBB54_48
.LBB54_48:                              # %for.inc153
                                        #   in Loop: Header=BB54_42 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_42
.LBB54_49:                              # %for.end155
                                        #   in Loop: Header=BB54_40 Depth=1
	jmp	.LBB54_50
.LBB54_50:                              # %for.inc156
                                        #   in Loop: Header=BB54_40 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_40
.LBB54_51:                              # %for.end158
	movl	$0, -4(%rbp)
.LBB54_52:                              # %for.cond159
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB54_55
# %bb.53:                               # %for.body162
                                        #   in Loop: Header=BB54_52 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
# %bb.54:                               # %for.inc173
                                        #   in Loop: Header=BB54_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_52
.LBB54_55:                              # %for.end175
	movl	$0, -8(%rbp)
.LBB54_56:                              # %for.cond176
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_58 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_63
# %bb.57:                               # %for.body179
                                        #   in Loop: Header=BB54_56 Depth=1
	movl	$0, -4(%rbp)
.LBB54_58:                              # %for.cond180
                                        #   Parent Loop BB54_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_61
# %bb.59:                               # %for.body183
                                        #   in Loop: Header=BB54_58 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc196
                                        #   in Loop: Header=BB54_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_58
.LBB54_61:                              # %for.end198
                                        #   in Loop: Header=BB54_56 Depth=1
	jmp	.LBB54_62
.LBB54_62:                              # %for.inc199
                                        #   in Loop: Header=BB54_56 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_56
.LBB54_63:                              # %for.end201
	cmpl	$0, -32(%rbp)
	je	.LBB54_73
# %bb.64:                               # %if.then203
	movl	$0, -8(%rbp)
.LBB54_65:                              # %for.cond204
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_67 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB54_72
# %bb.66:                               # %for.body207
                                        #   in Loop: Header=BB54_65 Depth=1
	movl	$0, -4(%rbp)
.LBB54_67:                              # %for.cond208
                                        #   Parent Loop BB54_65 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB54_70
# %bb.68:                               # %for.body211
                                        #   in Loop: Header=BB54_67 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc228
                                        #   in Loop: Header=BB54_67 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_67
.LBB54_70:                              # %for.end230
                                        #   in Loop: Header=BB54_65 Depth=1
	jmp	.LBB54_71
.LBB54_71:                              # %for.inc231
                                        #   in Loop: Header=BB54_65 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_65
.LBB54_72:                              # %for.end233
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3100(%rcx)
.LBB54_73:                              # %if.end235
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB54_74:                              # %for.cond237
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_76 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_81
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB54_74 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB54_76:                              # %for.cond244
                                        #   Parent Loop BB54_74 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_79
# %bb.77:                               # %for.body249
                                        #   in Loop: Header=BB54_76 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.78:                               # %for.inc264
                                        #   in Loop: Header=BB54_76 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_76
.LBB54_79:                              # %for.end267
                                        #   in Loop: Header=BB54_74 Depth=1
	jmp	.LBB54_80
.LBB54_80:                              # %for.inc268
                                        #   in Loop: Header=BB54_74 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_74
.LBB54_81:                              # %for.end270.loopexit
	jmp	.LBB54_82
.LBB54_82:                              # %for.end270
	cmpl	$645002668, -36(%rbp)   # imm = 0x2671F5AC
	jne	.LBB54_84
.LBB54_83:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_83
.Lfunc_end54:
	.size	set_mbaff_parameters.25, .Lfunc_end54-set_mbaff_parameters.25
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.26 # -- Begin function GetBestTransformP8x8.26
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.26,@function
GetBestTransformP8x8.26:                # @GetBestTransformP8x8.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$529572831, -64(%rbp)   # imm = 0x1F90A3DF
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB55_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB55_25
.LBB55_2:                               # %if.end
	movl	$0, -32(%rbp)
.LBB55_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_5 Depth 2
                                        #       Child Loop BB55_7 Depth 3
                                        #         Child Loop BB55_9 Depth 4
                                        #           Child Loop BB55_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB55_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB55_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	$0, -28(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB55_5:                               # %for.cond3
                                        #   Parent Loop BB55_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB55_7 Depth 3
                                        #         Child Loop BB55_9 Depth 4
                                        #           Child Loop BB55_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB55_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB55_7:                               # %for.cond7
                                        #   Parent Loop BB55_3 Depth=1
                                        #     Parent Loop BB55_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB55_9 Depth 4
                                        #           Child Loop BB55_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB55_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB55_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB55_9:                               # %for.cond12
                                        #   Parent Loop BB55_3 Depth=1
                                        #     Parent Loop BB55_5 Depth=2
                                        #       Parent Loop BB55_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB55_11 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB55_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB55_9 Depth=4
	movl	$0, -16(%rbp)
.LBB55_11:                              # %for.cond15
                                        #   Parent Loop BB55_3 Depth=1
                                        #     Parent Loop BB55_5 Depth=2
                                        #       Parent Loop BB55_7 Depth=3
                                        #         Parent Loop BB55_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB55_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB55_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB55_11 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB55_11
.LBB55_14:                              # %for.end
                                        #   in Loop: Header=BB55_9 Depth=4
	jmp	.LBB55_15
.LBB55_15:                              # %for.inc51
                                        #   in Loop: Header=BB55_9 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_9
.LBB55_16:                              # %for.end53
                                        #   in Loop: Header=BB55_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB55_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB55_7
.LBB55_18:                              # %for.end57
                                        #   in Loop: Header=BB55_5 Depth=2
	jmp	.LBB55_19
.LBB55_19:                              # %for.inc58
                                        #   in Loop: Header=BB55_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB55_5
.LBB55_20:                              # %for.end60
                                        #   in Loop: Header=BB55_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB55_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB55_3
.LBB55_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB55_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB55_25
.LBB55_24:                              # %if.else
	movl	$0, -36(%rbp)
.LBB55_25:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$529572831, -64(%rbp)   # imm = 0x1F90A3DF
	jne	.LBB55_27
.LBB55_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_26
.Lfunc_end55:
	.size	GetBestTransformP8x8.26, .Lfunc_end55-GetBestTransformP8x8.26
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.27 # -- Begin function RDCost_for_4x4Blocks_Chroma.27
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.27,@function
RDCost_for_4x4Blocks_Chroma.27:         # @RDCost_for_4x4Blocks_Chroma.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$630864953, -56(%rbp)   # imm = 0x259A3C39
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB56_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB56_3
.LBB56_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB56_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB56_18
.LBB56_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -112(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB56_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB56_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB56_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB56_8:                               # %land.end
                                        #   in Loop: Header=BB56_6 Depth=1
	testb	$1, %al
	jne	.LBB56_9
	jmp	.LBB56_17
.LBB56_9:                               # %for.body
                                        #   in Loop: Header=BB56_6 Depth=1
	movq	-96(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-112(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB56_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB56_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB56_12
.LBB56_11:                              # %if.else54
                                        #   in Loop: Header=BB56_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB56_12:                              # %if.end55
                                        #   in Loop: Header=BB56_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB56_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB56_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB56_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB56_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB56_15:                              # %lor.end
                                        #   in Loop: Header=BB56_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB56_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB56_6
.LBB56_17:                              # %for.end
	jmp	.LBB56_18
.LBB56_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$630864953, -56(%rbp)   # imm = 0x259A3C39
	jne	.LBB56_20
.LBB56_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_19
.Lfunc_end56:
	.size	RDCost_for_4x4Blocks_Chroma.27, .Lfunc_end56-RDCost_for_4x4Blocks_Chroma.27
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.28 # -- Begin function CheckReliabilityOfRef.28
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.28,@function
CheckReliabilityOfRef.28:               # @CheckReliabilityOfRef.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$555090470, -108(%rbp)  # imm = 0x21160226
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB57_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB57_6
.LBB57_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB57_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB57_5
.LBB57_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB57_5
.LBB57_5:                               # %cond.end
.LBB57_6:                               # %cond.end6
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB57_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB57_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB57_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB57_14
.LBB57_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB57_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB57_13
.LBB57_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB57_13
.LBB57_13:                              # %cond.end20
.LBB57_14:                              # %cond.end22
	movl	%edx, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB57_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB57_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB57_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_19 Depth 2
                                        #       Child Loop BB57_23 Depth 3
                                        #         Child Loop BB57_25 Depth 4
                                        #       Child Loop BB57_53 Depth 3
                                        #         Child Loop BB57_55 Depth 4
                                        #           Child Loop BB57_66 Depth 5
                                        #       Child Loop BB57_87 Depth 3
                                        #         Child Loop BB57_89 Depth 4
                                        #           Child Loop BB57_100 Depth 5
                                        #       Child Loop BB57_121 Depth 3
                                        #         Child Loop BB57_123 Depth 4
                                        #           Child Loop BB57_125 Depth 5
                                        #             Child Loop BB57_136 Depth 6
                                        #       Child Loop BB57_159 Depth 3
                                        #         Child Loop BB57_161 Depth 4
                                        #           Child Loop BB57_163 Depth 5
                                        #             Child Loop BB57_174 Depth 6
                                        #       Child Loop BB57_196 Depth 3
                                        #         Child Loop BB57_198 Depth 4
                                        #           Child Loop BB57_212 Depth 5
                                        #           Child Loop BB57_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB57_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB57_19:                              # %for.cond31
                                        #   Parent Loop BB57_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB57_23 Depth 3
                                        #         Child Loop BB57_25 Depth 4
                                        #       Child Loop BB57_53 Depth 3
                                        #         Child Loop BB57_55 Depth 4
                                        #           Child Loop BB57_66 Depth 5
                                        #       Child Loop BB57_87 Depth 3
                                        #         Child Loop BB57_89 Depth 4
                                        #           Child Loop BB57_100 Depth 5
                                        #       Child Loop BB57_121 Depth 3
                                        #         Child Loop BB57_123 Depth 4
                                        #           Child Loop BB57_125 Depth 5
                                        #             Child Loop BB57_136 Depth 6
                                        #       Child Loop BB57_159 Depth 3
                                        #         Child Loop BB57_161 Depth 4
                                        #           Child Loop BB57_163 Depth 5
                                        #             Child Loop BB57_174 Depth 6
                                        #       Child Loop BB57_196 Depth 3
                                        #         Child Loop BB57_198 Depth 4
                                        #           Child Loop BB57_212 Depth 5
                                        #           Child Loop BB57_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB57_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB57_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB57_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB57_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB57_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$0, -12(%rbp)
.LBB57_23:                              # %for.cond75
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB57_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB57_23 Depth=3
	movl	$0, -16(%rbp)
.LBB57_25:                              # %for.cond79
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB57_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB57_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB57_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB57_29
.LBB57_28:                              # %cond.false87
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB57_29:                              # %cond.end89
                                        #   in Loop: Header=BB57_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB57_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB57_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_35
.LBB57_31:                              # %cond.false94
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB57_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB57_34
.LBB57_33:                              # %cond.false99
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB57_34:                              # %cond.end101
                                        #   in Loop: Header=BB57_25 Depth=4
.LBB57_35:                              # %cond.end103
                                        #   in Loop: Header=BB57_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB57_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB57_38
.LBB57_37:                              # %cond.false111
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB57_38:                              # %cond.end113
                                        #   in Loop: Header=BB57_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB57_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB57_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB57_44
.LBB57_40:                              # %cond.false118
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB57_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB57_43
.LBB57_42:                              # %cond.false123
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB57_43:                              # %cond.end125
                                        #   in Loop: Header=BB57_25 Depth=4
.LBB57_44:                              # %cond.end127
                                        #   in Loop: Header=BB57_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_46:                              # %if.end
                                        #   in Loop: Header=BB57_25 Depth=4
	jmp	.LBB57_47
.LBB57_47:                              # %for.inc
                                        #   in Loop: Header=BB57_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_25
.LBB57_48:                              # %for.end
                                        #   in Loop: Header=BB57_23 Depth=3
	jmp	.LBB57_49
.LBB57_49:                              # %for.inc135
                                        #   in Loop: Header=BB57_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_23
.LBB57_50:                              # %for.end137
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_262
.LBB57_51:                              # %if.else
                                        #   in Loop: Header=BB57_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB57_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$0, -12(%rbp)
.LBB57_53:                              # %for.cond141
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_55 Depth 4
                                        #           Child Loop BB57_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB57_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB57_53 Depth=3
	movl	$0, -16(%rbp)
.LBB57_55:                              # %for.cond145
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB57_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB57_59
.LBB57_58:                              # %cond.false153
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_59:                              # %cond.end155
                                        #   in Loop: Header=BB57_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB57_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB57_65
.LBB57_61:                              # %cond.false160
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB57_64
.LBB57_63:                              # %cond.false165
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_64:                              # %cond.end167
                                        #   in Loop: Header=BB57_55 Depth=4
.LBB57_65:                              # %cond.end169
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB57_66:                              # %for.cond171
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_53 Depth=3
                                        #         Parent Loop BB57_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB57_70
.LBB57_69:                              # %cond.false180
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB57_70:                              # %cond.end183
                                        #   in Loop: Header=BB57_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB57_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB57_76
.LBB57_72:                              # %cond.false188
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB57_75
.LBB57_74:                              # %cond.false194
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB57_75:                              # %cond.end197
                                        #   in Loop: Header=BB57_66 Depth=5
.LBB57_76:                              # %cond.end199
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_78:                              # %if.end209
                                        #   in Loop: Header=BB57_66 Depth=5
	jmp	.LBB57_79
.LBB57_79:                              # %for.inc210
                                        #   in Loop: Header=BB57_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_66
.LBB57_80:                              # %for.end212
                                        #   in Loop: Header=BB57_55 Depth=4
	jmp	.LBB57_81
.LBB57_81:                              # %for.inc213
                                        #   in Loop: Header=BB57_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_55
.LBB57_82:                              # %for.end215
                                        #   in Loop: Header=BB57_53 Depth=3
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc216
                                        #   in Loop: Header=BB57_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_53
.LBB57_84:                              # %for.end218
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_261
.LBB57_85:                              # %if.else219
                                        #   in Loop: Header=BB57_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB57_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$0, -12(%rbp)
.LBB57_87:                              # %for.cond223
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_89 Depth 4
                                        #           Child Loop BB57_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB57_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB57_87 Depth=3
	movl	$0, -16(%rbp)
.LBB57_89:                              # %for.cond227
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB57_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB57_93
.LBB57_92:                              # %cond.false235
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_93:                              # %cond.end237
                                        #   in Loop: Header=BB57_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB57_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB57_99
.LBB57_95:                              # %cond.false242
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB57_98
.LBB57_97:                              # %cond.false247
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_98:                              # %cond.end249
                                        #   in Loop: Header=BB57_89 Depth=4
.LBB57_99:                              # %cond.end251
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB57_100:                             # %for.cond253
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_87 Depth=3
                                        #         Parent Loop BB57_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB57_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB57_104
.LBB57_103:                             # %cond.false262
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_104:                             # %cond.end265
                                        #   in Loop: Header=BB57_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB57_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB57_110
.LBB57_106:                             # %cond.false270
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB57_109
.LBB57_108:                             # %cond.false276
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_109:                             # %cond.end279
                                        #   in Loop: Header=BB57_100 Depth=5
.LBB57_110:                             # %cond.end281
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_112:                             # %if.end291
                                        #   in Loop: Header=BB57_100 Depth=5
	jmp	.LBB57_113
.LBB57_113:                             # %for.inc292
                                        #   in Loop: Header=BB57_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_100
.LBB57_114:                             # %for.end294
                                        #   in Loop: Header=BB57_89 Depth=4
	jmp	.LBB57_115
.LBB57_115:                             # %for.inc295
                                        #   in Loop: Header=BB57_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_89
.LBB57_116:                             # %for.end297
                                        #   in Loop: Header=BB57_87 Depth=3
	jmp	.LBB57_117
.LBB57_117:                             # %for.inc298
                                        #   in Loop: Header=BB57_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_87
.LBB57_118:                             # %for.end300
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_260
.LBB57_119:                             # %if.else301
                                        #   in Loop: Header=BB57_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB57_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$0, -12(%rbp)
.LBB57_121:                             # %for.cond305
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_123 Depth 4
                                        #           Child Loop BB57_125 Depth 5
                                        #             Child Loop BB57_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB57_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB57_121 Depth=3
	movl	$0, -16(%rbp)
.LBB57_123:                             # %for.cond309
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_125 Depth 5
                                        #             Child Loop BB57_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB57_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB57_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB57_125:                             # %for.cond313
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_121 Depth=3
                                        #         Parent Loop BB57_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB57_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB57_129
.LBB57_128:                             # %cond.false322
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_129:                             # %cond.end325
                                        #   in Loop: Header=BB57_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB57_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB57_135
.LBB57_131:                             # %cond.false330
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB57_134
.LBB57_133:                             # %cond.false336
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_134:                             # %cond.end339
                                        #   in Loop: Header=BB57_125 Depth=5
.LBB57_135:                             # %cond.end341
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB57_136:                             # %for.cond343
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_121 Depth=3
                                        #         Parent Loop BB57_123 Depth=4
                                        #           Parent Loop BB57_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB57_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB57_140
.LBB57_139:                             # %cond.false352
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_140:                             # %cond.end355
                                        #   in Loop: Header=BB57_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB57_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB57_146
.LBB57_142:                             # %cond.false360
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB57_145
.LBB57_144:                             # %cond.false366
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_145:                             # %cond.end369
                                        #   in Loop: Header=BB57_136 Depth=6
.LBB57_146:                             # %cond.end371
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_148:                             # %if.end381
                                        #   in Loop: Header=BB57_136 Depth=6
	jmp	.LBB57_149
.LBB57_149:                             # %for.inc382
                                        #   in Loop: Header=BB57_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_136
.LBB57_150:                             # %for.end384
                                        #   in Loop: Header=BB57_125 Depth=5
	jmp	.LBB57_151
.LBB57_151:                             # %for.inc385
                                        #   in Loop: Header=BB57_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_125
.LBB57_152:                             # %for.end387
                                        #   in Loop: Header=BB57_123 Depth=4
	jmp	.LBB57_153
.LBB57_153:                             # %for.inc388
                                        #   in Loop: Header=BB57_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_123
.LBB57_154:                             # %for.end390
                                        #   in Loop: Header=BB57_121 Depth=3
	jmp	.LBB57_155
.LBB57_155:                             # %for.inc391
                                        #   in Loop: Header=BB57_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_121
.LBB57_156:                             # %for.end393
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_259
.LBB57_157:                             # %if.else394
                                        #   in Loop: Header=BB57_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB57_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$0, -12(%rbp)
.LBB57_159:                             # %for.cond398
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_161 Depth 4
                                        #           Child Loop BB57_163 Depth 5
                                        #             Child Loop BB57_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB57_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB57_159 Depth=3
	movl	$0, -16(%rbp)
.LBB57_161:                             # %for.cond402
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_163 Depth 5
                                        #             Child Loop BB57_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB57_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB57_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB57_163:                             # %for.cond406
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_159 Depth=3
                                        #         Parent Loop BB57_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB57_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB57_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB57_167
.LBB57_166:                             # %cond.false415
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_167:                             # %cond.end418
                                        #   in Loop: Header=BB57_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB57_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB57_173
.LBB57_169:                             # %cond.false423
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB57_172
.LBB57_171:                             # %cond.false429
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_172:                             # %cond.end432
                                        #   in Loop: Header=BB57_163 Depth=5
.LBB57_173:                             # %cond.end434
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB57_174:                             # %for.cond436
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_159 Depth=3
                                        #         Parent Loop BB57_161 Depth=4
                                        #           Parent Loop BB57_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB57_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB57_178
.LBB57_177:                             # %cond.false445
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_178:                             # %cond.end448
                                        #   in Loop: Header=BB57_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB57_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB57_184
.LBB57_180:                             # %cond.false453
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB57_183
.LBB57_182:                             # %cond.false459
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_183:                             # %cond.end462
                                        #   in Loop: Header=BB57_174 Depth=6
.LBB57_184:                             # %cond.end464
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_186:                             # %if.end474
                                        #   in Loop: Header=BB57_174 Depth=6
	jmp	.LBB57_187
.LBB57_187:                             # %for.inc475
                                        #   in Loop: Header=BB57_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_174
.LBB57_188:                             # %for.end477
                                        #   in Loop: Header=BB57_163 Depth=5
	jmp	.LBB57_189
.LBB57_189:                             # %for.inc478
                                        #   in Loop: Header=BB57_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_163
.LBB57_190:                             # %for.end480
                                        #   in Loop: Header=BB57_161 Depth=4
	jmp	.LBB57_191
.LBB57_191:                             # %for.inc481
                                        #   in Loop: Header=BB57_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_161
.LBB57_192:                             # %for.end483
                                        #   in Loop: Header=BB57_159 Depth=3
	jmp	.LBB57_193
.LBB57_193:                             # %for.inc484
                                        #   in Loop: Header=BB57_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_159
.LBB57_194:                             # %for.end486
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_258
.LBB57_195:                             # %if.else487
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	$0, -12(%rbp)
.LBB57_196:                             # %for.cond488
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB57_198 Depth 4
                                        #           Child Loop BB57_212 Depth 5
                                        #           Child Loop BB57_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB57_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB57_196 Depth=3
	movl	$0, -16(%rbp)
.LBB57_198:                             # %for.cond492
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB57_212 Depth 5
                                        #           Child Loop BB57_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB57_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB57_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB57_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB57_202
.LBB57_201:                             # %cond.false500
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB57_202:                             # %cond.end503
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB57_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB57_205
.LBB57_204:                             # %cond.false508
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-48(%rbp), %eax
.LBB57_205:                             # %cond.end509
                                        #   in Loop: Header=BB57_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB57_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB57_211
.LBB57_207:                             # %cond.false514
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB57_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB57_210
.LBB57_209:                             # %cond.false518
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-48(%rbp), %eax
.LBB57_210:                             # %cond.end519
                                        #   in Loop: Header=BB57_198 Depth=4
.LBB57_211:                             # %cond.end521
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -20(%rbp)
.LBB57_212:                             # %for.cond523
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_196 Depth=3
                                        #         Parent Loop BB57_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB57_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB57_216
.LBB57_215:                             # %cond.false532
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_216:                             # %cond.end535
                                        #   in Loop: Header=BB57_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB57_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB57_222
.LBB57_218:                             # %cond.false540
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB57_221
.LBB57_220:                             # %cond.false546
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB57_221:                             # %cond.end549
                                        #   in Loop: Header=BB57_212 Depth=5
.LBB57_222:                             # %cond.end551
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_224:                             # %if.end561
                                        #   in Loop: Header=BB57_212 Depth=5
	jmp	.LBB57_225
.LBB57_225:                             # %for.inc562
                                        #   in Loop: Header=BB57_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB57_212
.LBB57_226:                             # %for.end564
                                        #   in Loop: Header=BB57_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB57_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB57_229
.LBB57_228:                             # %cond.false569
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB57_229:                             # %cond.end572
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB57_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB57_232
.LBB57_231:                             # %cond.false577
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-44(%rbp), %eax
.LBB57_232:                             # %cond.end578
                                        #   in Loop: Header=BB57_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB57_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB57_238
.LBB57_234:                             # %cond.false583
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB57_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB57_237
.LBB57_236:                             # %cond.false587
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-44(%rbp), %eax
.LBB57_237:                             # %cond.end588
                                        #   in Loop: Header=BB57_198 Depth=4
.LBB57_238:                             # %cond.end590
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB57_239:                             # %for.cond592
                                        #   Parent Loop BB57_17 Depth=1
                                        #     Parent Loop BB57_19 Depth=2
                                        #       Parent Loop BB57_196 Depth=3
                                        #         Parent Loop BB57_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB57_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB57_243
.LBB57_242:                             # %cond.false601
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_243:                             # %cond.end604
                                        #   in Loop: Header=BB57_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB57_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB57_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB57_249
.LBB57_245:                             # %cond.false609
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB57_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB57_248
.LBB57_247:                             # %cond.false615
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB57_248:                             # %cond.end618
                                        #   in Loop: Header=BB57_239 Depth=5
.LBB57_249:                             # %cond.end620
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB57_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB57_267
.LBB57_251:                             # %if.end630
                                        #   in Loop: Header=BB57_239 Depth=5
	jmp	.LBB57_252
.LBB57_252:                             # %for.inc631
                                        #   in Loop: Header=BB57_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB57_239
.LBB57_253:                             # %for.end633
                                        #   in Loop: Header=BB57_198 Depth=4
	jmp	.LBB57_254
.LBB57_254:                             # %for.inc634
                                        #   in Loop: Header=BB57_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB57_198
.LBB57_255:                             # %for.end636
                                        #   in Loop: Header=BB57_196 Depth=3
	jmp	.LBB57_256
.LBB57_256:                             # %for.inc637
                                        #   in Loop: Header=BB57_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB57_196
.LBB57_257:                             # %for.end639
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_258
.LBB57_258:                             # %if.end640
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_259
.LBB57_259:                             # %if.end641
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_260
.LBB57_260:                             # %if.end642
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_261
.LBB57_261:                             # %if.end643
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_262
.LBB57_262:                             # %if.end644
                                        #   in Loop: Header=BB57_19 Depth=2
	jmp	.LBB57_263
.LBB57_263:                             # %for.inc645
                                        #   in Loop: Header=BB57_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB57_19
.LBB57_264:                             # %for.end647
                                        #   in Loop: Header=BB57_17 Depth=1
	jmp	.LBB57_265
.LBB57_265:                             # %for.inc648
                                        #   in Loop: Header=BB57_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB57_17
.LBB57_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB57_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$555090470, -108(%rbp)  # imm = 0x21160226
	jne	.LBB57_269
.LBB57_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_268
.Lfunc_end57:
	.size	CheckReliabilityOfRef.28, .Lfunc_end57-CheckReliabilityOfRef.28
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.29
.LCPI58_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.29
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.29,@function
RDCost_for_macroblocks.29:              # @RDCost_for_macroblocks.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$891504117, -92(%rbp)   # imm = 0x352345F5
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -120(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -36(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB58_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB58_3
.LBB58_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB58_3
.LBB58_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB58_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB58_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB58_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB58_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB58_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	$0, -12(%rbp)
.LBB58_10:                              # %for.cond17
                                        #   Parent Loop BB58_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB58_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB58_10 Depth=2
	movq	direct_pdir, %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB58_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_13:                              # %if.end
                                        #   in Loop: Header=BB58_10 Depth=2
	jmp	.LBB58_14
.LBB58_14:                              # %for.inc
                                        #   in Loop: Header=BB58_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_10
.LBB58_15:                              # %for.end
                                        #   in Loop: Header=BB58_8 Depth=1
	jmp	.LBB58_16
.LBB58_16:                              # %for.inc30
                                        #   in Loop: Header=BB58_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_8
.LBB58_17:                              # %for.end32
	jmp	.LBB58_18
.LBB58_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB58_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB58_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB58_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB58_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_23:                              # %if.end46
	jmp	.LBB58_76
.LBB58_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB58_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB58_75
.LBB58_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB58_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB58_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB58_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_31 Depth 2
                                        #       Child Loop BB58_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB58_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	$0, -12(%rbp)
.LBB58_31:                              # %for.cond61
                                        #   Parent Loop BB58_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB58_31 Depth=2
	movl	$0, -24(%rbp)
.LBB58_33:                              # %for.cond65
                                        #   Parent Loop BB58_29 Depth=1
                                        #     Parent Loop BB58_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB58_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB58_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB58_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	$2, -40(%rbp)
.LBB58_36:                              # %if.end77
                                        #   in Loop: Header=BB58_33 Depth=3
	jmp	.LBB58_37
.LBB58_37:                              # %for.inc78
                                        #   in Loop: Header=BB58_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_33
.LBB58_38:                              # %for.end80
                                        #   in Loop: Header=BB58_31 Depth=2
	jmp	.LBB58_39
.LBB58_39:                              # %for.inc81
                                        #   in Loop: Header=BB58_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_31
.LBB58_40:                              # %for.end83
                                        #   in Loop: Header=BB58_29 Depth=1
	jmp	.LBB58_41
.LBB58_41:                              # %for.inc84
                                        #   in Loop: Header=BB58_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_29
.LBB58_42:                              # %for.end86
	movl	$0, -28(%rbp)
.LBB58_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB58_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB58_43 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB58_43 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_43
.LBB58_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB58_47:                              # %if.end97
	jmp	.LBB58_74
.LBB58_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB58_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB58_73
.LBB58_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB58_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB58_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB58_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_55 Depth 2
                                        #       Child Loop BB58_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB58_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB58_53 Depth=1
	movl	$0, -12(%rbp)
.LBB58_55:                              # %for.cond115
                                        #   Parent Loop BB58_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB58_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB58_55 Depth=2
	movl	$0, -24(%rbp)
.LBB58_57:                              # %for.cond119
                                        #   Parent Loop BB58_53 Depth=1
                                        #     Parent Loop BB58_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB58_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB58_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB58_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB58_57 Depth=3
	movl	$2, -40(%rbp)
.LBB58_60:                              # %if.end131
                                        #   in Loop: Header=BB58_57 Depth=3
	jmp	.LBB58_61
.LBB58_61:                              # %for.inc132
                                        #   in Loop: Header=BB58_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_57
.LBB58_62:                              # %for.end134
                                        #   in Loop: Header=BB58_55 Depth=2
	jmp	.LBB58_63
.LBB58_63:                              # %for.inc135
                                        #   in Loop: Header=BB58_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_55
.LBB58_64:                              # %for.end137
                                        #   in Loop: Header=BB58_53 Depth=1
	jmp	.LBB58_65
.LBB58_65:                              # %for.inc138
                                        #   in Loop: Header=BB58_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_53
.LBB58_66:                              # %for.end140
	movl	$0, -28(%rbp)
.LBB58_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -28(%rbp)
	jge	.LBB58_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB58_67 Depth=1
	movl	-28(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB58_67 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB58_67
.LBB58_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB58_71:                              # %if.end152
	jmp	.LBB58_72
.LBB58_72:                              # %if.end153
	jmp	.LBB58_73
.LBB58_73:                              # %if.end154
	jmp	.LBB58_74
.LBB58_74:                              # %if.end155
	jmp	.LBB58_75
.LBB58_75:                              # %if.end156
	jmp	.LBB58_76
.LBB58_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB58_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB58_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB58_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB58_81
.LBB58_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB58_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB58_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB58_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB58_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB58_84 Depth=1
	movl	$0, -12(%rbp)
.LBB58_86:                              # %for.cond179
                                        #   Parent Loop BB58_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB58_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB58_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB58_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_86
.LBB58_89:                              # %for.end196
                                        #   in Loop: Header=BB58_84 Depth=1
	jmp	.LBB58_90
.LBB58_90:                              # %for.inc197
                                        #   in Loop: Header=BB58_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_84
.LBB58_91:                              # %for.end199
	jmp	.LBB58_101
.LBB58_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB58_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB58_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	$0, -12(%rbp)
.LBB58_95:                              # %for.cond205
                                        #   Parent Loop BB58_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB58_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB58_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB58_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_95
.LBB58_98:                              # %for.end220
                                        #   in Loop: Header=BB58_93 Depth=1
	jmp	.LBB58_99
.LBB58_99:                              # %for.inc221
                                        #   in Loop: Header=BB58_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_93
.LBB58_100:                             # %for.end223
	jmp	.LBB58_101
.LBB58_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB58_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB58_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB58_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB58_107
.LBB58_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB58_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB58_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB58_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB58_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB58_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB58_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB58_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_114 Depth 2
                                        #       Child Loop BB58_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB58_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB58_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB58_114:                             # %for.cond259
                                        #   Parent Loop BB58_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB58_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB58_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB58_116:                             # %for.cond263
                                        #   Parent Loop BB58_112 Depth=1
                                        #     Parent Loop BB58_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB58_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB58_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_116
.LBB58_119:                             # %for.end291
                                        #   in Loop: Header=BB58_114 Depth=2
	jmp	.LBB58_120
.LBB58_120:                             # %for.inc292
                                        #   in Loop: Header=BB58_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_114
.LBB58_121:                             # %for.end294
                                        #   in Loop: Header=BB58_112 Depth=1
	jmp	.LBB58_122
.LBB58_122:                             # %for.inc295
                                        #   in Loop: Header=BB58_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB58_112
.LBB58_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB58_133
.LBB58_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB58_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB58_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB58_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB58_127:                             # %for.cond306
                                        #   Parent Loop BB58_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB58_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB58_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_127
.LBB58_130:                             # %for.end334
                                        #   in Loop: Header=BB58_125 Depth=1
	jmp	.LBB58_131
.LBB58_131:                             # %for.inc335
                                        #   in Loop: Header=BB58_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_125
.LBB58_132:                             # %for.end337
	jmp	.LBB58_133
.LBB58_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB58_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB58_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB58_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB58_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB58_137:                             # %for.cond347
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB58_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB58_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_137
.LBB58_140:                             # %for.end398
                                        #   in Loop: Header=BB58_135 Depth=1
	jmp	.LBB58_141
.LBB58_141:                             # %for.inc399
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_135
.LBB58_142:                             # %for.end401
	jmp	.LBB58_143
.LBB58_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -104(%rbp)
	je	.LBB58_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB58_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB58_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB58_148
.LBB58_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB58_149
.LBB58_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-36(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-36(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -36(%rbp)
.LBB58_149:                             # %if.end422
	jmp	.LBB58_151
.LBB58_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -36(%rbp)
.LBB58_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI58_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB58_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI58_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB58_154
.LBB58_153:                             # %cond.false431
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm2
.LBB58_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB58_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB58_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB58_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB58_159
.LBB58_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB58_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB58_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB58_165
	jmp	.LBB58_176
.LBB58_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB58_176
	jmp	.LBB58_165
.LBB58_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB58_165
	jmp	.LBB58_176
.LBB58_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB58_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB58_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB58_171
	jmp	.LBB58_174
.LBB58_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB58_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB58_174
	jmp	.LBB58_171
.LBB58_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB58_171
	jmp	.LBB58_174
.LBB58_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB58_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB58_177
.LBB58_173:                             # %if.end482
	jmp	.LBB58_174
.LBB58_174:                             # %if.end483
	jmp	.LBB58_175
.LBB58_175:                             # %if.end484
	jmp	.LBB58_176
.LBB58_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB58_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$891504117, -92(%rbp)   # imm = 0x352345F5
	jne	.LBB58_179
.LBB58_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_178
.Lfunc_end58:
	.size	RDCost_for_macroblocks.29, .Lfunc_end58-RDCost_for_macroblocks.29
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.30 # -- Begin function RDCost_for_4x4Blocks_Chroma.30
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.30,@function
RDCost_for_4x4Blocks_Chroma.30:         # @RDCost_for_4x4Blocks_Chroma.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$576472323, -60(%rbp)   # imm = 0x225C4503
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -56(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB59_2
# %bb.1:                                # %if.then
	movl	$1, -28(%rbp)
	jmp	.LBB59_3
.LBB59_2:                               # %if.else
	movl	$0, -28(%rbp)
.LBB59_3:                               # %if.end
	movl	-56(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-28(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-28(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB59_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB59_18
.LBB59_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -32(%rbp)
.LBB59_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -32(%rbp)
	jge	.LBB59_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB59_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB59_8:                               # %land.end
                                        #   in Loop: Header=BB59_6 Depth=1
	testb	$1, %al
	jne	.LBB59_9
	jmp	.LBB59_17
.LBB59_9:                               # %for.body
                                        #   in Loop: Header=BB59_6 Depth=1
	movq	-80(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-88(%rbp), %rax
	movslq	-32(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB59_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB59_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB59_12
.LBB59_11:                              # %if.else54
                                        #   in Loop: Header=BB59_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB59_12:                              # %if.end55
                                        #   in Loop: Header=BB59_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB59_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB59_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB59_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB59_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB59_15:                              # %lor.end
                                        #   in Loop: Header=BB59_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB59_6 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB59_6
.LBB59_17:                              # %for.end
	jmp	.LBB59_18
.LBB59_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$576472323, -60(%rbp)   # imm = 0x225C4503
	jne	.LBB59_20
.LBB59_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_19
.Lfunc_end59:
	.size	RDCost_for_4x4Blocks_Chroma.30, .Lfunc_end59-RDCost_for_4x4Blocks_Chroma.30
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.31 # -- Begin function RDCost_for_4x4IntraBlocks.31
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.31,@function
RDCost_for_4x4IntraBlocks.31:           # @RDCost_for_4x4IntraBlocks.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$697726656, -68(%rbp)   # imm = 0x299676C0
	movq	%rdi, -152(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -8(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -52(%rbp)
	movl	$0, -44(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	$0, -72(%rbp)
	movl	-48(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_4:                               # %for.cond15
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-76(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-128(%rbp), %rdx
	movl	-80(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc33
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end35
	jmp	.LBB60_10
.LBB60_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-52(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB60_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB60_16
.LBB60_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB60_15
.LBB60_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB60_15:                              # %cond.end
.LBB60_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB60_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB60_18:                              # %if.end50
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB60_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB60_21
.LBB60_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB60_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB60_23
# %bb.22:                               # %if.then66
	movl	-20(%rbp), %esi
	movl	-8(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_24
.LBB60_23:                              # %if.else69
	movl	-20(%rbp), %edi
	movl	-8(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB60_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB60_27
.LBB60_26:                              # %if.else81
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB60_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$697726656, -68(%rbp)   # imm = 0x299676C0
	jne	.LBB60_29
.LBB60_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB60_28
.Lfunc_end60:
	.size	RDCost_for_4x4IntraBlocks.31, .Lfunc_end60-RDCost_for_4x4IntraBlocks.31
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.32 # -- Begin function CheckReliabilityOfRef.32
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.32,@function
CheckReliabilityOfRef.32:               # @CheckReliabilityOfRef.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$765388115, -104(%rbp)  # imm = 0x2D9EE553
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB61_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB61_6
.LBB61_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB61_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB61_5
.LBB61_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB61_5
.LBB61_5:                               # %cond.end
.LBB61_6:                               # %cond.end6
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB61_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB61_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB61_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB61_14
.LBB61_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB61_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB61_13
.LBB61_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB61_13
.LBB61_13:                              # %cond.end20
.LBB61_14:                              # %cond.end22
	movl	%edx, -88(%rbp)
	movl	-88(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB61_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB61_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -108(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB61_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_19 Depth 2
                                        #       Child Loop BB61_23 Depth 3
                                        #         Child Loop BB61_25 Depth 4
                                        #       Child Loop BB61_53 Depth 3
                                        #         Child Loop BB61_55 Depth 4
                                        #           Child Loop BB61_66 Depth 5
                                        #       Child Loop BB61_87 Depth 3
                                        #         Child Loop BB61_89 Depth 4
                                        #           Child Loop BB61_100 Depth 5
                                        #       Child Loop BB61_121 Depth 3
                                        #         Child Loop BB61_123 Depth 4
                                        #           Child Loop BB61_125 Depth 5
                                        #             Child Loop BB61_136 Depth 6
                                        #       Child Loop BB61_159 Depth 3
                                        #         Child Loop BB61_161 Depth 4
                                        #           Child Loop BB61_163 Depth 5
                                        #             Child Loop BB61_174 Depth 6
                                        #       Child Loop BB61_196 Depth 3
                                        #         Child Loop BB61_198 Depth 4
                                        #           Child Loop BB61_212 Depth 5
                                        #           Child Loop BB61_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB61_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB61_17 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB61_19:                              # %for.cond31
                                        #   Parent Loop BB61_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_23 Depth 3
                                        #         Child Loop BB61_25 Depth 4
                                        #       Child Loop BB61_53 Depth 3
                                        #         Child Loop BB61_55 Depth 4
                                        #           Child Loop BB61_66 Depth 5
                                        #       Child Loop BB61_87 Depth 3
                                        #         Child Loop BB61_89 Depth 4
                                        #           Child Loop BB61_100 Depth 5
                                        #       Child Loop BB61_121 Depth 3
                                        #         Child Loop BB61_123 Depth 4
                                        #           Child Loop BB61_125 Depth 5
                                        #             Child Loop BB61_136 Depth 6
                                        #       Child Loop BB61_159 Depth 3
                                        #         Child Loop BB61_161 Depth 4
                                        #           Child Loop BB61_163 Depth 5
                                        #             Child Loop BB61_174 Depth 6
                                        #       Child Loop BB61_196 Depth 3
                                        #         Child Loop BB61_198 Depth 4
                                        #           Child Loop BB61_212 Depth 5
                                        #           Child Loop BB61_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB61_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB61_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-96(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB61_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB61_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB61_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$0, -12(%rbp)
.LBB61_23:                              # %for.cond75
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB61_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB61_23 Depth=3
	movl	$0, -16(%rbp)
.LBB61_25:                              # %for.cond79
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB61_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB61_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB61_29
.LBB61_28:                              # %cond.false87
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB61_29:                              # %cond.end89
                                        #   in Loop: Header=BB61_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB61_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB61_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_35
.LBB61_31:                              # %cond.false94
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB61_34
.LBB61_33:                              # %cond.false99
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB61_34:                              # %cond.end101
                                        #   in Loop: Header=BB61_25 Depth=4
.LBB61_35:                              # %cond.end103
                                        #   in Loop: Header=BB61_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB61_38
.LBB61_37:                              # %cond.false111
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB61_38:                              # %cond.end113
                                        #   in Loop: Header=BB61_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB61_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB61_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB61_44
.LBB61_40:                              # %cond.false118
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-20(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB61_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB61_43
.LBB61_42:                              # %cond.false123
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB61_43:                              # %cond.end125
                                        #   in Loop: Header=BB61_25 Depth=4
.LBB61_44:                              # %cond.end127
                                        #   in Loop: Header=BB61_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_46:                              # %if.end
                                        #   in Loop: Header=BB61_25 Depth=4
	jmp	.LBB61_47
.LBB61_47:                              # %for.inc
                                        #   in Loop: Header=BB61_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_25
.LBB61_48:                              # %for.end
                                        #   in Loop: Header=BB61_23 Depth=3
	jmp	.LBB61_49
.LBB61_49:                              # %for.inc135
                                        #   in Loop: Header=BB61_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_23
.LBB61_50:                              # %for.end137
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_262
.LBB61_51:                              # %if.else
                                        #   in Loop: Header=BB61_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB61_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$0, -12(%rbp)
.LBB61_53:                              # %for.cond141
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_55 Depth 4
                                        #           Child Loop BB61_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB61_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB61_53 Depth=3
	movl	$0, -16(%rbp)
.LBB61_55:                              # %for.cond145
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB61_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB61_59
.LBB61_58:                              # %cond.false153
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_59:                              # %cond.end155
                                        #   in Loop: Header=BB61_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB61_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB61_65
.LBB61_61:                              # %cond.false160
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB61_64
.LBB61_63:                              # %cond.false165
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_64:                              # %cond.end167
                                        #   in Loop: Header=BB61_55 Depth=4
.LBB61_65:                              # %cond.end169
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB61_66:                              # %for.cond171
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_53 Depth=3
                                        #         Parent Loop BB61_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB61_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB61_70
.LBB61_69:                              # %cond.false180
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB61_70:                              # %cond.end183
                                        #   in Loop: Header=BB61_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB61_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB61_76
.LBB61_72:                              # %cond.false188
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB61_75
.LBB61_74:                              # %cond.false194
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
.LBB61_75:                              # %cond.end197
                                        #   in Loop: Header=BB61_66 Depth=5
.LBB61_76:                              # %cond.end199
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_78:                              # %if.end209
                                        #   in Loop: Header=BB61_66 Depth=5
	jmp	.LBB61_79
.LBB61_79:                              # %for.inc210
                                        #   in Loop: Header=BB61_66 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_66
.LBB61_80:                              # %for.end212
                                        #   in Loop: Header=BB61_55 Depth=4
	jmp	.LBB61_81
.LBB61_81:                              # %for.inc213
                                        #   in Loop: Header=BB61_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_55
.LBB61_82:                              # %for.end215
                                        #   in Loop: Header=BB61_53 Depth=3
	jmp	.LBB61_83
.LBB61_83:                              # %for.inc216
                                        #   in Loop: Header=BB61_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_53
.LBB61_84:                              # %for.end218
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_261
.LBB61_85:                              # %if.else219
                                        #   in Loop: Header=BB61_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB61_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$0, -12(%rbp)
.LBB61_87:                              # %for.cond223
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_89 Depth 4
                                        #           Child Loop BB61_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB61_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB61_87 Depth=3
	movl	$0, -16(%rbp)
.LBB61_89:                              # %for.cond227
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB61_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB61_93
.LBB61_92:                              # %cond.false235
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_93:                              # %cond.end237
                                        #   in Loop: Header=BB61_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB61_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB61_99
.LBB61_95:                              # %cond.false242
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB61_98
.LBB61_97:                              # %cond.false247
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_98:                              # %cond.end249
                                        #   in Loop: Header=BB61_89 Depth=4
.LBB61_99:                              # %cond.end251
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB61_100:                             # %for.cond253
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_87 Depth=3
                                        #         Parent Loop BB61_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB61_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB61_104
.LBB61_103:                             # %cond.false262
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_104:                             # %cond.end265
                                        #   in Loop: Header=BB61_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB61_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB61_110
.LBB61_106:                             # %cond.false270
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB61_109
.LBB61_108:                             # %cond.false276
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_109:                             # %cond.end279
                                        #   in Loop: Header=BB61_100 Depth=5
.LBB61_110:                             # %cond.end281
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_112:                             # %if.end291
                                        #   in Loop: Header=BB61_100 Depth=5
	jmp	.LBB61_113
.LBB61_113:                             # %for.inc292
                                        #   in Loop: Header=BB61_100 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_100
.LBB61_114:                             # %for.end294
                                        #   in Loop: Header=BB61_89 Depth=4
	jmp	.LBB61_115
.LBB61_115:                             # %for.inc295
                                        #   in Loop: Header=BB61_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_89
.LBB61_116:                             # %for.end297
                                        #   in Loop: Header=BB61_87 Depth=3
	jmp	.LBB61_117
.LBB61_117:                             # %for.inc298
                                        #   in Loop: Header=BB61_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_87
.LBB61_118:                             # %for.end300
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_260
.LBB61_119:                             # %if.else301
                                        #   in Loop: Header=BB61_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB61_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$0, -12(%rbp)
.LBB61_121:                             # %for.cond305
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_123 Depth 4
                                        #           Child Loop BB61_125 Depth 5
                                        #             Child Loop BB61_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB61_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB61_121 Depth=3
	movl	$0, -16(%rbp)
.LBB61_123:                             # %for.cond309
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_125 Depth 5
                                        #             Child Loop BB61_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB61_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB61_123 Depth=4
	movl	$-2, -32(%rbp)
.LBB61_125:                             # %for.cond313
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_121 Depth=3
                                        #         Parent Loop BB61_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB61_136 Depth 6
	cmpl	$4, -32(%rbp)
	jge	.LBB61_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB61_129
.LBB61_128:                             # %cond.false322
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_129:                             # %cond.end325
                                        #   in Loop: Header=BB61_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB61_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB61_135
.LBB61_131:                             # %cond.false330
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB61_134
.LBB61_133:                             # %cond.false336
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_134:                             # %cond.end339
                                        #   in Loop: Header=BB61_125 Depth=5
.LBB61_135:                             # %cond.end341
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB61_136:                             # %for.cond343
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_121 Depth=3
                                        #         Parent Loop BB61_123 Depth=4
                                        #           Parent Loop BB61_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB61_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB61_140
.LBB61_139:                             # %cond.false352
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_140:                             # %cond.end355
                                        #   in Loop: Header=BB61_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB61_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB61_146
.LBB61_142:                             # %cond.false360
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB61_145
.LBB61_144:                             # %cond.false366
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_145:                             # %cond.end369
                                        #   in Loop: Header=BB61_136 Depth=6
.LBB61_146:                             # %cond.end371
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_148:                             # %if.end381
                                        #   in Loop: Header=BB61_136 Depth=6
	jmp	.LBB61_149
.LBB61_149:                             # %for.inc382
                                        #   in Loop: Header=BB61_136 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_136
.LBB61_150:                             # %for.end384
                                        #   in Loop: Header=BB61_125 Depth=5
	jmp	.LBB61_151
.LBB61_151:                             # %for.inc385
                                        #   in Loop: Header=BB61_125 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_125
.LBB61_152:                             # %for.end387
                                        #   in Loop: Header=BB61_123 Depth=4
	jmp	.LBB61_153
.LBB61_153:                             # %for.inc388
                                        #   in Loop: Header=BB61_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_123
.LBB61_154:                             # %for.end390
                                        #   in Loop: Header=BB61_121 Depth=3
	jmp	.LBB61_155
.LBB61_155:                             # %for.inc391
                                        #   in Loop: Header=BB61_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_121
.LBB61_156:                             # %for.end393
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_259
.LBB61_157:                             # %if.else394
                                        #   in Loop: Header=BB61_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB61_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$0, -12(%rbp)
.LBB61_159:                             # %for.cond398
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_161 Depth 4
                                        #           Child Loop BB61_163 Depth 5
                                        #             Child Loop BB61_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB61_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB61_159 Depth=3
	movl	$0, -16(%rbp)
.LBB61_161:                             # %for.cond402
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_163 Depth 5
                                        #             Child Loop BB61_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB61_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB61_161 Depth=4
	movl	$-2, -28(%rbp)
.LBB61_163:                             # %for.cond406
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_159 Depth=3
                                        #         Parent Loop BB61_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB61_174 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB61_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB61_167
.LBB61_166:                             # %cond.false415
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_167:                             # %cond.end418
                                        #   in Loop: Header=BB61_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB61_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB61_173
.LBB61_169:                             # %cond.false423
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB61_172
.LBB61_171:                             # %cond.false429
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_172:                             # %cond.end432
                                        #   in Loop: Header=BB61_163 Depth=5
.LBB61_173:                             # %cond.end434
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB61_174:                             # %for.cond436
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_159 Depth=3
                                        #         Parent Loop BB61_161 Depth=4
                                        #           Parent Loop BB61_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -32(%rbp)
	jge	.LBB61_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB61_178
.LBB61_177:                             # %cond.false445
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_178:                             # %cond.end448
                                        #   in Loop: Header=BB61_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB61_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB61_184
.LBB61_180:                             # %cond.false453
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB61_183
.LBB61_182:                             # %cond.false459
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_183:                             # %cond.end462
                                        #   in Loop: Header=BB61_174 Depth=6
.LBB61_184:                             # %cond.end464
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_186:                             # %if.end474
                                        #   in Loop: Header=BB61_174 Depth=6
	jmp	.LBB61_187
.LBB61_187:                             # %for.inc475
                                        #   in Loop: Header=BB61_174 Depth=6
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_174
.LBB61_188:                             # %for.end477
                                        #   in Loop: Header=BB61_163 Depth=5
	jmp	.LBB61_189
.LBB61_189:                             # %for.inc478
                                        #   in Loop: Header=BB61_163 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_163
.LBB61_190:                             # %for.end480
                                        #   in Loop: Header=BB61_161 Depth=4
	jmp	.LBB61_191
.LBB61_191:                             # %for.inc481
                                        #   in Loop: Header=BB61_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_161
.LBB61_192:                             # %for.end483
                                        #   in Loop: Header=BB61_159 Depth=3
	jmp	.LBB61_193
.LBB61_193:                             # %for.inc484
                                        #   in Loop: Header=BB61_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_159
.LBB61_194:                             # %for.end486
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_258
.LBB61_195:                             # %if.else487
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	$0, -12(%rbp)
.LBB61_196:                             # %for.cond488
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_198 Depth 4
                                        #           Child Loop BB61_212 Depth 5
                                        #           Child Loop BB61_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB61_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB61_196 Depth=3
	movl	$0, -16(%rbp)
.LBB61_198:                             # %for.cond492
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB61_212 Depth 5
                                        #           Child Loop BB61_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB61_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB61_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB61_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB61_202
.LBB61_201:                             # %cond.false500
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB61_202:                             # %cond.end503
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB61_205
.LBB61_204:                             # %cond.false508
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-48(%rbp), %eax
.LBB61_205:                             # %cond.end509
                                        #   in Loop: Header=BB61_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB61_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB61_211
.LBB61_207:                             # %cond.false514
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB61_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB61_210
.LBB61_209:                             # %cond.false518
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-48(%rbp), %eax
.LBB61_210:                             # %cond.end519
                                        #   in Loop: Header=BB61_198 Depth=4
.LBB61_211:                             # %cond.end521
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB61_212:                             # %for.cond523
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_196 Depth=3
                                        #         Parent Loop BB61_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB61_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB61_216
.LBB61_215:                             # %cond.false532
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_216:                             # %cond.end535
                                        #   in Loop: Header=BB61_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB61_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB61_222
.LBB61_218:                             # %cond.false540
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB61_221
.LBB61_220:                             # %cond.false546
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-20(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB61_221:                             # %cond.end549
                                        #   in Loop: Header=BB61_212 Depth=5
.LBB61_222:                             # %cond.end551
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_224:                             # %if.end561
                                        #   in Loop: Header=BB61_212 Depth=5
	jmp	.LBB61_225
.LBB61_225:                             # %for.inc562
                                        #   in Loop: Header=BB61_212 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_212
.LBB61_226:                             # %for.end564
                                        #   in Loop: Header=BB61_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB61_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB61_229
.LBB61_228:                             # %cond.false569
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB61_229:                             # %cond.end572
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB61_232
.LBB61_231:                             # %cond.false577
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-44(%rbp), %eax
.LBB61_232:                             # %cond.end578
                                        #   in Loop: Header=BB61_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB61_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB61_238
.LBB61_234:                             # %cond.false583
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB61_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB61_237
.LBB61_236:                             # %cond.false587
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-44(%rbp), %eax
.LBB61_237:                             # %cond.end588
                                        #   in Loop: Header=BB61_198 Depth=4
.LBB61_238:                             # %cond.end590
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -32(%rbp)
.LBB61_239:                             # %for.cond592
                                        #   Parent Loop BB61_17 Depth=1
                                        #     Parent Loop BB61_19 Depth=2
                                        #       Parent Loop BB61_196 Depth=3
                                        #         Parent Loop BB61_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -32(%rbp)
	jge	.LBB61_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB61_243
.LBB61_242:                             # %cond.false601
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_243:                             # %cond.end604
                                        #   in Loop: Header=BB61_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB61_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB61_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB61_249
.LBB61_245:                             # %cond.false609
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB61_248
.LBB61_247:                             # %cond.false615
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-24(%rbp), %eax
	addl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB61_248:                             # %cond.end618
                                        #   in Loop: Header=BB61_239 Depth=5
.LBB61_249:                             # %cond.end620
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB61_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB61_267
.LBB61_251:                             # %if.end630
                                        #   in Loop: Header=BB61_239 Depth=5
	jmp	.LBB61_252
.LBB61_252:                             # %for.inc631
                                        #   in Loop: Header=BB61_239 Depth=5
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_239
.LBB61_253:                             # %for.end633
                                        #   in Loop: Header=BB61_198 Depth=4
	jmp	.LBB61_254
.LBB61_254:                             # %for.inc634
                                        #   in Loop: Header=BB61_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_198
.LBB61_255:                             # %for.end636
                                        #   in Loop: Header=BB61_196 Depth=3
	jmp	.LBB61_256
.LBB61_256:                             # %for.inc637
                                        #   in Loop: Header=BB61_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_196
.LBB61_257:                             # %for.end639
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_258
.LBB61_258:                             # %if.end640
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_259
.LBB61_259:                             # %if.end641
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_260
.LBB61_260:                             # %if.end642
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_261
.LBB61_261:                             # %if.end643
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_262
.LBB61_262:                             # %if.end644
                                        #   in Loop: Header=BB61_19 Depth=2
	jmp	.LBB61_263
.LBB61_263:                             # %for.inc645
                                        #   in Loop: Header=BB61_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB61_19
.LBB61_264:                             # %for.end647
                                        #   in Loop: Header=BB61_17 Depth=1
	jmp	.LBB61_265
.LBB61_265:                             # %for.inc648
                                        #   in Loop: Header=BB61_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB61_17
.LBB61_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB61_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$765388115, -104(%rbp)  # imm = 0x2D9EE553
	jne	.LBB61_269
.LBB61_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_268
.Lfunc_end61:
	.size	CheckReliabilityOfRef.32, .Lfunc_end61-CheckReliabilityOfRef.32
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.33
.LCPI62_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI62_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.33
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.33,@function
Mode_Decision_for_8x8IntraBlocks.33:    # @Mode_Decision_for_8x8IntraBlocks.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI62_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI62_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$1718071015, -20(%rbp)  # imm = 0x6667AEE7
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB62_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB62_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-28(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB62_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	$1, -16(%rbp)
.LBB62_4:                               # %if.end
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-28(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB62_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB62_1
.LBB62_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$1718071015, -20(%rbp)  # imm = 0x6667AEE7
	jne	.LBB62_8
.LBB62_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_7
.Lfunc_end62:
	.size	Mode_Decision_for_8x8IntraBlocks.33, .Lfunc_end62-Mode_Decision_for_8x8IntraBlocks.33
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.34
.LCPI63_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI63_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.34
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.34,@function
Mode_Decision_for_4x4IntraBlocks.34:    # @Mode_Decision_for_4x4IntraBlocks.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI63_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$1712235675, -164(%rbp) # imm = 0x660EA49B
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -136(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -100(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -168(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -156(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB63_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB63_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_4
.LBB63_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB63_4
.LBB63_4:                               # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB63_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_7
.LBB63_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB63_7
.LBB63_7:                               # %cond.end31
	movl	%eax, -232(%rbp)
.LBB63_8:                               # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB63_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_11
.LBB63_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_11
.LBB63_11:                              # %cond.end42
	movl	%eax, -116(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB63_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB63_14
.LBB63_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_14
.LBB63_14:                              # %cond.end55
	movl	%eax, -108(%rbp)
	cmpl	$0, -116(%rbp)
	jl	.LBB63_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -108(%rbp)
	jge	.LBB63_17
.LBB63_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB63_21
.LBB63_17:                              # %cond.false59
	movl	-116(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB63_19
# %bb.18:                               # %cond.true61
	movl	-116(%rbp), %eax
	jmp	.LBB63_20
.LBB63_19:                              # %cond.false62
	movl	-108(%rbp), %eax
.LBB63_20:                              # %cond.end63
.LBB63_21:                              # %cond.end65
	movl	%eax, -96(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	leaq	-172(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB63_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_49 Depth 2
                                        #       Child Loop BB63_51 Depth 3
                                        #     Child Loop BB63_64 Depth 2
                                        #       Child Loop BB63_66 Depth 3
                                        #     Child Loop BB63_73 Depth 2
                                        #       Child Loop BB63_75 Depth 3
                                        #     Child Loop BB63_81 Depth 2
                                        #       Child Loop BB63_83 Depth 3
                                        #     Child Loop BB63_91 Depth 2
                                        #       Child Loop BB63_93 Depth 3
                                        #     Child Loop BB63_99 Depth 2
                                        #       Child Loop BB63_101 Depth 3
                                        #     Child Loop BB63_107 Depth 2
                                        #       Child Loop BB63_109 Depth 3
                                        #     Child Loop BB63_115 Depth 2
                                        #       Child Loop BB63_117 Depth 3
                                        #     Child Loop BB63_123 Depth 2
                                        #       Child Loop BB63_125 Depth 3
                                        #     Child Loop BB63_131 Depth 2
                                        #       Child Loop BB63_133 Depth 3
                                        #     Child Loop BB63_166 Depth 2
                                        #       Child Loop BB63_168 Depth 3
                                        #     Child Loop BB63_175 Depth 2
                                        #       Child Loop BB63_177 Depth 3
                                        #     Child Loop BB63_183 Depth 2
                                        #       Child Loop BB63_185 Depth 3
                                        #     Child Loop BB63_191 Depth 2
                                        #       Child Loop BB63_193 Depth 3
                                        #     Child Loop BB63_199 Depth 2
                                        #       Child Loop BB63_201 Depth 3
                                        #         Child Loop BB63_203 Depth 4
                                        #     Child Loop BB63_211 Depth 2
                                        #       Child Loop BB63_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB63_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB63_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB63_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB63_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB63_28
.LBB63_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB63_32
.LBB63_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB63_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB63_31
.LBB63_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB63_32
.LBB63_31:                              # %lor.rhs
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -172(%rbp)
	setne	%al
.LBB63_32:                              # %lor.end
                                        #   in Loop: Header=BB63_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB63_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB63_46
.LBB63_34:                              # %if.then86
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB63_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB63_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB63_38
.LBB63_37:                              # %if.then92
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_223
.LBB63_38:                              # %if.end93
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB63_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB63_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB63_42
.LBB63_41:                              # %if.then99
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_223
.LBB63_42:                              # %if.end100
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB63_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB63_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_223
.LBB63_45:                              # %if.end105
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_46
.LBB63_46:                              # %if.end106
                                        #   in Loop: Header=BB63_22 Depth=1
	cmpl	$0, -176(%rbp)
	je	.LBB63_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB63_49:                              # %for.cond111
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB63_49 Depth=2
	movl	$0, -12(%rbp)
.LBB63_51:                              # %for.cond114
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB63_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB63_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB63_51
.LBB63_54:                              # %for.end
                                        #   in Loop: Header=BB63_49 Depth=2
	jmp	.LBB63_55
.LBB63_55:                              # %for.inc133
                                        #   in Loop: Header=BB63_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_49
.LBB63_56:                              # %for.end135
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jne	.LBB63_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB63_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_59
.LBB63_58:                              # %cond.false139
                                        #   in Loop: Header=BB63_22 Depth=1
	vmovsd	.LCPI63_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-136(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB63_59:                              # %cond.end142
                                        #   in Loop: Header=BB63_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB63_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB63_61:                              # %if.end148
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_221
.LBB63_62:                              # %if.else
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB63_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_64:                              # %for.cond151
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB63_64 Depth=2
	movl	$0, -12(%rbp)
.LBB63_66:                              # %for.cond155
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB63_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB63_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_66
.LBB63_69:                              # %for.end194
                                        #   in Loop: Header=BB63_64 Depth=2
	jmp	.LBB63_70
.LBB63_70:                              # %for.inc195
                                        #   in Loop: Header=BB63_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_64
.LBB63_71:                              # %for.end197
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB63_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_73:                              # %for.cond202
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB63_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB63_73 Depth=2
	movl	$0, -12(%rbp)
.LBB63_75:                              # %for.cond206
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB63_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB63_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB63_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_75
.LBB63_78:                              # %for.end224
                                        #   in Loop: Header=BB63_73 Depth=2
	jmp	.LBB63_79
.LBB63_79:                              # %for.inc225
                                        #   in Loop: Header=BB63_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_73
.LBB63_80:                              # %for.end227
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -20(%rbp)
.LBB63_81:                              # %for.cond228
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB63_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB63_81 Depth=2
	movl	$0, -24(%rbp)
.LBB63_83:                              # %for.cond232
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB63_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB63_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB63_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_83
.LBB63_86:                              # %for.end249
                                        #   in Loop: Header=BB63_81 Depth=2
	jmp	.LBB63_87
.LBB63_87:                              # %for.inc250
                                        #   in Loop: Header=BB63_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_81
.LBB63_88:                              # %for.end252
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB63_89:                              # %if.end253
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB63_220
.LBB63_90:                              # %if.else254
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_91:                              # %for.cond255
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB63_91 Depth=2
	movl	$0, -12(%rbp)
.LBB63_93:                              # %for.cond259
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB63_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB63_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_93
.LBB63_96:                              # %for.end345
                                        #   in Loop: Header=BB63_91 Depth=2
	jmp	.LBB63_97
.LBB63_97:                              # %for.inc346
                                        #   in Loop: Header=BB63_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_91
.LBB63_98:                              # %for.end348
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_99:                              # %for.cond349
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB63_99 Depth=2
	movl	$0, -12(%rbp)
.LBB63_101:                             # %for.cond353
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB63_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB63_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_101
.LBB63_104:                             # %for.end368
                                        #   in Loop: Header=BB63_99 Depth=2
	jmp	.LBB63_105
.LBB63_105:                             # %for.inc369
                                        #   in Loop: Header=BB63_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_99
.LBB63_106:                             # %for.end371
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-96(%rbp), %r8d
	leaq	-112(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB63_107:                             # %for.cond374
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB63_107 Depth=2
	movl	$0, -12(%rbp)
.LBB63_109:                             # %for.cond378
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB63_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB63_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_109
.LBB63_112:                             # %for.end402
                                        #   in Loop: Header=BB63_107 Depth=2
	jmp	.LBB63_113
.LBB63_113:                             # %for.inc403
                                        #   in Loop: Header=BB63_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_107
.LBB63_114:                             # %for.end405
                                        #   in Loop: Header=BB63_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB63_115:                             # %for.cond409
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	$0, -12(%rbp)
.LBB63_117:                             # %for.cond413
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB63_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB63_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_117
.LBB63_120:                             # %for.end437
                                        #   in Loop: Header=BB63_115 Depth=2
	jmp	.LBB63_121
.LBB63_121:                             # %for.inc438
                                        #   in Loop: Header=BB63_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_115
.LBB63_122:                             # %for.end440
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB63_123:                             # %for.cond444
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB63_123 Depth=2
	movl	$0, -12(%rbp)
.LBB63_125:                             # %for.cond448
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB63_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB63_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_125
.LBB63_128:                             # %for.end463
                                        #   in Loop: Header=BB63_123 Depth=2
	jmp	.LBB63_129
.LBB63_129:                             # %for.inc464
                                        #   in Loop: Header=BB63_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_123
.LBB63_130:                             # %for.end466
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_131:                             # %for.cond467
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB63_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB63_131 Depth=2
	movl	$0, -12(%rbp)
.LBB63_133:                             # %for.cond471
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB63_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB63_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB63_137
.LBB63_136:                             # %cond.false516
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB63_137:                             # %cond.end529
                                        #   in Loop: Header=BB63_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB63_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB63_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB63_143
.LBB63_139:                             # %cond.false535
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB63_142
.LBB63_141:                             # %cond.false551
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB63_142:                             # %cond.end564
                                        #   in Loop: Header=BB63_133 Depth=3
.LBB63_143:                             # %cond.end566
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB63_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB63_146
.LBB63_145:                             # %cond.false588
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB63_146:                             # %cond.end598
                                        #   in Loop: Header=BB63_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB63_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB63_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_152
.LBB63_148:                             # %cond.false604
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB63_151
.LBB63_150:                             # %cond.false617
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB63_151:                             # %cond.end627
                                        #   in Loop: Header=BB63_133 Depth=3
.LBB63_152:                             # %cond.end629
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB63_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB63_155
.LBB63_154:                             # %cond.false655
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB63_155:                             # %cond.end668
                                        #   in Loop: Header=BB63_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB63_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB63_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB63_161
.LBB63_157:                             # %cond.false674
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB63_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB63_160
.LBB63_159:                             # %cond.false690
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB63_160:                             # %cond.end703
                                        #   in Loop: Header=BB63_133 Depth=3
.LBB63_161:                             # %cond.end705
                                        #   in Loop: Header=BB63_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB63_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_133
.LBB63_163:                             # %for.end718
                                        #   in Loop: Header=BB63_131 Depth=2
	jmp	.LBB63_164
.LBB63_164:                             # %for.inc719
                                        #   in Loop: Header=BB63_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_131
.LBB63_165:                             # %for.end721
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB63_166:                             # %for.cond722
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB63_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB63_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB63_168:                             # %for.cond726
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB63_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB63_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_168
.LBB63_171:                             # %for.end831
                                        #   in Loop: Header=BB63_166 Depth=2
	jmp	.LBB63_172
.LBB63_172:                             # %for.inc832
                                        #   in Loop: Header=BB63_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_166
.LBB63_173:                             # %for.end834
                                        #   in Loop: Header=BB63_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-136(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB63_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_175:                             # %for.cond842
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB63_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB63_175 Depth=2
	movl	$0, -12(%rbp)
.LBB63_177:                             # %for.cond846
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB63_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB63_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB63_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_177
.LBB63_180:                             # %for.end865
                                        #   in Loop: Header=BB63_175 Depth=2
	jmp	.LBB63_181
.LBB63_181:                             # %for.inc866
                                        #   in Loop: Header=BB63_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_175
.LBB63_182:                             # %for.end868
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_183:                             # %for.cond869
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB63_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB63_183 Depth=2
	movl	$0, -12(%rbp)
.LBB63_185:                             # %for.cond873
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB63_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB63_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB63_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_185
.LBB63_188:                             # %for.end893
                                        #   in Loop: Header=BB63_183 Depth=2
	jmp	.LBB63_189
.LBB63_189:                             # %for.inc894
                                        #   in Loop: Header=BB63_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_183
.LBB63_190:                             # %for.end896
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -16(%rbp)
.LBB63_191:                             # %for.cond897
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB63_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB63_191 Depth=2
	movl	$0, -12(%rbp)
.LBB63_193:                             # %for.cond901
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB63_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB63_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB63_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_193
.LBB63_196:                             # %for.end921
                                        #   in Loop: Header=BB63_191 Depth=2
	jmp	.LBB63_197
.LBB63_197:                             # %for.inc922
                                        #   in Loop: Header=BB63_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_191
.LBB63_198:                             # %for.end924
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -12(%rbp)
.LBB63_199:                             # %for.cond925
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_201 Depth 3
                                        #         Child Loop BB63_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB63_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB63_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB63_201:                             # %for.cond985
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB63_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB63_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB63_201 Depth=3
	movl	$0, -24(%rbp)
.LBB63_203:                             # %for.cond989
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_199 Depth=2
                                        #       Parent Loop BB63_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB63_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB63_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB63_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_203
.LBB63_206:                             # %for.end1011
                                        #   in Loop: Header=BB63_201 Depth=3
	jmp	.LBB63_207
.LBB63_207:                             # %for.inc1012
                                        #   in Loop: Header=BB63_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_201
.LBB63_208:                             # %for.end1014
                                        #   in Loop: Header=BB63_199 Depth=2
	jmp	.LBB63_209
.LBB63_209:                             # %for.inc1015
                                        #   in Loop: Header=BB63_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_199
.LBB63_210:                             # %for.end1017
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	$0, -20(%rbp)
.LBB63_211:                             # %for.cond1018
                                        #   Parent Loop BB63_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB63_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB63_211 Depth=2
	movl	$0, -24(%rbp)
.LBB63_213:                             # %for.cond1022
                                        #   Parent Loop BB63_22 Depth=1
                                        #     Parent Loop BB63_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB63_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB63_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB63_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_213
.LBB63_216:                             # %for.end1040
                                        #   in Loop: Header=BB63_211 Depth=2
	jmp	.LBB63_217
.LBB63_217:                             # %for.inc1041
                                        #   in Loop: Header=BB63_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_211
.LBB63_218:                             # %for.end1043
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-112(%rbp), %eax
	movl	%eax, -100(%rbp)
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB63_219:                             # %if.end1044
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_220
.LBB63_220:                             # %if.end1045
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_221
.LBB63_221:                             # %if.end1046
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_222
.LBB63_222:                             # %if.end1047
                                        #   in Loop: Header=BB63_22 Depth=1
	jmp	.LBB63_223
.LBB63_223:                             # %for.inc1048
                                        #   in Loop: Header=BB63_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB63_22
.LBB63_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-168(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-156(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-96(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB63_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB63_230
.LBB63_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB63_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB63_229
.LBB63_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB63_229:                             # %cond.end1065
.LBB63_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB63_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB63_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB63_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB63_233 Depth=1
	movl	$0, -12(%rbp)
.LBB63_235:                             # %for.cond1087
                                        #   Parent Loop BB63_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB63_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB63_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_235
.LBB63_238:                             # %for.end1128
                                        #   in Loop: Header=BB63_233 Depth=1
	jmp	.LBB63_239
.LBB63_239:                             # %for.inc1129
                                        #   in Loop: Header=BB63_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_233
.LBB63_240:                             # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	jmp	.LBB63_317
.LBB63_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB63_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB63_242 Depth=1
	movl	$0, -12(%rbp)
.LBB63_244:                             # %for.cond1138
                                        #   Parent Loop BB63_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB63_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB63_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_244
.LBB63_247:                             # %for.end1226
                                        #   in Loop: Header=BB63_242 Depth=1
	jmp	.LBB63_248
.LBB63_248:                             # %for.inc1227
                                        #   in Loop: Header=BB63_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_242
.LBB63_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB63_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB63_250 Depth=1
	movl	$0, -12(%rbp)
.LBB63_252:                             # %for.cond1234
                                        #   Parent Loop BB63_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB63_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB63_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_252
.LBB63_255:                             # %for.end1249
                                        #   in Loop: Header=BB63_250 Depth=1
	jmp	.LBB63_256
.LBB63_256:                             # %for.inc1250
                                        #   in Loop: Header=BB63_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_250
.LBB63_257:                             # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-180(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB63_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB63_258 Depth=1
	movl	$0, -12(%rbp)
.LBB63_260:                             # %for.cond1258
                                        #   Parent Loop BB63_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB63_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB63_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_260
.LBB63_263:                             # %for.end1282
                                        #   in Loop: Header=BB63_258 Depth=1
	jmp	.LBB63_264
.LBB63_264:                             # %for.inc1283
                                        #   in Loop: Header=BB63_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_258
.LBB63_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB63_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB63_266 Depth=1
	movl	$0, -12(%rbp)
.LBB63_268:                             # %for.cond1328
                                        #   Parent Loop BB63_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB63_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB63_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_268
.LBB63_271:                             # %for.end1352
                                        #   in Loop: Header=BB63_266 Depth=1
	jmp	.LBB63_272
.LBB63_272:                             # %for.inc1353
                                        #   in Loop: Header=BB63_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_266
.LBB63_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB63_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB63_274 Depth=1
	movl	$0, -12(%rbp)
.LBB63_276:                             # %for.cond1398
                                        #   Parent Loop BB63_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB63_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB63_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_276
.LBB63_279:                             # %for.end1413
                                        #   in Loop: Header=BB63_274 Depth=1
	jmp	.LBB63_280
.LBB63_280:                             # %for.inc1414
                                        #   in Loop: Header=BB63_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_274
.LBB63_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB63_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB63_282 Depth=1
	movl	$0, -12(%rbp)
.LBB63_284:                             # %for.cond1421
                                        #   Parent Loop BB63_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB63_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -72(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -68(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB63_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_288
.LBB63_287:                             # %cond.false1467
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB63_288:                             # %cond.end1480
                                        #   in Loop: Header=BB63_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB63_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB63_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB63_294
.LBB63_290:                             # %cond.false1486
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_293
.LBB63_292:                             # %cond.false1502
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB63_293:                             # %cond.end1515
                                        #   in Loop: Header=BB63_284 Depth=2
.LBB63_294:                             # %cond.end1517
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB63_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_297
.LBB63_296:                             # %cond.false1541
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB63_297:                             # %cond.end1551
                                        #   in Loop: Header=BB63_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB63_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB63_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_303
.LBB63_299:                             # %cond.false1557
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_302
.LBB63_301:                             # %cond.false1570
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB63_302:                             # %cond.end1580
                                        #   in Loop: Header=BB63_284 Depth=2
.LBB63_303:                             # %cond.end1582
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB63_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB63_306
.LBB63_305:                             # %cond.false1608
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB63_306:                             # %cond.end1621
                                        #   in Loop: Header=BB63_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB63_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB63_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB63_312
.LBB63_308:                             # %cond.false1627
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB63_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB63_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_311
.LBB63_310:                             # %cond.false1643
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB63_311:                             # %cond.end1656
                                        #   in Loop: Header=BB63_284 Depth=2
.LBB63_312:                             # %cond.end1658
                                        #   in Loop: Header=BB63_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB63_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_284
.LBB63_314:                             # %for.end1671
                                        #   in Loop: Header=BB63_282 Depth=1
	jmp	.LBB63_315
.LBB63_315:                             # %for.inc1672
                                        #   in Loop: Header=BB63_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_282
.LBB63_316:                             # %for.end1674
	jmp	.LBB63_317
.LBB63_317:                             # %if.end1675
	jmp	.LBB63_367
.LBB63_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB63_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB63_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB63_319 Depth=1
	movl	$0, -12(%rbp)
.LBB63_321:                             # %for.cond1681
                                        #   Parent Loop BB63_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB63_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB63_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB63_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_321
.LBB63_324:                             # %for.end1700
                                        #   in Loop: Header=BB63_319 Depth=1
	jmp	.LBB63_325
.LBB63_325:                             # %for.inc1701
                                        #   in Loop: Header=BB63_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_319
.LBB63_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB63_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB63_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB63_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB63_328 Depth=1
	movl	$0, -12(%rbp)
.LBB63_330:                             # %for.cond1711
                                        #   Parent Loop BB63_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB63_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB63_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB63_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_330
.LBB63_333:                             # %for.end1731
                                        #   in Loop: Header=BB63_328 Depth=1
	jmp	.LBB63_334
.LBB63_334:                             # %for.inc1732
                                        #   in Loop: Header=BB63_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_328
.LBB63_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB63_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB63_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB63_336 Depth=1
	movl	$0, -12(%rbp)
.LBB63_338:                             # %for.cond1739
                                        #   Parent Loop BB63_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB63_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB63_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB63_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_338
.LBB63_341:                             # %for.end1759
                                        #   in Loop: Header=BB63_336 Depth=1
	jmp	.LBB63_342
.LBB63_342:                             # %for.inc1760
                                        #   in Loop: Header=BB63_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_336
.LBB63_343:                             # %for.end1762
	jmp	.LBB63_344
.LBB63_344:                             # %if.end1763
	movl	$0, -20(%rbp)
.LBB63_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB63_345 Depth=1
	movl	$0, -24(%rbp)
.LBB63_347:                             # %for.cond1768
                                        #   Parent Loop BB63_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB63_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB63_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB63_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_347
.LBB63_350:                             # %for.end1800
                                        #   in Loop: Header=BB63_345 Depth=1
	jmp	.LBB63_351
.LBB63_351:                             # %for.inc1801
                                        #   in Loop: Header=BB63_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_345
.LBB63_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB63_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB63_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_356 Depth 2
                                        #       Child Loop BB63_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB63_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB63_354 Depth=1
	movl	$0, -20(%rbp)
.LBB63_356:                             # %for.cond1811
                                        #   Parent Loop BB63_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB63_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB63_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB63_356 Depth=2
	movl	$0, -24(%rbp)
.LBB63_358:                             # %for.cond1815
                                        #   Parent Loop BB63_354 Depth=1
                                        #     Parent Loop BB63_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB63_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB63_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB63_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB63_358
.LBB63_361:                             # %for.end1837
                                        #   in Loop: Header=BB63_356 Depth=2
	jmp	.LBB63_362
.LBB63_362:                             # %for.inc1838
                                        #   in Loop: Header=BB63_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_356
.LBB63_363:                             # %for.end1840
                                        #   in Loop: Header=BB63_354 Depth=1
	jmp	.LBB63_364
.LBB63_364:                             # %for.inc1841
                                        #   in Loop: Header=BB63_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_354
.LBB63_365:                             # %for.end1843
	jmp	.LBB63_366
.LBB63_366:                             # %if.end1844
	jmp	.LBB63_367
.LBB63_367:                             # %if.end1845
	movl	-100(%rbp), %ebx
	cmpl	$1712235675, -164(%rbp) # imm = 0x660EA49B
	jne	.LBB63_369
.LBB63_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_368
.Lfunc_end63:
	.size	Mode_Decision_for_4x4IntraBlocks.34, .Lfunc_end63-Mode_Decision_for_4x4IntraBlocks.34
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.35 # -- Begin function store_macroblock_parameters.35
	.p2align	4, 0x90
	.type	store_macroblock_parameters.35,@function
store_macroblock_parameters.35:         # @store_macroblock_parameters.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$741140180, -36(%rbp)   # imm = 0x2C2CE6D4
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB64_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB64_3
.LBB64_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB64_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB64_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB64_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB64_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB64_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_4
.LBB64_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB64_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB64_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB64_10:                              # %for.cond20
                                        #   Parent Loop BB64_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB64_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB64_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_10
.LBB64_13:                              # %for.end39
                                        #   in Loop: Header=BB64_8 Depth=1
	jmp	.LBB64_14
.LBB64_14:                              # %for.inc40
                                        #   in Loop: Header=BB64_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_8
.LBB64_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB64_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB64_16 Depth=1
	movl	$0, -8(%rbp)
.LBB64_18:                              # %for.cond47
                                        #   Parent Loop BB64_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB64_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB64_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_18
.LBB64_21:                              # %for.end70
                                        #   in Loop: Header=BB64_16 Depth=1
	jmp	.LBB64_22
.LBB64_22:                              # %for.inc71
                                        #   in Loop: Header=BB64_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_16
.LBB64_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB64_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	$0, -4(%rbp)
.LBB64_26:                              # %for.cond78
                                        #   Parent Loop BB64_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB64_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB64_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_26
.LBB64_29:                              # %for.end94
                                        #   in Loop: Header=BB64_24 Depth=1
	jmp	.LBB64_30
.LBB64_30:                              # %for.inc95
                                        #   in Loop: Header=BB64_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_24
.LBB64_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB64_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB64_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB64_33 Depth=1
	movl	$0, -4(%rbp)
.LBB64_35:                              # %for.cond105
                                        #   Parent Loop BB64_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB64_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB64_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_35
.LBB64_38:                              # %for.end136
                                        #   in Loop: Header=BB64_33 Depth=1
	jmp	.LBB64_39
.LBB64_39:                              # %for.inc137
                                        #   in Loop: Header=BB64_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_33
.LBB64_40:                              # %for.end139
	jmp	.LBB64_41
.LBB64_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB64_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB64_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB64_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_46 Depth 2
                                        #       Child Loop BB64_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB64_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB64_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB64_46:                              # %for.cond152
                                        #   Parent Loop BB64_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB64_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB64_48:                              # %for.cond159
                                        #   Parent Loop BB64_44 Depth=1
                                        #     Parent Loop BB64_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB64_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB64_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB64_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_48
.LBB64_51:                              # %for.end179
                                        #   in Loop: Header=BB64_46 Depth=2
	jmp	.LBB64_52
.LBB64_52:                              # %for.inc180
                                        #   in Loop: Header=BB64_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_46
.LBB64_53:                              # %for.end182
                                        #   in Loop: Header=BB64_44 Depth=1
	jmp	.LBB64_54
.LBB64_54:                              # %for.inc183
                                        #   in Loop: Header=BB64_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_44
.LBB64_55:                              # %for.end185
	jmp	.LBB64_56
.LBB64_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB64_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB64_59
.LBB64_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB64_60
.LBB64_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB64_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB64_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB64_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB64_61 Depth=1
	movl	$0, -4(%rbp)
.LBB64_63:                              # %for.cond197
                                        #   Parent Loop BB64_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB64_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB64_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB64_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB64_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB64_66:                              # %if.end230
                                        #   in Loop: Header=BB64_63 Depth=2
	jmp	.LBB64_67
.LBB64_67:                              # %for.inc231
                                        #   in Loop: Header=BB64_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_63
.LBB64_68:                              # %for.end233
                                        #   in Loop: Header=BB64_61 Depth=1
	jmp	.LBB64_69
.LBB64_69:                              # %for.inc234
                                        #   in Loop: Header=BB64_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_61
.LBB64_70:                              # %for.end236
	cmpl	$741140180, -36(%rbp)   # imm = 0x2C2CE6D4
	jne	.LBB64_72
.LBB64_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_71
.Lfunc_end64:
	.size	store_macroblock_parameters.35, .Lfunc_end64-store_macroblock_parameters.35
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.36    # -- Begin function RestoreMVBlock8x8.36
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.36,@function
RestoreMVBlock8x8.36:                   # @RestoreMVBlock8x8.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$138915999, -68(%rbp)   # imm = 0x847B09F
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB65_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB65_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB65_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_5:                               # %for.cond7
                                        #   Parent Loop BB65_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB65_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB65_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_5
.LBB65_8:                               # %for.end
                                        #   in Loop: Header=BB65_3 Depth=1
	jmp	.LBB65_9
.LBB65_9:                               # %for.inc76
                                        #   in Loop: Header=BB65_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_3
.LBB65_10:                              # %for.end78
	jmp	.LBB65_11
.LBB65_11:                              # %if.end
	jmp	.LBB65_46
.LBB65_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB65_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB65_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_16:                              # %for.cond84
                                        #   Parent Loop BB65_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB65_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB65_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_16
.LBB65_19:                              # %for.end161
                                        #   in Loop: Header=BB65_14 Depth=1
	jmp	.LBB65_20
.LBB65_20:                              # %for.inc162
                                        #   in Loop: Header=BB65_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_14
.LBB65_21:                              # %for.end164
	jmp	.LBB65_45
.LBB65_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB65_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB65_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_26:                              # %for.cond171
                                        #   Parent Loop BB65_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB65_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB65_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_26
.LBB65_29:                              # %for.end248
                                        #   in Loop: Header=BB65_24 Depth=1
	jmp	.LBB65_30
.LBB65_30:                              # %for.inc249
                                        #   in Loop: Header=BB65_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_24
.LBB65_31:                              # %for.end251
	jmp	.LBB65_44
.LBB65_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB65_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_36:                              # %for.cond258
                                        #   Parent Loop BB65_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB65_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB65_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_36
.LBB65_39:                              # %for.end407
                                        #   in Loop: Header=BB65_34 Depth=1
	jmp	.LBB65_40
.LBB65_40:                              # %for.inc408
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_34
.LBB65_41:                              # %for.end410
	jmp	.LBB65_43
.LBB65_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB65_43:                              # %if.end412
	jmp	.LBB65_44
.LBB65_44:                              # %if.end413
	jmp	.LBB65_45
.LBB65_45:                              # %if.end414
	jmp	.LBB65_46
.LBB65_46:                              # %if.end415
	cmpl	$138915999, -68(%rbp)   # imm = 0x847B09F
	jne	.LBB65_48
.LBB65_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_47
.Lfunc_end65:
	.size	RestoreMVBlock8x8.36, .Lfunc_end65-RestoreMVBlock8x8.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.37
.LCPI66_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI66_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.37
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.37,@function
Mode_Decision_for_4x4IntraBlocks.37:    # @Mode_Decision_for_4x4IntraBlocks.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI66_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$2061862068, -156(%rbp) # imm = 0x7AE584B4
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -168(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -180(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-36(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB66_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB66_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_4
.LBB66_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB66_4
.LBB66_4:                               # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB66_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_7
.LBB66_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB66_7
.LBB66_7:                               # %cond.end31
	movl	%eax, -232(%rbp)
.LBB66_8:                               # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB66_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_11
.LBB66_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_11
.LBB66_11:                              # %cond.end42
	movl	%eax, -112(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB66_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB66_14
.LBB66_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_14
.LBB66_14:                              # %cond.end55
	movl	%eax, -108(%rbp)
	cmpl	$0, -112(%rbp)
	jl	.LBB66_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -108(%rbp)
	jge	.LBB66_17
.LBB66_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB66_21
.LBB66_17:                              # %cond.false59
	movl	-112(%rbp), %eax
	cmpl	-108(%rbp), %eax
	jge	.LBB66_19
# %bb.18:                               # %cond.true61
	movl	-112(%rbp), %eax
	jmp	.LBB66_20
.LBB66_19:                              # %cond.false62
	movl	-108(%rbp), %eax
.LBB66_20:                              # %cond.end63
.LBB66_21:                              # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-160(%rbp), %rdx
	leaq	-172(%rbp), %rcx
	leaq	-184(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB66_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_49 Depth 2
                                        #       Child Loop BB66_51 Depth 3
                                        #     Child Loop BB66_64 Depth 2
                                        #       Child Loop BB66_66 Depth 3
                                        #     Child Loop BB66_73 Depth 2
                                        #       Child Loop BB66_75 Depth 3
                                        #     Child Loop BB66_81 Depth 2
                                        #       Child Loop BB66_83 Depth 3
                                        #     Child Loop BB66_91 Depth 2
                                        #       Child Loop BB66_93 Depth 3
                                        #     Child Loop BB66_99 Depth 2
                                        #       Child Loop BB66_101 Depth 3
                                        #     Child Loop BB66_107 Depth 2
                                        #       Child Loop BB66_109 Depth 3
                                        #     Child Loop BB66_115 Depth 2
                                        #       Child Loop BB66_117 Depth 3
                                        #     Child Loop BB66_123 Depth 2
                                        #       Child Loop BB66_125 Depth 3
                                        #     Child Loop BB66_131 Depth 2
                                        #       Child Loop BB66_133 Depth 3
                                        #     Child Loop BB66_166 Depth 2
                                        #       Child Loop BB66_168 Depth 3
                                        #     Child Loop BB66_175 Depth 2
                                        #       Child Loop BB66_177 Depth 3
                                        #     Child Loop BB66_183 Depth 2
                                        #       Child Loop BB66_185 Depth 3
                                        #     Child Loop BB66_191 Depth 2
                                        #       Child Loop BB66_193 Depth 3
                                        #     Child Loop BB66_199 Depth 2
                                        #       Child Loop BB66_201 Depth 3
                                        #         Child Loop BB66_203 Depth 4
                                        #     Child Loop BB66_211 Depth 2
                                        #       Child Loop BB66_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB66_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB66_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB66_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB66_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB66_28
.LBB66_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -172(%rbp)
	movb	$1, %al
	jne	.LBB66_32
.LBB66_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB66_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB66_31
.LBB66_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB66_32
.LBB66_31:                              # %lor.rhs
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -184(%rbp)
	setne	%al
.LBB66_32:                              # %lor.end
                                        #   in Loop: Header=BB66_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB66_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB66_46
.LBB66_34:                              # %if.then86
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB66_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB66_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB66_38
.LBB66_37:                              # %if.then92
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_38:                              # %if.end93
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB66_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB66_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB66_42
.LBB66_41:                              # %if.then99
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_42:                              # %if.end100
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB66_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB66_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_45:                              # %if.end105
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_46
.LBB66_46:                              # %if.end106
                                        #   in Loop: Header=BB66_22 Depth=1
	cmpl	$0, -164(%rbp)
	je	.LBB66_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB66_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -120(%rbp)
.LBB66_49:                              # %for.cond111
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB66_49 Depth=2
	movl	$0, -12(%rbp)
.LBB66_51:                              # %for.cond114
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB66_51 Depth=3
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB66_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB66_51
.LBB66_54:                              # %for.end
                                        #   in Loop: Header=BB66_49 Depth=2
	jmp	.LBB66_55
.LBB66_55:                              # %for.inc133
                                        #   in Loop: Header=BB66_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_49
.LBB66_56:                              # %for.end135
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB66_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB66_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB66_59
.LBB66_58:                              # %cond.false139
                                        #   in Loop: Header=BB66_22 Depth=1
	vmovsd	.LCPI66_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB66_59:                              # %cond.end142
                                        #   in Loop: Header=BB66_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB66_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB66_61:                              # %if.end148
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_221
.LBB66_62:                              # %if.else
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_64:                              # %for.cond151
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB66_64 Depth=2
	movl	$0, -12(%rbp)
.LBB66_66:                              # %for.cond155
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB66_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB66_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_66
.LBB66_69:                              # %for.end194
                                        #   in Loop: Header=BB66_64 Depth=2
	jmp	.LBB66_70
.LBB66_70:                              # %for.inc195
                                        #   in Loop: Header=BB66_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_64
.LBB66_71:                              # %for.end197
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_73:                              # %for.cond202
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB66_73 Depth=2
	movl	$0, -12(%rbp)
.LBB66_75:                              # %for.cond206
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB66_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB66_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_75
.LBB66_78:                              # %for.end224
                                        #   in Loop: Header=BB66_73 Depth=2
	jmp	.LBB66_79
.LBB66_79:                              # %for.inc225
                                        #   in Loop: Header=BB66_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_73
.LBB66_80:                              # %for.end227
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -24(%rbp)
.LBB66_81:                              # %for.cond228
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_83 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB66_81 Depth=2
	movl	$0, -20(%rbp)
.LBB66_83:                              # %for.cond232
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB66_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB66_83 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_83
.LBB66_86:                              # %for.end249
                                        #   in Loop: Header=BB66_81 Depth=2
	jmp	.LBB66_87
.LBB66_87:                              # %for.inc250
                                        #   in Loop: Header=BB66_81 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_81
.LBB66_88:                              # %for.end252
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_89:                              # %if.end253
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB66_220
.LBB66_90:                              # %if.else254
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_91:                              # %for.cond255
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB66_91 Depth=2
	movl	$0, -12(%rbp)
.LBB66_93:                              # %for.cond259
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB66_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB66_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_93
.LBB66_96:                              # %for.end345
                                        #   in Loop: Header=BB66_91 Depth=2
	jmp	.LBB66_97
.LBB66_97:                              # %for.inc346
                                        #   in Loop: Header=BB66_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_91
.LBB66_98:                              # %for.end348
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_99:                              # %for.cond349
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	$0, -12(%rbp)
.LBB66_101:                             # %for.cond353
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB66_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB66_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_101
.LBB66_104:                             # %for.end368
                                        #   in Loop: Header=BB66_99 Depth=2
	jmp	.LBB66_105
.LBB66_105:                             # %for.inc369
                                        #   in Loop: Header=BB66_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_99
.LBB66_106:                             # %for.end371
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB66_107:                             # %for.cond374
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB66_107 Depth=2
	movl	$0, -12(%rbp)
.LBB66_109:                             # %for.cond378
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB66_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB66_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_109
.LBB66_112:                             # %for.end402
                                        #   in Loop: Header=BB66_107 Depth=2
	jmp	.LBB66_113
.LBB66_113:                             # %for.inc403
                                        #   in Loop: Header=BB66_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_107
.LBB66_114:                             # %for.end405
                                        #   in Loop: Header=BB66_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-28(%rbp), %edi
	addl	$4, %edi
	movl	-32(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB66_115:                             # %for.cond409
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	$0, -12(%rbp)
.LBB66_117:                             # %for.cond413
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB66_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB66_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_117
.LBB66_120:                             # %for.end437
                                        #   in Loop: Header=BB66_115 Depth=2
	jmp	.LBB66_121
.LBB66_121:                             # %for.inc438
                                        #   in Loop: Header=BB66_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_115
.LBB66_122:                             # %for.end440
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-28(%rbp), %edi
	addl	$8, %edi
	movl	-32(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB66_123:                             # %for.cond444
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB66_123 Depth=2
	movl	$0, -12(%rbp)
.LBB66_125:                             # %for.cond448
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB66_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB66_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_125
.LBB66_128:                             # %for.end463
                                        #   in Loop: Header=BB66_123 Depth=2
	jmp	.LBB66_129
.LBB66_129:                             # %for.inc464
                                        #   in Loop: Header=BB66_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_123
.LBB66_130:                             # %for.end466
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_131:                             # %for.cond467
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB66_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	$0, -12(%rbp)
.LBB66_133:                             # %for.cond471
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB66_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_137
.LBB66_136:                             # %cond.false516
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_137:                             # %cond.end529
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB66_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_143
.LBB66_139:                             # %cond.false535
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_142
.LBB66_141:                             # %cond.false551
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_142:                             # %cond.end564
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_143:                             # %cond.end566
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB66_146
.LBB66_145:                             # %cond.false588
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_146:                             # %cond.end598
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB66_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_152
.LBB66_148:                             # %cond.false604
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_151
.LBB66_150:                             # %cond.false617
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_151:                             # %cond.end627
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_152:                             # %cond.end629
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB66_155
.LBB66_154:                             # %cond.false655
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_155:                             # %cond.end668
                                        #   in Loop: Header=BB66_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB66_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_161
.LBB66_157:                             # %cond.false674
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB66_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB66_160
.LBB66_159:                             # %cond.false690
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_160:                             # %cond.end703
                                        #   in Loop: Header=BB66_133 Depth=3
.LBB66_161:                             # %cond.end705
                                        #   in Loop: Header=BB66_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB66_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_133
.LBB66_163:                             # %for.end718
                                        #   in Loop: Header=BB66_131 Depth=2
	jmp	.LBB66_164
.LBB66_164:                             # %for.inc719
                                        #   in Loop: Header=BB66_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_131
.LBB66_165:                             # %for.end721
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -24(%rbp)
.LBB66_166:                             # %for.cond722
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_168 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB66_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB66_168:                             # %for.cond726
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB66_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB66_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB66_168 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_168
.LBB66_171:                             # %for.end831
                                        #   in Loop: Header=BB66_166 Depth=2
	jmp	.LBB66_172
.LBB66_172:                             # %for.inc832
                                        #   in Loop: Header=BB66_166 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_166
.LBB66_173:                             # %for.end834
                                        #   in Loop: Header=BB66_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB66_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_175:                             # %for.cond842
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB66_175 Depth=2
	movl	$0, -12(%rbp)
.LBB66_177:                             # %for.cond846
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB66_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB66_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_177
.LBB66_180:                             # %for.end865
                                        #   in Loop: Header=BB66_175 Depth=2
	jmp	.LBB66_181
.LBB66_181:                             # %for.inc866
                                        #   in Loop: Header=BB66_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_175
.LBB66_182:                             # %for.end868
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_183:                             # %for.cond869
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB66_183 Depth=2
	movl	$0, -12(%rbp)
.LBB66_185:                             # %for.cond873
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB66_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB66_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_185
.LBB66_188:                             # %for.end893
                                        #   in Loop: Header=BB66_183 Depth=2
	jmp	.LBB66_189
.LBB66_189:                             # %for.inc894
                                        #   in Loop: Header=BB66_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_183
.LBB66_190:                             # %for.end896
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -16(%rbp)
.LBB66_191:                             # %for.cond897
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB66_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB66_191 Depth=2
	movl	$0, -12(%rbp)
.LBB66_193:                             # %for.cond901
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB66_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB66_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB66_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_193
.LBB66_196:                             # %for.end921
                                        #   in Loop: Header=BB66_191 Depth=2
	jmp	.LBB66_197
.LBB66_197:                             # %for.inc922
                                        #   in Loop: Header=BB66_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_191
.LBB66_198:                             # %for.end924
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -12(%rbp)
.LBB66_199:                             # %for.cond925
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_201 Depth 3
                                        #         Child Loop BB66_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB66_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB66_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -24(%rbp)
.LBB66_201:                             # %for.cond985
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB66_203 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB66_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB66_201 Depth=3
	movl	$0, -20(%rbp)
.LBB66_203:                             # %for.cond989
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_199 Depth=2
                                        #       Parent Loop BB66_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -20(%rbp)
	jge	.LBB66_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB66_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB66_203 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_203
.LBB66_206:                             # %for.end1011
                                        #   in Loop: Header=BB66_201 Depth=3
	jmp	.LBB66_207
.LBB66_207:                             # %for.inc1012
                                        #   in Loop: Header=BB66_201 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_201
.LBB66_208:                             # %for.end1014
                                        #   in Loop: Header=BB66_199 Depth=2
	jmp	.LBB66_209
.LBB66_209:                             # %for.inc1015
                                        #   in Loop: Header=BB66_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_199
.LBB66_210:                             # %for.end1017
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	$0, -24(%rbp)
.LBB66_211:                             # %for.cond1018
                                        #   Parent Loop BB66_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_213 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB66_211 Depth=2
	movl	$0, -20(%rbp)
.LBB66_213:                             # %for.cond1022
                                        #   Parent Loop BB66_22 Depth=1
                                        #     Parent Loop BB66_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB66_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB66_213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_213
.LBB66_216:                             # %for.end1040
                                        #   in Loop: Header=BB66_211 Depth=2
	jmp	.LBB66_217
.LBB66_217:                             # %for.inc1041
                                        #   in Loop: Header=BB66_211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_211
.LBB66_218:                             # %for.end1043
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB66_219:                             # %if.end1044
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_220
.LBB66_220:                             # %if.end1045
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_221
.LBB66_221:                             # %if.end1046
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_222
.LBB66_222:                             # %if.end1047
                                        #   in Loop: Header=BB66_22 Depth=1
	jmp	.LBB66_223
.LBB66_223:                             # %for.inc1048
                                        #   in Loop: Header=BB66_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB66_22
.LBB66_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-168(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-180(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB66_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB66_230
.LBB66_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB66_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB66_229
.LBB66_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB66_229:                             # %cond.end1065
.LBB66_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	shll	$2, %edx
	addl	-32(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB66_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB66_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB66_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB66_233 Depth=1
	movl	$0, -12(%rbp)
.LBB66_235:                             # %for.cond1087
                                        #   Parent Loop BB66_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB66_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB66_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_235
.LBB66_238:                             # %for.end1128
                                        #   in Loop: Header=BB66_233 Depth=1
	jmp	.LBB66_239
.LBB66_239:                             # %for.inc1129
                                        #   in Loop: Header=BB66_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_233
.LBB66_240:                             # %for.end1131
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB66_317
.LBB66_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB66_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB66_242 Depth=1
	movl	$0, -12(%rbp)
.LBB66_244:                             # %for.cond1138
                                        #   Parent Loop BB66_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB66_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-84(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB66_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_244
.LBB66_247:                             # %for.end1226
                                        #   in Loop: Header=BB66_242 Depth=1
	jmp	.LBB66_248
.LBB66_248:                             # %for.inc1227
                                        #   in Loop: Header=BB66_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_242
.LBB66_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB66_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB66_250 Depth=1
	movl	$0, -12(%rbp)
.LBB66_252:                             # %for.cond1234
                                        #   Parent Loop BB66_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB66_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB66_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_252
.LBB66_255:                             # %for.end1249
                                        #   in Loop: Header=BB66_250 Depth=1
	jmp	.LBB66_256
.LBB66_256:                             # %for.inc1250
                                        #   in Loop: Header=BB66_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_250
.LBB66_257:                             # %for.end1252
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-176(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB66_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB66_258 Depth=1
	movl	$0, -12(%rbp)
.LBB66_260:                             # %for.cond1258
                                        #   Parent Loop BB66_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB66_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB66_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_260
.LBB66_263:                             # %for.end1282
                                        #   in Loop: Header=BB66_258 Depth=1
	jmp	.LBB66_264
.LBB66_264:                             # %for.inc1283
                                        #   in Loop: Header=BB66_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_258
.LBB66_265:                             # %for.end1285
	movl	-28(%rbp), %esi
	addl	$4, %esi
	movl	-32(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB66_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB66_266 Depth=1
	movl	$0, -12(%rbp)
.LBB66_268:                             # %for.cond1328
                                        #   Parent Loop BB66_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB66_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB66_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_268
.LBB66_271:                             # %for.end1352
                                        #   in Loop: Header=BB66_266 Depth=1
	jmp	.LBB66_272
.LBB66_272:                             # %for.inc1353
                                        #   in Loop: Header=BB66_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_266
.LBB66_273:                             # %for.end1355
	movl	-28(%rbp), %esi
	addl	$8, %esi
	movl	-32(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB66_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB66_274 Depth=1
	movl	$0, -12(%rbp)
.LBB66_276:                             # %for.cond1398
                                        #   Parent Loop BB66_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB66_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB66_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_276
.LBB66_279:                             # %for.end1413
                                        #   in Loop: Header=BB66_274 Depth=1
	jmp	.LBB66_280
.LBB66_280:                             # %for.inc1414
                                        #   in Loop: Header=BB66_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_274
.LBB66_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB66_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB66_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB66_282 Depth=1
	movl	$0, -12(%rbp)
.LBB66_284:                             # %for.cond1421
                                        #   Parent Loop BB66_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB66_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB66_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_288
.LBB66_287:                             # %cond.false1467
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB66_288:                             # %cond.end1480
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB66_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_294
.LBB66_290:                             # %cond.false1486
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_293
.LBB66_292:                             # %cond.false1502
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_293:                             # %cond.end1515
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_294:                             # %cond.end1517
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_297
.LBB66_296:                             # %cond.false1541
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_297:                             # %cond.end1551
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB66_303
.LBB66_299:                             # %cond.false1557
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_302
.LBB66_301:                             # %cond.false1570
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_302:                             # %cond.end1580
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_303:                             # %cond.end1582
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB66_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB66_306
.LBB66_305:                             # %cond.false1608
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB66_306:                             # %cond.end1621
                                        #   in Loop: Header=BB66_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB66_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB66_312
.LBB66_308:                             # %cond.false1627
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB66_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB66_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB66_311
.LBB66_310:                             # %cond.false1643
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB66_311:                             # %cond.end1656
                                        #   in Loop: Header=BB66_284 Depth=2
.LBB66_312:                             # %cond.end1658
                                        #   in Loop: Header=BB66_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB66_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_284
.LBB66_314:                             # %for.end1671
                                        #   in Loop: Header=BB66_282 Depth=1
	jmp	.LBB66_315
.LBB66_315:                             # %for.inc1672
                                        #   in Loop: Header=BB66_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_282
.LBB66_316:                             # %for.end1674
	jmp	.LBB66_317
.LBB66_317:                             # %if.end1675
	jmp	.LBB66_367
.LBB66_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB66_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB66_319 Depth=1
	movl	$0, -12(%rbp)
.LBB66_321:                             # %for.cond1681
                                        #   Parent Loop BB66_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB66_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB66_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_321
.LBB66_324:                             # %for.end1700
                                        #   in Loop: Header=BB66_319 Depth=1
	jmp	.LBB66_325
.LBB66_325:                             # %for.inc1701
                                        #   in Loop: Header=BB66_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_319
.LBB66_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB66_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB66_328 Depth=1
	movl	$0, -12(%rbp)
.LBB66_330:                             # %for.cond1711
                                        #   Parent Loop BB66_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB66_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB66_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_330
.LBB66_333:                             # %for.end1731
                                        #   in Loop: Header=BB66_328 Depth=1
	jmp	.LBB66_334
.LBB66_334:                             # %for.inc1732
                                        #   in Loop: Header=BB66_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_328
.LBB66_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB66_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB66_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB66_336 Depth=1
	movl	$0, -12(%rbp)
.LBB66_338:                             # %for.cond1739
                                        #   Parent Loop BB66_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB66_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB66_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB66_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_338
.LBB66_341:                             # %for.end1759
                                        #   in Loop: Header=BB66_336 Depth=1
	jmp	.LBB66_342
.LBB66_342:                             # %for.inc1760
                                        #   in Loop: Header=BB66_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_336
.LBB66_343:                             # %for.end1762
	jmp	.LBB66_344
.LBB66_344:                             # %if.end1763
	movl	$0, -24(%rbp)
.LBB66_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_347 Depth 2
	cmpl	$4, -24(%rbp)
	jge	.LBB66_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB66_345 Depth=1
	movl	$0, -20(%rbp)
.LBB66_347:                             # %for.cond1768
                                        #   Parent Loop BB66_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB66_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB66_347 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB66_347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_347
.LBB66_350:                             # %for.end1800
                                        #   in Loop: Header=BB66_345 Depth=1
	jmp	.LBB66_351
.LBB66_351:                             # %for.inc1801
                                        #   in Loop: Header=BB66_345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_345
.LBB66_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB66_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB66_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_356 Depth 2
                                        #       Child Loop BB66_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB66_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB66_354 Depth=1
	movl	$0, -24(%rbp)
.LBB66_356:                             # %for.cond1811
                                        #   Parent Loop BB66_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB66_358 Depth 3
	cmpl	$4, -24(%rbp)
	jge	.LBB66_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB66_356 Depth=2
	movl	$0, -20(%rbp)
.LBB66_358:                             # %for.cond1815
                                        #   Parent Loop BB66_354 Depth=1
                                        #     Parent Loop BB66_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB66_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB66_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB66_358 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB66_358
.LBB66_361:                             # %for.end1837
                                        #   in Loop: Header=BB66_356 Depth=2
	jmp	.LBB66_362
.LBB66_362:                             # %for.inc1838
                                        #   in Loop: Header=BB66_356 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB66_356
.LBB66_363:                             # %for.end1840
                                        #   in Loop: Header=BB66_354 Depth=1
	jmp	.LBB66_364
.LBB66_364:                             # %for.inc1841
                                        #   in Loop: Header=BB66_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_354
.LBB66_365:                             # %for.end1843
	jmp	.LBB66_366
.LBB66_366:                             # %if.end1844
	jmp	.LBB66_367
.LBB66_367:                             # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$2061862068, -156(%rbp) # imm = 0x7AE584B4
	jne	.LBB66_369
.LBB66_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_368
.Lfunc_end66:
	.size	Mode_Decision_for_4x4IntraBlocks.37, .Lfunc_end66-Mode_Decision_for_4x4IntraBlocks.37
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.38   # -- Begin function SetMotionVectorsMB.38
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.38,@function
SetMotionVectorsMB.38:                  # @SetMotionVectorsMB.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1960522339, -72(%rbp)  # imm = 0x74DB3263
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB67_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -4(%rbp)
.LBB67_3:                               # %for.cond3
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB67_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB67_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB67_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB67_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB67_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB67_10
.LBB67_9:                               # %cond.false
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB67_10:                              # %cond.end
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB67_11:                              # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB67_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB67_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_15
.LBB67_14:                              # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB67_15:                              # %if.end89
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_29
.LBB67_16:                              # %if.else90
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB67_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB67_28
.LBB67_18:                              # %if.else122
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB67_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB67_27
.LBB67_20:                              # %if.else174
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB67_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_26
.LBB67_22:                              # %if.else226
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB67_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB67_25
.LBB67_24:                              # %if.else298
                                        #   in Loop: Header=BB67_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB67_25:                              # %if.end299
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_26
.LBB67_26:                              # %if.end300
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_27
.LBB67_27:                              # %if.end301
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_28
.LBB67_28:                              # %if.end302
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_29
.LBB67_29:                              # %if.end303
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_30
.LBB67_30:                              # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_3
.LBB67_31:                              # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_32
.LBB67_32:                              # %for.inc304
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_1
.LBB67_33:                              # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB67_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB67_35:                              # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_37 Depth 2
                                        #       Child Loop BB67_39 Depth 3
                                        #         Child Loop BB67_41 Depth 4
                                        #           Child Loop BB67_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB67_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB67_35 Depth=1
	movl	$0, -8(%rbp)
.LBB67_37:                              # %for.cond313
                                        #   Parent Loop BB67_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_39 Depth 3
                                        #         Child Loop BB67_41 Depth 4
                                        #           Child Loop BB67_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB67_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB67_37 Depth=2
	movl	$0, -20(%rbp)
.LBB67_39:                              # %for.cond317
                                        #   Parent Loop BB67_35 Depth=1
                                        #     Parent Loop BB67_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_41 Depth 4
                                        #           Child Loop BB67_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB67_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB67_39 Depth=3
	movl	$0, -24(%rbp)
.LBB67_41:                              # %for.cond321
                                        #   Parent Loop BB67_35 Depth=1
                                        #     Parent Loop BB67_37 Depth=2
                                        #       Parent Loop BB67_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB67_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB67_41 Depth=4
	movl	$0, -28(%rbp)
.LBB67_43:                              # %for.cond325
                                        #   Parent Loop BB67_35 Depth=1
                                        #     Parent Loop BB67_37 Depth=2
                                        #       Parent Loop BB67_39 Depth=3
                                        #         Parent Loop BB67_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB67_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB67_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB67_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB67_43
.LBB67_46:                              # %for.end423
                                        #   in Loop: Header=BB67_41 Depth=4
	jmp	.LBB67_47
.LBB67_47:                              # %for.inc424
                                        #   in Loop: Header=BB67_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_41
.LBB67_48:                              # %for.end426
                                        #   in Loop: Header=BB67_39 Depth=3
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc427
                                        #   in Loop: Header=BB67_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_39
.LBB67_50:                              # %for.end429
                                        #   in Loop: Header=BB67_37 Depth=2
	jmp	.LBB67_51
.LBB67_51:                              # %for.inc430
                                        #   in Loop: Header=BB67_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_37
.LBB67_52:                              # %for.end432
                                        #   in Loop: Header=BB67_35 Depth=1
	jmp	.LBB67_53
.LBB67_53:                              # %for.inc433
                                        #   in Loop: Header=BB67_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB67_35
.LBB67_54:                              # %for.end435
	jmp	.LBB67_55
.LBB67_55:                              # %if.end436
	cmpl	$1960522339, -72(%rbp)  # imm = 0x74DB3263
	jne	.LBB67_57
.LBB67_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_57:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_56
.Lfunc_end67:
	.size	SetMotionVectorsMB.38, .Lfunc_end67-SetMotionVectorsMB.38
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_4x4IntraBlocks.39
.LCPI68_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI68_1:
	.quad	4616189618054758400     # double 4
	.text
	.globl	Mode_Decision_for_4x4IntraBlocks.39
	.p2align	4, 0x90
	.type	Mode_Decision_for_4x4IntraBlocks.39,@function
Mode_Decision_for_4x4IntraBlocks.39:    # @Mode_Decision_for_4x4IntraBlocks.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$488, %rsp              # imm = 0x1E8
	.cfi_offset %rbx, -24
	vmovsd	.LCPI68_0(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$638793279, -172(%rbp)  # imm = 0x2613363F
	movl	%edi, -32(%rbp)
	movl	%esi, -28(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	movq	%rdx, -152(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -96(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -36(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -180(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -164(%rbp)
	vmovsd	%xmm1, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rax
	movl	524(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-208(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	img, %rax
	movl	12(%rax), %edi
	movl	-40(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, %esi
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-232(%rbp), %r9
	callq	getLuma4x4Neighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB68_8
# %bb.1:                                # %if.then
	cmpl	$0, -208(%rbp)
	je	.LBB68_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-204(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB68_4
.LBB68_3:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB68_4
.LBB68_4:                               # %cond.end
	movl	%eax, -208(%rbp)
	cmpl	$0, -232(%rbp)
	je	.LBB68_6
# %bb.5:                                # %cond.true25
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-228(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB68_7
.LBB68_6:                               # %cond.false30
	xorl	%eax, %eax
	jmp	.LBB68_7
.LBB68_7:                               # %cond.end31
	movl	%eax, -232(%rbp)
.LBB68_8:                               # %if.end
	cmpl	$0, -232(%rbp)
	je	.LBB68_10
# %bb.9:                                # %cond.true36
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-216(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-212(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB68_11
.LBB68_10:                              # %cond.false41
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB68_11
.LBB68_11:                              # %cond.end42
	movl	%eax, -120(%rbp)
	cmpl	$0, -208(%rbp)
	je	.LBB68_13
# %bb.12:                               # %cond.true46
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-192(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-188(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB68_14
.LBB68_13:                              # %cond.false54
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB68_14
.LBB68_14:                              # %cond.end55
	movl	%eax, -112(%rbp)
	cmpl	$0, -120(%rbp)
	jl	.LBB68_16
# %bb.15:                               # %lor.lhs.false
	cmpl	$0, -112(%rbp)
	jge	.LBB68_17
.LBB68_16:                              # %cond.true58
	movl	$2, %eax
	jmp	.LBB68_21
.LBB68_17:                              # %cond.false59
	movl	-120(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB68_19
# %bb.18:                               # %cond.true61
	movl	-120(%rbp), %eax
	jmp	.LBB68_20
.LBB68_19:                              # %cond.false62
	movl	-112(%rbp), %eax
.LBB68_20:                              # %cond.end63
.LBB68_21:                              # %cond.end65
	movl	%eax, -100(%rbp)
	movq	-152(%rbp), %rax
	movl	$2147483647, (%rax)     # imm = 0x7FFFFFFF
	movl	-64(%rbp), %edi
	movl	-48(%rbp), %esi
	leaq	-184(%rbp), %rdx
	leaq	-160(%rbp), %rcx
	leaq	-168(%rbp), %r8
	callq	intrapred_luma
	movl	$0, -44(%rbp)
.LBB68_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_49 Depth 2
                                        #       Child Loop BB68_51 Depth 3
                                        #     Child Loop BB68_64 Depth 2
                                        #       Child Loop BB68_66 Depth 3
                                        #     Child Loop BB68_73 Depth 2
                                        #       Child Loop BB68_75 Depth 3
                                        #     Child Loop BB68_81 Depth 2
                                        #       Child Loop BB68_83 Depth 3
                                        #     Child Loop BB68_91 Depth 2
                                        #       Child Loop BB68_93 Depth 3
                                        #     Child Loop BB68_99 Depth 2
                                        #       Child Loop BB68_101 Depth 3
                                        #     Child Loop BB68_107 Depth 2
                                        #       Child Loop BB68_109 Depth 3
                                        #     Child Loop BB68_115 Depth 2
                                        #       Child Loop BB68_117 Depth 3
                                        #     Child Loop BB68_123 Depth 2
                                        #       Child Loop BB68_125 Depth 3
                                        #     Child Loop BB68_131 Depth 2
                                        #       Child Loop BB68_133 Depth 3
                                        #     Child Loop BB68_166 Depth 2
                                        #       Child Loop BB68_168 Depth 3
                                        #     Child Loop BB68_175 Depth 2
                                        #       Child Loop BB68_177 Depth 3
                                        #     Child Loop BB68_183 Depth 2
                                        #       Child Loop BB68_185 Depth 3
                                        #     Child Loop BB68_191 Depth 2
                                        #       Child Loop BB68_193 Depth 3
                                        #     Child Loop BB68_199 Depth 2
                                        #       Child Loop BB68_201 Depth 3
                                        #         Child Loop BB68_203 Depth 4
                                        #     Child Loop BB68_211 Depth 2
                                        #       Child Loop BB68_213 Depth 3
	cmpl	$9, -44(%rbp)
	jge	.LBB68_224
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$2, -44(%rbp)
	movb	$1, %al
	je	.LBB68_32
# %bb.24:                               # %lor.lhs.false69
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB68_27
# %bb.25:                               # %lor.lhs.false71
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$7, -44(%rbp)
	je	.LBB68_27
# %bb.26:                               # %lor.lhs.false73
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB68_28
.LBB68_27:                              # %land.lhs.true
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$0, -160(%rbp)
	movb	$1, %al
	jne	.LBB68_32
.LBB68_28:                              # %lor.lhs.false76
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$1, -44(%rbp)
	je	.LBB68_30
# %bb.29:                               # %lor.lhs.false78
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$8, -44(%rbp)
	jne	.LBB68_31
.LBB68_30:                              # %land.lhs.true80
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$0, -184(%rbp)
	movb	$1, %al
	jne	.LBB68_32
.LBB68_31:                              # %lor.rhs
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$0, -168(%rbp)
	setne	%al
.LBB68_32:                              # %lor.end
                                        #   in Loop: Header=BB68_22 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB68_34
# %bb.33:                               # %lor.lhs.false84
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB68_46
.LBB68_34:                              # %if.then86
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2400(%rax)
	je	.LBB68_38
# %bb.35:                               # %land.lhs.true88
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB68_37
# %bb.36:                               # %lor.lhs.false90
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB68_38
.LBB68_37:                              # %if.then92
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_223
.LBB68_38:                              # %if.end93
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2404(%rax)
	je	.LBB68_42
# %bb.39:                               # %land.lhs.true95
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$3, -44(%rbp)
	je	.LBB68_41
# %bb.40:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$4, -44(%rbp)
	jne	.LBB68_42
.LBB68_41:                              # %if.then99
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_223
.LBB68_42:                              # %if.end100
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2408(%rax)
	je	.LBB68_45
# %bb.43:                               # %land.lhs.true102
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$5, -44(%rbp)
	jl	.LBB68_45
# %bb.44:                               # %if.then104
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_223
.LBB68_45:                              # %if.end105
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_46
.LBB68_46:                              # %if.end106
                                        #   in Loop: Header=BB68_22 Depth=1
	cmpl	$0, -176(%rbp)
	je	.LBB68_222
# %bb.47:                               # %if.then108
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB68_62
# %bb.48:                               # %if.then110
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
	movl	$0, -108(%rbp)
.LBB68_49:                              # %for.cond111
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_51 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_56
# %bb.50:                               # %for.body113
                                        #   in Loop: Header=BB68_49 Depth=2
	movl	$0, -12(%rbp)
.LBB68_51:                              # %for.cond114
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_49 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_54
# %bb.52:                               # %for.body116
                                        #   in Loop: Header=BB68_51 Depth=3
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-108(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.53:                               # %for.inc
                                        #   in Loop: Header=BB68_51 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-108(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -108(%rbp)
	jmp	.LBB68_51
.LBB68_54:                              # %for.end
                                        #   in Loop: Header=BB68_49 Depth=2
	jmp	.LBB68_55
.LBB68_55:                              # %for.inc133
                                        #   in Loop: Header=BB68_49 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_49
.LBB68_56:                              # %for.end135
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-44(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jne	.LBB68_58
# %bb.57:                               # %cond.true138
                                        #   in Loop: Header=BB68_22 Depth=1
	xorl	%eax, %eax
	jmp	.LBB68_59
.LBB68_58:                              # %cond.false139
                                        #   in Loop: Header=BB68_22 Depth=1
	vmovsd	.LCPI68_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-144(%rbp), %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB68_59:                              # %cond.end142
                                        #   in Loop: Header=BB68_22 Depth=1
	leaq	-368(%rbp), %rdi
	movl	%eax, -104(%rbp)
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB68_61
# %bb.60:                               # %if.then147
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-104(%rbp), %eax
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB68_61:                              # %if.end148
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_221
.LBB68_62:                              # %if.else
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_90
# %bb.63:                               # %if.then150
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_64:                              # %for.cond151
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_66 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_71
# %bb.65:                               # %for.body154
                                        #   in Loop: Header=BB68_64 Depth=2
	movl	$0, -12(%rbp)
.LBB68_66:                              # %for.cond155
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_64 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_69
# %bb.67:                               # %for.body158
                                        #   in Loop: Header=BB68_66 Depth=3
	movq	img, %rax
	addq	$184, %rax
	movslq	-44(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.68:                               # %for.inc192
                                        #   in Loop: Header=BB68_66 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_66
.LBB68_69:                              # %for.end194
                                        #   in Loop: Header=BB68_64 Depth=2
	jmp	.LBB68_70
.LBB68_70:                              # %for.inc195
                                        #   in Loop: Header=BB68_64 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_64
.LBB68_71:                              # %for.end197
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_89
# %bb.72:                               # %if.then201
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_73:                              # %for.cond202
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_75 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB68_80
# %bb.74:                               # %for.body205
                                        #   in Loop: Header=BB68_73 Depth=2
	movl	$0, -12(%rbp)
.LBB68_75:                              # %for.cond206
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_73 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB68_78
# %bb.76:                               # %for.body209
                                        #   in Loop: Header=BB68_75 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.77:                               # %for.inc222
                                        #   in Loop: Header=BB68_75 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_75
.LBB68_78:                              # %for.end224
                                        #   in Loop: Header=BB68_73 Depth=2
	jmp	.LBB68_79
.LBB68_79:                              # %for.inc225
                                        #   in Loop: Header=BB68_73 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_73
.LBB68_80:                              # %for.end227
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -20(%rbp)
.LBB68_81:                              # %for.cond228
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_83 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB68_88
# %bb.82:                               # %for.body231
                                        #   in Loop: Header=BB68_81 Depth=2
	movl	$0, -24(%rbp)
.LBB68_83:                              # %for.cond232
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_81 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB68_86
# %bb.84:                               # %for.body235
                                        #   in Loop: Header=BB68_83 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.85:                               # %for.inc247
                                        #   in Loop: Header=BB68_83 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_83
.LBB68_86:                              # %for.end249
                                        #   in Loop: Header=BB68_81 Depth=2
	jmp	.LBB68_87
.LBB68_87:                              # %for.inc250
                                        #   in Loop: Header=BB68_81 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_81
.LBB68_88:                              # %for.end252
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB68_89:                              # %if.end253
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	cs_cm, %rdi
	callq	reset_coding_state
	jmp	.LBB68_220
.LBB68_90:                              # %if.else254
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_91:                              # %for.cond255
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_93 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_98
# %bb.92:                               # %for.body258
                                        #   in Loop: Header=BB68_91 Depth=2
	movl	$0, -12(%rbp)
.LBB68_93:                              # %for.cond259
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_91 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_96
# %bb.94:                               # %for.body262
                                        #   in Loop: Header=BB68_93 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.95:                               # %for.inc343
                                        #   in Loop: Header=BB68_93 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_93
.LBB68_96:                              # %for.end345
                                        #   in Loop: Header=BB68_91 Depth=2
	jmp	.LBB68_97
.LBB68_97:                              # %for.inc346
                                        #   in Loop: Header=BB68_91 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_91
.LBB68_98:                              # %for.end348
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_99:                              # %for.cond349
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_101 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_106
# %bb.100:                              # %for.body352
                                        #   in Loop: Header=BB68_99 Depth=2
	movl	$0, -12(%rbp)
.LBB68_101:                             # %for.cond353
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_99 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_104
# %bb.102:                              # %for.body356
                                        #   in Loop: Header=BB68_101 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.103:                              # %for.inc366
                                        #   in Loop: Header=BB68_101 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_101
.LBB68_104:                             # %for.end368
                                        #   in Loop: Header=BB68_99 Depth=2
	jmp	.LBB68_105
.LBB68_105:                             # %for.inc369
                                        #   in Loop: Header=BB68_99 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_99
.LBB68_106:                             # %for.end371
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-44(%rbp), %ecx
	vmovsd	-144(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	movl	-100(%rbp), %r8d
	leaq	-116(%rbp), %rdi
	callq	RDCost_for_4x4IntraBlocks
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB68_107:                             # %for.cond374
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_109 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_114
# %bb.108:                              # %for.body377
                                        #   in Loop: Header=BB68_107 Depth=2
	movl	$0, -12(%rbp)
.LBB68_109:                             # %for.cond378
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_107 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_112
# %bb.110:                              # %for.body381
                                        #   in Loop: Header=BB68_109 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.111:                              # %for.inc400
                                        #   in Loop: Header=BB68_109 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_109
.LBB68_112:                             # %for.end402
                                        #   in Loop: Header=BB68_107 Depth=2
	jmp	.LBB68_113
.LBB68_113:                             # %for.inc403
                                        #   in Loop: Header=BB68_107 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_107
.LBB68_114:                             # %for.end405
                                        #   in Loop: Header=BB68_22 Depth=1
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-32(%rbp), %edi
	addl	$4, %edi
	movl	-28(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB68_115:                             # %for.cond409
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_117 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_122
# %bb.116:                              # %for.body412
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	$0, -12(%rbp)
.LBB68_117:                             # %for.cond413
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_115 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_120
# %bb.118:                              # %for.body416
                                        #   in Loop: Header=BB68_117 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.119:                              # %for.inc435
                                        #   in Loop: Header=BB68_117 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_117
.LBB68_120:                             # %for.end437
                                        #   in Loop: Header=BB68_115 Depth=2
	jmp	.LBB68_121
.LBB68_121:                             # %for.inc438
                                        #   in Loop: Header=BB68_115 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_115
.LBB68_122:                             # %for.end440
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-32(%rbp), %edi
	addl	$8, %edi
	movl	-28(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	$0, -16(%rbp)
.LBB68_123:                             # %for.cond444
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_125 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_130
# %bb.124:                              # %for.body447
                                        #   in Loop: Header=BB68_123 Depth=2
	movl	$0, -12(%rbp)
.LBB68_125:                             # %for.cond448
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_123 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_128
# %bb.126:                              # %for.body451
                                        #   in Loop: Header=BB68_125 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.127:                              # %for.inc461
                                        #   in Loop: Header=BB68_125 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_125
.LBB68_128:                             # %for.end463
                                        #   in Loop: Header=BB68_123 Depth=2
	jmp	.LBB68_129
.LBB68_129:                             # %for.inc464
                                        #   in Loop: Header=BB68_123 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_123
.LBB68_130:                             # %for.end466
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_131:                             # %for.cond467
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_133 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB68_165
# %bb.132:                              # %for.body470
                                        #   in Loop: Header=BB68_131 Depth=2
	movl	$0, -12(%rbp)
.LBB68_133:                             # %for.cond471
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_131 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB68_163
# %bb.134:                              # %for.body474
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB68_136
# %bb.135:                              # %cond.true515
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB68_137
.LBB68_136:                             # %cond.false516
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB68_137:                             # %cond.end529
                                        #   in Loop: Header=BB68_133 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB68_139
# %bb.138:                              # %cond.true533
                                        #   in Loop: Header=BB68_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_143
.LBB68_139:                             # %cond.false535
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_141
# %bb.140:                              # %cond.true550
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB68_142
.LBB68_141:                             # %cond.false551
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_142:                             # %cond.end564
                                        #   in Loop: Header=BB68_133 Depth=3
.LBB68_143:                             # %cond.end566
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-44(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_145
# %bb.144:                              # %cond.true587
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB68_146
.LBB68_145:                             # %cond.false588
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_146:                             # %cond.end598
                                        #   in Loop: Header=BB68_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB68_148
# %bb.147:                              # %cond.true602
                                        #   in Loop: Header=BB68_133 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_152
.LBB68_148:                             # %cond.false604
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-44(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_150
# %bb.149:                              # %cond.true616
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB68_151
.LBB68_150:                             # %cond.false617
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_151:                             # %cond.end627
                                        #   in Loop: Header=BB68_133 Depth=3
.LBB68_152:                             # %cond.end629
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_154
# %bb.153:                              # %cond.true654
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB68_155
.LBB68_154:                             # %cond.false655
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_155:                             # %cond.end668
                                        #   in Loop: Header=BB68_133 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB68_157
# %bb.156:                              # %cond.true672
                                        #   in Loop: Header=BB68_133 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_161
.LBB68_157:                             # %cond.false674
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_159
# %bb.158:                              # %cond.true689
                                        #   in Loop: Header=BB68_133 Depth=3
	xorl	%eax, %eax
	jmp	.LBB68_160
.LBB68_159:                             # %cond.false690
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_160:                             # %cond.end703
                                        #   in Loop: Header=BB68_133 Depth=3
.LBB68_161:                             # %cond.end705
                                        #   in Loop: Header=BB68_133 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.162:                              # %for.inc716
                                        #   in Loop: Header=BB68_133 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_133
.LBB68_163:                             # %for.end718
                                        #   in Loop: Header=BB68_131 Depth=2
	jmp	.LBB68_164
.LBB68_164:                             # %for.inc719
                                        #   in Loop: Header=BB68_131 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_131
.LBB68_165:                             # %for.end721
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -88(%rbp)
	movl	$0, -20(%rbp)
.LBB68_166:                             # %for.cond722
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_168 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB68_173
# %bb.167:                              # %for.body725
                                        #   in Loop: Header=BB68_166 Depth=2
	movl	-64(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB68_168:                             # %for.cond726
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_166 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB68_171
# %bb.169:                              # %for.body730
                                        #   in Loop: Header=BB68_168 Depth=3
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgY_org, %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
# %bb.170:                              # %for.inc829
                                        #   in Loop: Header=BB68_168 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_168
.LBB68_171:                             # %for.end831
                                        #   in Loop: Header=BB68_166 Depth=2
	jmp	.LBB68_172
.LBB68_172:                             # %for.inc832
                                        #   in Loop: Header=BB68_166 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_166
.LBB68_173:                             # %for.end834
                                        #   in Loop: Header=BB68_22 Depth=1
	vcvtsi2sdl	-88(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-92(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -136(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-128(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	jbe	.LBB68_219
# %bb.174:                              # %if.then841
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_175:                             # %for.cond842
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_177 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB68_182
# %bb.176:                              # %for.body845
                                        #   in Loop: Header=BB68_175 Depth=2
	movl	$0, -12(%rbp)
.LBB68_177:                             # %for.cond846
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_175 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB68_180
# %bb.178:                              # %for.body849
                                        #   in Loop: Header=BB68_177 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC4x4, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.179:                              # %for.inc863
                                        #   in Loop: Header=BB68_177 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_177
.LBB68_180:                             # %for.end865
                                        #   in Loop: Header=BB68_175 Depth=2
	jmp	.LBB68_181
.LBB68_181:                             # %for.inc866
                                        #   in Loop: Header=BB68_175 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_175
.LBB68_182:                             # %for.end868
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_183:                             # %for.cond869
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_185 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB68_190
# %bb.184:                              # %for.body872
                                        #   in Loop: Header=BB68_183 Depth=2
	movl	$0, -12(%rbp)
.LBB68_185:                             # %for.cond873
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_183 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB68_188
# %bb.186:                              # %for.body876
                                        #   in Loop: Header=BB68_185 Depth=3
	movq	img, %rax
	movq	14136(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	movabsq	$cofAC4x4_chroma, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.187:                              # %for.inc891
                                        #   in Loop: Header=BB68_185 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_185
.LBB68_188:                             # %for.end893
                                        #   in Loop: Header=BB68_183 Depth=2
	jmp	.LBB68_189
.LBB68_189:                             # %for.inc894
                                        #   in Loop: Header=BB68_183 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_183
.LBB68_190:                             # %for.end896
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -16(%rbp)
.LBB68_191:                             # %for.cond897
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_193 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB68_198
# %bb.192:                              # %for.body900
                                        #   in Loop: Header=BB68_191 Depth=2
	movl	$0, -12(%rbp)
.LBB68_193:                             # %for.cond901
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_191 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -12(%rbp)
	jge	.LBB68_196
# %bb.194:                              # %for.body904
                                        #   in Loop: Header=BB68_193 Depth=3
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movslq	-16(%rbp), %rdx
	imulq	$72, %rdx, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.195:                              # %for.inc919
                                        #   in Loop: Header=BB68_193 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_193
.LBB68_196:                             # %for.end921
                                        #   in Loop: Header=BB68_191 Depth=2
	jmp	.LBB68_197
.LBB68_197:                             # %for.inc922
                                        #   in Loop: Header=BB68_191 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_191
.LBB68_198:                             # %for.end924
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -12(%rbp)
.LBB68_199:                             # %for.cond925
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_201 Depth 3
                                        #         Child Loop BB68_203 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB68_210
# %bb.200:                              # %for.body928
                                        #   in Loop: Header=BB68_199 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %edi
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%edi, (%rbx,%rax,4)
	movl	$0, -20(%rbp)
.LBB68_201:                             # %for.cond985
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_199 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_203 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB68_208
# %bb.202:                              # %for.body988
                                        #   in Loop: Header=BB68_201 Depth=3
	movl	$0, -24(%rbp)
.LBB68_203:                             # %for.cond989
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_199 Depth=2
                                        #       Parent Loop BB68_201 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -24(%rbp)
	jge	.LBB68_206
# %bb.204:                              # %for.body992
                                        #   in Loop: Header=BB68_203 Depth=4
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-496(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.205:                              # %for.inc1009
                                        #   in Loop: Header=BB68_203 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_203
.LBB68_206:                             # %for.end1011
                                        #   in Loop: Header=BB68_201 Depth=3
	jmp	.LBB68_207
.LBB68_207:                             # %for.inc1012
                                        #   in Loop: Header=BB68_201 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_201
.LBB68_208:                             # %for.end1014
                                        #   in Loop: Header=BB68_199 Depth=2
	jmp	.LBB68_209
.LBB68_209:                             # %for.inc1015
                                        #   in Loop: Header=BB68_199 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_199
.LBB68_210:                             # %for.end1017
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	$0, -20(%rbp)
.LBB68_211:                             # %for.cond1018
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_213 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB68_218
# %bb.212:                              # %for.body1021
                                        #   in Loop: Header=BB68_211 Depth=2
	movl	$0, -24(%rbp)
.LBB68_213:                             # %for.cond1022
                                        #   Parent Loop BB68_22 Depth=1
                                        #     Parent Loop BB68_211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB68_216
# %bb.214:                              # %for.body1025
                                        #   in Loop: Header=BB68_213 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movl	-48(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-64(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-20(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-304(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.215:                              # %for.inc1038
                                        #   in Loop: Header=BB68_213 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_213
.LBB68_216:                             # %for.end1040
                                        #   in Loop: Header=BB68_211 Depth=2
	jmp	.LBB68_217
.LBB68_217:                             # %for.inc1041
                                        #   in Loop: Header=BB68_211 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_211
.LBB68_218:                             # %for.end1043
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-116(%rbp), %eax
	movl	%eax, -96(%rbp)
	vmovsd	-136(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB68_219:                             # %if.end1044
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_220
.LBB68_220:                             # %if.end1045
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_221
.LBB68_221:                             # %if.end1046
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_222
.LBB68_222:                             # %if.end1047
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_223
.LBB68_223:                             # %for.inc1048
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB68_22
.LBB68_224:                             # %for.end1050
	movl	-60(%rbp), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-180(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-164(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-100(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jne	.LBB68_226
# %bb.225:                              # %cond.true1058
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB68_230
.LBB68_226:                             # %cond.false1059
	movl	-60(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB68_228
# %bb.227:                              # %cond.true1062
	movl	-60(%rbp), %eax
	jmp	.LBB68_229
.LBB68_228:                             # %cond.false1063
	movl	-60(%rbp), %eax
	subl	$1, %eax
.LBB68_229:                             # %cond.end1065
.LBB68_230:                             # %cond.end1067
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movl	-32(%rbp), %edx
	shll	$2, %edx
	addl	-28(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, 332(%rcx,%rdx,4)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB68_318
# %bb.231:                              # %if.then1079
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB68_241
# %bb.232:                              # %if.then1082
	movl	$0, -16(%rbp)
.LBB68_233:                             # %for.cond1083
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_235 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_240
# %bb.234:                              # %for.body1086
                                        #   in Loop: Header=BB68_233 Depth=1
	movl	$0, -12(%rbp)
.LBB68_235:                             # %for.cond1087
                                        #   Parent Loop BB68_233 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_238
# %bb.236:                              # %for.body1090
                                        #   in Loop: Header=BB68_235 Depth=2
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.237:                              # %for.inc1126
                                        #   in Loop: Header=BB68_235 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_235
.LBB68_238:                             # %for.end1128
                                        #   in Loop: Header=BB68_233 Depth=1
	jmp	.LBB68_239
.LBB68_239:                             # %for.inc1129
                                        #   in Loop: Header=BB68_233 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_233
.LBB68_240:                             # %for.end1131
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-156(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	jmp	.LBB68_317
.LBB68_241:                             # %if.else1133
	movl	$0, -16(%rbp)
.LBB68_242:                             # %for.cond1134
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_244 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_249
# %bb.243:                              # %for.body1137
                                        #   in Loop: Header=BB68_242 Depth=1
	movl	$0, -12(%rbp)
.LBB68_244:                             # %for.cond1138
                                        #   Parent Loop BB68_242 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_247
# %bb.245:                              # %for.body1141
                                        #   in Loop: Header=BB68_244 Depth=2
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movq	imgY_org, %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movl	-80(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	subl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-56(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	subl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.246:                              # %for.inc1224
                                        #   in Loop: Header=BB68_244 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_244
.LBB68_247:                             # %for.end1226
                                        #   in Loop: Header=BB68_242 Depth=1
	jmp	.LBB68_248
.LBB68_248:                             # %for.inc1227
                                        #   in Loop: Header=BB68_242 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_242
.LBB68_249:                             # %for.end1229
	movl	$0, -16(%rbp)
.LBB68_250:                             # %for.cond1230
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_252 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_257
# %bb.251:                              # %for.body1233
                                        #   in Loop: Header=BB68_250 Depth=1
	movl	$0, -12(%rbp)
.LBB68_252:                             # %for.cond1234
                                        #   Parent Loop BB68_250 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_255
# %bb.253:                              # %for.body1237
                                        #   in Loop: Header=BB68_252 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.254:                              # %for.inc1247
                                        #   in Loop: Header=BB68_252 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_252
.LBB68_255:                             # %for.end1249
                                        #   in Loop: Header=BB68_250 Depth=1
	jmp	.LBB68_256
.LBB68_256:                             # %for.inc1250
                                        #   in Loop: Header=BB68_250 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_250
.LBB68_257:                             # %for.end1252
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-156(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movl	%eax, -96(%rbp)
	movl	$0, -16(%rbp)
.LBB68_258:                             # %for.cond1254
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_260 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_265
# %bb.259:                              # %for.body1257
                                        #   in Loop: Header=BB68_258 Depth=1
	movl	$0, -12(%rbp)
.LBB68_260:                             # %for.cond1258
                                        #   Parent Loop BB68_258 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_263
# %bb.261:                              # %for.body1261
                                        #   in Loop: Header=BB68_260 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.262:                              # %for.inc1280
                                        #   in Loop: Header=BB68_260 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_260
.LBB68_263:                             # %for.end1282
                                        #   in Loop: Header=BB68_258 Depth=1
	jmp	.LBB68_264
.LBB68_264:                             # %for.inc1283
                                        #   in Loop: Header=BB68_258 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_258
.LBB68_265:                             # %for.end1285
	movl	-32(%rbp), %esi
	addl	$4, %esi
	movl	-28(%rbp), %edx
	xorl	%edi, %edi
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	movabsq	$cbp_chroma_block, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rbx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level_temp, %rsi
	addq	%rax, %rsi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rsi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movabsq	$dc_level, %rbx
	addq	%rax, %rbx
	movl	-32(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%rbx,%rax,4)
	movl	$0, -16(%rbp)
.LBB68_266:                             # %for.cond1324
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_268 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_273
# %bb.267:                              # %for.body1327
                                        #   in Loop: Header=BB68_266 Depth=1
	movl	$0, -12(%rbp)
.LBB68_268:                             # %for.cond1328
                                        #   Parent Loop BB68_266 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_271
# %bb.269:                              # %for.body1331
                                        #   in Loop: Header=BB68_268 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.270:                              # %for.inc1350
                                        #   in Loop: Header=BB68_268 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_268
.LBB68_271:                             # %for.end1352
                                        #   in Loop: Header=BB68_266 Depth=1
	jmp	.LBB68_272
.LBB68_272:                             # %for.inc1353
                                        #   in Loop: Header=BB68_266 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_266
.LBB68_273:                             # %for.end1355
	movl	-32(%rbp), %esi
	addl	$8, %esi
	movl	-28(%rbp), %edx
	movl	$1, %edi
	callq	dct_chroma4x4
	movl	%eax, %r9d
	movabsq	$dc_level, %r8
	addq	$64, %r8
	movabsq	$dc_level_temp, %rdi
	addq	$64, %rdi
	movabsq	$cbp_chroma_block, %rcx
	addq	$64, %rcx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%r9d, (%rcx,%rax,4)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	(%rdi,%rax,4), %esi
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-32(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	%esi, (%r8,%rax,4)
	movl	$0, -16(%rbp)
.LBB68_274:                             # %for.cond1394
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_276 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_281
# %bb.275:                              # %for.body1397
                                        #   in Loop: Header=BB68_274 Depth=1
	movl	$0, -12(%rbp)
.LBB68_276:                             # %for.cond1398
                                        #   Parent Loop BB68_274 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_279
# %bb.277:                              # %for.body1401
                                        #   in Loop: Header=BB68_276 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.278:                              # %for.inc1411
                                        #   in Loop: Header=BB68_276 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_276
.LBB68_279:                             # %for.end1413
                                        #   in Loop: Header=BB68_274 Depth=1
	jmp	.LBB68_280
.LBB68_280:                             # %for.inc1414
                                        #   in Loop: Header=BB68_274 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_274
.LBB68_281:                             # %for.end1416
	movl	$0, -16(%rbp)
.LBB68_282:                             # %for.cond1417
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_284 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB68_316
# %bb.283:                              # %for.body1420
                                        #   in Loop: Header=BB68_282 Depth=1
	movl	$0, -12(%rbp)
.LBB68_284:                             # %for.cond1421
                                        #   Parent Loop BB68_282 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB68_314
# %bb.285:                              # %for.body1424
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -76(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-76(%rbp), %ecx
	movl	%ecx, -68(%rbp)
	movl	-76(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-16(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -56(%rbp)
	movl	-56(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -72(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-56(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB68_287
# %bb.286:                              # %cond.true1466
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_288
.LBB68_287:                             # %cond.false1467
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB68_288:                             # %cond.end1480
                                        #   in Loop: Header=BB68_284 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB68_290
# %bb.289:                              # %cond.true1484
                                        #   in Loop: Header=BB68_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_294
.LBB68_290:                             # %cond.false1486
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	movl	-56(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_292
# %bb.291:                              # %cond.true1501
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_293
.LBB68_292:                             # %cond.false1502
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-56(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_293:                             # %cond.end1515
                                        #   in Loop: Header=BB68_284 Depth=2
.LBB68_294:                             # %cond.end1517
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-68(%rbp), %edx
	movq	img, %rsi
	addq	$184, %rsi
	movslq	-60(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-16(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-12(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_296
# %bb.295:                              # %cond.true1540
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_297
.LBB68_296:                             # %cond.false1541
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_297:                             # %cond.end1551
                                        #   in Loop: Header=BB68_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_299
# %bb.298:                              # %cond.true1555
                                        #   in Loop: Header=BB68_284 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB68_303
.LBB68_299:                             # %cond.false1557
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	movl	-68(%rbp), %ecx
	movq	img, %rdx
	addq	$184, %rdx
	movslq	-60(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_301
# %bb.300:                              # %cond.true1569
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_302
.LBB68_301:                             # %cond.false1570
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	addq	$184, %rcx
	movslq	-60(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_302:                             # %cond.end1580
                                        #   in Loop: Header=BB68_284 Depth=2
.LBB68_303:                             # %cond.end1582
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-48(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-64(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-72(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-52(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movl	-40(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movl	-36(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB68_305
# %bb.304:                              # %cond.true1607
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB68_306
.LBB68_305:                             # %cond.false1608
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB68_306:                             # %cond.end1621
                                        #   in Loop: Header=BB68_284 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB68_308
# %bb.307:                              # %cond.true1625
                                        #   in Loop: Header=BB68_284 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB68_312
.LBB68_308:                             # %cond.false1627
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	movl	-72(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-52(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movl	-40(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movl	-36(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB68_310
# %bb.309:                              # %cond.true1642
                                        #   in Loop: Header=BB68_284 Depth=2
	xorl	%eax, %eax
	jmp	.LBB68_311
.LBB68_310:                             # %cond.false1643
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movl	-40(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB68_311:                             # %cond.end1656
                                        #   in Loop: Header=BB68_284 Depth=2
.LBB68_312:                             # %cond.end1658
                                        #   in Loop: Header=BB68_284 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.313:                              # %for.inc1669
                                        #   in Loop: Header=BB68_284 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_284
.LBB68_314:                             # %for.end1671
                                        #   in Loop: Header=BB68_282 Depth=1
	jmp	.LBB68_315
.LBB68_315:                             # %for.inc1672
                                        #   in Loop: Header=BB68_282 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_282
.LBB68_316:                             # %for.end1674
	jmp	.LBB68_317
.LBB68_317:                             # %if.end1675
	jmp	.LBB68_367
.LBB68_318:                             # %if.else1676
	movl	$0, -16(%rbp)
.LBB68_319:                             # %for.cond1677
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_321 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB68_326
# %bb.320:                              # %for.body1680
                                        #   in Loop: Header=BB68_319 Depth=1
	movl	$0, -12(%rbp)
.LBB68_321:                             # %for.cond1681
                                        #   Parent Loop BB68_319 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB68_324
# %bb.322:                              # %for.body1684
                                        #   in Loop: Header=BB68_321 Depth=2
	movq	cofAC4x4, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-32(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.323:                              # %for.inc1698
                                        #   in Loop: Header=BB68_321 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_321
.LBB68_324:                             # %for.end1700
                                        #   in Loop: Header=BB68_319 Depth=1
	jmp	.LBB68_325
.LBB68_325:                             # %for.inc1701
                                        #   in Loop: Header=BB68_319 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_319
.LBB68_326:                             # %for.end1703
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_344
# %bb.327:                              # %if.then1706
	movl	$0, -16(%rbp)
.LBB68_328:                             # %for.cond1707
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_330 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB68_335
# %bb.329:                              # %for.body1710
                                        #   in Loop: Header=BB68_328 Depth=1
	movl	$0, -12(%rbp)
.LBB68_330:                             # %for.cond1711
                                        #   Parent Loop BB68_328 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB68_333
# %bb.331:                              # %for.body1714
                                        #   in Loop: Header=BB68_330 Depth=2
	movslq	-16(%rbp), %rax
	imulq	$72, %rax, %rax
	movabsq	$cofAC4x4_chroma, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.332:                              # %for.inc1729
                                        #   in Loop: Header=BB68_330 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_330
.LBB68_333:                             # %for.end1731
                                        #   in Loop: Header=BB68_328 Depth=1
	jmp	.LBB68_334
.LBB68_334:                             # %for.inc1732
                                        #   in Loop: Header=BB68_328 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_328
.LBB68_335:                             # %for.end1734
	movl	$0, -16(%rbp)
.LBB68_336:                             # %for.cond1735
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_338 Depth 2
	cmpl	$2, -16(%rbp)
	jge	.LBB68_343
# %bb.337:                              # %for.body1738
                                        #   in Loop: Header=BB68_336 Depth=1
	movl	$0, -12(%rbp)
.LBB68_338:                             # %for.cond1739
                                        #   Parent Loop BB68_336 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$18, -12(%rbp)
	jge	.LBB68_341
# %bb.339:                              # %for.body1742
                                        #   in Loop: Header=BB68_338 Depth=2
	movabsq	$cofAC4x4_chroma, %rax
	addq	$144, %rax
	movslq	-16(%rbp), %rcx
	imulq	$72, %rcx, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	$8, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.340:                              # %for.inc1757
                                        #   in Loop: Header=BB68_338 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_338
.LBB68_341:                             # %for.end1759
                                        #   in Loop: Header=BB68_336 Depth=1
	jmp	.LBB68_342
.LBB68_342:                             # %for.inc1760
                                        #   in Loop: Header=BB68_336 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_336
.LBB68_343:                             # %for.end1762
	jmp	.LBB68_344
.LBB68_344:                             # %if.end1763
	movl	$0, -20(%rbp)
.LBB68_345:                             # %for.cond1764
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_347 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB68_352
# %bb.346:                              # %for.body1767
                                        #   in Loop: Header=BB68_345 Depth=1
	movl	$0, -24(%rbp)
.LBB68_347:                             # %for.cond1768
                                        #   Parent Loop BB68_345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB68_350
# %bb.348:                              # %for.body1771
                                        #   in Loop: Header=BB68_347 Depth=2
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	leaq	-304(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	addq	$184, %rax
	movslq	-60(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-40(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-36(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.349:                              # %for.inc1798
                                        #   in Loop: Header=BB68_347 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_347
.LBB68_350:                             # %for.end1800
                                        #   in Loop: Header=BB68_345 Depth=1
	jmp	.LBB68_351
.LBB68_351:                             # %for.inc1801
                                        #   in Loop: Header=BB68_345 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_345
.LBB68_352:                             # %for.end1803
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB68_366
# %bb.353:                              # %if.then1806
	movl	$0, -12(%rbp)
.LBB68_354:                             # %for.cond1807
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_356 Depth 2
                                        #       Child Loop BB68_358 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB68_365
# %bb.355:                              # %for.body1810
                                        #   in Loop: Header=BB68_354 Depth=1
	movl	$0, -20(%rbp)
.LBB68_356:                             # %for.cond1811
                                        #   Parent Loop BB68_354 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_358 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB68_363
# %bb.357:                              # %for.body1814
                                        #   in Loop: Header=BB68_356 Depth=2
	movl	$0, -24(%rbp)
.LBB68_358:                             # %for.cond1815
                                        #   Parent Loop BB68_354 Depth=1
                                        #     Parent Loop BB68_356 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB68_361
# %bb.359:                              # %for.body1818
                                        #   in Loop: Header=BB68_358 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	leaq	-496(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-48(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.360:                              # %for.inc1835
                                        #   in Loop: Header=BB68_358 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB68_358
.LBB68_361:                             # %for.end1837
                                        #   in Loop: Header=BB68_356 Depth=2
	jmp	.LBB68_362
.LBB68_362:                             # %for.inc1838
                                        #   in Loop: Header=BB68_356 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB68_356
.LBB68_363:                             # %for.end1840
                                        #   in Loop: Header=BB68_354 Depth=1
	jmp	.LBB68_364
.LBB68_364:                             # %for.inc1841
                                        #   in Loop: Header=BB68_354 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_354
.LBB68_365:                             # %for.end1843
	jmp	.LBB68_366
.LBB68_366:                             # %if.end1844
	jmp	.LBB68_367
.LBB68_367:                             # %if.end1845
	movl	-96(%rbp), %ebx
	cmpl	$638793279, -172(%rbp)  # imm = 0x2613363F
	jne	.LBB68_369
.LBB68_368:
	movl	%ebx, %eax
	addq	$488, %rsp              # imm = 0x1E8
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_369:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_368
.Lfunc_end68:
	.size	Mode_Decision_for_4x4IntraBlocks.39, .Lfunc_end68-Mode_Decision_for_4x4IntraBlocks.39
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.40 # -- Begin function SetRefAndMotionVectors.40
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.40,@function
SetRefAndMotionVectors.40:              # @SetRefAndMotionVectors.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1961165461, -72(%rbp)  # imm = 0x74E50295
	movl	%edi, -48(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB69_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB69_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB69_4
.LBB69_3:                               # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB69_5
.LBB69_4:                               # %cond.false
	movl	$4, %eax
	jmp	.LBB69_5
.LBB69_5:                               # %cond.end
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-52(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB69_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB69_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB69_9
.LBB69_8:                               # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB69_9
.LBB69_9:                               # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB69_19
# %bb.10:                               # %if.then
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_11:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB69_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_13:                              # %for.cond34
                                        #   Parent Loop BB69_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB69_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB69_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_13
.LBB69_16:                              # %for.end
                                        #   in Loop: Header=BB69_11 Depth=1
	jmp	.LBB69_17
.LBB69_17:                              # %for.inc117
                                        #   in Loop: Header=BB69_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_11
.LBB69_18:                              # %for.end119
	jmp	.LBB69_64
.LBB69_19:                              # %if.end
	cmpl	$0, -68(%rbp)
	jne	.LBB69_29
# %bb.20:                               # %if.then121
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_21:                              # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB69_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_23:                              # %for.cond126
                                        #   Parent Loop BB69_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB69_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB69_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_23
.LBB69_26:                              # %for.end211
                                        #   in Loop: Header=BB69_21 Depth=1
	jmp	.LBB69_27
.LBB69_27:                              # %for.inc212
                                        #   in Loop: Header=BB69_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_21
.LBB69_28:                              # %for.end214
	jmp	.LBB69_64
.LBB69_29:                              # %if.else
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_30:                              # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB69_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB69_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_32:                              # %for.cond219
                                        #   Parent Loop BB69_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB69_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB69_35:                              # %if.end255
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB69_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB69_46
.LBB69_37:                              # %if.then261
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB69_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB69_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB69_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB69_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB69_43
.LBB69_42:                              # %cond.false274
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB69_43:                              # %cond.end275
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB69_45
.LBB69_44:                              # %if.else342
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB69_45:                              # %if.end424
                                        #   in Loop: Header=BB69_32 Depth=2
	jmp	.LBB69_47
.LBB69_46:                              # %if.else425
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB69_47:                              # %if.end468
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB69_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB69_58
.LBB69_49:                              # %if.then474
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB69_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB69_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB69_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB69_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB69_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB69_55
.LBB69_54:                              # %cond.false490
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB69_55:                              # %cond.end492
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB69_57
.LBB69_56:                              # %if.else559
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB69_57:                              # %if.end641
                                        #   in Loop: Header=BB69_32 Depth=2
	jmp	.LBB69_59
.LBB69_58:                              # %if.else642
                                        #   in Loop: Header=BB69_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB69_59:                              # %if.end685
                                        #   in Loop: Header=BB69_32 Depth=2
	jmp	.LBB69_60
.LBB69_60:                              # %for.inc686
                                        #   in Loop: Header=BB69_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_32
.LBB69_61:                              # %for.end688
                                        #   in Loop: Header=BB69_30 Depth=1
	jmp	.LBB69_62
.LBB69_62:                              # %for.inc689
                                        #   in Loop: Header=BB69_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_30
.LBB69_63:                              # %for.end691
	jmp	.LBB69_64
.LBB69_64:                              # %if.end692
	cmpl	$1961165461, -72(%rbp)  # imm = 0x74E50295
	jne	.LBB69_66
.LBB69_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_66:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_65
.Lfunc_end69:
	.size	SetRefAndMotionVectors.40, .Lfunc_end69-SetRefAndMotionVectors.40
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.41 # -- Begin function set_stored_macroblock_parameters.41
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.41,@function
set_stored_macroblock_parameters.41:    # @set_stored_macroblock_parameters.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1269496032, -52(%rbp)  # imm = 0x4BAAF8E0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB70_4
.LBB70_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB70_4
.LBB70_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB70_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	$0, -4(%rbp)
.LBB70_7:                               # %for.cond9
                                        #   Parent Loop BB70_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB70_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB70_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB70_10:                              # %if.end
                                        #   in Loop: Header=BB70_7 Depth=2
	jmp	.LBB70_11
.LBB70_11:                              # %for.inc
                                        #   in Loop: Header=BB70_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_7
.LBB70_12:                              # %for.end
                                        #   in Loop: Header=BB70_5 Depth=1
	jmp	.LBB70_13
.LBB70_13:                              # %for.inc33
                                        #   in Loop: Header=BB70_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_5
.LBB70_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB70_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB70_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB70_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB70_16 Depth=1
	movl	$0, -4(%rbp)
.LBB70_18:                              # %for.cond43
                                        #   Parent Loop BB70_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB70_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB70_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB70_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB70_21:                              # %if.end92
                                        #   in Loop: Header=BB70_18 Depth=2
	jmp	.LBB70_22
.LBB70_22:                              # %for.inc93
                                        #   in Loop: Header=BB70_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_18
.LBB70_23:                              # %for.end95
                                        #   in Loop: Header=BB70_16 Depth=1
	jmp	.LBB70_24
.LBB70_24:                              # %for.inc96
                                        #   in Loop: Header=BB70_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_16
.LBB70_25:                              # %for.end98
	jmp	.LBB70_26
.LBB70_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB70_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_30 Depth 2
                                        #       Child Loop BB70_32 Depth 3
                                        #         Child Loop BB70_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB70_28 Depth=1
	movl	$0, -8(%rbp)
.LBB70_30:                              # %for.cond118
                                        #   Parent Loop BB70_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_32 Depth 3
                                        #         Child Loop BB70_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB70_30 Depth=2
	movl	$0, -12(%rbp)
.LBB70_32:                              # %for.cond122
                                        #   Parent Loop BB70_28 Depth=1
                                        #     Parent Loop BB70_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB70_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB70_32 Depth=3
	movl	$0, -28(%rbp)
.LBB70_34:                              # %for.cond126
                                        #   Parent Loop BB70_28 Depth=1
                                        #     Parent Loop BB70_30 Depth=2
                                        #       Parent Loop BB70_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB70_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB70_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB70_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB70_34
.LBB70_37:                              # %for.end150
                                        #   in Loop: Header=BB70_32 Depth=3
	jmp	.LBB70_38
.LBB70_38:                              # %for.inc151
                                        #   in Loop: Header=BB70_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_32
.LBB70_39:                              # %for.end153
                                        #   in Loop: Header=BB70_30 Depth=2
	jmp	.LBB70_40
.LBB70_40:                              # %for.inc154
                                        #   in Loop: Header=BB70_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_30
.LBB70_41:                              # %for.end156
                                        #   in Loop: Header=BB70_28 Depth=1
	jmp	.LBB70_42
.LBB70_42:                              # %for.inc157
                                        #   in Loop: Header=BB70_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_28
.LBB70_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB70_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_46 Depth 2
                                        #       Child Loop BB70_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB70_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB70_44 Depth=1
	movl	$0, -12(%rbp)
.LBB70_46:                              # %for.cond164
                                        #   Parent Loop BB70_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB70_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB70_46 Depth=2
	movl	$0, -28(%rbp)
.LBB70_48:                              # %for.cond168
                                        #   Parent Loop BB70_44 Depth=1
                                        #     Parent Loop BB70_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB70_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB70_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB70_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB70_48
.LBB70_51:                              # %for.end188
                                        #   in Loop: Header=BB70_46 Depth=2
	jmp	.LBB70_52
.LBB70_52:                              # %for.inc189
                                        #   in Loop: Header=BB70_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_46
.LBB70_53:                              # %for.end191
                                        #   in Loop: Header=BB70_44 Depth=1
	jmp	.LBB70_54
.LBB70_54:                              # %for.inc192
                                        #   in Loop: Header=BB70_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_44
.LBB70_55:                              # %for.end194
	jmp	.LBB70_56
.LBB70_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB70_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB70_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB70_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB70_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB70_60:                              # %if.end225
                                        #   in Loop: Header=BB70_57 Depth=1
	jmp	.LBB70_61
.LBB70_61:                              # %for.inc226
                                        #   in Loop: Header=BB70_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_57
.LBB70_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB70_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB70_65
.LBB70_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB70_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB70_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB70_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB70_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB70_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB70_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB70_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB70_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB70_74
.LBB70_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB70_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB70_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB70_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB70_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB70_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB70_78 Depth=1
	movl	$0, -4(%rbp)
.LBB70_80:                              # %for.cond276
                                        #   Parent Loop BB70_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB70_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB70_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB70_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB70_88
.LBB70_85:                              # %if.then299
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB70_87:                              # %if.end345
                                        #   in Loop: Header=BB70_80 Depth=2
	jmp	.LBB70_101
.LBB70_88:                              # %if.else346
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB70_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB70_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB70_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB70_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB70_94
.LBB70_93:                              # %cond.false368
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB70_94:                              # %cond.end369
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB70_96:                              # %if.end458
                                        #   in Loop: Header=BB70_80 Depth=2
	jmp	.LBB70_100
.LBB70_97:                              # %if.else459
                                        #   in Loop: Header=BB70_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB70_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB70_99:                              # %if.end578
                                        #   in Loop: Header=BB70_80 Depth=2
	jmp	.LBB70_100
.LBB70_100:                             # %if.end579
                                        #   in Loop: Header=BB70_80 Depth=2
	jmp	.LBB70_101
.LBB70_101:                             # %if.end580
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB70_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB70_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB70_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB70_108
.LBB70_105:                             # %if.then602
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB70_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB70_107:                             # %if.end654
                                        #   in Loop: Header=BB70_80 Depth=2
	jmp	.LBB70_108
.LBB70_108:                             # %if.end655
                                        #   in Loop: Header=BB70_80 Depth=2
	jmp	.LBB70_109
.LBB70_109:                             # %for.inc656
                                        #   in Loop: Header=BB70_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_80
.LBB70_110:                             # %for.end658
                                        #   in Loop: Header=BB70_78 Depth=1
	jmp	.LBB70_111
.LBB70_111:                             # %for.inc659
                                        #   in Loop: Header=BB70_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_78
.LBB70_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB70_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB70_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB70_114 Depth=1
	movl	$0, -4(%rbp)
.LBB70_116:                             # %for.cond668
                                        #   Parent Loop BB70_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB70_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB70_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB70_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB70_124
.LBB70_121:                             # %if.then693
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB70_123:                             # %if.end745
                                        #   in Loop: Header=BB70_116 Depth=2
	jmp	.LBB70_137
.LBB70_124:                             # %if.else746
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB70_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB70_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB70_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB70_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB70_130
.LBB70_129:                             # %cond.false770
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB70_130:                             # %cond.end772
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB70_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB70_132:                             # %if.end862
                                        #   in Loop: Header=BB70_116 Depth=2
	jmp	.LBB70_136
.LBB70_133:                             # %if.else863
                                        #   in Loop: Header=BB70_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB70_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB70_135:                             # %if.end983
                                        #   in Loop: Header=BB70_116 Depth=2
	jmp	.LBB70_136
.LBB70_136:                             # %if.end984
                                        #   in Loop: Header=BB70_116 Depth=2
	jmp	.LBB70_137
.LBB70_137:                             # %if.end985
                                        #   in Loop: Header=BB70_116 Depth=2
	jmp	.LBB70_138
.LBB70_138:                             # %for.inc986
                                        #   in Loop: Header=BB70_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_116
.LBB70_139:                             # %for.end988
                                        #   in Loop: Header=BB70_114 Depth=1
	jmp	.LBB70_140
.LBB70_140:                             # %for.inc989
                                        #   in Loop: Header=BB70_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_114
.LBB70_141:                             # %for.end991
	jmp	.LBB70_142
.LBB70_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB70_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB70_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB70_144 Depth=1
	movl	$0, -8(%rbp)
.LBB70_146:                             # %for.cond1002
                                        #   Parent Loop BB70_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB70_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB70_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_146
.LBB70_149:                             # %for.end1030
                                        #   in Loop: Header=BB70_144 Depth=1
	jmp	.LBB70_150
.LBB70_150:                             # %for.inc1031
                                        #   in Loop: Header=BB70_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_144
.LBB70_151:                             # %for.end1033
	jmp	.LBB70_175
.LBB70_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB70_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB70_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB70_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB70_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_157:                             # %for.cond1049
                                        #   Parent Loop BB70_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB70_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB70_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_157
.LBB70_160:                             # %for.end1065
                                        #   in Loop: Header=BB70_155 Depth=1
	jmp	.LBB70_161
.LBB70_161:                             # %for.inc1066
                                        #   in Loop: Header=BB70_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_155
.LBB70_162:                             # %for.end1068
	jmp	.LBB70_174
.LBB70_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB70_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB70_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB70_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_167:                             # %for.cond1081
                                        #   Parent Loop BB70_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB70_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB70_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_167
.LBB70_170:                             # %for.end1101
                                        #   in Loop: Header=BB70_165 Depth=1
	jmp	.LBB70_171
.LBB70_171:                             # %for.inc1102
                                        #   in Loop: Header=BB70_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_165
.LBB70_172:                             # %for.end1104
	jmp	.LBB70_173
.LBB70_173:                             # %if.end1105
	jmp	.LBB70_174
.LBB70_174:                             # %if.end1106
	jmp	.LBB70_175
.LBB70_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB70_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB70_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB70_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB70_177 Depth=1
	movl	$0, -8(%rbp)
.LBB70_179:                             # %for.cond1116
                                        #   Parent Loop BB70_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB70_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB70_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB70_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_179
.LBB70_182:                             # %for.end1141
                                        #   in Loop: Header=BB70_177 Depth=1
	jmp	.LBB70_183
.LBB70_183:                             # %for.inc1142
                                        #   in Loop: Header=BB70_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_177
.LBB70_184:                             # %for.end1144
	jmp	.LBB70_185
.LBB70_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB70_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB70_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB70_189:                             # %for.cond1157
                                        #   Parent Loop BB70_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB70_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB70_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_189
.LBB70_192:                             # %for.end1181
                                        #   in Loop: Header=BB70_187 Depth=1
	jmp	.LBB70_193
.LBB70_193:                             # %for.inc1182
                                        #   in Loop: Header=BB70_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_187
.LBB70_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB70_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1269496032, -52(%rbp)  # imm = 0x4BAAF8E0
	jne	.LBB70_197
.LBB70_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_196
.Lfunc_end70:
	.size	set_stored_macroblock_parameters.41, .Lfunc_end70-set_stored_macroblock_parameters.41
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.42 # -- Begin function SetCoeffAndReconstruction8x8.42
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.42,@function
SetCoeffAndReconstruction8x8.42:        # @SetCoeffAndReconstruction8x8.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$931118728, -36(%rbp)   # imm = 0x377FBE88
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB71_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB71_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB71_4
.LBB71_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB71_4
.LBB71_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB71_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB71_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB71_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB71_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB71_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_6
.LBB71_9:                               # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB71_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB71_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	$0, -4(%rbp)
.LBB71_13:                              # %for.cond20
                                        #   Parent Loop BB71_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB71_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_13
.LBB71_16:                              # %for.end52
                                        #   in Loop: Header=BB71_11 Depth=1
	jmp	.LBB71_17
.LBB71_17:                              # %for.inc53
                                        #   in Loop: Header=BB71_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_11
.LBB71_18:                              # %for.end55
	jmp	.LBB71_28
.LBB71_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB71_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB71_20 Depth=1
	movl	$0, -4(%rbp)
.LBB71_22:                              # %for.cond60
                                        #   Parent Loop BB71_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB71_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB71_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_22
.LBB71_25:                              # %for.end86
                                        #   in Loop: Header=BB71_20 Depth=1
	jmp	.LBB71_26
.LBB71_26:                              # %for.inc87
                                        #   in Loop: Header=BB71_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_20
.LBB71_27:                              # %for.end89
	jmp	.LBB71_28
.LBB71_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB71_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB71_29 Depth=1
	movl	$0, -4(%rbp)
.LBB71_31:                              # %for.cond94
                                        #   Parent Loop BB71_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB71_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB71_35
.LBB71_34:                              # %cond.false127
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB71_35
.LBB71_35:                              # %cond.end128
                                        #   in Loop: Header=BB71_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB71_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_31
.LBB71_37:                              # %for.end141
                                        #   in Loop: Header=BB71_29 Depth=1
	jmp	.LBB71_38
.LBB71_38:                              # %for.inc142
                                        #   in Loop: Header=BB71_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_29
.LBB71_39:                              # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB71_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB71_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB71_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB71_41 Depth=1
	movl	$0, -4(%rbp)
.LBB71_43:                              # %for.cond151
                                        #   Parent Loop BB71_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB71_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB71_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB71_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB71_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB71_47
.LBB71_46:                              # %cond.false185
                                        #   in Loop: Header=BB71_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB71_47
.LBB71_47:                              # %cond.end186
                                        #   in Loop: Header=BB71_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB71_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_43
.LBB71_49:                              # %for.end200
                                        #   in Loop: Header=BB71_41 Depth=1
	jmp	.LBB71_50
.LBB71_50:                              # %for.inc201
                                        #   in Loop: Header=BB71_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_41
.LBB71_51:                              # %for.end203
	jmp	.LBB71_52
.LBB71_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB71_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_55 Depth 2
                                        #       Child Loop BB71_57 Depth 3
                                        #         Child Loop BB71_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB71_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB71_53 Depth=1
	movl	$0, -12(%rbp)
.LBB71_55:                              # %for.cond209
                                        #   Parent Loop BB71_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_57 Depth 3
                                        #         Child Loop BB71_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB71_55 Depth=2
	movl	$0, -8(%rbp)
.LBB71_57:                              # %for.cond213
                                        #   Parent Loop BB71_53 Depth=1
                                        #     Parent Loop BB71_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB71_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB71_57 Depth=3
	movl	$0, -4(%rbp)
.LBB71_59:                              # %for.cond217
                                        #   Parent Loop BB71_53 Depth=1
                                        #     Parent Loop BB71_55 Depth=2
                                        #       Parent Loop BB71_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB71_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB71_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB71_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_59
.LBB71_62:                              # %for.end239
                                        #   in Loop: Header=BB71_57 Depth=3
	jmp	.LBB71_63
.LBB71_63:                              # %for.inc240
                                        #   in Loop: Header=BB71_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_57
.LBB71_64:                              # %for.end242
                                        #   in Loop: Header=BB71_55 Depth=2
	jmp	.LBB71_65
.LBB71_65:                              # %for.inc243
                                        #   in Loop: Header=BB71_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_55
.LBB71_66:                              # %for.end245
                                        #   in Loop: Header=BB71_53 Depth=1
	jmp	.LBB71_67
.LBB71_67:                              # %for.inc246
                                        #   in Loop: Header=BB71_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_53
.LBB71_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB71_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB71_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB71_83
.LBB71_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB71_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB71_72 Depth=1
	movl	$0, -4(%rbp)
.LBB71_74:                              # %for.cond262
                                        #   Parent Loop BB71_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB71_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB71_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB71_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB71_78
.LBB71_77:                              # %if.else278
                                        #   in Loop: Header=BB71_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB71_78:                              # %if.end283
                                        #   in Loop: Header=BB71_74 Depth=2
	jmp	.LBB71_79
.LBB71_79:                              # %for.inc284
                                        #   in Loop: Header=BB71_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_74
.LBB71_80:                              # %for.end286
                                        #   in Loop: Header=BB71_72 Depth=1
	jmp	.LBB71_81
.LBB71_81:                              # %for.inc287
                                        #   in Loop: Header=BB71_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_72
.LBB71_82:                              # %for.end289
	jmp	.LBB71_95
.LBB71_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB71_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB71_84 Depth=1
	movl	$0, -4(%rbp)
.LBB71_86:                              # %for.cond297
                                        #   Parent Loop BB71_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB71_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB71_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB71_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB71_90
.LBB71_89:                              # %if.else317
                                        #   in Loop: Header=BB71_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB71_90:                              # %if.end326
                                        #   in Loop: Header=BB71_86 Depth=2
	jmp	.LBB71_91
.LBB71_91:                              # %for.inc327
                                        #   in Loop: Header=BB71_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_86
.LBB71_92:                              # %for.end329
                                        #   in Loop: Header=BB71_84 Depth=1
	jmp	.LBB71_93
.LBB71_93:                              # %for.inc330
                                        #   in Loop: Header=BB71_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_84
.LBB71_94:                              # %for.end332
	jmp	.LBB71_95
.LBB71_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB71_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB71_96 Depth=1
	movl	$0, -4(%rbp)
.LBB71_98:                              # %for.cond338
                                        #   Parent Loop BB71_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB71_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB71_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_98
.LBB71_101:                             # %for.end384
                                        #   in Loop: Header=BB71_96 Depth=1
	jmp	.LBB71_102
.LBB71_102:                             # %for.inc385
                                        #   in Loop: Header=BB71_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_96
.LBB71_103:                             # %for.end387
	jmp	.LBB71_157
.LBB71_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB71_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_107 Depth 2
                                        #       Child Loop BB71_109 Depth 3
                                        #         Child Loop BB71_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB71_105 Depth=1
	movl	$0, -12(%rbp)
.LBB71_107:                             # %for.cond394
                                        #   Parent Loop BB71_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_109 Depth 3
                                        #         Child Loop BB71_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB71_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB71_107 Depth=2
	movl	$0, -8(%rbp)
.LBB71_109:                             # %for.cond398
                                        #   Parent Loop BB71_105 Depth=1
                                        #     Parent Loop BB71_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB71_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB71_109 Depth=3
	movl	$0, -4(%rbp)
.LBB71_111:                             # %for.cond402
                                        #   Parent Loop BB71_105 Depth=1
                                        #     Parent Loop BB71_107 Depth=2
                                        #       Parent Loop BB71_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB71_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB71_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB71_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_111
.LBB71_114:                             # %for.end425
                                        #   in Loop: Header=BB71_109 Depth=3
	jmp	.LBB71_115
.LBB71_115:                             # %for.inc426
                                        #   in Loop: Header=BB71_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_109
.LBB71_116:                             # %for.end428
                                        #   in Loop: Header=BB71_107 Depth=2
	jmp	.LBB71_117
.LBB71_117:                             # %for.inc429
                                        #   in Loop: Header=BB71_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_107
.LBB71_118:                             # %for.end431
                                        #   in Loop: Header=BB71_105 Depth=1
	jmp	.LBB71_119
.LBB71_119:                             # %for.inc432
                                        #   in Loop: Header=BB71_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_105
.LBB71_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB71_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB71_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB71_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB71_136
.LBB71_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB71_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB71_125 Depth=1
	movl	$0, -4(%rbp)
.LBB71_127:                             # %for.cond458
                                        #   Parent Loop BB71_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB71_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB71_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB71_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB71_131
.LBB71_130:                             # %if.else478
                                        #   in Loop: Header=BB71_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB71_131:                             # %if.end483
                                        #   in Loop: Header=BB71_127 Depth=2
	jmp	.LBB71_132
.LBB71_132:                             # %for.inc484
                                        #   in Loop: Header=BB71_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_127
.LBB71_133:                             # %for.end486
                                        #   in Loop: Header=BB71_125 Depth=1
	jmp	.LBB71_134
.LBB71_134:                             # %for.inc487
                                        #   in Loop: Header=BB71_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_125
.LBB71_135:                             # %for.end489
	jmp	.LBB71_148
.LBB71_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB71_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB71_137 Depth=1
	movl	$0, -4(%rbp)
.LBB71_139:                             # %for.cond498
                                        #   Parent Loop BB71_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB71_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB71_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB71_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB71_143
.LBB71_142:                             # %if.else518
                                        #   in Loop: Header=BB71_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB71_143:                             # %if.end527
                                        #   in Loop: Header=BB71_139 Depth=2
	jmp	.LBB71_144
.LBB71_144:                             # %for.inc528
                                        #   in Loop: Header=BB71_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_139
.LBB71_145:                             # %for.end530
                                        #   in Loop: Header=BB71_137 Depth=1
	jmp	.LBB71_146
.LBB71_146:                             # %for.inc531
                                        #   in Loop: Header=BB71_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_137
.LBB71_147:                             # %for.end533
	jmp	.LBB71_148
.LBB71_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB71_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB71_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB71_149 Depth=1
	movl	$0, -4(%rbp)
.LBB71_151:                             # %for.cond539
                                        #   Parent Loop BB71_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB71_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB71_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB71_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB71_151
.LBB71_154:                             # %for.end585
                                        #   in Loop: Header=BB71_149 Depth=1
	jmp	.LBB71_155
.LBB71_155:                             # %for.inc586
                                        #   in Loop: Header=BB71_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_149
.LBB71_156:                             # %for.end588
	jmp	.LBB71_157
.LBB71_157:                             # %if.end589
	cmpl	$931118728, -36(%rbp)   # imm = 0x377FBE88
	jne	.LBB71_159
.LBB71_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_158
.Lfunc_end71:
	.size	SetCoeffAndReconstruction8x8.42, .Lfunc_end71-SetCoeffAndReconstruction8x8.42
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.43    # -- Begin function RestoreMVBlock8x8.43
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.43,@function
RestoreMVBlock8x8.43:                   # @RestoreMVBlock8x8.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1007887317, -68(%rbp)  # imm = 0x3C1323D5
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB72_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB72_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB72_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_5:                               # %for.cond7
                                        #   Parent Loop BB72_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB72_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB72_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB72_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_5
.LBB72_8:                               # %for.end
                                        #   in Loop: Header=BB72_3 Depth=1
	jmp	.LBB72_9
.LBB72_9:                               # %for.inc76
                                        #   in Loop: Header=BB72_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_3
.LBB72_10:                              # %for.end78
	jmp	.LBB72_11
.LBB72_11:                              # %if.end
	jmp	.LBB72_46
.LBB72_12:                              # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB72_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB72_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_16:                              # %for.cond84
                                        #   Parent Loop BB72_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB72_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB72_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB72_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_16
.LBB72_19:                              # %for.end161
                                        #   in Loop: Header=BB72_14 Depth=1
	jmp	.LBB72_20
.LBB72_20:                              # %for.inc162
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_14
.LBB72_21:                              # %for.end164
	jmp	.LBB72_45
.LBB72_22:                              # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB72_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB72_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_26:                              # %for.cond171
                                        #   Parent Loop BB72_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB72_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB72_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB72_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_26
.LBB72_29:                              # %for.end248
                                        #   in Loop: Header=BB72_24 Depth=1
	jmp	.LBB72_30
.LBB72_30:                              # %for.inc249
                                        #   in Loop: Header=BB72_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_24
.LBB72_31:                              # %for.end251
	jmp	.LBB72_44
.LBB72_32:                              # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB72_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB72_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB72_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB72_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB72_36:                              # %for.cond258
                                        #   Parent Loop BB72_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB72_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB72_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB72_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_36
.LBB72_39:                              # %for.end407
                                        #   in Loop: Header=BB72_34 Depth=1
	jmp	.LBB72_40
.LBB72_40:                              # %for.inc408
                                        #   in Loop: Header=BB72_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_34
.LBB72_41:                              # %for.end410
	jmp	.LBB72_43
.LBB72_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB72_43:                              # %if.end412
	jmp	.LBB72_44
.LBB72_44:                              # %if.end413
	jmp	.LBB72_45
.LBB72_45:                              # %if.end414
	jmp	.LBB72_46
.LBB72_46:                              # %if.end415
	cmpl	$1007887317, -68(%rbp)  # imm = 0x3C1323D5
	jne	.LBB72_48
.LBB72_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_47
.Lfunc_end72:
	.size	RestoreMVBlock8x8.43, .Lfunc_end72-RestoreMVBlock8x8.43
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.44 # -- Begin function store_macroblock_parameters.44
	.p2align	4, 0x90
	.type	store_macroblock_parameters.44,@function
store_macroblock_parameters.44:         # @store_macroblock_parameters.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1111973243, -36(%rbp)  # imm = 0x42475D7B
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB73_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB73_3
.LBB73_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB73_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB73_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB73_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB73_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB73_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_4
.LBB73_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB73_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB73_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB73_10:                              # %for.cond20
                                        #   Parent Loop BB73_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB73_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB73_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_10
.LBB73_13:                              # %for.end39
                                        #   in Loop: Header=BB73_8 Depth=1
	jmp	.LBB73_14
.LBB73_14:                              # %for.inc40
                                        #   in Loop: Header=BB73_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_8
.LBB73_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB73_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB73_16 Depth=1
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond47
                                        #   Parent Loop BB73_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB73_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB73_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_18
.LBB73_21:                              # %for.end70
                                        #   in Loop: Header=BB73_16 Depth=1
	jmp	.LBB73_22
.LBB73_22:                              # %for.inc71
                                        #   in Loop: Header=BB73_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_16
.LBB73_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB73_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB73_24 Depth=1
	movl	$0, -4(%rbp)
.LBB73_26:                              # %for.cond78
                                        #   Parent Loop BB73_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB73_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB73_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_26
.LBB73_29:                              # %for.end94
                                        #   in Loop: Header=BB73_24 Depth=1
	jmp	.LBB73_30
.LBB73_30:                              # %for.inc95
                                        #   in Loop: Header=BB73_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_24
.LBB73_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB73_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB73_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB73_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB73_33 Depth=1
	movl	$0, -4(%rbp)
.LBB73_35:                              # %for.cond105
                                        #   Parent Loop BB73_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB73_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB73_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB73_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_35
.LBB73_38:                              # %for.end136
                                        #   in Loop: Header=BB73_33 Depth=1
	jmp	.LBB73_39
.LBB73_39:                              # %for.inc137
                                        #   in Loop: Header=BB73_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_33
.LBB73_40:                              # %for.end139
	jmp	.LBB73_41
.LBB73_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB73_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB73_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB73_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_46 Depth 2
                                        #       Child Loop BB73_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB73_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB73_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB73_46:                              # %for.cond152
                                        #   Parent Loop BB73_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB73_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB73_48:                              # %for.cond159
                                        #   Parent Loop BB73_44 Depth=1
                                        #     Parent Loop BB73_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB73_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB73_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_48
.LBB73_51:                              # %for.end179
                                        #   in Loop: Header=BB73_46 Depth=2
	jmp	.LBB73_52
.LBB73_52:                              # %for.inc180
                                        #   in Loop: Header=BB73_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_46
.LBB73_53:                              # %for.end182
                                        #   in Loop: Header=BB73_44 Depth=1
	jmp	.LBB73_54
.LBB73_54:                              # %for.inc183
                                        #   in Loop: Header=BB73_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_44
.LBB73_55:                              # %for.end185
	jmp	.LBB73_56
.LBB73_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB73_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB73_59
.LBB73_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB73_60
.LBB73_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB73_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB73_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB73_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB73_61 Depth=1
	movl	$0, -4(%rbp)
.LBB73_63:                              # %for.cond197
                                        #   Parent Loop BB73_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB73_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB73_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB73_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB73_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB73_66:                              # %if.end230
                                        #   in Loop: Header=BB73_63 Depth=2
	jmp	.LBB73_67
.LBB73_67:                              # %for.inc231
                                        #   in Loop: Header=BB73_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_63
.LBB73_68:                              # %for.end233
                                        #   in Loop: Header=BB73_61 Depth=1
	jmp	.LBB73_69
.LBB73_69:                              # %for.inc234
                                        #   in Loop: Header=BB73_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_61
.LBB73_70:                              # %for.end236
	cmpl	$1111973243, -36(%rbp)  # imm = 0x42475D7B
	jne	.LBB73_72
.LBB73_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_71
.Lfunc_end73:
	.size	store_macroblock_parameters.44, .Lfunc_end73-store_macroblock_parameters.44
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.45 # -- Begin function SetCoeffAndReconstruction8x8.45
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.45,@function
SetCoeffAndReconstruction8x8.45:        # @SetCoeffAndReconstruction8x8.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2062383097, -36(%rbp)  # imm = 0x7AED77F9
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB74_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB74_4
.LBB74_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB74_4
.LBB74_4:                               # %cond.end
	movl	%ecx, -28(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB74_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB74_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB74_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB74_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB74_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_6
.LBB74_9:                               # %for.end
	cmpl	$0, -32(%rbp)
	je	.LBB74_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB74_11:                              # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB74_11 Depth=1
	movl	$0, -4(%rbp)
.LBB74_13:                              # %for.cond20
                                        #   Parent Loop BB74_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB74_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB74_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_13
.LBB74_16:                              # %for.end52
                                        #   in Loop: Header=BB74_11 Depth=1
	jmp	.LBB74_17
.LBB74_17:                              # %for.inc53
                                        #   in Loop: Header=BB74_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_11
.LBB74_18:                              # %for.end55
	jmp	.LBB74_28
.LBB74_19:                              # %if.else
	movl	$0, -8(%rbp)
.LBB74_20:                              # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB74_20 Depth=1
	movl	$0, -4(%rbp)
.LBB74_22:                              # %for.cond60
                                        #   Parent Loop BB74_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB74_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB74_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_22
.LBB74_25:                              # %for.end86
                                        #   in Loop: Header=BB74_20 Depth=1
	jmp	.LBB74_26
.LBB74_26:                              # %for.inc87
                                        #   in Loop: Header=BB74_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_20
.LBB74_27:                              # %for.end89
	jmp	.LBB74_28
.LBB74_28:                              # %if.end
	movl	$0, -8(%rbp)
.LBB74_29:                              # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB74_29 Depth=1
	movl	$0, -4(%rbp)
.LBB74_31:                              # %for.cond94
                                        #   Parent Loop BB74_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB74_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_35
.LBB74_34:                              # %cond.false127
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB74_35
.LBB74_35:                              # %cond.end128
                                        #   in Loop: Header=BB74_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB74_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_31
.LBB74_37:                              # %for.end141
                                        #   in Loop: Header=BB74_29 Depth=1
	jmp	.LBB74_38
.LBB74_38:                              # %for.inc142
                                        #   in Loop: Header=BB74_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_29
.LBB74_39:                              # %for.end144
	cmpl	$0, -32(%rbp)
	je	.LBB74_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB74_41:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB74_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	$0, -4(%rbp)
.LBB74_43:                              # %for.cond151
                                        #   Parent Loop BB74_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB74_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB74_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-28(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB74_47
.LBB74_46:                              # %cond.false185
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB74_47
.LBB74_47:                              # %cond.end186
                                        #   in Loop: Header=BB74_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB74_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_43
.LBB74_49:                              # %for.end200
                                        #   in Loop: Header=BB74_41 Depth=1
	jmp	.LBB74_50
.LBB74_50:                              # %for.inc201
                                        #   in Loop: Header=BB74_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_41
.LBB74_51:                              # %for.end203
	jmp	.LBB74_52
.LBB74_52:                              # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB74_53:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_55 Depth 2
                                        #       Child Loop BB74_57 Depth 3
                                        #         Child Loop BB74_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB74_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB74_53 Depth=1
	movl	$0, -12(%rbp)
.LBB74_55:                              # %for.cond209
                                        #   Parent Loop BB74_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_57 Depth 3
                                        #         Child Loop BB74_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB74_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB74_55 Depth=2
	movl	$0, -8(%rbp)
.LBB74_57:                              # %for.cond213
                                        #   Parent Loop BB74_53 Depth=1
                                        #     Parent Loop BB74_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB74_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB74_57 Depth=3
	movl	$0, -4(%rbp)
.LBB74_59:                              # %for.cond217
                                        #   Parent Loop BB74_53 Depth=1
                                        #     Parent Loop BB74_55 Depth=2
                                        #       Parent Loop BB74_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB74_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB74_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB74_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_59
.LBB74_62:                              # %for.end239
                                        #   in Loop: Header=BB74_57 Depth=3
	jmp	.LBB74_63
.LBB74_63:                              # %for.inc240
                                        #   in Loop: Header=BB74_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_57
.LBB74_64:                              # %for.end242
                                        #   in Loop: Header=BB74_55 Depth=2
	jmp	.LBB74_65
.LBB74_65:                              # %for.inc243
                                        #   in Loop: Header=BB74_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_55
.LBB74_66:                              # %for.end245
                                        #   in Loop: Header=BB74_53 Depth=1
	jmp	.LBB74_67
.LBB74_67:                              # %for.inc246
                                        #   in Loop: Header=BB74_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_53
.LBB74_68:                              # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB74_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB74_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB74_83
.LBB74_71:                              # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB74_72:                              # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB74_72 Depth=1
	movl	$0, -4(%rbp)
.LBB74_74:                              # %for.cond262
                                        #   Parent Loop BB74_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB74_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB74_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_78
.LBB74_77:                              # %if.else278
                                        #   in Loop: Header=BB74_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB74_78:                              # %if.end283
                                        #   in Loop: Header=BB74_74 Depth=2
	jmp	.LBB74_79
.LBB74_79:                              # %for.inc284
                                        #   in Loop: Header=BB74_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_74
.LBB74_80:                              # %for.end286
                                        #   in Loop: Header=BB74_72 Depth=1
	jmp	.LBB74_81
.LBB74_81:                              # %for.inc287
                                        #   in Loop: Header=BB74_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_72
.LBB74_82:                              # %for.end289
	jmp	.LBB74_95
.LBB74_83:                              # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB74_84:                              # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB74_84 Depth=1
	movl	$0, -4(%rbp)
.LBB74_86:                              # %for.cond297
                                        #   Parent Loop BB74_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB74_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB74_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_90
.LBB74_89:                              # %if.else317
                                        #   in Loop: Header=BB74_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_90:                              # %if.end326
                                        #   in Loop: Header=BB74_86 Depth=2
	jmp	.LBB74_91
.LBB74_91:                              # %for.inc327
                                        #   in Loop: Header=BB74_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_86
.LBB74_92:                              # %for.end329
                                        #   in Loop: Header=BB74_84 Depth=1
	jmp	.LBB74_93
.LBB74_93:                              # %for.inc330
                                        #   in Loop: Header=BB74_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_84
.LBB74_94:                              # %for.end332
	jmp	.LBB74_95
.LBB74_95:                              # %if.end333
	movl	$0, -8(%rbp)
.LBB74_96:                              # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB74_96 Depth=1
	movl	$0, -4(%rbp)
.LBB74_98:                              # %for.cond338
                                        #   Parent Loop BB74_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB74_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB74_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_98
.LBB74_101:                             # %for.end384
                                        #   in Loop: Header=BB74_96 Depth=1
	jmp	.LBB74_102
.LBB74_102:                             # %for.inc385
                                        #   in Loop: Header=BB74_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_96
.LBB74_103:                             # %for.end387
	jmp	.LBB74_157
.LBB74_104:                             # %if.else388
	movl	$0, -16(%rbp)
.LBB74_105:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_107 Depth 2
                                        #       Child Loop BB74_109 Depth 3
                                        #         Child Loop BB74_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB74_105 Depth=1
	movl	$0, -12(%rbp)
.LBB74_107:                             # %for.cond394
                                        #   Parent Loop BB74_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_109 Depth 3
                                        #         Child Loop BB74_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB74_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	$0, -8(%rbp)
.LBB74_109:                             # %for.cond398
                                        #   Parent Loop BB74_105 Depth=1
                                        #     Parent Loop BB74_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB74_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB74_109 Depth=3
	movl	$0, -4(%rbp)
.LBB74_111:                             # %for.cond402
                                        #   Parent Loop BB74_105 Depth=1
                                        #     Parent Loop BB74_107 Depth=2
                                        #       Parent Loop BB74_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB74_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB74_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB74_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_111
.LBB74_114:                             # %for.end425
                                        #   in Loop: Header=BB74_109 Depth=3
	jmp	.LBB74_115
.LBB74_115:                             # %for.inc426
                                        #   in Loop: Header=BB74_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_109
.LBB74_116:                             # %for.end428
                                        #   in Loop: Header=BB74_107 Depth=2
	jmp	.LBB74_117
.LBB74_117:                             # %for.inc429
                                        #   in Loop: Header=BB74_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_107
.LBB74_118:                             # %for.end431
                                        #   in Loop: Header=BB74_105 Depth=1
	jmp	.LBB74_119
.LBB74_119:                             # %for.inc432
                                        #   in Loop: Header=BB74_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_105
.LBB74_120:                             # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB74_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB74_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB74_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB74_136
.LBB74_124:                             # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB74_125:                             # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB74_125 Depth=1
	movl	$0, -4(%rbp)
.LBB74_127:                             # %for.cond458
                                        #   Parent Loop BB74_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB74_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB74_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_131
.LBB74_130:                             # %if.else478
                                        #   in Loop: Header=BB74_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB74_131:                             # %if.end483
                                        #   in Loop: Header=BB74_127 Depth=2
	jmp	.LBB74_132
.LBB74_132:                             # %for.inc484
                                        #   in Loop: Header=BB74_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_127
.LBB74_133:                             # %for.end486
                                        #   in Loop: Header=BB74_125 Depth=1
	jmp	.LBB74_134
.LBB74_134:                             # %for.inc487
                                        #   in Loop: Header=BB74_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_125
.LBB74_135:                             # %for.end489
	jmp	.LBB74_148
.LBB74_136:                             # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB74_137:                             # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB74_137 Depth=1
	movl	$0, -4(%rbp)
.LBB74_139:                             # %for.cond498
                                        #   Parent Loop BB74_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB74_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB74_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB74_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB74_143
.LBB74_142:                             # %if.else518
                                        #   in Loop: Header=BB74_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB74_143:                             # %if.end527
                                        #   in Loop: Header=BB74_139 Depth=2
	jmp	.LBB74_144
.LBB74_144:                             # %for.inc528
                                        #   in Loop: Header=BB74_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_139
.LBB74_145:                             # %for.end530
                                        #   in Loop: Header=BB74_137 Depth=1
	jmp	.LBB74_146
.LBB74_146:                             # %for.inc531
                                        #   in Loop: Header=BB74_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_137
.LBB74_147:                             # %for.end533
	jmp	.LBB74_148
.LBB74_148:                             # %if.end534
	movl	$0, -8(%rbp)
.LBB74_149:                             # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB74_149 Depth=1
	movl	$0, -4(%rbp)
.LBB74_151:                             # %for.cond539
                                        #   Parent Loop BB74_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB74_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB74_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_151
.LBB74_154:                             # %for.end585
                                        #   in Loop: Header=BB74_149 Depth=1
	jmp	.LBB74_155
.LBB74_155:                             # %for.inc586
                                        #   in Loop: Header=BB74_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_149
.LBB74_156:                             # %for.end588
	jmp	.LBB74_157
.LBB74_157:                             # %if.end589
	cmpl	$2062383097, -36(%rbp)  # imm = 0x7AED77F9
	jne	.LBB74_159
.LBB74_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_159:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_158
.Lfunc_end74:
	.size	SetCoeffAndReconstruction8x8.45, .Lfunc_end74-SetCoeffAndReconstruction8x8.45
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.46 # -- Begin function GetBestTransformP8x8.46
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.46,@function
GetBestTransformP8x8.46:                # @GetBestTransformP8x8.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$591651634, -64(%rbp)   # imm = 0x2343E332
	movl	$0, -44(%rbp)
	movl	$0, -40(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB75_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB75_25
.LBB75_2:                               # %if.end
	movl	$0, -28(%rbp)
.LBB75_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_5 Depth 2
                                        #       Child Loop BB75_7 Depth 3
                                        #         Child Loop BB75_9 Depth 4
                                        #           Child Loop BB75_11 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB75_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB75_5:                               # %for.cond3
                                        #   Parent Loop BB75_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_7 Depth 3
                                        #         Child Loop BB75_9 Depth 4
                                        #           Child Loop BB75_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB75_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB75_7:                               # %for.cond7
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_9 Depth 4
                                        #           Child Loop BB75_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB75_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB75_9:                               # %for.cond12
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_5 Depth=2
                                        #       Parent Loop BB75_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB75_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB75_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB75_9 Depth=4
	movl	$0, -12(%rbp)
.LBB75_11:                              # %for.cond15
                                        #   Parent Loop BB75_3 Depth=1
                                        #     Parent Loop BB75_5 Depth=2
                                        #       Parent Loop BB75_7 Depth=3
                                        #         Parent Loop BB75_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB75_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB75_11 Depth=5
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-48(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB75_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB75_11
.LBB75_14:                              # %for.end
                                        #   in Loop: Header=BB75_9 Depth=4
	jmp	.LBB75_15
.LBB75_15:                              # %for.inc51
                                        #   in Loop: Header=BB75_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB75_9
.LBB75_16:                              # %for.end53
                                        #   in Loop: Header=BB75_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB75_7 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_7
.LBB75_18:                              # %for.end57
                                        #   in Loop: Header=BB75_5 Depth=2
	jmp	.LBB75_19
.LBB75_19:                              # %for.inc58
                                        #   in Loop: Header=BB75_5 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_5
.LBB75_20:                              # %for.end60
                                        #   in Loop: Header=BB75_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB75_3 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB75_3
.LBB75_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB75_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB75_25
.LBB75_24:                              # %if.else
	movl	$0, -36(%rbp)
.LBB75_25:                              # %return
	movl	-36(%rbp), %ebx
	cmpl	$591651634, -64(%rbp)   # imm = 0x2343E332
	jne	.LBB75_27
.LBB75_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_26
.Lfunc_end75:
	.size	GetBestTransformP8x8.46, .Lfunc_end75-GetBestTransformP8x8.46
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.47           # -- Begin function StoreMV8x8.47
	.p2align	4, 0x90
	.type	StoreMV8x8.47,@function
StoreMV8x8.47:                          # @StoreMV8x8.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1367201203, -8(%rbp)   # imm = 0x517DD5B3
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB76_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-12(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB76_1
.LBB76_4:                               # %for.end
	cmpl	$1367201203, -8(%rbp)   # imm = 0x517DD5B3
	jne	.LBB76_6
.LBB76_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_5
.Lfunc_end76:
	.size	StoreMV8x8.47, .Lfunc_end76-StoreMV8x8.47
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.48         # -- Begin function RestoreMV8x8.48
	.p2align	4, 0x90
	.type	RestoreMV8x8.48,@function
RestoreMV8x8.48:                        # @RestoreMV8x8.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1716863022, -12(%rbp)  # imm = 0x6655402E
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB77_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB77_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB77_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB77_1
.LBB77_4:                               # %for.end
	cmpl	$1716863022, -12(%rbp)  # imm = 0x6655402E
	jne	.LBB77_6
.LBB77_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_5
.Lfunc_end77:
	.size	RestoreMV8x8.48, .Lfunc_end77-RestoreMV8x8.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.49
.LCPI78_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI78_1:
	.quad	4622945017495814144     # double 12
.LCPI78_2:
	.quad	4607182418800017408     # double 1
.LCPI78_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI78_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI78_5:
	.quad	4611686018427387904     # double 2
.LCPI78_6:
	.quad	4613937818241073152     # double 3
.LCPI78_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI78_8:
	.quad	4616189618054758400     # double 4
.LCPI78_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI78_10:
	.quad	4618441417868443648     # double 6
.LCPI78_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI78_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI78_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI78_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI78_15:
	.quad	4602678819172646912     # double 0.5
.LCPI78_16:
	.quad	4679240012837945344     # double 65536
.LCPI78_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI78_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.49
	.p2align	4, 0x90
	.type	encode_one_macroblock.49,@function
encode_one_macroblock.49:               # @encode_one_macroblock.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1624270986, -408(%rbp) # imm = 0x60D0688A
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -272(%rbp)
	movl	$0, -188(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -172(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -208(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB78_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB78_4
.LBB78_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB78_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB78_5
.LBB78_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB78_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -308(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -416(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB78_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB78_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB78_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB78_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB78_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB78_11:                              # %land.end
.LBB78_12:                              # %lor.end36
.LBB78_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -320(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB78_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB78_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB78_17:                              # %lor.end51
.LBB78_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB78_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB78_21
.LBB78_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB78_21
.LBB78_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB78_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB78_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB78_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB78_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB78_27
.LBB78_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB78_27:                              # %if.end
	jmp	.LBB78_29
.LBB78_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB78_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB78_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB78_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB78_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB78_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB78_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB78_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB78_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB78_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB78_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB78_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB78_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB78_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB78_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB78_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB78_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-416(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB78_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB78_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_55 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB78_53 Depth=1
	movl	$0, -56(%rbp)
.LBB78_55:                              # %for.cond156
                                        #   Parent Loop BB78_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB78_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB78_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB78_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB78_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB78_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB78_59:                              # %if.end183
                                        #   in Loop: Header=BB78_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB78_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB78_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-88(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB78_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB78_55 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB78_62:                              # %if.end202
                                        #   in Loop: Header=BB78_55 Depth=2
	jmp	.LBB78_63
.LBB78_63:                              # %for.inc
                                        #   in Loop: Header=BB78_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_55
.LBB78_64:                              # %for.end
                                        #   in Loop: Header=BB78_53 Depth=1
	jmp	.LBB78_65
.LBB78_65:                              # %for.inc203
                                        #   in Loop: Header=BB78_53 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB78_53
.LBB78_66:                              # %for.end205
	jmp	.LBB78_93
.LBB78_67:                              # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB78_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB78_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_71 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB78_69 Depth=1
	movl	$0, -56(%rbp)
.LBB78_71:                              # %for.cond215
                                        #   Parent Loop BB78_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB78_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB78_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB78_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB78_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB78_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB78_75:                              # %if.end244
                                        #   in Loop: Header=BB78_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB78_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB78_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB78_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB78_71 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB78_78:                              # %if.end263
                                        #   in Loop: Header=BB78_71 Depth=2
	jmp	.LBB78_79
.LBB78_79:                              # %for.inc264
                                        #   in Loop: Header=BB78_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_71
.LBB78_80:                              # %for.end266
                                        #   in Loop: Header=BB78_69 Depth=1
	jmp	.LBB78_81
.LBB78_81:                              # %for.inc267
                                        #   in Loop: Header=BB78_69 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB78_69
.LBB78_82:                              # %for.end269
	jmp	.LBB78_92
.LBB78_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -88(%rbp)
.LBB78_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_86 Depth 2
	movl	-88(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB78_84 Depth=1
	movl	$0, -56(%rbp)
.LBB78_86:                              # %for.cond277
                                        #   Parent Loop BB78_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-88(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB78_86 Depth=2
	movslq	-88(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB78_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_86
.LBB78_89:                              # %for.end290
                                        #   in Loop: Header=BB78_84 Depth=1
	jmp	.LBB78_90
.LBB78_90:                              # %for.inc291
                                        #   in Loop: Header=BB78_84 Depth=1
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB78_84
.LBB78_91:                              # %for.end293
	jmp	.LBB78_92
.LBB78_92:                              # %if.end294
	jmp	.LBB78_93
.LBB78_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI78_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB78_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB78_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB78_99
.LBB78_98:                              # %if.else315
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB78_99:                              # %if.end326
	jmp	.LBB78_159
.LBB78_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB78_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI78_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB78_104
.LBB78_103:                             # %cond.false336
	vmovsd	.LCPI78_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB78_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB78_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI78_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB78_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI78_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI78_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_109
.LBB78_108:                             # %cond.false357
	vmovsd	.LCPI78_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB78_109:                             # %cond.end359
	vmovsd	.LCPI78_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI78_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_115
.LBB78_111:                             # %cond.false364
	vmovsd	.LCPI78_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI78_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_114
.LBB78_113:                             # %cond.false369
	vmovsd	.LCPI78_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB78_114:                             # %cond.end371
.LBB78_115:                             # %cond.end373
	jmp	.LBB78_129
.LBB78_116:                             # %cond.false375
	cmpl	$0, -308(%rbp)
	je	.LBB78_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_120
.LBB78_119:                             # %cond.false382
	vmovsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB78_120:                             # %cond.end384
	vmovsd	.LCPI78_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI78_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_126
.LBB78_122:                             # %cond.false389
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_125
.LBB78_124:                             # %cond.false394
	vmovsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB78_125:                             # %cond.end396
.LBB78_126:                             # %cond.end398
	jmp	.LBB78_128
.LBB78_127:                             # %cond.false400
	vmovsd	.LCPI78_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_128
.LBB78_128:                             # %cond.end401
.LBB78_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB78_146
.LBB78_130:                             # %if.else406
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI78_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB78_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI78_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_145
.LBB78_132:                             # %cond.false415
	cmpl	$0, -308(%rbp)
	je	.LBB78_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_136
.LBB78_135:                             # %cond.false422
	vmovsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB78_136:                             # %cond.end424
	vmovsd	.LCPI78_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI78_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_142
.LBB78_138:                             # %cond.false429
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI78_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB78_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI78_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_141
.LBB78_140:                             # %cond.false434
	vmovsd	.LCPI78_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB78_141:                             # %cond.end436
.LBB78_142:                             # %cond.end438
	jmp	.LBB78_144
.LBB78_143:                             # %cond.false440
	vmovsd	.LCPI78_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB78_144
.LBB78_144:                             # %cond.end441
.LBB78_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB78_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB78_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB78_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI78_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI78_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB78_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI78_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB78_152
.LBB78_151:                             # %cond.false465
	vmovsd	.LCPI78_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB78_152:                             # %cond.end473
	vmovsd	.LCPI78_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB78_153:                             # %if.end477
	jmp	.LBB78_158
.LBB78_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB78_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI78_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB78_157:                             # %if.end487
	jmp	.LBB78_158
.LBB78_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB78_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB78_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI78_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB78_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB78_166
.LBB78_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB78_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB78_165
.LBB78_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB78_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB78_166:                             # %if.end510
	vmovsd	.LCPI78_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI78_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB78_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB78_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB78_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB78_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB78_167
.LBB78_170:                             # %for.end522
	movl	$0, -264(%rbp)
.LBB78_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_181 Depth 2
                                        #       Child Loop BB78_184 Depth 3
                                        #         Child Loop BB78_190 Depth 4
                                        #         Child Loop BB78_210 Depth 4
                                        #         Child Loop BB78_300 Depth 4
                                        #           Child Loop BB78_302 Depth 5
                                        #         Child Loop BB78_309 Depth 4
                                        #           Child Loop BB78_311 Depth 5
                                        #         Child Loop BB78_326 Depth 4
                                        #           Child Loop BB78_328 Depth 5
                                        #         Child Loop BB78_335 Depth 4
                                        #           Child Loop BB78_337 Depth 5
                                        #         Child Loop BB78_355 Depth 4
                                        #           Child Loop BB78_357 Depth 5
                                        #         Child Loop BB78_374 Depth 4
                                        #           Child Loop BB78_376 Depth 5
                                        #     Child Loop BB78_416 Depth 2
                                        #       Child Loop BB78_418 Depth 3
                                        #         Child Loop BB78_445 Depth 4
                                        #         Child Loop BB78_464 Depth 4
                                        #           Child Loop BB78_466 Depth 5
                                        #         Child Loop BB78_473 Depth 4
                                        #         Child Loop BB78_508 Depth 4
                                        #           Child Loop BB78_510 Depth 5
                                        #         Child Loop BB78_532 Depth 4
                                        #           Child Loop BB78_534 Depth 5
                                        #             Child Loop BB78_536 Depth 6
                                        #         Child Loop BB78_544 Depth 4
                                        #           Child Loop BB78_546 Depth 5
                                        #       Child Loop BB78_569 Depth 3
                                        #         Child Loop BB78_571 Depth 4
                                        #           Child Loop BB78_573 Depth 5
                                        #       Child Loop BB78_581 Depth 3
                                        #         Child Loop BB78_583 Depth 4
                                        #     Child Loop BB78_601 Depth 2
                                        #       Child Loop BB78_603 Depth 3
                                        #         Child Loop BB78_614 Depth 4
                                        #         Child Loop BB78_633 Depth 4
                                        #           Child Loop BB78_635 Depth 5
                                        #         Child Loop BB78_642 Depth 4
                                        #         Child Loop BB78_677 Depth 4
                                        #           Child Loop BB78_679 Depth 5
                                        #         Child Loop BB78_701 Depth 4
                                        #           Child Loop BB78_703 Depth 5
                                        #             Child Loop BB78_705 Depth 6
                                        #         Child Loop BB78_713 Depth 4
                                        #           Child Loop BB78_715 Depth 5
                                        #         Child Loop BB78_723 Depth 4
                                        #           Child Loop BB78_725 Depth 5
                                        #       Child Loop BB78_745 Depth 3
                                        #         Child Loop BB78_747 Depth 4
                                        #           Child Loop BB78_749 Depth 5
                                        #       Child Loop BB78_757 Depth 3
                                        #         Child Loop BB78_759 Depth 4
                                        #       Child Loop BB78_766 Depth 3
                                        #         Child Loop BB78_768 Depth 4
                                        #       Child Loop BB78_778 Depth 3
                                        #         Child Loop BB78_780 Depth 4
                                        #       Child Loop BB78_786 Depth 3
                                        #       Child Loop BB78_791 Depth 3
                                        #         Child Loop BB78_793 Depth 4
                                        #     Child Loop BB78_803 Depth 2
                                        #       Child Loop BB78_805 Depth 3
                                        #     Child Loop BB78_835 Depth 2
                                        #       Child Loop BB78_853 Depth 3
                                        #         Child Loop BB78_908 Depth 4
                                        #           Child Loop BB78_911 Depth 5
                                        #             Child Loop BB78_913 Depth 6
                                        #           Child Loop BB78_920 Depth 5
                                        #             Child Loop BB78_922 Depth 6
                                        #         Child Loop BB78_955 Depth 4
                                        #           Child Loop BB78_957 Depth 5
                                        #     Child Loop BB78_981 Depth 2
                                        #       Child Loop BB78_1014 Depth 3
                                        #         Child Loop BB78_1017 Depth 4
                                        #           Child Loop BB78_1019 Depth 5
                                        #         Child Loop BB78_1026 Depth 4
                                        #           Child Loop BB78_1028 Depth 5
                                        #       Child Loop BB78_1061 Depth 3
                                        #         Child Loop BB78_1063 Depth 4
                                        #     Child Loop BB78_1113 Depth 2
                                        #       Child Loop BB78_1115 Depth 3
                                        #     Child Loop BB78_1127 Depth 2
                                        #       Child Loop BB78_1129 Depth 3
                                        #         Child Loop BB78_1131 Depth 4
                                        #     Child Loop BB78_1141 Depth 2
                                        #       Child Loop BB78_1143 Depth 3
                                        #     Child Loop BB78_1152 Depth 2
                                        #       Child Loop BB78_1154 Depth 3
                                        #     Child Loop BB78_1160 Depth 2
                                        #       Child Loop BB78_1162 Depth 3
                                        #     Child Loop BB78_1174 Depth 2
                                        #       Child Loop BB78_1176 Depth 3
                                        #         Child Loop BB78_1178 Depth 4
                                        #     Child Loop BB78_1189 Depth 2
                                        #       Child Loop BB78_1191 Depth 3
                                        #     Child Loop BB78_1202 Depth 2
                                        #       Child Loop BB78_1204 Depth 3
                                        #     Child Loop BB78_1211 Depth 2
                                        #       Child Loop BB78_1213 Depth 3
                                        #     Child Loop BB78_1221 Depth 2
                                        #       Child Loop BB78_1223 Depth 3
                                        #     Child Loop BB78_1229 Depth 2
                                        #       Child Loop BB78_1231 Depth 3
                                        #     Child Loop BB78_1237 Depth 2
                                        #       Child Loop BB78_1239 Depth 3
                                        #     Child Loop BB78_1245 Depth 2
                                        #       Child Loop BB78_1247 Depth 3
	movl	-264(%rbp), %eax
	cmpl	-320(%rbp), %eax
	jge	.LBB78_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$2, -320(%rbp)
	jne	.LBB78_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB78_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB78_176
.LBB78_175:                             # %if.else534
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB78_176:                             # %if.end536
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_177
.LBB78_177:                             # %if.end537
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB78_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB78_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB78_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB78_180:                             # %if.end542
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB78_181:                             # %for.cond543
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_184 Depth 3
                                        #         Child Loop BB78_190 Depth 4
                                        #         Child Loop BB78_210 Depth 4
                                        #         Child Loop BB78_300 Depth 4
                                        #           Child Loop BB78_302 Depth 5
                                        #         Child Loop BB78_309 Depth 4
                                        #           Child Loop BB78_311 Depth 5
                                        #         Child Loop BB78_326 Depth 4
                                        #           Child Loop BB78_328 Depth 5
                                        #         Child Loop BB78_335 Depth 4
                                        #           Child Loop BB78_337 Depth 5
                                        #         Child Loop BB78_355 Depth 4
                                        #           Child Loop BB78_357 Depth 5
                                        #         Child Loop BB78_374 Depth 4
                                        #           Child Loop BB78_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB78_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB78_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB78_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB78_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB78_184:                             # %for.cond554
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_190 Depth 4
                                        #         Child Loop BB78_210 Depth 4
                                        #         Child Loop BB78_300 Depth 4
                                        #           Child Loop BB78_302 Depth 5
                                        #         Child Loop BB78_309 Depth 4
                                        #           Child Loop BB78_311 Depth 5
                                        #         Child Loop BB78_326 Depth 4
                                        #           Child Loop BB78_328 Depth 5
                                        #         Child Loop BB78_335 Depth 4
                                        #           Child Loop BB78_337 Depth 5
                                        #         Child Loop BB78_355 Depth 4
                                        #           Child Loop BB78_357 Depth 5
                                        #         Child Loop BB78_374 Depth 4
                                        #           Child Loop BB78_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB78_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB78_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB78_187:                             # %land.end566
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB78_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB78_189:                             # %land.end574
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB78_190:                             # %for.cond577
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB78_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB78_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB78_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB78_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB78_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB78_206
.LBB78_194:                             # %if.then594
                                        #   in Loop: Header=BB78_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB78_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB78_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB78_198
.LBB78_197:                             # %cond.false604
                                        #   in Loop: Header=BB78_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_198:                             # %cond.end607
                                        #   in Loop: Header=BB78_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB78_203
.LBB78_199:                             # %cond.false610
                                        #   in Loop: Header=BB78_190 Depth=4
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB78_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB78_202
.LBB78_201:                             # %cond.false617
                                        #   in Loop: Header=BB78_190 Depth=4
	movl	$1, %eax
	jmp	.LBB78_202
.LBB78_202:                             # %cond.end618
                                        #   in Loop: Header=BB78_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_203:                             # %cond.end623
                                        #   in Loop: Header=BB78_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB78_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB78_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB78_205:                             # %if.end636
                                        #   in Loop: Header=BB78_190 Depth=4
	jmp	.LBB78_206
.LBB78_206:                             # %if.end637
                                        #   in Loop: Header=BB78_190 Depth=4
	jmp	.LBB78_207
.LBB78_207:                             # %for.inc638
                                        #   in Loop: Header=BB78_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB78_190
.LBB78_208:                             # %for.end640
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB78_210:                             # %for.cond643
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB78_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB78_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB78_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB78_215
.LBB78_214:                             # %cond.false660
                                        #   in Loop: Header=BB78_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_215:                             # %cond.end663
                                        #   in Loop: Header=BB78_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB78_220
.LBB78_216:                             # %cond.false667
                                        #   in Loop: Header=BB78_210 Depth=4
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB78_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB78_219
.LBB78_218:                             # %cond.false674
                                        #   in Loop: Header=BB78_210 Depth=4
	movl	$1, %eax
	jmp	.LBB78_219
.LBB78_219:                             # %cond.end675
                                        #   in Loop: Header=BB78_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_220:                             # %cond.end680
                                        #   in Loop: Header=BB78_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB78_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB78_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB78_222:                             # %if.end693
                                        #   in Loop: Header=BB78_210 Depth=4
	jmp	.LBB78_223
.LBB78_223:                             # %for.inc694
                                        #   in Loop: Header=BB78_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB78_210
.LBB78_224:                             # %for.end696
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_228
.LBB78_227:                             # %cond.false706
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_228:                             # %cond.end709
                                        #   in Loop: Header=BB78_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB78_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB78_231
.LBB78_230:                             # %cond.false719
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB78_231:                             # %cond.end721
                                        #   in Loop: Header=BB78_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB78_236
.LBB78_232:                             # %cond.false726
                                        #   in Loop: Header=BB78_184 Depth=3
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB78_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB78_235
.LBB78_234:                             # %cond.false733
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	$1, %eax
	jmp	.LBB78_235
.LBB78_235:                             # %cond.end734
                                        #   in Loop: Header=BB78_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_236:                             # %cond.end739
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB78_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_243
.LBB78_242:                             # %cond.false761
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB78_243:                             # %cond.end763
                                        #   in Loop: Header=BB78_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB78_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB78_246
.LBB78_245:                             # %cond.false773
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB78_246:                             # %cond.end775
                                        #   in Loop: Header=BB78_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB78_248
.LBB78_247:                             # %cond.false780
                                        #   in Loop: Header=BB78_184 Depth=3
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_248:                             # %cond.end784
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_252
.LBB78_251:                             # %cond.false797
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB78_252:                             # %cond.end799
                                        #   in Loop: Header=BB78_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB78_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB78_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB78_255
.LBB78_254:                             # %cond.false809
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB78_255:                             # %cond.end811
                                        #   in Loop: Header=BB78_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB78_257
.LBB78_256:                             # %cond.false816
                                        #   in Loop: Header=BB78_184 Depth=3
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_257:                             # %cond.end820
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	%eax, -184(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	jmp	.LBB78_259
.LBB78_258:                             # %if.else824
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
.LBB78_259:                             # %if.end825
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB78_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB78_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB78_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB78_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_285
.LBB78_266:                             # %if.else845
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB78_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB78_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB78_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB78_284
.LBB78_271:                             # %if.else859
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB78_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB78_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB78_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-84(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB78_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB78_283
.LBB78_276:                             # %if.else876
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB78_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB78_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jg	.LBB78_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB78_282
.LBB78_281:                             # %if.else893
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-184(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB78_282:                             # %if.end898
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_283
.LBB78_283:                             # %if.end899
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_284
.LBB78_284:                             # %if.end900
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_285
.LBB78_285:                             # %if.end901
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_295
.LBB78_286:                             # %if.else902
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB78_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_294
.LBB78_289:                             # %if.else910
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB78_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB78_293
.LBB78_292:                             # %if.else918
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB78_293:                             # %if.end920
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_294
.LBB78_294:                             # %if.end921
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_295
.LBB78_295:                             # %if.end922
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_297
.LBB78_296:                             # %if.else923
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_297:                             # %if.end925
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB78_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB78_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB78_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	$0, -24(%rbp)
.LBB78_300:                             # %for.cond933
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB78_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB78_300 Depth=4
	movl	$0, -20(%rbp)
.LBB78_302:                             # %for.cond937
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        #         Parent Loop BB78_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB78_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB78_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB78_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_302
.LBB78_305:                             # %for.end999
                                        #   in Loop: Header=BB78_300 Depth=4
	jmp	.LBB78_306
.LBB78_306:                             # %for.inc1000
                                        #   in Loop: Header=BB78_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_300
.LBB78_307:                             # %for.end1002
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_323
.LBB78_308:                             # %if.else1003
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	$0, -24(%rbp)
.LBB78_309:                             # %for.cond1004
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB78_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB78_309 Depth=4
	movl	$0, -20(%rbp)
.LBB78_311:                             # %for.cond1008
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        #         Parent Loop BB78_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB78_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB78_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB78_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB78_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB78_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB78_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB78_316
.LBB78_315:                             # %cond.false1024
                                        #   in Loop: Header=BB78_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB78_316:                             # %cond.end1025
                                        #   in Loop: Header=BB78_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB78_318
.LBB78_317:                             # %if.else1111
                                        #   in Loop: Header=BB78_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB78_318:                             # %if.end1217
                                        #   in Loop: Header=BB78_311 Depth=5
	jmp	.LBB78_319
.LBB78_319:                             # %for.inc1218
                                        #   in Loop: Header=BB78_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_311
.LBB78_320:                             # %for.end1220
                                        #   in Loop: Header=BB78_309 Depth=4
	jmp	.LBB78_321
.LBB78_321:                             # %for.inc1221
                                        #   in Loop: Header=BB78_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_309
.LBB78_322:                             # %for.end1223
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_323
.LBB78_323:                             # %if.end1224
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB78_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	$0, -24(%rbp)
.LBB78_326:                             # %for.cond1231
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB78_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB78_326 Depth=4
	movl	$0, -20(%rbp)
.LBB78_328:                             # %for.cond1235
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        #         Parent Loop BB78_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB78_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB78_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB78_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_328
.LBB78_331:                             # %for.end1303
                                        #   in Loop: Header=BB78_326 Depth=4
	jmp	.LBB78_332
.LBB78_332:                             # %for.inc1304
                                        #   in Loop: Header=BB78_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_326
.LBB78_333:                             # %for.end1306
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_351
.LBB78_334:                             # %if.else1307
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	$0, -24(%rbp)
.LBB78_335:                             # %for.cond1308
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB78_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB78_335 Depth=4
	movl	$0, -20(%rbp)
.LBB78_337:                             # %for.cond1312
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        #         Parent Loop BB78_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB78_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB78_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB78_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB78_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB78_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB78_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB78_342
.LBB78_341:                             # %cond.false1330
                                        #   in Loop: Header=BB78_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB78_342:                             # %cond.end1332
                                        #   in Loop: Header=BB78_337 Depth=5
	movq	%rax, -448(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-448(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB78_346
.LBB78_343:                             # %if.else1419
                                        #   in Loop: Header=BB78_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB78_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB78_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB78_345:                             # %if.end1529
                                        #   in Loop: Header=BB78_337 Depth=5
	jmp	.LBB78_346
.LBB78_346:                             # %if.end1530
                                        #   in Loop: Header=BB78_337 Depth=5
	jmp	.LBB78_347
.LBB78_347:                             # %for.inc1531
                                        #   in Loop: Header=BB78_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_337
.LBB78_348:                             # %for.end1533
                                        #   in Loop: Header=BB78_335 Depth=4
	jmp	.LBB78_349
.LBB78_349:                             # %for.inc1534
                                        #   in Loop: Header=BB78_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_335
.LBB78_350:                             # %for.end1536
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_351
.LBB78_351:                             # %if.end1537
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_352
.LBB78_352:                             # %if.end1538
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_393
.LBB78_353:                             # %if.else1539
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB78_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB78_355:                             # %for.cond1546
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB78_355 Depth=4
	movl	$0, -20(%rbp)
.LBB78_357:                             # %for.cond1550
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        #         Parent Loop BB78_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB78_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB78_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB78_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB78_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB78_361
.LBB78_360:                             # %if.else1596
                                        #   in Loop: Header=BB78_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB78_361:                             # %if.end1676
                                        #   in Loop: Header=BB78_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB78_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB78_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB78_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB78_367
.LBB78_364:                             # %if.else1721
                                        #   in Loop: Header=BB78_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB78_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB78_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB78_366:                             # %if.end1805
                                        #   in Loop: Header=BB78_357 Depth=5
	jmp	.LBB78_367
.LBB78_367:                             # %if.end1806
                                        #   in Loop: Header=BB78_357 Depth=5
	jmp	.LBB78_368
.LBB78_368:                             # %if.end1807
                                        #   in Loop: Header=BB78_357 Depth=5
	jmp	.LBB78_369
.LBB78_369:                             # %for.inc1808
                                        #   in Loop: Header=BB78_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_357
.LBB78_370:                             # %for.end1810
                                        #   in Loop: Header=BB78_355 Depth=4
	jmp	.LBB78_371
.LBB78_371:                             # %for.inc1811
                                        #   in Loop: Header=BB78_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_355
.LBB78_372:                             # %for.end1813
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_392
.LBB78_373:                             # %if.else1814
                                        #   in Loop: Header=BB78_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB78_374:                             # %for.cond1818
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB78_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB78_374 Depth=4
	movl	$0, -20(%rbp)
.LBB78_376:                             # %for.cond1822
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_181 Depth=2
                                        #       Parent Loop BB78_184 Depth=3
                                        #         Parent Loop BB78_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB78_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB78_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB78_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB78_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB78_380
.LBB78_379:                             # %if.else1868
                                        #   in Loop: Header=BB78_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB78_380:                             # %if.end1948
                                        #   in Loop: Header=BB78_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB78_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB78_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB78_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB78_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB78_386
.LBB78_383:                             # %if.else1993
                                        #   in Loop: Header=BB78_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB78_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB78_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB78_385:                             # %if.end2077
                                        #   in Loop: Header=BB78_376 Depth=5
	jmp	.LBB78_386
.LBB78_386:                             # %if.end2078
                                        #   in Loop: Header=BB78_376 Depth=5
	jmp	.LBB78_387
.LBB78_387:                             # %if.end2079
                                        #   in Loop: Header=BB78_376 Depth=5
	jmp	.LBB78_388
.LBB78_388:                             # %for.inc2080
                                        #   in Loop: Header=BB78_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_376
.LBB78_389:                             # %for.end2082
                                        #   in Loop: Header=BB78_374 Depth=4
	jmp	.LBB78_390
.LBB78_390:                             # %for.inc2083
                                        #   in Loop: Header=BB78_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_374
.LBB78_391:                             # %for.end2085
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_392
.LBB78_392:                             # %if.end2086
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_393
.LBB78_393:                             # %if.end2087
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB78_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB78_399
.LBB78_395:                             # %if.else2106
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB78_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB78_398
.LBB78_397:                             # %if.else2131
                                        #   in Loop: Header=BB78_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB78_398:                             # %if.end2132
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_399
.LBB78_399:                             # %if.end2133
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB78_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB78_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB78_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB78_402:                             # %if.end2143
                                        #   in Loop: Header=BB78_184 Depth=3
	jmp	.LBB78_403
.LBB78_403:                             # %for.inc2144
                                        #   in Loop: Header=BB78_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_184
.LBB78_404:                             # %for.end2146
                                        #   in Loop: Header=BB78_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB78_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB78_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB78_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB78_407:                             # %if.end2155
                                        #   in Loop: Header=BB78_181 Depth=2
	jmp	.LBB78_408
.LBB78_408:                             # %if.end2156
                                        #   in Loop: Header=BB78_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB78_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB78_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -312(%rbp)
.LBB78_410:                             # %if.end2161
                                        #   in Loop: Header=BB78_181 Depth=2
	jmp	.LBB78_411
.LBB78_411:                             # %if.end2162
                                        #   in Loop: Header=BB78_181 Depth=2
	jmp	.LBB78_412
.LBB78_412:                             # %for.inc2163
                                        #   in Loop: Header=BB78_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB78_181
.LBB78_413:                             # %for.end2165
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB78_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB78_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB78_416:                             # %for.cond2172
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_418 Depth 3
                                        #         Child Loop BB78_445 Depth 4
                                        #         Child Loop BB78_464 Depth 4
                                        #           Child Loop BB78_466 Depth 5
                                        #         Child Loop BB78_473 Depth 4
                                        #         Child Loop BB78_508 Depth 4
                                        #           Child Loop BB78_510 Depth 5
                                        #         Child Loop BB78_532 Depth 4
                                        #           Child Loop BB78_534 Depth 5
                                        #             Child Loop BB78_536 Depth 6
                                        #         Child Loop BB78_544 Depth 4
                                        #           Child Loop BB78_546 Depth 5
                                        #       Child Loop BB78_569 Depth 3
                                        #         Child Loop BB78_571 Depth 4
                                        #           Child Loop BB78_573 Depth 5
                                        #       Child Loop BB78_581 Depth 3
                                        #         Child Loop BB78_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB78_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB78_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB78_418:                             # %for.cond2184
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_445 Depth 4
                                        #         Child Loop BB78_464 Depth 4
                                        #           Child Loop BB78_466 Depth 5
                                        #         Child Loop BB78_473 Depth 4
                                        #         Child Loop BB78_508 Depth 4
                                        #           Child Loop BB78_510 Depth 5
                                        #         Child Loop BB78_532 Depth 4
                                        #           Child Loop BB78_534 Depth 5
                                        #             Child Loop BB78_536 Depth 6
                                        #         Child Loop BB78_544 Depth 4
                                        #           Child Loop BB78_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB78_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB78_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB78_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB78_423
.LBB78_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB78_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB78_557
.LBB78_423:                             # %if.then2201
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB78_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	$0, -216(%rbp)
	movl	$0, -212(%rbp)
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -216(%rbp)
	cmpl	$2147483647, -216(%rbp) # imm = 0x7FFFFFFF
	je	.LBB78_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB78_428
.LBB78_427:                             # %if.then2214
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB78_429
.LBB78_428:                             # %if.else2215
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-216(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-212(%rbp), %eax
	addl	-208(%rbp), %eax
	movl	%eax, -208(%rbp)
.LBB78_429:                             # %if.end2218
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB78_431
	jmp	.LBB78_430
.LBB78_430:                             # %if.end2218
                                        #   in Loop: Header=BB78_418 Depth=3
	subl	$2, %eax
	je	.LBB78_438
	jmp	.LBB78_439
.LBB78_431:                             # %sw.bb
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-212(%rbp), %eax
	cmpl	-216(%rbp), %eax
	jl	.LBB78_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB78_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB78_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB78_436
.LBB78_435:                             # %if.then2231
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_437
.LBB78_436:                             # %if.else2232
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_437:                             # %if.end2233
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_440
.LBB78_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_440
.LBB78_439:                             # %sw.default
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_440:                             # %sw.epilog
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB78_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-176(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB78_442:                             # %if.end2240
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB78_443:                             # %if.end2242
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB78_518
.LBB78_444:                             # %if.else2278
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB78_445:                             # %for.cond2279
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB78_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB78_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB78_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB78_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB78_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB78_461
.LBB78_449:                             # %if.then2296
                                        #   in Loop: Header=BB78_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB78_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB78_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB78_453
.LBB78_452:                             # %cond.false2306
                                        #   in Loop: Header=BB78_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_453:                             # %cond.end2309
                                        #   in Loop: Header=BB78_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB78_458
.LBB78_454:                             # %cond.false2313
                                        #   in Loop: Header=BB78_445 Depth=4
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB78_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB78_457
.LBB78_456:                             # %cond.false2320
                                        #   in Loop: Header=BB78_445 Depth=4
	movl	$1, %eax
	jmp	.LBB78_457
.LBB78_457:                             # %cond.end2321
                                        #   in Loop: Header=BB78_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_458:                             # %cond.end2326
                                        #   in Loop: Header=BB78_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB78_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB78_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB78_460:                             # %if.end2339
                                        #   in Loop: Header=BB78_445 Depth=4
	jmp	.LBB78_461
.LBB78_461:                             # %if.end2340
                                        #   in Loop: Header=BB78_445 Depth=4
	jmp	.LBB78_462
.LBB78_462:                             # %for.inc2341
                                        #   in Loop: Header=BB78_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB78_445
.LBB78_463:                             # %for.end2343
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	$0, -24(%rbp)
.LBB78_464:                             # %for.cond2344
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB78_464 Depth=4
	movl	$0, -20(%rbp)
.LBB78_466:                             # %for.cond2348
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        #         Parent Loop BB78_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB78_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB78_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB78_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_466
.LBB78_469:                             # %for.end2405
                                        #   in Loop: Header=BB78_464 Depth=4
	jmp	.LBB78_470
.LBB78_470:                             # %for.inc2406
                                        #   in Loop: Header=BB78_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_464
.LBB78_471:                             # %for.end2408
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB78_473:                             # %for.cond2411
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB78_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB78_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB78_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB78_478
.LBB78_477:                             # %cond.false2428
                                        #   in Loop: Header=BB78_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_478:                             # %cond.end2431
                                        #   in Loop: Header=BB78_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB78_483
.LBB78_479:                             # %cond.false2435
                                        #   in Loop: Header=BB78_473 Depth=4
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB78_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB78_482
.LBB78_481:                             # %cond.false2442
                                        #   in Loop: Header=BB78_473 Depth=4
	movl	$1, %eax
	jmp	.LBB78_482
.LBB78_482:                             # %cond.end2443
                                        #   in Loop: Header=BB78_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_483:                             # %cond.end2448
                                        #   in Loop: Header=BB78_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB78_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB78_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB78_485:                             # %if.end2461
                                        #   in Loop: Header=BB78_473 Depth=4
	jmp	.LBB78_486
.LBB78_486:                             # %for.inc2462
                                        #   in Loop: Header=BB78_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB78_473
.LBB78_487:                             # %for.end2464
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB78_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_491
.LBB78_490:                             # %cond.false2474
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_491:                             # %cond.end2477
                                        #   in Loop: Header=BB78_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB78_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB78_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB78_494
.LBB78_493:                             # %cond.false2487
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB78_494:                             # %cond.end2489
                                        #   in Loop: Header=BB78_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB78_499
.LBB78_495:                             # %cond.false2494
                                        #   in Loop: Header=BB78_418 Depth=3
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB78_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB78_498
.LBB78_497:                             # %cond.false2501
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	$1, %eax
	jmp	.LBB78_498
.LBB78_498:                             # %cond.end2502
                                        #   in Loop: Header=BB78_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_499:                             # %cond.end2507
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB78_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB78_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB78_507
.LBB78_502:                             # %if.else2517
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB78_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB78_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB78_506
.LBB78_505:                             # %if.else2524
                                        #   in Loop: Header=BB78_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB78_506:                             # %if.end2525
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_507
.LBB78_507:                             # %if.end2526
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	$0, -24(%rbp)
.LBB78_508:                             # %for.cond2527
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB78_508 Depth=4
	movl	$0, -20(%rbp)
.LBB78_510:                             # %for.cond2531
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        #         Parent Loop BB78_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB78_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB78_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB78_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_510
.LBB78_513:                             # %for.end2567
                                        #   in Loop: Header=BB78_508 Depth=4
	jmp	.LBB78_514
.LBB78_514:                             # %for.inc2568
                                        #   in Loop: Header=BB78_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_508
.LBB78_515:                             # %for.end2570
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_517
.LBB78_516:                             # %if.else2571
                                        #   in Loop: Header=BB78_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_517:                             # %if.end2572
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_518
.LBB78_518:                             # %if.end2573
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB78_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB78_526
.LBB78_520:                             # %if.else2578
                                        #   in Loop: Header=BB78_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB78_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB78_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB78_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB78_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB78_524
.LBB78_523:                             # %cond.false2592
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB78_524:                             # %cond.end2597
                                        #   in Loop: Header=BB78_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB78_525:                             # %if.end2603
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_526
.LBB78_526:                             # %if.end2604
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB78_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB78_530
.LBB78_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB78_556
.LBB78_530:                             # %if.then2616
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB78_532:                             # %for.cond2638
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_534 Depth 5
                                        #             Child Loop BB78_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB78_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB78_532 Depth=4
	movl	$0, -24(%rbp)
.LBB78_534:                             # %for.cond2642
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        #         Parent Loop BB78_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB78_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB78_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB78_534 Depth=5
	movl	$0, -20(%rbp)
.LBB78_536:                             # %for.cond2646
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        #         Parent Loop BB78_532 Depth=4
                                        #           Parent Loop BB78_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB78_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB78_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB78_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_536
.LBB78_539:                             # %for.end2668
                                        #   in Loop: Header=BB78_534 Depth=5
	jmp	.LBB78_540
.LBB78_540:                             # %for.inc2669
                                        #   in Loop: Header=BB78_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_534
.LBB78_541:                             # %for.end2671
                                        #   in Loop: Header=BB78_532 Depth=4
	jmp	.LBB78_542
.LBB78_542:                             # %for.inc2672
                                        #   in Loop: Header=BB78_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_532
.LBB78_543:                             # %for.end2674
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_544:                             # %for.cond2675
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB78_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_546:                             # %for.cond2680
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_418 Depth=3
                                        #         Parent Loop BB78_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB78_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB78_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB78_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB78_550
.LBB78_549:                             # %if.else2705
                                        #   in Loop: Header=BB78_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB78_550:                             # %if.end2754
                                        #   in Loop: Header=BB78_546 Depth=5
	jmp	.LBB78_551
.LBB78_551:                             # %for.inc2755
                                        #   in Loop: Header=BB78_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_546
.LBB78_552:                             # %for.end2757
                                        #   in Loop: Header=BB78_544 Depth=4
	jmp	.LBB78_553
.LBB78_553:                             # %for.inc2758
                                        #   in Loop: Header=BB78_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_544
.LBB78_554:                             # %for.end2760
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_555
.LBB78_555:                             # %if.end2761
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB78_556:                             # %if.end2762
                                        #   in Loop: Header=BB78_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB78_557:                             # %if.end2763
                                        #   in Loop: Header=BB78_418 Depth=3
	jmp	.LBB78_558
.LBB78_558:                             # %for.inc2764
                                        #   in Loop: Header=BB78_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB78_418
.LBB78_559:                             # %for.end2766
                                        #   in Loop: Header=BB78_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-176(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB78_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB78_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB78_563
.LBB78_562:                             # %cond.true2782
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB78_564
.LBB78_563:                             # %cond.false2783
                                        #   in Loop: Header=BB78_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB78_564
.LBB78_564:                             # %cond.end2784
                                        #   in Loop: Header=BB78_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB78_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB78_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB78_567
.LBB78_566:                             # %cond.true2793
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB78_568
.LBB78_567:                             # %cond.false2794
                                        #   in Loop: Header=BB78_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB78_568
.LBB78_568:                             # %cond.end2795
                                        #   in Loop: Header=BB78_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB78_569:                             # %for.cond2813
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_571 Depth 4
                                        #           Child Loop BB78_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB78_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB78_569 Depth=3
	movl	$0, -24(%rbp)
.LBB78_571:                             # %for.cond2817
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB78_571 Depth=4
	movl	$0, -20(%rbp)
.LBB78_573:                             # %for.cond2821
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_569 Depth=3
                                        #         Parent Loop BB78_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB78_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB78_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB78_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_573
.LBB78_576:                             # %for.end2844
                                        #   in Loop: Header=BB78_571 Depth=4
	jmp	.LBB78_577
.LBB78_577:                             # %for.inc2845
                                        #   in Loop: Header=BB78_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_571
.LBB78_578:                             # %for.end2847
                                        #   in Loop: Header=BB78_569 Depth=3
	jmp	.LBB78_579
.LBB78_579:                             # %for.inc2848
                                        #   in Loop: Header=BB78_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_569
.LBB78_580:                             # %for.end2850
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_581:                             # %for.cond2851
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB78_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_583:                             # %for.cond2856
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_416 Depth=2
                                        #       Parent Loop BB78_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB78_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB78_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB78_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB78_587
.LBB78_586:                             # %if.else2886
                                        #   in Loop: Header=BB78_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB78_587:                             # %if.end2935
                                        #   in Loop: Header=BB78_583 Depth=4
	jmp	.LBB78_588
.LBB78_588:                             # %for.inc2936
                                        #   in Loop: Header=BB78_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_583
.LBB78_589:                             # %for.end2938
                                        #   in Loop: Header=BB78_581 Depth=3
	jmp	.LBB78_590
.LBB78_590:                             # %for.inc2939
                                        #   in Loop: Header=BB78_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_581
.LBB78_591:                             # %for.end2941
                                        #   in Loop: Header=BB78_416 Depth=2
	jmp	.LBB78_592
.LBB78_592:                             # %if.end2942
                                        #   in Loop: Header=BB78_416 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB78_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB78_594:                             # %if.end2948
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB78_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB78_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB78_596:                             # %if.end2974
                                        #   in Loop: Header=BB78_416 Depth=2
	jmp	.LBB78_597
.LBB78_597:                             # %for.inc2975
                                        #   in Loop: Header=BB78_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_416
.LBB78_598:                             # %for.end2977
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_599:                             # %if.end2980
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB78_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB78_601:                             # %for.cond2985
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_603 Depth 3
                                        #         Child Loop BB78_614 Depth 4
                                        #         Child Loop BB78_633 Depth 4
                                        #           Child Loop BB78_635 Depth 5
                                        #         Child Loop BB78_642 Depth 4
                                        #         Child Loop BB78_677 Depth 4
                                        #           Child Loop BB78_679 Depth 5
                                        #         Child Loop BB78_701 Depth 4
                                        #           Child Loop BB78_703 Depth 5
                                        #             Child Loop BB78_705 Depth 6
                                        #         Child Loop BB78_713 Depth 4
                                        #           Child Loop BB78_715 Depth 5
                                        #         Child Loop BB78_723 Depth 4
                                        #           Child Loop BB78_725 Depth 5
                                        #       Child Loop BB78_745 Depth 3
                                        #         Child Loop BB78_747 Depth 4
                                        #           Child Loop BB78_749 Depth 5
                                        #       Child Loop BB78_757 Depth 3
                                        #         Child Loop BB78_759 Depth 4
                                        #       Child Loop BB78_766 Depth 3
                                        #         Child Loop BB78_768 Depth 4
                                        #       Child Loop BB78_778 Depth 3
                                        #         Child Loop BB78_780 Depth 4
                                        #       Child Loop BB78_786 Depth 3
                                        #       Child Loop BB78_791 Depth 3
                                        #         Child Loop BB78_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB78_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB78_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	$2147483647, -176(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB78_603:                             # %for.cond2997
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_614 Depth 4
                                        #         Child Loop BB78_633 Depth 4
                                        #           Child Loop BB78_635 Depth 5
                                        #         Child Loop BB78_642 Depth 4
                                        #         Child Loop BB78_677 Depth 4
                                        #           Child Loop BB78_679 Depth 5
                                        #         Child Loop BB78_701 Depth 4
                                        #           Child Loop BB78_703 Depth 5
                                        #             Child Loop BB78_705 Depth 6
                                        #         Child Loop BB78_713 Depth 4
                                        #           Child Loop BB78_715 Depth 5
                                        #         Child Loop BB78_723 Depth 4
                                        #           Child Loop BB78_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB78_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB78_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB78_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB78_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB78_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB78_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB78_610
.LBB78_609:                             # %if.then3019
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB78_611
.LBB78_610:                             # %if.else3020
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB78_611:                             # %if.end3022
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-256(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -256(%rbp)
.LBB78_612:                             # %if.end3024
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB78_687
.LBB78_613:                             # %if.else3060
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-204(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB78_614:                             # %for.cond3061
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB78_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB78_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB78_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB78_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB78_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB78_630
.LBB78_618:                             # %if.then3078
                                        #   in Loop: Header=BB78_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB78_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB78_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB78_622
.LBB78_621:                             # %cond.false3088
                                        #   in Loop: Header=BB78_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_622:                             # %cond.end3091
                                        #   in Loop: Header=BB78_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB78_627
.LBB78_623:                             # %cond.false3095
                                        #   in Loop: Header=BB78_614 Depth=4
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB78_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB78_626
.LBB78_625:                             # %cond.false3102
                                        #   in Loop: Header=BB78_614 Depth=4
	movl	$1, %eax
	jmp	.LBB78_626
.LBB78_626:                             # %cond.end3103
                                        #   in Loop: Header=BB78_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_627:                             # %cond.end3108
                                        #   in Loop: Header=BB78_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB78_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB78_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB78_629:                             # %if.end3121
                                        #   in Loop: Header=BB78_614 Depth=4
	jmp	.LBB78_630
.LBB78_630:                             # %if.end3122
                                        #   in Loop: Header=BB78_614 Depth=4
	jmp	.LBB78_631
.LBB78_631:                             # %for.inc3123
                                        #   in Loop: Header=BB78_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB78_614
.LBB78_632:                             # %for.end3125
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	$0, -24(%rbp)
.LBB78_633:                             # %for.cond3126
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB78_633 Depth=4
	movl	$0, -20(%rbp)
.LBB78_635:                             # %for.cond3130
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        #         Parent Loop BB78_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB78_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB78_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB78_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_635
.LBB78_638:                             # %for.end3187
                                        #   in Loop: Header=BB78_633 Depth=4
	jmp	.LBB78_639
.LBB78_639:                             # %for.inc3188
                                        #   in Loop: Header=BB78_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_633
.LBB78_640:                             # %for.end3190
                                        #   in Loop: Header=BB78_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-204(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB78_642:                             # %for.cond3193
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB78_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB78_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB78_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB78_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB78_647
.LBB78_646:                             # %cond.false3210
                                        #   in Loop: Header=BB78_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_647:                             # %cond.end3213
                                        #   in Loop: Header=BB78_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB78_652
.LBB78_648:                             # %cond.false3217
                                        #   in Loop: Header=BB78_642 Depth=4
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB78_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB78_651
.LBB78_650:                             # %cond.false3224
                                        #   in Loop: Header=BB78_642 Depth=4
	movl	$1, %eax
	jmp	.LBB78_651
.LBB78_651:                             # %cond.end3225
                                        #   in Loop: Header=BB78_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_652:                             # %cond.end3230
                                        #   in Loop: Header=BB78_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB78_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB78_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB78_654:                             # %if.end3243
                                        #   in Loop: Header=BB78_642 Depth=4
	jmp	.LBB78_655
.LBB78_655:                             # %for.inc3244
                                        #   in Loop: Header=BB78_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB78_642
.LBB78_656:                             # %for.end3246
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB78_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB78_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_660
.LBB78_659:                             # %cond.false3256
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB78_660:                             # %cond.end3259
                                        #   in Loop: Header=BB78_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB78_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB78_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB78_663
.LBB78_662:                             # %cond.false3269
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB78_663:                             # %cond.end3271
                                        #   in Loop: Header=BB78_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB78_668
.LBB78_664:                             # %cond.false3276
                                        #   in Loop: Header=BB78_603 Depth=3
	vmovsd	.LCPI78_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB78_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB78_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB78_667
.LBB78_666:                             # %cond.false3283
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	$1, %eax
	jmp	.LBB78_667
.LBB78_667:                             # %cond.end3284
                                        #   in Loop: Header=BB78_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB78_668:                             # %cond.end3289
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	%eax, -84(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-84(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB78_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB78_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB78_676
.LBB78_671:                             # %if.else3299
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB78_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jg	.LBB78_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB78_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB78_675
.LBB78_674:                             # %if.else3306
                                        #   in Loop: Header=BB78_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB78_675:                             # %if.end3307
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_676
.LBB78_676:                             # %if.end3308
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	$0, -24(%rbp)
.LBB78_677:                             # %for.cond3309
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB78_677 Depth=4
	movl	$0, -20(%rbp)
.LBB78_679:                             # %for.cond3313
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        #         Parent Loop BB78_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB78_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB78_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB78_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_679
.LBB78_682:                             # %for.end3349
                                        #   in Loop: Header=BB78_677 Depth=4
	jmp	.LBB78_683
.LBB78_683:                             # %for.inc3350
                                        #   in Loop: Header=BB78_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_677
.LBB78_684:                             # %for.end3352
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_686
.LBB78_685:                             # %if.else3353
                                        #   in Loop: Header=BB78_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_686:                             # %if.end3354
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_687
.LBB78_687:                             # %if.end3355
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB78_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-272(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB78_695
.LBB78_689:                             # %if.else3360
                                        #   in Loop: Header=BB78_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB78_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB78_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB78_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB78_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB78_693
.LBB78_692:                             # %cond.false3374
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB78_693:                             # %cond.end3379
                                        #   in Loop: Header=BB78_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB78_694:                             # %if.end3385
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_695
.LBB78_695:                             # %if.end3386
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB78_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB78_699
.LBB78_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-176(%rbp), %eax
	jge	.LBB78_732
.LBB78_699:                             # %if.then3398
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -176(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-272(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB78_701:                             # %for.cond3422
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_703 Depth 5
                                        #             Child Loop BB78_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB78_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB78_701 Depth=4
	movl	$0, -24(%rbp)
.LBB78_703:                             # %for.cond3426
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        #         Parent Loop BB78_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB78_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB78_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB78_703 Depth=5
	movl	$0, -20(%rbp)
.LBB78_705:                             # %for.cond3430
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        #         Parent Loop BB78_701 Depth=4
                                        #           Parent Loop BB78_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB78_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB78_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB78_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_705
.LBB78_708:                             # %for.end3453
                                        #   in Loop: Header=BB78_703 Depth=5
	jmp	.LBB78_709
.LBB78_709:                             # %for.inc3454
                                        #   in Loop: Header=BB78_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_703
.LBB78_710:                             # %for.end3456
                                        #   in Loop: Header=BB78_701 Depth=4
	jmp	.LBB78_711
.LBB78_711:                             # %for.inc3457
                                        #   in Loop: Header=BB78_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_701
.LBB78_712:                             # %for.end3459
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_713:                             # %for.cond3460
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB78_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_715:                             # %for.cond3465
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        #         Parent Loop BB78_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB78_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB78_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_715
.LBB78_718:                             # %for.end3494
                                        #   in Loop: Header=BB78_713 Depth=4
	jmp	.LBB78_719
.LBB78_719:                             # %for.inc3495
                                        #   in Loop: Header=BB78_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_713
.LBB78_720:                             # %for.end3497
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_721
.LBB78_721:                             # %if.end3498
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_723:                             # %for.cond3502
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB78_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_725:                             # %for.cond3507
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_603 Depth=3
                                        #         Parent Loop BB78_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB78_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB78_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_725
.LBB78_728:                             # %for.end3562
                                        #   in Loop: Header=BB78_723 Depth=4
	jmp	.LBB78_729
.LBB78_729:                             # %for.inc3563
                                        #   in Loop: Header=BB78_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_723
.LBB78_730:                             # %for.end3565
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_731
.LBB78_731:                             # %if.end3566
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB78_732:                             # %if.end3567
                                        #   in Loop: Header=BB78_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB78_733:                             # %if.end3568
                                        #   in Loop: Header=BB78_603 Depth=3
	jmp	.LBB78_734
.LBB78_734:                             # %for.inc3569
                                        #   in Loop: Header=BB78_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB78_603
.LBB78_735:                             # %for.end3571
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-176(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB78_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB78_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB78_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB78_739
.LBB78_738:                             # %cond.true3588
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB78_740
.LBB78_739:                             # %cond.false3589
                                        #   in Loop: Header=BB78_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB78_740
.LBB78_740:                             # %cond.end3590
                                        #   in Loop: Header=BB78_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB78_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB78_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB78_743
.LBB78_742:                             # %cond.true3599
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB78_744
.LBB78_743:                             # %cond.false3600
                                        #   in Loop: Header=BB78_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB78_744
.LBB78_744:                             # %cond.end3601
                                        #   in Loop: Header=BB78_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB78_745:                             # %for.cond3619
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_747 Depth 4
                                        #           Child Loop BB78_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB78_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB78_745 Depth=3
	movl	$0, -24(%rbp)
.LBB78_747:                             # %for.cond3623
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB78_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB78_747 Depth=4
	movl	$0, -20(%rbp)
.LBB78_749:                             # %for.cond3627
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_745 Depth=3
                                        #         Parent Loop BB78_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB78_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB78_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB78_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_749
.LBB78_752:                             # %for.end3650
                                        #   in Loop: Header=BB78_747 Depth=4
	jmp	.LBB78_753
.LBB78_753:                             # %for.inc3651
                                        #   in Loop: Header=BB78_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_747
.LBB78_754:                             # %for.end3653
                                        #   in Loop: Header=BB78_745 Depth=3
	jmp	.LBB78_755
.LBB78_755:                             # %for.inc3654
                                        #   in Loop: Header=BB78_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_745
.LBB78_756:                             # %for.end3656
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_757:                             # %for.cond3657
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB78_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_759:                             # %for.cond3662
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB78_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB78_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_759
.LBB78_762:                             # %for.end3691
                                        #   in Loop: Header=BB78_757 Depth=3
	jmp	.LBB78_763
.LBB78_763:                             # %for.inc3692
                                        #   in Loop: Header=BB78_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_757
.LBB78_764:                             # %for.end3694
                                        #   in Loop: Header=BB78_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_766:                             # %for.cond3698
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB78_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_768:                             # %for.cond3703
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB78_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB78_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_768
.LBB78_771:                             # %for.end3758
                                        #   in Loop: Header=BB78_766 Depth=3
	jmp	.LBB78_772
.LBB78_772:                             # %for.inc3759
                                        #   in Loop: Header=BB78_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_766
.LBB78_773:                             # %for.end3761
                                        #   in Loop: Header=BB78_601 Depth=2
	jmp	.LBB78_774
.LBB78_774:                             # %if.end3762
                                        #   in Loop: Header=BB78_601 Depth=2
	jmp	.LBB78_775
.LBB78_775:                             # %if.end3763
                                        #   in Loop: Header=BB78_601 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB78_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB78_777:                             # %if.end3769
                                        #   in Loop: Header=BB78_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_778:                             # %for.cond3781
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB78_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_780:                             # %for.cond3786
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB78_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB78_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_780
.LBB78_783:                             # %for.end3797
                                        #   in Loop: Header=BB78_778 Depth=3
	jmp	.LBB78_784
.LBB78_784:                             # %for.inc3798
                                        #   in Loop: Header=BB78_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_778
.LBB78_785:                             # %for.end3800
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_786:                             # %for.cond3802
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB78_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB78_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_786
.LBB78_789:                             # %for.end3811
                                        #   in Loop: Header=BB78_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB78_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_791:                             # %for.cond3819
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB78_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_793:                             # %for.cond3824
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_601 Depth=2
                                        #       Parent Loop BB78_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB78_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB78_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_793
.LBB78_796:                             # %for.end3844
                                        #   in Loop: Header=BB78_791 Depth=3
	jmp	.LBB78_797
.LBB78_797:                             # %for.inc3845
                                        #   in Loop: Header=BB78_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_791
.LBB78_798:                             # %for.end3847
                                        #   in Loop: Header=BB78_601 Depth=2
	jmp	.LBB78_799
.LBB78_799:                             # %if.end3848
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB78_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB78_601
.LBB78_801:                             # %for.end3860
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_802
.LBB78_802:                             # %if.end3861
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB78_803:                             # %for.cond3862
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB78_803 Depth=2
	movl	$0, -24(%rbp)
.LBB78_805:                             # %for.cond3866
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB78_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB78_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_805
.LBB78_808:                             # %for.end3890
                                        #   in Loop: Header=BB78_803 Depth=2
	jmp	.LBB78_809
.LBB78_809:                             # %for.inc3891
                                        #   in Loop: Header=BB78_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_803
.LBB78_810:                             # %for.end3893
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB78_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB78_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB78_825
.LBB78_813:                             # %if.then3902
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB78_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB78_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_822
.LBB78_816:                             # %if.else3910
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB78_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB78_821
.LBB78_818:                             # %if.else3915
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB78_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_820:                             # %if.end3922
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_821
.LBB78_821:                             # %if.end3923
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_822
.LBB78_822:                             # %if.end3924
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_824
.LBB78_823:                             # %if.else3925
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_824:                             # %if.end3927
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_825
.LBB78_825:                             # %if.end3928
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_827
.LBB78_826:                             # %if.else3929
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB78_827:                             # %if.end3930
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB78_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB78_830
.LBB78_829:                             # %if.then3938
                                        #   in Loop: Header=BB78_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB78_830:                             # %if.end3939
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_832
.LBB78_831:                             # %if.else3940
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB78_832:                             # %if.end3941
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB78_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB78_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB78_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-276(%rbp), %rsi
	leaq	-316(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB78_835:                             # %for.cond3949
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_853 Depth 3
                                        #         Child Loop BB78_908 Depth 4
                                        #           Child Loop BB78_911 Depth 5
                                        #             Child Loop BB78_913 Depth 6
                                        #           Child Loop BB78_920 Depth 5
                                        #             Child Loop BB78_922 Depth 6
                                        #         Child Loop BB78_955 Depth 4
                                        #           Child Loop BB78_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB78_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB78_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB78_846
.LBB78_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB78_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB78_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB78_846
.LBB78_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB78_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB78_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB78_846
.LBB78_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB78_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB78_835 Depth=2
	cmpl	$0, -276(%rbp)
	je	.LBB78_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB78_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB78_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB78_835 Depth=2
	cmpl	$0, -316(%rbp)
	jne	.LBB78_847
.LBB78_846:                             # %if.then3982
                                        #   in Loop: Header=BB78_835 Depth=2
	jmp	.LBB78_976
.LBB78_847:                             # %if.end3983
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB78_835 Depth=2
	movl	$11, -304(%rbp)
	jmp	.LBB78_850
.LBB78_849:                             # %if.else3987
                                        #   in Loop: Header=BB78_835 Depth=2
	movl	$8, -304(%rbp)
.LBB78_850:                             # %if.end3988
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB78_852:                             # %if.end3994
                                        #   in Loop: Header=BB78_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB78_853:                             # %for.cond3995
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_908 Depth 4
                                        #           Child Loop BB78_911 Depth 5
                                        #             Child Loop BB78_913 Depth 6
                                        #           Child Loop BB78_920 Depth 5
                                        #             Child Loop BB78_922 Depth 6
                                        #         Child Loop BB78_955 Depth 4
                                        #           Child Loop BB78_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB78_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB78_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB78_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB78_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB78_857:                             # %if.end4010
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB78_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB78_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB78_866
.LBB78_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB78_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB78_866
.LBB78_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB78_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -276(%rbp)
	je	.LBB78_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB78_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -316(%rbp)
	jne	.LBB78_867
.LBB78_866:                             # %if.then4032
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_974
.LBB78_867:                             # %if.end4033
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_869
.LBB78_868:                             # %if.else4034
                                        #   in Loop: Header=BB78_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB78_869:                             # %if.end4037
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB78_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB78_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB78_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB78_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB78_877:                             # %if.end4066
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_878
.LBB78_878:                             # %if.end4067
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB78_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB78_880:                             # %if.end4072
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB78_881:                             # %if.end4074
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB78_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB78_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB78_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB78_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB78_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB78_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB78_887:                             # %if.end4092
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_888
.LBB78_888:                             # %if.end4093
                                        #   in Loop: Header=BB78_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB78_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB78_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB78_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB78_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_902
.LBB78_893:                             # %if.else4110
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB78_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB78_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_901
.LBB78_897:                             # %if.else4120
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB78_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB78_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB78_900:                             # %if.end4128
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_901
.LBB78_901:                             # %if.end4129
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_902
.LBB78_902:                             # %if.end4130
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_903
.LBB78_903:                             # %if.end4131
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB78_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB78_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB78_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB78_947
.LBB78_907:                             # %if.then4146
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_908
.LBB78_908:                             # %while.body
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_911 Depth 5
                                        #             Child Loop BB78_913 Depth 6
                                        #           Child Loop BB78_920 Depth 5
                                        #             Child Loop BB78_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB78_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB78_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB78_908 Depth=4
	movl	$0, -20(%rbp)
.LBB78_911:                             # %for.cond4153
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        #         Parent Loop BB78_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB78_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB78_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB78_911 Depth=5
	movl	$0, -24(%rbp)
.LBB78_913:                             # %for.cond4157
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        #         Parent Loop BB78_908 Depth=4
                                        #           Parent Loop BB78_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB78_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB78_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB78_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_913
.LBB78_916:                             # %for.end4182
                                        #   in Loop: Header=BB78_911 Depth=5
	jmp	.LBB78_917
.LBB78_917:                             # %for.inc4183
                                        #   in Loop: Header=BB78_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_911
.LBB78_918:                             # %for.end4185
                                        #   in Loop: Header=BB78_908 Depth=4
	jmp	.LBB78_928
.LBB78_919:                             # %if.else4186
                                        #   in Loop: Header=BB78_908 Depth=4
	movl	$0, -20(%rbp)
.LBB78_920:                             # %for.cond4187
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        #         Parent Loop BB78_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB78_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB78_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB78_920 Depth=5
	movl	$0, -24(%rbp)
.LBB78_922:                             # %for.cond4191
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        #         Parent Loop BB78_908 Depth=4
                                        #           Parent Loop BB78_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB78_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB78_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB78_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_922
.LBB78_925:                             # %for.end4215
                                        #   in Loop: Header=BB78_920 Depth=5
	jmp	.LBB78_926
.LBB78_926:                             # %for.inc4216
                                        #   in Loop: Header=BB78_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_920
.LBB78_927:                             # %for.end4218
                                        #   in Loop: Header=BB78_908 Depth=4
	jmp	.LBB78_928
.LBB78_928:                             # %if.end4219
                                        #   in Loop: Header=BB78_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB78_929:                             # %if.end4220
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB78_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB78_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB78_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB78_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB78_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB78_908 Depth=4
	jmp	.LBB78_908
.LBB78_935:                             # %if.else4236
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB78_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB78_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB78_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB78_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_934
.LBB78_940:                             # %if.else4250
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB78_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB78_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB78_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB78_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB78_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_934
.LBB78_944:                             # %if.else4262
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB78_946
.LBB78_945:                             # %if.else4264
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_946
.LBB78_946:                             # %while.end
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_947
.LBB78_947:                             # %if.end4265
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB78_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB78_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB78_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB78_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB78_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB78_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	$0, -20(%rbp)
.LBB78_955:                             # %for.cond4288
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB78_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB78_955 Depth=4
	movl	$0, -24(%rbp)
.LBB78_957:                             # %for.cond4292
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_835 Depth=2
                                        #       Parent Loop BB78_853 Depth=3
                                        #         Parent Loop BB78_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB78_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB78_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB78_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_957
.LBB78_960:                             # %for.end4316
                                        #   in Loop: Header=BB78_955 Depth=4
	jmp	.LBB78_961
.LBB78_961:                             # %for.inc4317
                                        #   in Loop: Header=BB78_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_955
.LBB78_962:                             # %for.end4319
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB78_963:                             # %if.end4320
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_964
.LBB78_964:                             # %if.end4321
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_965
.LBB78_965:                             # %if.end4322
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB78_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB78_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB78_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB78_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB78_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB78_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB78_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB78_972:                             # %if.end4356
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_973
.LBB78_973:                             # %if.end4357
                                        #   in Loop: Header=BB78_853 Depth=3
	jmp	.LBB78_974
.LBB78_974:                             # %for.inc4358
                                        #   in Loop: Header=BB78_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB78_853
.LBB78_975:                             # %for.end4360
                                        #   in Loop: Header=BB78_835 Depth=2
	jmp	.LBB78_976
.LBB78_976:                             # %for.inc4361
                                        #   in Loop: Header=BB78_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB78_835
.LBB78_977:                             # %for.end4364
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1082
.LBB78_978:                             # %if.else4365
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB78_980:                             # %if.end4371
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB78_981:                             # %for.cond4372
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1014 Depth 3
                                        #         Child Loop BB78_1017 Depth 4
                                        #           Child Loop BB78_1019 Depth 5
                                        #         Child Loop BB78_1026 Depth 4
                                        #           Child Loop BB78_1028 Depth 5
                                        #       Child Loop BB78_1061 Depth 3
                                        #         Child Loop BB78_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB78_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB78_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB78_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB78_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB78_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB78_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB78_990:                             # %if.end4407
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_991
.LBB78_991:                             # %if.end4408
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB78_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB78_993:                             # %if.end4413
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB78_994:                             # %if.end4415
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB78_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB78_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB78_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB78_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_1008
.LBB78_999:                             # %if.else4433
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB78_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB78_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB78_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_1007
.LBB78_1003:                            # %if.else4443
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB78_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB78_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB78_1006:                            # %if.end4451
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1007
.LBB78_1007:                            # %if.end4452
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1008
.LBB78_1008:                            # %if.end4453
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1009
.LBB78_1009:                            # %if.end4454
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB78_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB78_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB78_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB78_1053
.LBB78_1013:                            # %if.then4470
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1014
.LBB78_1014:                            # %while.body4471
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_1017 Depth 4
                                        #           Child Loop BB78_1019 Depth 5
                                        #         Child Loop BB78_1026 Depth 4
                                        #           Child Loop BB78_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB78_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB78_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB78_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB78_1017:                            # %for.cond4478
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        #       Parent Loop BB78_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB78_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB78_1019:                            # %for.cond4482
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        #       Parent Loop BB78_1014 Depth=3
                                        #         Parent Loop BB78_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB78_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB78_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1019
.LBB78_1022:                            # %for.end4507
                                        #   in Loop: Header=BB78_1017 Depth=4
	jmp	.LBB78_1023
.LBB78_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB78_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1017
.LBB78_1024:                            # %for.end4510
                                        #   in Loop: Header=BB78_1014 Depth=3
	jmp	.LBB78_1034
.LBB78_1025:                            # %if.else4511
                                        #   in Loop: Header=BB78_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB78_1026:                            # %for.cond4512
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        #       Parent Loop BB78_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB78_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB78_1028:                            # %for.cond4516
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        #       Parent Loop BB78_1014 Depth=3
                                        #         Parent Loop BB78_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB78_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB78_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1028
.LBB78_1031:                            # %for.end4540
                                        #   in Loop: Header=BB78_1026 Depth=4
	jmp	.LBB78_1032
.LBB78_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB78_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1026
.LBB78_1033:                            # %for.end4543
                                        #   in Loop: Header=BB78_1014 Depth=3
	jmp	.LBB78_1034
.LBB78_1034:                            # %if.end4544
                                        #   in Loop: Header=BB78_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB78_1035:                            # %if.end4545
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB78_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB78_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB78_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB78_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB78_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB78_1014 Depth=3
	jmp	.LBB78_1014
.LBB78_1041:                            # %if.else4561
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB78_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB78_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB78_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB78_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_1040
.LBB78_1046:                            # %if.else4575
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB78_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB78_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB78_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB78_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB78_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_1040
.LBB78_1050:                            # %if.else4587
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB78_1052
.LBB78_1051:                            # %if.else4589
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1052
.LBB78_1052:                            # %while.end4590
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1053
.LBB78_1053:                            # %if.end4591
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB78_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB78_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB78_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB78_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB78_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB78_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB78_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1061:                            # %for.cond4615
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB78_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB78_1063:                            # %for.cond4619
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_981 Depth=2
                                        #       Parent Loop BB78_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB78_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB78_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1063
.LBB78_1066:                            # %for.end4643
                                        #   in Loop: Header=BB78_1061 Depth=3
	jmp	.LBB78_1067
.LBB78_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB78_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1061
.LBB78_1068:                            # %for.end4646
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB78_1069:                            # %if.end4647
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1070
.LBB78_1070:                            # %if.end4648
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1071
.LBB78_1071:                            # %if.end4649
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB78_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB78_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB78_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB78_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB78_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB78_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB78_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB78_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB78_1078:                            # %if.end4683
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1079
.LBB78_1079:                            # %if.end4684
                                        #   in Loop: Header=BB78_981 Depth=2
	jmp	.LBB78_1080
.LBB78_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB78_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB78_981
.LBB78_1081:                            # %for.end4687
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1082
.LBB78_1082:                            # %if.end4688
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1284
.LBB78_1083:                            # %if.else4689
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -300(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB78_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB78_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB78_1085:                            # %if.end4695
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB78_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB78_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -256(%rbp)
	je	.LBB78_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB78_1090
	jmp	.LBB78_1089
.LBB78_1089:                            # %if.then4702
                                        #   in Loop: Header=BB78_171 Depth=1
	subl	$2, %eax
	je	.LBB78_1097
	jmp	.LBB78_1098
.LBB78_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB78_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB78_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB78_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB78_1095
.LBB78_1094:                            # %if.then4716
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_1096
.LBB78_1095:                            # %if.else4717
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_1096:                            # %if.end4718
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1099
.LBB78_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-208(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_1099
.LBB78_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB78_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1101
.LBB78_1100:                            # %if.else4722
                                        #   in Loop: Header=BB78_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB78_1101:                            # %if.end4724
                                        #   in Loop: Header=BB78_171 Depth=1
	vmovsd	.LCPI78_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI78_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB78_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB78_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB78_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB78_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_1110
.LBB78_1106:                            # %if.else4743
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-208(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB78_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB78_1109
.LBB78_1108:                            # %if.else4748
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_1109:                            # %if.end4750
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1110
.LBB78_1110:                            # %if.end4751
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1112
.LBB78_1111:                            # %if.else4752
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_1112:                            # %if.end4754
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1113:                            # %for.cond4755
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB78_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB78_1115:                            # %for.cond4759
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB78_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB78_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1115
.LBB78_1118:                            # %for.end4785
                                        #   in Loop: Header=BB78_1113 Depth=2
	jmp	.LBB78_1119
.LBB78_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB78_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1113
.LBB78_1120:                            # %for.end4788
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB78_1122
.LBB78_1121:                            # %if.else4789
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB78_1122:                            # %if.end4792
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1123
.LBB78_1123:                            # %if.end4793
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB78_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB78_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1127:                            # %for.cond4806
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1129 Depth 3
                                        #         Child Loop BB78_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB78_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB78_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB78_1129:                            # %for.cond4810
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB78_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB78_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB78_1131:                            # %for.cond4814
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1127 Depth=2
                                        #       Parent Loop BB78_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB78_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB78_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB78_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB78_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB78_1134:                            # %if.end4826
                                        #   in Loop: Header=BB78_1131 Depth=4
	jmp	.LBB78_1135
.LBB78_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB78_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_1131
.LBB78_1136:                            # %for.end4829
                                        #   in Loop: Header=BB78_1129 Depth=3
	jmp	.LBB78_1137
.LBB78_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB78_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1129
.LBB78_1138:                            # %for.end4832
                                        #   in Loop: Header=BB78_1127 Depth=2
	jmp	.LBB78_1139
.LBB78_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB78_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1127
.LBB78_1140:                            # %for.end4835
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
	movl	$0, -24(%rbp)
.LBB78_1141:                            # %for.cond4840
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB78_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1143:                            # %for.cond4844
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB78_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB78_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1143
.LBB78_1146:                            # %for.end4877
                                        #   in Loop: Header=BB78_1141 Depth=2
	jmp	.LBB78_1147
.LBB78_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB78_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1141
.LBB78_1148:                            # %for.end4880
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1149
.LBB78_1149:                            # %if.end4881
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB78_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB78_1151:                            # %if.end4889
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -24(%rbp)
.LBB78_1152:                            # %for.cond4890
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB78_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1154:                            # %for.cond4894
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB78_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB78_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1154
.LBB78_1157:                            # %for.end4913
                                        #   in Loop: Header=BB78_1152 Depth=2
	jmp	.LBB78_1158
.LBB78_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB78_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1152
.LBB78_1159:                            # %for.end4916
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1160:                            # %for.cond4917
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB78_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB78_1162:                            # %for.cond4921
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB78_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB78_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1162
.LBB78_1165:                            # %for.end4947
                                        #   in Loop: Header=BB78_1160 Depth=2
	jmp	.LBB78_1166
.LBB78_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB78_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1160
.LBB78_1167:                            # %for.end4950
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB78_1169
.LBB78_1168:                            # %if.else4952
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB78_1169:                            # %if.end4954
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1170
.LBB78_1170:                            # %if.end4955
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB78_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -172(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB78_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1174:                            # %for.cond4968
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1176 Depth 3
                                        #         Child Loop BB78_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB78_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB78_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB78_1176:                            # %for.cond4972
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB78_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB78_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB78_1178:                            # %for.cond4976
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1174 Depth=2
                                        #       Parent Loop BB78_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB78_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB78_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB78_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB78_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB78_1181:                            # %if.end4988
                                        #   in Loop: Header=BB78_1178 Depth=4
	jmp	.LBB78_1182
.LBB78_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB78_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_1178
.LBB78_1183:                            # %for.end4991
                                        #   in Loop: Header=BB78_1176 Depth=3
	jmp	.LBB78_1184
.LBB78_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB78_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1176
.LBB78_1185:                            # %for.end4994
                                        #   in Loop: Header=BB78_1174 Depth=2
	jmp	.LBB78_1186
.LBB78_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB78_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1174
.LBB78_1187:                            # %for.end4997
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-172(%rbp), %eax
	movl	%eax, -172(%rbp)
.LBB78_1188:                            # %if.end5002
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-172(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB78_1189:                            # %for.cond5004
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB78_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB78_1191:                            # %for.cond5008
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB78_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB78_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1191
.LBB78_1194:                            # %for.end5034
                                        #   in Loop: Header=BB78_1189 Depth=2
	jmp	.LBB78_1195
.LBB78_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB78_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1189
.LBB78_1196:                            # %for.end5037
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB78_1198
.LBB78_1197:                            # %if.else5039
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB78_1198:                            # %if.end5043
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1199
.LBB78_1199:                            # %if.end5044
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB78_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB78_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1202:                            # %for.cond5053
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB78_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB78_1204:                            # %for.cond5057
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB78_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB78_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1204
.LBB78_1207:                            # %for.end5084
                                        #   in Loop: Header=BB78_1202 Depth=2
	jmp	.LBB78_1208
.LBB78_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB78_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1202
.LBB78_1209:                            # %for.end5087
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -24(%rbp)
.LBB78_1211:                            # %for.cond5091
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB78_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1213:                            # %for.cond5095
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB78_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -180(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movl	-224(%rbp), %eax
	subl	-180(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-180(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -252(%rbp)
	movl	-220(%rbp), %eax
	subl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-252(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB78_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1213
.LBB78_1216:                            # %for.end5194
                                        #   in Loop: Header=BB78_1211 Depth=2
	jmp	.LBB78_1217
.LBB78_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB78_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1211
.LBB78_1218:                            # %for.end5197
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1219
.LBB78_1219:                            # %if.end5198
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	$0, -24(%rbp)
.LBB78_1221:                            # %for.cond5204
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB78_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1223:                            # %for.cond5208
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB78_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB78_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1223
.LBB78_1226:                            # %for.end5232
                                        #   in Loop: Header=BB78_1221 Depth=2
	jmp	.LBB78_1227
.LBB78_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB78_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1221
.LBB78_1228:                            # %for.end5235
                                        #   in Loop: Header=BB78_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB78_1229:                            # %for.cond5237
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB78_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1231:                            # %for.cond5241
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB78_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB78_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1231
.LBB78_1234:                            # %for.end5265
                                        #   in Loop: Header=BB78_1229 Depth=2
	jmp	.LBB78_1235
.LBB78_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB78_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1229
.LBB78_1236:                            # %for.end5268
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB78_1237:                            # %for.cond5270
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB78_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1239:                            # %for.cond5274
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB78_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB78_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1239
.LBB78_1242:                            # %for.end5289
                                        #   in Loop: Header=BB78_1237 Depth=2
	jmp	.LBB78_1243
.LBB78_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB78_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1237
.LBB78_1244:                            # %for.end5292
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB78_1245:                            # %for.cond5296
                                        #   Parent Loop BB78_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB78_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB78_1247:                            # %for.cond5300
                                        #   Parent Loop BB78_171 Depth=1
                                        #     Parent Loop BB78_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -252(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-252(%rbp), %ecx
	movl	%ecx, -220(%rbp)
	movl	-252(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -180(%rbp)
	movl	-180(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -224(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-180(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB78_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB78_1251
.LBB78_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-180(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB78_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB78_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB78_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB78_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB78_1257
.LBB78_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	movl	-180(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB78_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB78_1256
.LBB78_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-180(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB78_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB78_1247 Depth=3
.LBB78_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB78_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_1260
.LBB78_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB78_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB78_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB78_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB78_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB78_1266
.LBB78_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB78_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB78_1265
.LBB78_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB78_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB78_1247 Depth=3
.LBB78_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB78_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB78_1269
.LBB78_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB78_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB78_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB78_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB78_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB78_1275
.LBB78_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB78_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB78_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB78_1274
.LBB78_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB78_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB78_1247 Depth=3
.LBB78_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB78_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB78_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1247
.LBB78_1277:                            # %for.end5546
                                        #   in Loop: Header=BB78_1245 Depth=2
	jmp	.LBB78_1278
.LBB78_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB78_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1245
.LBB78_1279:                            # %for.end5549
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1280
.LBB78_1280:                            # %if.end5550
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1282
.LBB78_1281:                            # %if.else5551
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-300(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB78_1282:                            # %if.end5554
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1283
.LBB78_1283:                            # %if.end5555
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1284
.LBB78_1284:                            # %if.end5556
                                        #   in Loop: Header=BB78_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB78_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB78_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB78_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB78_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB78_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB78_1289:                            # %if.end5574
                                        #   in Loop: Header=BB78_171 Depth=1
	jmp	.LBB78_1290
.LBB78_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB78_171 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
	jmp	.LBB78_171
.LBB78_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB78_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB78_1295
.LBB78_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB78_1299
.LBB78_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB78_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB78_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB78_1298:                            # %if.end5597
	jmp	.LBB78_1299
.LBB78_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB78_1395
.LBB78_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB78_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB78_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB78_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB78_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB78_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB78_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB78_1308:                            # %for.cond5623
                                        #   Parent Loop BB78_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB78_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB78_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_1308
.LBB78_1311:                            # %for.end5639
                                        #   in Loop: Header=BB78_1306 Depth=1
	jmp	.LBB78_1312
.LBB78_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB78_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1306
.LBB78_1313:                            # %for.end5642
	jmp	.LBB78_1370
.LBB78_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB78_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB78_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB78_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB78_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB78_1318:                            # %for.cond5651
                                        #   Parent Loop BB78_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB78_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB78_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB78_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_1318
.LBB78_1321:                            # %for.end5680
                                        #   in Loop: Header=BB78_1316 Depth=1
	jmp	.LBB78_1322
.LBB78_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB78_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1316
.LBB78_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB78_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB78_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1326:                            # %for.cond5688
                                        #   Parent Loop BB78_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB78_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB78_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1326
.LBB78_1329:                            # %for.end5707
                                        #   in Loop: Header=BB78_1324 Depth=1
	jmp	.LBB78_1330
.LBB78_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB78_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1324
.LBB78_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB78_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB78_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB78_1335:                            # %for.cond5718
                                        #   Parent Loop BB78_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB78_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB78_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1335
.LBB78_1338:                            # %for.end5752
                                        #   in Loop: Header=BB78_1333 Depth=1
	jmp	.LBB78_1339
.LBB78_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB78_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1333
.LBB78_1340:                            # %for.end5755
	jmp	.LBB78_1341
.LBB78_1341:                            # %if.end5756
	jmp	.LBB78_1342
.LBB78_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB78_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB78_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB78_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB78_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB78_1347:                            # %for.cond5772
                                        #   Parent Loop BB78_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB78_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB78_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB78_1347
.LBB78_1350:                            # %for.end5788
                                        #   in Loop: Header=BB78_1345 Depth=1
	jmp	.LBB78_1351
.LBB78_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB78_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1345
.LBB78_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB78_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB78_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB78_1356
# %bb.1355:                             # %if.then5800
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB78_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB78_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB78_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB78_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB78_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB78_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB78_1362:                            # %for.cond5816
                                        #   Parent Loop BB78_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB78_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB78_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB78_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_1362
.LBB78_1365:                            # %for.end5842
                                        #   in Loop: Header=BB78_1360 Depth=1
	jmp	.LBB78_1366
.LBB78_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB78_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_1360
.LBB78_1367:                            # %for.end5845
	jmp	.LBB78_1368
.LBB78_1368:                            # %if.end5846
	jmp	.LBB78_1369
.LBB78_1369:                            # %if.end5847
	jmp	.LBB78_1370
.LBB78_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB78_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB78_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB78_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB78_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB78_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB78_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB78_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB78_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB78_1382
.LBB78_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB78_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB78_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB78_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB78_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB78_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB78_1392
.LBB78_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB78_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB78_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB78_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB78_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB78_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB78_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB78_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB78_1394:                            # %if.end5973
	jmp	.LBB78_1395
.LBB78_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB78_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB78_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB78_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB78_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB78_1401
.LBB78_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB78_1402
.LBB78_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB78_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB78_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB78_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB78_1406
.LBB78_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB78_1406:                            # %if.end6019
	jmp	.LBB78_1407
.LBB78_1407:                            # %if.end6020
	jmp	.LBB78_1408
.LBB78_1408:                            # %if.end6021
	jmp	.LBB78_1409
.LBB78_1409:                            # %if.end6022
	jmp	.LBB78_1410
.LBB78_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB78_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB78_1413
.LBB78_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB78_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB78_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB78_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB78_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB78_1420
	jmp	.LBB78_1428
.LBB78_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB78_1428
	jmp	.LBB78_1420
.LBB78_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB78_1420
	jmp	.LBB78_1428
.LBB78_1420:                            # %land.lhs.true6050
	movq	-440(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB78_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB78_1425
	jmp	.LBB78_1428
.LBB78_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_1424
# %bb.1423:                             # %cond.true6058
	movq	-440(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB78_1428
	jmp	.LBB78_1425
.LBB78_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB78_1425
	jmp	.LBB78_1428
.LBB78_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB78_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB78_1427:                            # %if.end6068
	jmp	.LBB78_1428
.LBB78_1428:                            # %if.end6069
	jmp	.LBB78_1429
.LBB78_1429:                            # %if.end6070
	jmp	.LBB78_1430
.LBB78_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB78_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB78_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB78_1452
.LBB78_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB78_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB78_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB78_1437:                            # %lor.end6142
.LBB78_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB78_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB78_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB78_1441:                            # %lor.end6166
.LBB78_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB78_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB78_1445:                            # %lor.end6191
.LBB78_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB78_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB78_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB78_1449:                            # %lor.end6216
.LBB78_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB78_1451:                            # %if.end6232
	jmp	.LBB78_1452
.LBB78_1452:                            # %if.end6233
	jmp	.LBB78_1464
.LBB78_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB78_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB78_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB78_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB78_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB78_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB78_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB78_1463:                            # %if.end6319
	jmp	.LBB78_1464
.LBB78_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB78_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB78_1466:                            # %if.end6327
	cmpl	$1624270986, -408(%rbp) # imm = 0x60D0688A
	jne	.LBB78_1468
.LBB78_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_1467
.Lfunc_end78:
	.size	encode_one_macroblock.49, .Lfunc_end78-encode_one_macroblock.49
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.50 # -- Begin function SetModesAndRefframeForBlocks.50
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.50,@function
SetModesAndRefframeForBlocks.50:        # @SetModesAndRefframeForBlocks.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1141386640, -40(%rbp)  # imm = 0x44082D90
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB79_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB79_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB79_4
.LBB79_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB79_4
.LBB79_4:                               # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB79_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB79_7
.LBB79_6:                               # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB79_7:                               # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB79_42
# %bb.8:                                # %if.end
	movq	.LJTI79_0(,%rax,8), %rax
	jmpq	*%rax
.LBB79_9:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB79_10:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB79_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_14
.LBB79_13:                              # %cond.false26
                                        #   in Loop: Header=BB79_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB79_14
.LBB79_14:                              # %cond.end27
                                        #   in Loop: Header=BB79_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB79_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_10
.LBB79_16:                              # %for.end
	jmp	.LBB79_43
.LBB79_17:                              # %sw.bb31
	movl	$0, -4(%rbp)
.LBB79_18:                              # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB79_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_18
.LBB79_21:                              # %for.end49
	jmp	.LBB79_43
.LBB79_22:                              # %sw.bb50
	movl	$0, -4(%rbp)
.LBB79_23:                              # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB79_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB79_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_23
.LBB79_26:                              # %for.end71
	jmp	.LBB79_43
.LBB79_27:                              # %sw.bb72
	movl	$0, -4(%rbp)
.LBB79_28:                              # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB79_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB79_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_28
.LBB79_31:                              # %for.end85
	jmp	.LBB79_43
.LBB79_32:                              # %sw.bb86
	movl	$0, -4(%rbp)
.LBB79_33:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB79_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB79_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_33
.LBB79_36:                              # %for.end99
	jmp	.LBB79_43
.LBB79_37:                              # %sw.bb100
	movl	$0, -4(%rbp)
.LBB79_38:                              # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB79_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB79_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB79_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_38
.LBB79_41:                              # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB79_43
.LBB79_42:                              # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB79_43:                              # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB79_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB79_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB79_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB79_70
.LBB79_47:                              # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB79_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB79_49:                              # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	$0, -4(%rbp)
.LBB79_51:                              # %for.cond131
                                        #   Parent Loop BB79_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB79_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB79_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB79_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB79_55
.LBB79_54:                              # %if.else174
                                        #   in Loop: Header=BB79_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB79_55:                              # %if.end195
                                        #   in Loop: Header=BB79_51 Depth=2
	jmp	.LBB79_56
.LBB79_56:                              # %for.inc196
                                        #   in Loop: Header=BB79_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_51
.LBB79_57:                              # %for.end198
                                        #   in Loop: Header=BB79_49 Depth=1
	jmp	.LBB79_58
.LBB79_58:                              # %for.inc199
                                        #   in Loop: Header=BB79_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_49
.LBB79_59:                              # %for.end201
	jmp	.LBB79_69
.LBB79_60:                              # %if.else202
	movl	$0, -8(%rbp)
.LBB79_61:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	$0, -4(%rbp)
.LBB79_63:                              # %for.cond207
                                        #   Parent Loop BB79_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB79_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB79_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_63
.LBB79_66:                              # %for.end227
                                        #   in Loop: Header=BB79_61 Depth=1
	jmp	.LBB79_67
.LBB79_67:                              # %for.inc228
                                        #   in Loop: Header=BB79_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_61
.LBB79_68:                              # %for.end230
	jmp	.LBB79_69
.LBB79_69:                              # %if.end231
	jmp	.LBB79_127
.LBB79_70:                              # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB79_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB79_72:                              # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB79_72 Depth=1
	movl	$0, -4(%rbp)
.LBB79_74:                              # %for.cond239
                                        #   Parent Loop BB79_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB79_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB79_105
.LBB79_78:                              # %if.else298
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB79_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB79_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_90
.LBB79_82:                              # %land.lhs.true320
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB79_90
.LBB79_85:                              # %land.lhs.true331
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB79_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_90
.LBB79_87:                              # %land.lhs.true347
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_90
.LBB79_89:                              # %if.then356
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB79_104
.LBB79_90:                              # %if.else377
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_96
.LBB79_92:                              # %land.lhs.true393
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB79_96
.LBB79_95:                              # %cond.true404
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_97
.LBB79_96:                              # %cond.false410
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_97
.LBB79_97:                              # %cond.end411
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB79_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_102
.LBB79_99:                              # %land.lhs.true439
                                        #   in Loop: Header=BB79_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_102
.LBB79_101:                             # %cond.true448
                                        #   in Loop: Header=BB79_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_103
.LBB79_102:                             # %cond.false454
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_103
.LBB79_103:                             # %cond.end455
                                        #   in Loop: Header=BB79_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB79_104:                             # %if.end468
                                        #   in Loop: Header=BB79_74 Depth=2
	jmp	.LBB79_105
.LBB79_105:                             # %if.end469
                                        #   in Loop: Header=BB79_74 Depth=2
	jmp	.LBB79_106
.LBB79_106:                             # %for.inc470
                                        #   in Loop: Header=BB79_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_74
.LBB79_107:                             # %for.end472
                                        #   in Loop: Header=BB79_72 Depth=1
	jmp	.LBB79_108
.LBB79_108:                             # %for.inc473
                                        #   in Loop: Header=BB79_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_72
.LBB79_109:                             # %for.end475
	jmp	.LBB79_126
.LBB79_110:                             # %if.else476
	movl	$0, -8(%rbp)
.LBB79_111:                             # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB79_111 Depth=1
	movl	$0, -4(%rbp)
.LBB79_113:                             # %for.cond481
                                        #   Parent Loop BB79_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB79_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB79_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB79_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB79_120
.LBB79_116:                             # %land.lhs.true508
                                        #   in Loop: Header=BB79_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB79_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB79_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB79_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB79_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB79_120
.LBB79_119:                             # %cond.true519
                                        #   in Loop: Header=BB79_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB79_121
.LBB79_120:                             # %cond.false525
                                        #   in Loop: Header=BB79_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB79_121
.LBB79_121:                             # %cond.end526
                                        #   in Loop: Header=BB79_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB79_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_113
.LBB79_123:                             # %for.end541
                                        #   in Loop: Header=BB79_111 Depth=1
	jmp	.LBB79_124
.LBB79_124:                             # %for.inc542
                                        #   in Loop: Header=BB79_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_111
.LBB79_125:                             # %for.end544
	jmp	.LBB79_126
.LBB79_126:                             # %if.end545
	jmp	.LBB79_127
.LBB79_127:                             # %if.end546
	movl	$0, -8(%rbp)
.LBB79_128:                             # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB79_128 Depth=1
	movl	$0, -4(%rbp)
.LBB79_130:                             # %for.cond551
                                        #   Parent Loop BB79_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB79_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB79_134
.LBB79_133:                             # %cond.false584
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB79_134
.LBB79_134:                             # %cond.end585
                                        #   in Loop: Header=BB79_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB79_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_130
.LBB79_136:                             # %for.end598
                                        #   in Loop: Header=BB79_128 Depth=1
	jmp	.LBB79_137
.LBB79_137:                             # %for.inc599
                                        #   in Loop: Header=BB79_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_128
.LBB79_138:                             # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB79_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB79_140:                             # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB79_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB79_140 Depth=1
	movl	$0, -4(%rbp)
.LBB79_142:                             # %for.cond608
                                        #   Parent Loop BB79_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB79_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB79_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB79_146
.LBB79_145:                             # %cond.false642
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB79_146
.LBB79_146:                             # %cond.end643
                                        #   in Loop: Header=BB79_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB79_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_142
.LBB79_148:                             # %for.end657
                                        #   in Loop: Header=BB79_140 Depth=1
	jmp	.LBB79_149
.LBB79_149:                             # %for.inc658
                                        #   in Loop: Header=BB79_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_140
.LBB79_150:                             # %for.end660
	jmp	.LBB79_151
.LBB79_151:                             # %if.end661
	cmpl	$1141386640, -40(%rbp)  # imm = 0x44082D90
	jne	.LBB79_153
.LBB79_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_153:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_152
.Lfunc_end79:
	.size	SetModesAndRefframeForBlocks.50, .Lfunc_end79-SetModesAndRefframeForBlocks.50
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI79_0:
	.quad	.LBB79_9
	.quad	.LBB79_17
	.quad	.LBB79_17
	.quad	.LBB79_17
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_22
	.quad	.LBB79_27
	.quad	.LBB79_32
	.quad	.LBB79_42
	.quad	.LBB79_42
	.quad	.LBB79_37
                                        # -- End function
	.text
	.globl	StoreMVBlock8x8.51      # -- Begin function StoreMVBlock8x8.51
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.51,@function
StoreMVBlock8x8.51:                     # @StoreMVBlock8x8.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$219445728, -68(%rbp)   # imm = 0xD1479E0
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB80_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB80_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB80_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_5:                               # %for.cond7
                                        #   Parent Loop BB80_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB80_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB80_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB80_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_5
.LBB80_8:                               # %for.end
                                        #   in Loop: Header=BB80_3 Depth=1
	jmp	.LBB80_9
.LBB80_9:                               # %for.inc76
                                        #   in Loop: Header=BB80_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_3
.LBB80_10:                              # %for.end78
	jmp	.LBB80_11
.LBB80_11:                              # %if.end
	jmp	.LBB80_46
.LBB80_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB80_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB80_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB80_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_16:                              # %for.cond84
                                        #   Parent Loop BB80_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB80_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB80_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB80_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_16
.LBB80_19:                              # %for.end161
                                        #   in Loop: Header=BB80_14 Depth=1
	jmp	.LBB80_20
.LBB80_20:                              # %for.inc162
                                        #   in Loop: Header=BB80_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_14
.LBB80_21:                              # %for.end164
	jmp	.LBB80_45
.LBB80_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB80_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB80_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_26:                              # %for.cond171
                                        #   Parent Loop BB80_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB80_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB80_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB80_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_26
.LBB80_29:                              # %for.end248
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_30
.LBB80_30:                              # %for.inc249
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_24
.LBB80_31:                              # %for.end251
	jmp	.LBB80_44
.LBB80_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB80_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB80_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB80_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB80_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB80_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB80_36:                              # %for.cond258
                                        #   Parent Loop BB80_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB80_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB80_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB80_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB80_36
.LBB80_39:                              # %for.end407
                                        #   in Loop: Header=BB80_34 Depth=1
	jmp	.LBB80_40
.LBB80_40:                              # %for.inc408
                                        #   in Loop: Header=BB80_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB80_34
.LBB80_41:                              # %for.end410
	jmp	.LBB80_43
.LBB80_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB80_43:                              # %if.end412
	jmp	.LBB80_44
.LBB80_44:                              # %if.end413
	jmp	.LBB80_45
.LBB80_45:                              # %if.end414
	jmp	.LBB80_46
.LBB80_46:                              # %if.end415
	cmpl	$219445728, -68(%rbp)   # imm = 0xD1479E0
	jne	.LBB80_48
.LBB80_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_47
.Lfunc_end80:
	.size	StoreMVBlock8x8.51, .Lfunc_end80-StoreMVBlock8x8.51
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.52 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.52
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.52,@function
Mode_Decision_for_Intra4x4Macroblock.52: # @Mode_Decision_for_Intra4x4Macroblock.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$603455345, -24(%rbp)   # imm = 0x23F7FF71
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB81_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB81_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB81_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB81_4:                               # %if.end
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB81_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_1
.LBB81_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$603455345, -24(%rbp)   # imm = 0x23F7FF71
	jne	.LBB81_8
.LBB81_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_7
.Lfunc_end81:
	.size	Mode_Decision_for_Intra4x4Macroblock.52, .Lfunc_end81-Mode_Decision_for_Intra4x4Macroblock.52
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.53    # -- Begin function RestoreMVBlock8x8.53
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.53,@function
RestoreMVBlock8x8.53:                   # @RestoreMVBlock8x8.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$611499784, -68(%rbp)   # imm = 0x2472BF08
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB82_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB82_11
# %bb.2:                                # %if.then5
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_5:                               # %for.cond7
                                        #   Parent Loop BB82_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB82_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB82_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_5
.LBB82_8:                               # %for.end
                                        #   in Loop: Header=BB82_3 Depth=1
	jmp	.LBB82_9
.LBB82_9:                               # %for.inc76
                                        #   in Loop: Header=BB82_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_3
.LBB82_10:                              # %for.end78
	jmp	.LBB82_11
.LBB82_11:                              # %if.end
	jmp	.LBB82_46
.LBB82_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB82_22
# %bb.13:                               # %if.then80
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB82_14 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_16:                              # %for.cond84
                                        #   Parent Loop BB82_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB82_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB82_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_16
.LBB82_19:                              # %for.end161
                                        #   in Loop: Header=BB82_14 Depth=1
	jmp	.LBB82_20
.LBB82_20:                              # %for.inc162
                                        #   in Loop: Header=BB82_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_14
.LBB82_21:                              # %for.end164
	jmp	.LBB82_45
.LBB82_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB82_32
# %bb.23:                               # %if.then167
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_26:                              # %for.cond171
                                        #   Parent Loop BB82_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB82_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB82_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_26
.LBB82_29:                              # %for.end248
                                        #   in Loop: Header=BB82_24 Depth=1
	jmp	.LBB82_30
.LBB82_30:                              # %for.inc249
                                        #   in Loop: Header=BB82_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_24
.LBB82_31:                              # %for.end251
	jmp	.LBB82_44
.LBB82_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB82_42
# %bb.33:                               # %if.then254
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB82_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB82_34 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_36:                              # %for.cond258
                                        #   Parent Loop BB82_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB82_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB82_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB82_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_36
.LBB82_39:                              # %for.end407
                                        #   in Loop: Header=BB82_34 Depth=1
	jmp	.LBB82_40
.LBB82_40:                              # %for.inc408
                                        #   in Loop: Header=BB82_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_34
.LBB82_41:                              # %for.end410
	jmp	.LBB82_43
.LBB82_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB82_43:                              # %if.end412
	jmp	.LBB82_44
.LBB82_44:                              # %if.end413
	jmp	.LBB82_45
.LBB82_45:                              # %if.end414
	jmp	.LBB82_46
.LBB82_46:                              # %if.end415
	cmpl	$611499784, -68(%rbp)   # imm = 0x2472BF08
	jne	.LBB82_48
.LBB82_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_47
.Lfunc_end82:
	.size	RestoreMVBlock8x8.53, .Lfunc_end82-RestoreMVBlock8x8.53
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Mode_Decision_for_8x8IntraBlocks.54
.LCPI83_0:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI83_1:
	.quad	4618441417868443648     # double 6
	.text
	.globl	Mode_Decision_for_8x8IntraBlocks.54
	.p2align	4, 0x90
	.type	Mode_Decision_for_8x8IntraBlocks.54,@function
Mode_Decision_for_8x8IntraBlocks.54:    # @Mode_Decision_for_8x8IntraBlocks.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI83_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI83_1(%rip), %xmm2  # xmm2 = mem[0],zero
	movl	$187400910, -28(%rbp)   # imm = 0xB2B82CE
	movl	%edi, -24(%rbp)
	vmovsd	%xmm0, -48(%rbp)
	movq	%rsi, -40(%rbp)
	movl	$0, -16(%rbp)
	vmulsd	-48(%rbp), %xmm2, %xmm0
	vaddsd	%xmm1, %xmm0, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -12(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB83_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-24(%rbp), %edi
	movl	-12(%rbp), %esi
	vmovsd	-48(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rdx
	callq	Mode_Decision_for_4x4IntraBlocks
	cmpl	$0, %eax
	je	.LBB83_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$1, -16(%rbp)
.LBB83_4:                               # %if.end
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-40(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_1
.LBB83_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$187400910, -28(%rbp)   # imm = 0xB2B82CE
	jne	.LBB83_8
.LBB83_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_7
.Lfunc_end83:
	.size	Mode_Decision_for_8x8IntraBlocks.54, .Lfunc_end83-Mode_Decision_for_8x8IntraBlocks.54
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.55      # -- Begin function StoreMVBlock8x8.55
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.55,@function
StoreMVBlock8x8.55:                     # @StoreMVBlock8x8.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$267600894, -68(%rbp)   # imm = 0xFF343FE
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB84_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB84_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_5:                               # %for.cond7
                                        #   Parent Loop BB84_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB84_5 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB84_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_5
.LBB84_8:                               # %for.end
                                        #   in Loop: Header=BB84_3 Depth=1
	jmp	.LBB84_9
.LBB84_9:                               # %for.inc76
                                        #   in Loop: Header=BB84_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_3
.LBB84_10:                              # %for.end78
	jmp	.LBB84_11
.LBB84_11:                              # %if.end
	jmp	.LBB84_46
.LBB84_12:                              # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB84_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_14:                              # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_16:                              # %for.cond84
                                        #   Parent Loop BB84_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB84_16 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB84_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_16
.LBB84_19:                              # %for.end161
                                        #   in Loop: Header=BB84_14 Depth=1
	jmp	.LBB84_20
.LBB84_20:                              # %for.inc162
                                        #   in Loop: Header=BB84_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_14
.LBB84_21:                              # %for.end164
	jmp	.LBB84_45
.LBB84_22:                              # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB84_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_24:                              # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_26:                              # %for.cond171
                                        #   Parent Loop BB84_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB84_26 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB84_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_26
.LBB84_29:                              # %for.end248
                                        #   in Loop: Header=BB84_24 Depth=1
	jmp	.LBB84_30
.LBB84_30:                              # %for.inc249
                                        #   in Loop: Header=BB84_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_24
.LBB84_31:                              # %for.end251
	jmp	.LBB84_44
.LBB84_32:                              # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB84_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB84_34:                              # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB84_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB84_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB84_36:                              # %for.cond258
                                        #   Parent Loop BB84_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB84_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB84_36 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB84_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB84_36
.LBB84_39:                              # %for.end407
                                        #   in Loop: Header=BB84_34 Depth=1
	jmp	.LBB84_40
.LBB84_40:                              # %for.inc408
                                        #   in Loop: Header=BB84_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB84_34
.LBB84_41:                              # %for.end410
	jmp	.LBB84_43
.LBB84_42:                              # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB84_43:                              # %if.end412
	jmp	.LBB84_44
.LBB84_44:                              # %if.end413
	jmp	.LBB84_45
.LBB84_45:                              # %if.end414
	jmp	.LBB84_46
.LBB84_46:                              # %if.end415
	cmpl	$267600894, -68(%rbp)   # imm = 0xFF343FE
	jne	.LBB84_48
.LBB84_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_48:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_47
.Lfunc_end84:
	.size	StoreMVBlock8x8.55, .Lfunc_end84-StoreMVBlock8x8.55
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.56            # -- Begin function I16Offset.56
	.p2align	4, 0x90
	.type	I16Offset.56,@function
I16Offset.56:                           # @I16Offset.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1317198818, -20(%rbp)  # imm = 0x4E82DBE2
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1317198818, -20(%rbp)  # imm = 0x4E82DBE2
	jne	.LBB85_2
.LBB85_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_1
.Lfunc_end85:
	.size	I16Offset.56, .Lfunc_end85-I16Offset.56
	.cfi_endproc
                                        # -- End function
	.globl	CheckReliabilityOfRef.57 # -- Begin function CheckReliabilityOfRef.57
	.p2align	4, 0x90
	.type	CheckReliabilityOfRef.57,@function
CheckReliabilityOfRef.57:               # @CheckReliabilityOfRef.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1535164207, -108(%rbp) # imm = 0x5B80BF2F
	movl	%edi, -80(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -52(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB86_2
# %bb.1:                                # %cond.true
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	jmp	.LBB86_6
.LBB86_2:                               # %cond.false
	cmpl	$2, -52(%rbp)
	jne	.LBB86_4
# %bb.3:                                # %cond.true3
	movl	-80(%rbp), %eax
	shll	$1, %eax
	jmp	.LBB86_5
.LBB86_4:                               # %cond.false5
	xorl	%eax, %eax
	jmp	.LBB86_5
.LBB86_5:                               # %cond.end
.LBB86_6:                               # %cond.end6
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB86_8
# %bb.7:                                # %lor.rhs
	cmpl	$2, -52(%rbp)
	sete	%cl
.LBB86_8:                               # %lor.end
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -104(%rbp)
	cmpl	$4, -52(%rbp)
	jl	.LBB86_10
# %bb.9:                                # %cond.true13
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	jmp	.LBB86_14
.LBB86_10:                              # %cond.false15
	cmpl	$3, -52(%rbp)
	jne	.LBB86_12
# %bb.11:                               # %cond.true17
	movl	-80(%rbp), %edx
	shll	$1, %edx
	jmp	.LBB86_13
.LBB86_12:                              # %cond.false19
	xorl	%edx, %edx
	jmp	.LBB86_13
.LBB86_13:                              # %cond.end20
.LBB86_14:                              # %cond.end22
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	cmpl	$4, -52(%rbp)
	movb	$1, %cl
	jge	.LBB86_16
# %bb.15:                               # %lor.rhs25
	cmpl	$3, -52(%rbp)
	sete	%cl
.LBB86_16:                              # %lor.end27
	testb	$1, %cl
	movl	$2, %ecx
	movl	$4, %edx
	cmovnel	%ecx, %edx
	addl	%edx, %eax
	movl	%eax, -100(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB86_17:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_19 Depth 2
                                        #       Child Loop BB86_23 Depth 3
                                        #         Child Loop BB86_25 Depth 4
                                        #       Child Loop BB86_53 Depth 3
                                        #         Child Loop BB86_55 Depth 4
                                        #           Child Loop BB86_66 Depth 5
                                        #       Child Loop BB86_87 Depth 3
                                        #         Child Loop BB86_89 Depth 4
                                        #           Child Loop BB86_100 Depth 5
                                        #       Child Loop BB86_121 Depth 3
                                        #         Child Loop BB86_123 Depth 4
                                        #           Child Loop BB86_125 Depth 5
                                        #             Child Loop BB86_136 Depth 6
                                        #       Child Loop BB86_159 Depth 3
                                        #         Child Loop BB86_161 Depth 4
                                        #           Child Loop BB86_163 Depth 5
                                        #             Child Loop BB86_174 Depth 6
                                        #       Child Loop BB86_196 Depth 3
                                        #         Child Loop BB86_198 Depth 4
                                        #           Child Loop BB86_212 Depth 5
                                        #           Child Loop BB86_239 Depth 5
	movl	-68(%rbp), %eax
	cmpl	-104(%rbp), %eax
	jge	.LBB86_266
# %bb.18:                               # %for.body
                                        #   in Loop: Header=BB86_17 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -64(%rbp)
.LBB86_19:                              # %for.cond31
                                        #   Parent Loop BB86_17 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB86_23 Depth 3
                                        #         Child Loop BB86_25 Depth 4
                                        #       Child Loop BB86_53 Depth 3
                                        #         Child Loop BB86_55 Depth 4
                                        #           Child Loop BB86_66 Depth 5
                                        #       Child Loop BB86_87 Depth 3
                                        #         Child Loop BB86_89 Depth 4
                                        #           Child Loop BB86_100 Depth 5
                                        #       Child Loop BB86_121 Depth 3
                                        #         Child Loop BB86_123 Depth 4
                                        #           Child Loop BB86_125 Depth 5
                                        #             Child Loop BB86_136 Depth 6
                                        #       Child Loop BB86_159 Depth 3
                                        #         Child Loop BB86_161 Depth 4
                                        #           Child Loop BB86_163 Depth 5
                                        #             Child Loop BB86_174 Depth 6
                                        #       Child Loop BB86_196 Depth 3
                                        #         Child Loop BB86_198 Depth 4
                                        #           Child Loop BB86_212 Depth 5
                                        #           Child Loop BB86_239 Depth 5
	movl	-64(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB86_264
# %bb.20:                               # %for.body33
                                        #   in Loop: Header=BB86_19 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-68(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-64(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -76(%rbp)
	movl	-32(%rbp), %eax
	subl	-72(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	subl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB86_51
# %bb.21:                               # %land.lhs.true
                                        #   in Loop: Header=BB86_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB86_51
# %bb.22:                               # %if.then
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	$0, -12(%rbp)
.LBB86_23:                              # %for.cond75
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_25 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB86_50
# %bb.24:                               # %for.body78
                                        #   in Loop: Header=BB86_23 Depth=3
	movl	$0, -16(%rbp)
.LBB86_25:                              # %for.cond79
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB86_48
# %bb.26:                               # %for.body82
                                        #   in Loop: Header=BB86_25 Depth=4
	movq	pixel_map, %rax
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB86_28
# %bb.27:                               # %cond.true86
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB86_29
.LBB86_28:                              # %cond.false87
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB86_29:                              # %cond.end89
                                        #   in Loop: Header=BB86_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB86_31
# %bb.30:                               # %cond.true93
                                        #   in Loop: Header=BB86_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_35
.LBB86_31:                              # %cond.false94
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-36(%rbp), %ecx
	movl	-32(%rbp), %edx
	addl	-12(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB86_33
# %bb.32:                               # %cond.true98
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-36(%rbp), %ecx
	jmp	.LBB86_34
.LBB86_33:                              # %cond.false99
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
.LBB86_34:                              # %cond.end101
                                        #   in Loop: Header=BB86_25 Depth=4
.LBB86_35:                              # %cond.end103
                                        #   in Loop: Header=BB86_25 Depth=4
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-40(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB86_37
# %bb.36:                               # %cond.true110
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB86_38
.LBB86_37:                              # %cond.false111
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB86_38:                              # %cond.end113
                                        #   in Loop: Header=BB86_25 Depth=4
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB86_40
# %bb.39:                               # %cond.true117
                                        #   in Loop: Header=BB86_25 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB86_44
.LBB86_40:                              # %cond.false118
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-40(%rbp), %ecx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	cmpl	%edx, %ecx
	jge	.LBB86_42
# %bb.41:                               # %cond.true122
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-40(%rbp), %ecx
	jmp	.LBB86_43
.LBB86_42:                              # %cond.false123
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
.LBB86_43:                              # %cond.end125
                                        #   in Loop: Header=BB86_25 Depth=4
.LBB86_44:                              # %cond.end127
                                        #   in Loop: Header=BB86_25 Depth=4
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_46
# %bb.45:                               # %if.then134
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_46:                              # %if.end
                                        #   in Loop: Header=BB86_25 Depth=4
	jmp	.LBB86_47
.LBB86_47:                              # %for.inc
                                        #   in Loop: Header=BB86_25 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_25
.LBB86_48:                              # %for.end
                                        #   in Loop: Header=BB86_23 Depth=3
	jmp	.LBB86_49
.LBB86_49:                              # %for.inc135
                                        #   in Loop: Header=BB86_23 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_23
.LBB86_50:                              # %for.end137
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_262
.LBB86_51:                              # %if.else
                                        #   in Loop: Header=BB86_19 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB86_85
# %bb.52:                               # %if.then140
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	$0, -12(%rbp)
.LBB86_53:                              # %for.cond141
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_55 Depth 4
                                        #           Child Loop BB86_66 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB86_84
# %bb.54:                               # %for.body144
                                        #   in Loop: Header=BB86_53 Depth=3
	movl	$0, -16(%rbp)
.LBB86_55:                              # %for.cond145
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_53 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_66 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB86_82
# %bb.56:                               # %for.body148
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_58
# %bb.57:                               # %cond.true152
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB86_59
.LBB86_58:                              # %cond.false153
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_59:                              # %cond.end155
                                        #   in Loop: Header=BB86_55 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_61
# %bb.60:                               # %cond.true159
                                        #   in Loop: Header=BB86_55 Depth=4
	xorl	%eax, %eax
	jmp	.LBB86_65
.LBB86_61:                              # %cond.false160
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_63
# %bb.62:                               # %cond.true164
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB86_64
.LBB86_63:                              # %cond.false165
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_64:                              # %cond.end167
                                        #   in Loop: Header=BB86_55 Depth=4
.LBB86_65:                              # %cond.end169
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB86_66:                              # %for.cond171
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_53 Depth=3
                                        #         Parent Loop BB86_55 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_80
# %bb.67:                               # %for.body174
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_69
# %bb.68:                               # %cond.true179
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB86_70
.LBB86_69:                              # %cond.false180
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB86_70:                              # %cond.end183
                                        #   in Loop: Header=BB86_66 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_72
# %bb.71:                               # %cond.true187
                                        #   in Loop: Header=BB86_66 Depth=5
	xorl	%eax, %eax
	jmp	.LBB86_76
.LBB86_72:                              # %cond.false188
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_74
# %bb.73:                               # %cond.true193
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB86_75
.LBB86_74:                              # %cond.false194
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB86_75:                              # %cond.end197
                                        #   in Loop: Header=BB86_66 Depth=5
.LBB86_76:                              # %cond.end199
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_78
# %bb.77:                               # %if.then208
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_78:                              # %if.end209
                                        #   in Loop: Header=BB86_66 Depth=5
	jmp	.LBB86_79
.LBB86_79:                              # %for.inc210
                                        #   in Loop: Header=BB86_66 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_66
.LBB86_80:                              # %for.end212
                                        #   in Loop: Header=BB86_55 Depth=4
	jmp	.LBB86_81
.LBB86_81:                              # %for.inc213
                                        #   in Loop: Header=BB86_55 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_55
.LBB86_82:                              # %for.end215
                                        #   in Loop: Header=BB86_53 Depth=3
	jmp	.LBB86_83
.LBB86_83:                              # %for.inc216
                                        #   in Loop: Header=BB86_53 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_53
.LBB86_84:                              # %for.end218
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_261
.LBB86_85:                              # %if.else219
                                        #   in Loop: Header=BB86_19 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB86_119
# %bb.86:                               # %if.then222
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	$0, -12(%rbp)
.LBB86_87:                              # %for.cond223
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_89 Depth 4
                                        #           Child Loop BB86_100 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB86_118
# %bb.88:                               # %for.body226
                                        #   in Loop: Header=BB86_87 Depth=3
	movl	$0, -16(%rbp)
.LBB86_89:                              # %for.cond227
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_87 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_100 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB86_116
# %bb.90:                               # %for.body230
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_92
# %bb.91:                               # %cond.true234
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB86_93
.LBB86_92:                              # %cond.false235
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_93:                              # %cond.end237
                                        #   in Loop: Header=BB86_89 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_95
# %bb.94:                               # %cond.true241
                                        #   in Loop: Header=BB86_89 Depth=4
	xorl	%eax, %eax
	jmp	.LBB86_99
.LBB86_95:                              # %cond.false242
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_97
# %bb.96:                               # %cond.true246
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB86_98
.LBB86_97:                              # %cond.false247
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_98:                              # %cond.end249
                                        #   in Loop: Header=BB86_89 Depth=4
.LBB86_99:                              # %cond.end251
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB86_100:                             # %for.cond253
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_87 Depth=3
                                        #         Parent Loop BB86_89 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB86_114
# %bb.101:                              # %for.body256
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_103
# %bb.102:                              # %cond.true261
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB86_104
.LBB86_103:                             # %cond.false262
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_104:                             # %cond.end265
                                        #   in Loop: Header=BB86_100 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_106
# %bb.105:                              # %cond.true269
                                        #   in Loop: Header=BB86_100 Depth=5
	xorl	%eax, %eax
	jmp	.LBB86_110
.LBB86_106:                             # %cond.false270
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_108
# %bb.107:                              # %cond.true275
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB86_109
.LBB86_108:                             # %cond.false276
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_109:                             # %cond.end279
                                        #   in Loop: Header=BB86_100 Depth=5
.LBB86_110:                             # %cond.end281
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_112
# %bb.111:                              # %if.then290
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_112:                             # %if.end291
                                        #   in Loop: Header=BB86_100 Depth=5
	jmp	.LBB86_113
.LBB86_113:                             # %for.inc292
                                        #   in Loop: Header=BB86_100 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_100
.LBB86_114:                             # %for.end294
                                        #   in Loop: Header=BB86_89 Depth=4
	jmp	.LBB86_115
.LBB86_115:                             # %for.inc295
                                        #   in Loop: Header=BB86_89 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_89
.LBB86_116:                             # %for.end297
                                        #   in Loop: Header=BB86_87 Depth=3
	jmp	.LBB86_117
.LBB86_117:                             # %for.inc298
                                        #   in Loop: Header=BB86_87 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_87
.LBB86_118:                             # %for.end300
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_260
.LBB86_119:                             # %if.else301
                                        #   in Loop: Header=BB86_19 Depth=2
	cmpl	$2, -76(%rbp)
	jne	.LBB86_157
# %bb.120:                              # %if.then304
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	$0, -12(%rbp)
.LBB86_121:                             # %for.cond305
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_123 Depth 4
                                        #           Child Loop BB86_125 Depth 5
                                        #             Child Loop BB86_136 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB86_156
# %bb.122:                              # %for.body308
                                        #   in Loop: Header=BB86_121 Depth=3
	movl	$0, -16(%rbp)
.LBB86_123:                             # %for.cond309
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_121 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_125 Depth 5
                                        #             Child Loop BB86_136 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB86_154
# %bb.124:                              # %for.body312
                                        #   in Loop: Header=BB86_123 Depth=4
	movl	$-2, -28(%rbp)
.LBB86_125:                             # %for.cond313
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_121 Depth=3
                                        #         Parent Loop BB86_123 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB86_136 Depth 6
	cmpl	$4, -28(%rbp)
	jge	.LBB86_152
# %bb.126:                              # %for.body316
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_128
# %bb.127:                              # %cond.true321
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB86_129
.LBB86_128:                             # %cond.false322
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_129:                             # %cond.end325
                                        #   in Loop: Header=BB86_125 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_131
# %bb.130:                              # %cond.true329
                                        #   in Loop: Header=BB86_125 Depth=5
	xorl	%eax, %eax
	jmp	.LBB86_135
.LBB86_131:                             # %cond.false330
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_133
# %bb.132:                              # %cond.true335
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB86_134
.LBB86_133:                             # %cond.false336
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_134:                             # %cond.end339
                                        #   in Loop: Header=BB86_125 Depth=5
.LBB86_135:                             # %cond.end341
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB86_136:                             # %for.cond343
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_121 Depth=3
                                        #         Parent Loop BB86_123 Depth=4
                                        #           Parent Loop BB86_125 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -20(%rbp)
	jge	.LBB86_150
# %bb.137:                              # %for.body346
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_139
# %bb.138:                              # %cond.true351
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB86_140
.LBB86_139:                             # %cond.false352
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_140:                             # %cond.end355
                                        #   in Loop: Header=BB86_136 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_142
# %bb.141:                              # %cond.true359
                                        #   in Loop: Header=BB86_136 Depth=6
	xorl	%eax, %eax
	jmp	.LBB86_146
.LBB86_142:                             # %cond.false360
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_144
# %bb.143:                              # %cond.true365
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-40(%rbp), %eax
	jmp	.LBB86_145
.LBB86_144:                             # %cond.false366
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_145:                             # %cond.end369
                                        #   in Loop: Header=BB86_136 Depth=6
.LBB86_146:                             # %cond.end371
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_148
# %bb.147:                              # %if.then380
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_148:                             # %if.end381
                                        #   in Loop: Header=BB86_136 Depth=6
	jmp	.LBB86_149
.LBB86_149:                             # %for.inc382
                                        #   in Loop: Header=BB86_136 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_136
.LBB86_150:                             # %for.end384
                                        #   in Loop: Header=BB86_125 Depth=5
	jmp	.LBB86_151
.LBB86_151:                             # %for.inc385
                                        #   in Loop: Header=BB86_125 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_125
.LBB86_152:                             # %for.end387
                                        #   in Loop: Header=BB86_123 Depth=4
	jmp	.LBB86_153
.LBB86_153:                             # %for.inc388
                                        #   in Loop: Header=BB86_123 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_123
.LBB86_154:                             # %for.end390
                                        #   in Loop: Header=BB86_121 Depth=3
	jmp	.LBB86_155
.LBB86_155:                             # %for.inc391
                                        #   in Loop: Header=BB86_121 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_121
.LBB86_156:                             # %for.end393
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_259
.LBB86_157:                             # %if.else394
                                        #   in Loop: Header=BB86_19 Depth=2
	cmpl	$2, -72(%rbp)
	jne	.LBB86_195
# %bb.158:                              # %if.then397
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	$0, -12(%rbp)
.LBB86_159:                             # %for.cond398
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_161 Depth 4
                                        #           Child Loop BB86_163 Depth 5
                                        #             Child Loop BB86_174 Depth 6
	cmpl	$4, -12(%rbp)
	jge	.LBB86_194
# %bb.160:                              # %for.body401
                                        #   in Loop: Header=BB86_159 Depth=3
	movl	$0, -16(%rbp)
.LBB86_161:                             # %for.cond402
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_159 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_163 Depth 5
                                        #             Child Loop BB86_174 Depth 6
	cmpl	$4, -16(%rbp)
	jge	.LBB86_192
# %bb.162:                              # %for.body405
                                        #   in Loop: Header=BB86_161 Depth=4
	movl	$-2, -20(%rbp)
.LBB86_163:                             # %for.cond406
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_159 Depth=3
                                        #         Parent Loop BB86_161 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB86_174 Depth 6
	cmpl	$4, -20(%rbp)
	jge	.LBB86_190
# %bb.164:                              # %for.body409
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_166
# %bb.165:                              # %cond.true414
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB86_167
.LBB86_166:                             # %cond.false415
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_167:                             # %cond.end418
                                        #   in Loop: Header=BB86_163 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_169
# %bb.168:                              # %cond.true422
                                        #   in Loop: Header=BB86_163 Depth=5
	xorl	%eax, %eax
	jmp	.LBB86_173
.LBB86_169:                             # %cond.false423
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_171
# %bb.170:                              # %cond.true428
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB86_172
.LBB86_171:                             # %cond.false429
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_172:                             # %cond.end432
                                        #   in Loop: Header=BB86_163 Depth=5
.LBB86_173:                             # %cond.end434
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB86_174:                             # %for.cond436
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_159 Depth=3
                                        #         Parent Loop BB86_161 Depth=4
                                        #           Parent Loop BB86_163 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$4, -28(%rbp)
	jge	.LBB86_188
# %bb.175:                              # %for.body439
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_177
# %bb.176:                              # %cond.true444
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB86_178
.LBB86_177:                             # %cond.false445
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_178:                             # %cond.end448
                                        #   in Loop: Header=BB86_174 Depth=6
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_180
# %bb.179:                              # %cond.true452
                                        #   in Loop: Header=BB86_174 Depth=6
	xorl	%eax, %eax
	jmp	.LBB86_184
.LBB86_180:                             # %cond.false453
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_182
# %bb.181:                              # %cond.true458
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-36(%rbp), %eax
	jmp	.LBB86_183
.LBB86_182:                             # %cond.false459
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_183:                             # %cond.end462
                                        #   in Loop: Header=BB86_174 Depth=6
.LBB86_184:                             # %cond.end464
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_186
# %bb.185:                              # %if.then473
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_186:                             # %if.end474
                                        #   in Loop: Header=BB86_174 Depth=6
	jmp	.LBB86_187
.LBB86_187:                             # %for.inc475
                                        #   in Loop: Header=BB86_174 Depth=6
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_174
.LBB86_188:                             # %for.end477
                                        #   in Loop: Header=BB86_163 Depth=5
	jmp	.LBB86_189
.LBB86_189:                             # %for.inc478
                                        #   in Loop: Header=BB86_163 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_163
.LBB86_190:                             # %for.end480
                                        #   in Loop: Header=BB86_161 Depth=4
	jmp	.LBB86_191
.LBB86_191:                             # %for.inc481
                                        #   in Loop: Header=BB86_161 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_161
.LBB86_192:                             # %for.end483
                                        #   in Loop: Header=BB86_159 Depth=3
	jmp	.LBB86_193
.LBB86_193:                             # %for.inc484
                                        #   in Loop: Header=BB86_159 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_159
.LBB86_194:                             # %for.end486
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_258
.LBB86_195:                             # %if.else487
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	$0, -12(%rbp)
.LBB86_196:                             # %for.cond488
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB86_198 Depth 4
                                        #           Child Loop BB86_212 Depth 5
                                        #           Child Loop BB86_239 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB86_257
# %bb.197:                              # %for.body491
                                        #   in Loop: Header=BB86_196 Depth=3
	movl	$0, -16(%rbp)
.LBB86_198:                             # %for.cond492
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_196 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB86_212 Depth 5
                                        #           Child Loop BB86_239 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB86_255
# %bb.199:                              # %for.body495
                                        #   in Loop: Header=BB86_198 Depth=4
	cmpl	$1, -72(%rbp)
	jne	.LBB86_201
# %bb.200:                              # %cond.true498
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	jmp	.LBB86_202
.LBB86_201:                             # %cond.false500
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-32(%rbp), %eax
	addl	-12(%rbp), %eax
	addl	$1, %eax
.LBB86_202:                             # %cond.end503
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB86_204
# %bb.203:                              # %cond.true507
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB86_205
.LBB86_204:                             # %cond.false508
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-44(%rbp), %eax
.LBB86_205:                             # %cond.end509
                                        #   in Loop: Header=BB86_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_207
# %bb.206:                              # %cond.true513
                                        #   in Loop: Header=BB86_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB86_211
.LBB86_207:                             # %cond.false514
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB86_209
# %bb.208:                              # %cond.true517
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-36(%rbp), %eax
	jmp	.LBB86_210
.LBB86_209:                             # %cond.false518
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-44(%rbp), %eax
.LBB86_210:                             # %cond.end519
                                        #   in Loop: Header=BB86_198 Depth=4
.LBB86_211:                             # %cond.end521
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB86_212:                             # %for.cond523
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_196 Depth=3
                                        #         Parent Loop BB86_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB86_226
# %bb.213:                              # %for.body526
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_215
# %bb.214:                              # %cond.true531
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB86_216
.LBB86_215:                             # %cond.false532
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_216:                             # %cond.end535
                                        #   in Loop: Header=BB86_212 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_218
# %bb.217:                              # %cond.true539
                                        #   in Loop: Header=BB86_212 Depth=5
	xorl	%eax, %eax
	jmp	.LBB86_222
.LBB86_218:                             # %cond.false540
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-40(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_220
# %bb.219:                              # %cond.true545
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-40(%rbp), %eax
	jmp	.LBB86_221
.LBB86_220:                             # %cond.false546
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB86_221:                             # %cond.end549
                                        #   in Loop: Header=BB86_212 Depth=5
.LBB86_222:                             # %cond.end551
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	%eax, -48(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_224
# %bb.223:                              # %if.then560
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_224:                             # %if.end561
                                        #   in Loop: Header=BB86_212 Depth=5
	jmp	.LBB86_225
.LBB86_225:                             # %for.inc562
                                        #   in Loop: Header=BB86_212 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB86_212
.LBB86_226:                             # %for.end564
                                        #   in Loop: Header=BB86_198 Depth=4
	cmpl	$1, -76(%rbp)
	jne	.LBB86_228
# %bb.227:                              # %cond.true567
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	jmp	.LBB86_229
.LBB86_228:                             # %cond.false569
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
	addl	$1, %eax
.LBB86_229:                             # %cond.end572
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB86_231
# %bb.230:                              # %cond.true576
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB86_232
.LBB86_231:                             # %cond.false577
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-48(%rbp), %eax
.LBB86_232:                             # %cond.end578
                                        #   in Loop: Header=BB86_198 Depth=4
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_234
# %bb.233:                              # %cond.true582
                                        #   in Loop: Header=BB86_198 Depth=4
	xorl	%eax, %eax
	jmp	.LBB86_238
.LBB86_234:                             # %cond.false583
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-40(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB86_236
# %bb.235:                              # %cond.true586
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-40(%rbp), %eax
	jmp	.LBB86_237
.LBB86_236:                             # %cond.false587
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-48(%rbp), %eax
.LBB86_237:                             # %cond.end588
                                        #   in Loop: Header=BB86_198 Depth=4
.LBB86_238:                             # %cond.end590
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	%eax, -48(%rbp)
	movl	$-2, -28(%rbp)
.LBB86_239:                             # %for.cond592
                                        #   Parent Loop BB86_17 Depth=1
                                        #     Parent Loop BB86_19 Depth=2
                                        #       Parent Loop BB86_196 Depth=3
                                        #         Parent Loop BB86_198 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB86_253
# %bb.240:                              # %for.body595
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_242
# %bb.241:                              # %cond.true600
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB86_243
.LBB86_242:                             # %cond.false601
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_243:                             # %cond.end604
                                        #   in Loop: Header=BB86_239 Depth=5
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB86_245
# %bb.244:                              # %cond.true608
                                        #   in Loop: Header=BB86_239 Depth=5
	xorl	%eax, %eax
	jmp	.LBB86_249
.LBB86_245:                             # %cond.false609
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-36(%rbp), %eax
	movl	-32(%rbp), %ecx
	addl	-28(%rbp), %ecx
	addl	-12(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB86_247
# %bb.246:                              # %cond.true614
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-36(%rbp), %eax
	jmp	.LBB86_248
.LBB86_247:                             # %cond.false615
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-32(%rbp), %eax
	addl	-28(%rbp), %eax
	addl	-12(%rbp), %eax
.LBB86_248:                             # %cond.end618
                                        #   in Loop: Header=BB86_239 Depth=5
.LBB86_249:                             # %cond.end620
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	%eax, -44(%rbp)
	movq	pixel_map, %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB86_251
# %bb.250:                              # %if.then629
	movl	$0, -56(%rbp)
	jmp	.LBB86_267
.LBB86_251:                             # %if.end630
                                        #   in Loop: Header=BB86_239 Depth=5
	jmp	.LBB86_252
.LBB86_252:                             # %for.inc631
                                        #   in Loop: Header=BB86_239 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB86_239
.LBB86_253:                             # %for.end633
                                        #   in Loop: Header=BB86_198 Depth=4
	jmp	.LBB86_254
.LBB86_254:                             # %for.inc634
                                        #   in Loop: Header=BB86_198 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_198
.LBB86_255:                             # %for.end636
                                        #   in Loop: Header=BB86_196 Depth=3
	jmp	.LBB86_256
.LBB86_256:                             # %for.inc637
                                        #   in Loop: Header=BB86_196 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_196
.LBB86_257:                             # %for.end639
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_258
.LBB86_258:                             # %if.end640
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_259
.LBB86_259:                             # %if.end641
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_260
.LBB86_260:                             # %if.end642
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_261
.LBB86_261:                             # %if.end643
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_262
.LBB86_262:                             # %if.end644
                                        #   in Loop: Header=BB86_19 Depth=2
	jmp	.LBB86_263
.LBB86_263:                             # %for.inc645
                                        #   in Loop: Header=BB86_19 Depth=2
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB86_19
.LBB86_264:                             # %for.end647
                                        #   in Loop: Header=BB86_17 Depth=1
	jmp	.LBB86_265
.LBB86_265:                             # %for.inc648
                                        #   in Loop: Header=BB86_17 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB86_17
.LBB86_266:                             # %for.end650
	movl	$1, -56(%rbp)
.LBB86_267:                             # %return
	movl	-56(%rbp), %ebx
	cmpl	$1535164207, -108(%rbp) # imm = 0x5B80BF2F
	jne	.LBB86_269
.LBB86_268:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_269:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_268
.Lfunc_end86:
	.size	CheckReliabilityOfRef.57, .Lfunc_end86-CheckReliabilityOfRef.57
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.58
.LCPI87_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI87_1:
	.quad	4622945017495814144     # double 12
.LCPI87_2:
	.quad	4607182418800017408     # double 1
.LCPI87_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI87_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI87_5:
	.quad	4611686018427387904     # double 2
.LCPI87_6:
	.quad	4613937818241073152     # double 3
.LCPI87_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI87_8:
	.quad	4616189618054758400     # double 4
.LCPI87_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI87_10:
	.quad	4618441417868443648     # double 6
.LCPI87_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI87_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI87_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI87_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI87_15:
	.quad	4602678819172646912     # double 0.5
.LCPI87_16:
	.quad	4679240012837945344     # double 65536
.LCPI87_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI87_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.58
	.p2align	4, 0x90
	.type	encode_one_macroblock.58,@function
encode_one_macroblock.58:               # @encode_one_macroblock.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	$1560430967, -416(%rbp) # imm = 0x5D024977
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -176(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -144(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -256(%rbp)
	movl	$0, -188(%rbp)
	movl	$0, -312(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB87_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB87_4
.LBB87_2:                               # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB87_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB87_5
.LBB87_4:                               # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB87_5:                               # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -316(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -408(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB87_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB87_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB87_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB87_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB87_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB87_11:                              # %land.end
.LBB87_12:                              # %lor.end36
.LBB87_13:                              # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -300(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB87_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB87_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB87_17:                              # %lor.end51
.LBB87_18:                              # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -280(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB87_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB87_21
.LBB87_20:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB87_21
.LBB87_21:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB87_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB87_23:                              # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB87_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB87_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB87_27
.LBB87_26:                              # %if.else
	movl	$2, -64(%rbp)
.LBB87_27:                              # %if.end
	jmp	.LBB87_29
.LBB87_28:                              # %if.else70
	movl	$0, -64(%rbp)
.LBB87_29:                              # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB87_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB87_31:                              # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB87_33:                              # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB87_35:                              # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB87_37:                              # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB87_39:                              # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB87_41:                              # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB87_43:                              # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB87_45:                              # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB87_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB87_47:                              # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB87_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB87_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB87_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB87_51:                              # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-408(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB87_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB87_53:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB87_53 Depth=1
	movl	$0, -56(%rbp)
.LBB87_55:                              # %for.cond156
                                        #   Parent Loop BB87_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB87_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB87_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB87_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB87_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB87_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB87_59:                              # %if.end183
                                        #   in Loop: Header=BB87_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB87_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB87_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB87_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB87_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB87_62:                              # %if.end202
                                        #   in Loop: Header=BB87_55 Depth=2
	jmp	.LBB87_63
.LBB87_63:                              # %for.inc
                                        #   in Loop: Header=BB87_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_55
.LBB87_64:                              # %for.end
                                        #   in Loop: Header=BB87_53 Depth=1
	jmp	.LBB87_65
.LBB87_65:                              # %for.inc203
                                        #   in Loop: Header=BB87_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB87_53
.LBB87_66:                              # %for.end205
	jmp	.LBB87_93
.LBB87_67:                              # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB87_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB87_69:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB87_69 Depth=1
	movl	$0, -56(%rbp)
.LBB87_71:                              # %for.cond215
                                        #   Parent Loop BB87_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB87_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB87_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB87_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB87_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB87_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB87_75:                              # %if.end244
                                        #   in Loop: Header=BB87_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB87_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB87_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB87_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB87_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB87_78:                              # %if.end263
                                        #   in Loop: Header=BB87_71 Depth=2
	jmp	.LBB87_79
.LBB87_79:                              # %for.inc264
                                        #   in Loop: Header=BB87_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_71
.LBB87_80:                              # %for.end266
                                        #   in Loop: Header=BB87_69 Depth=1
	jmp	.LBB87_81
.LBB87_81:                              # %for.inc267
                                        #   in Loop: Header=BB87_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB87_69
.LBB87_82:                              # %for.end269
	jmp	.LBB87_92
.LBB87_83:                              # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB87_84:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB87_84 Depth=1
	movl	$0, -56(%rbp)
.LBB87_86:                              # %for.cond277
                                        #   Parent Loop BB87_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB87_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB87_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_86
.LBB87_89:                              # %for.end290
                                        #   in Loop: Header=BB87_84 Depth=1
	jmp	.LBB87_90
.LBB87_90:                              # %for.inc291
                                        #   in Loop: Header=BB87_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB87_84
.LBB87_91:                              # %for.end293
	jmp	.LBB87_92
.LBB87_92:                              # %if.end294
	jmp	.LBB87_93
.LBB87_93:                              # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI87_1(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB87_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB87_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB87_99
.LBB87_98:                              # %if.else315
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB87_99:                              # %if.end326
	jmp	.LBB87_159
.LBB87_100:                             # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB87_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI87_2(%rip), %xmm0  # xmm0 = mem[0],zero
	jmp	.LBB87_104
.LBB87_103:                             # %cond.false336
	vmovsd	.LCPI87_2(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_3(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB87_104:                             # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB87_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI87_9(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB87_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI87_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI87_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_109
.LBB87_108:                             # %cond.false357
	vmovsd	.LCPI87_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB87_109:                             # %cond.end359
	vmovsd	.LCPI87_5(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI87_5(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_115
.LBB87_111:                             # %cond.false364
	vmovsd	.LCPI87_8(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI87_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_114
.LBB87_113:                             # %cond.false369
	vmovsd	.LCPI87_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB87_114:                             # %cond.end371
.LBB87_115:                             # %cond.end373
	jmp	.LBB87_129
.LBB87_116:                             # %cond.false375
	cmpl	$0, -316(%rbp)
	je	.LBB87_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_120
.LBB87_119:                             # %cond.false382
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB87_120:                             # %cond.end384
	vmovsd	.LCPI87_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI87_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_126
.LBB87_122:                             # %cond.false389
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_125
.LBB87_124:                             # %cond.false394
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB87_125:                             # %cond.end396
.LBB87_126:                             # %cond.end398
	jmp	.LBB87_128
.LBB87_127:                             # %cond.false400
	vmovsd	.LCPI87_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_128
.LBB87_128:                             # %cond.end401
.LBB87_129:                             # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB87_146
.LBB87_130:                             # %if.else406
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI87_4(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB87_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI87_8(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_145
.LBB87_132:                             # %cond.false415
	cmpl	$0, -316(%rbp)
	je	.LBB87_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_136
.LBB87_135:                             # %cond.false422
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB87_136:                             # %cond.end424
	vmovsd	.LCPI87_7(%rip), %xmm2  # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI87_7(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_142
.LBB87_138:                             # %cond.false429
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	.LCPI87_1(%rip), %xmm2  # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB87_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI87_6(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_141
.LBB87_140:                             # %cond.false434
	vmovsd	.LCPI87_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB87_141:                             # %cond.end436
.LBB87_142:                             # %cond.end438
	jmp	.LBB87_144
.LBB87_143:                             # %cond.false440
	vmovsd	.LCPI87_2(%rip), %xmm1  # xmm1 = mem[0],zero
	jmp	.LBB87_144
.LBB87_144:                             # %cond.end441
.LBB87_145:                             # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB87_146:                             # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB87_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB87_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI87_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI87_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB87_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI87_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB87_152
.LBB87_151:                             # %cond.false465
	vmovsd	.LCPI87_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB87_152:                             # %cond.end473
	vmovsd	.LCPI87_2(%rip), %xmm1  # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB87_153:                             # %if.end477
	jmp	.LBB87_158
.LBB87_154:                             # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB87_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI87_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB87_157:                             # %if.end487
	jmp	.LBB87_158
.LBB87_158:                             # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB87_159:                             # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB87_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI87_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB87_161:                             # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB87_166
.LBB87_162:                             # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB87_165
.LBB87_164:                             # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB87_165:                             # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB87_166:                             # %if.end510
	vmovsd	.LCPI87_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI87_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB87_167:                             # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB87_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB87_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB87_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB87_167
.LBB87_170:                             # %for.end522
	movl	$0, -252(%rbp)
.LBB87_171:                             # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_181 Depth 2
                                        #       Child Loop BB87_184 Depth 3
                                        #         Child Loop BB87_190 Depth 4
                                        #         Child Loop BB87_210 Depth 4
                                        #         Child Loop BB87_300 Depth 4
                                        #           Child Loop BB87_302 Depth 5
                                        #         Child Loop BB87_309 Depth 4
                                        #           Child Loop BB87_311 Depth 5
                                        #         Child Loop BB87_326 Depth 4
                                        #           Child Loop BB87_328 Depth 5
                                        #         Child Loop BB87_335 Depth 4
                                        #           Child Loop BB87_337 Depth 5
                                        #         Child Loop BB87_355 Depth 4
                                        #           Child Loop BB87_357 Depth 5
                                        #         Child Loop BB87_374 Depth 4
                                        #           Child Loop BB87_376 Depth 5
                                        #     Child Loop BB87_416 Depth 2
                                        #       Child Loop BB87_418 Depth 3
                                        #         Child Loop BB87_445 Depth 4
                                        #         Child Loop BB87_464 Depth 4
                                        #           Child Loop BB87_466 Depth 5
                                        #         Child Loop BB87_473 Depth 4
                                        #         Child Loop BB87_508 Depth 4
                                        #           Child Loop BB87_510 Depth 5
                                        #         Child Loop BB87_532 Depth 4
                                        #           Child Loop BB87_534 Depth 5
                                        #             Child Loop BB87_536 Depth 6
                                        #         Child Loop BB87_544 Depth 4
                                        #           Child Loop BB87_546 Depth 5
                                        #       Child Loop BB87_569 Depth 3
                                        #         Child Loop BB87_571 Depth 4
                                        #           Child Loop BB87_573 Depth 5
                                        #       Child Loop BB87_581 Depth 3
                                        #         Child Loop BB87_583 Depth 4
                                        #     Child Loop BB87_601 Depth 2
                                        #       Child Loop BB87_603 Depth 3
                                        #         Child Loop BB87_614 Depth 4
                                        #         Child Loop BB87_633 Depth 4
                                        #           Child Loop BB87_635 Depth 5
                                        #         Child Loop BB87_642 Depth 4
                                        #         Child Loop BB87_677 Depth 4
                                        #           Child Loop BB87_679 Depth 5
                                        #         Child Loop BB87_701 Depth 4
                                        #           Child Loop BB87_703 Depth 5
                                        #             Child Loop BB87_705 Depth 6
                                        #         Child Loop BB87_713 Depth 4
                                        #           Child Loop BB87_715 Depth 5
                                        #         Child Loop BB87_723 Depth 4
                                        #           Child Loop BB87_725 Depth 5
                                        #       Child Loop BB87_745 Depth 3
                                        #         Child Loop BB87_747 Depth 4
                                        #           Child Loop BB87_749 Depth 5
                                        #       Child Loop BB87_757 Depth 3
                                        #         Child Loop BB87_759 Depth 4
                                        #       Child Loop BB87_766 Depth 3
                                        #         Child Loop BB87_768 Depth 4
                                        #       Child Loop BB87_778 Depth 3
                                        #         Child Loop BB87_780 Depth 4
                                        #       Child Loop BB87_786 Depth 3
                                        #       Child Loop BB87_791 Depth 3
                                        #         Child Loop BB87_793 Depth 4
                                        #     Child Loop BB87_803 Depth 2
                                        #       Child Loop BB87_805 Depth 3
                                        #     Child Loop BB87_835 Depth 2
                                        #       Child Loop BB87_853 Depth 3
                                        #         Child Loop BB87_908 Depth 4
                                        #           Child Loop BB87_911 Depth 5
                                        #             Child Loop BB87_913 Depth 6
                                        #           Child Loop BB87_920 Depth 5
                                        #             Child Loop BB87_922 Depth 6
                                        #         Child Loop BB87_955 Depth 4
                                        #           Child Loop BB87_957 Depth 5
                                        #     Child Loop BB87_981 Depth 2
                                        #       Child Loop BB87_1014 Depth 3
                                        #         Child Loop BB87_1017 Depth 4
                                        #           Child Loop BB87_1019 Depth 5
                                        #         Child Loop BB87_1026 Depth 4
                                        #           Child Loop BB87_1028 Depth 5
                                        #       Child Loop BB87_1061 Depth 3
                                        #         Child Loop BB87_1063 Depth 4
                                        #     Child Loop BB87_1113 Depth 2
                                        #       Child Loop BB87_1115 Depth 3
                                        #     Child Loop BB87_1127 Depth 2
                                        #       Child Loop BB87_1129 Depth 3
                                        #         Child Loop BB87_1131 Depth 4
                                        #     Child Loop BB87_1141 Depth 2
                                        #       Child Loop BB87_1143 Depth 3
                                        #     Child Loop BB87_1152 Depth 2
                                        #       Child Loop BB87_1154 Depth 3
                                        #     Child Loop BB87_1160 Depth 2
                                        #       Child Loop BB87_1162 Depth 3
                                        #     Child Loop BB87_1174 Depth 2
                                        #       Child Loop BB87_1176 Depth 3
                                        #         Child Loop BB87_1178 Depth 4
                                        #     Child Loop BB87_1189 Depth 2
                                        #       Child Loop BB87_1191 Depth 3
                                        #     Child Loop BB87_1202 Depth 2
                                        #       Child Loop BB87_1204 Depth 3
                                        #     Child Loop BB87_1211 Depth 2
                                        #       Child Loop BB87_1213 Depth 3
                                        #     Child Loop BB87_1221 Depth 2
                                        #       Child Loop BB87_1223 Depth 3
                                        #     Child Loop BB87_1229 Depth 2
                                        #       Child Loop BB87_1231 Depth 3
                                        #     Child Loop BB87_1237 Depth 2
                                        #       Child Loop BB87_1239 Depth 3
                                        #     Child Loop BB87_1245 Depth 2
                                        #       Child Loop BB87_1247 Depth 3
	movl	-252(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB87_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$2, -300(%rbp)
	jne	.LBB87_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB87_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB87_176
.LBB87_175:                             # %if.else534
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB87_176:                             # %if.end536
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_177
.LBB87_177:                             # %if.end537
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB87_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB87_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB87_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB87_180:                             # %if.end542
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB87_181:                             # %for.cond543
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_184 Depth 3
                                        #         Child Loop BB87_190 Depth 4
                                        #         Child Loop BB87_210 Depth 4
                                        #         Child Loop BB87_300 Depth 4
                                        #           Child Loop BB87_302 Depth 5
                                        #         Child Loop BB87_309 Depth 4
                                        #           Child Loop BB87_311 Depth 5
                                        #         Child Loop BB87_326 Depth 4
                                        #           Child Loop BB87_328 Depth 5
                                        #         Child Loop BB87_335 Depth 4
                                        #           Child Loop BB87_337 Depth 5
                                        #         Child Loop BB87_355 Depth 4
                                        #           Child Loop BB87_357 Depth 5
                                        #         Child Loop BB87_374 Depth 4
                                        #           Child Loop BB87_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB87_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB87_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB87_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB87_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB87_184:                             # %for.cond554
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_190 Depth 4
                                        #         Child Loop BB87_210 Depth 4
                                        #         Child Loop BB87_300 Depth 4
                                        #           Child Loop BB87_302 Depth 5
                                        #         Child Loop BB87_309 Depth 4
                                        #           Child Loop BB87_311 Depth 5
                                        #         Child Loop BB87_326 Depth 4
                                        #           Child Loop BB87_328 Depth 5
                                        #         Child Loop BB87_335 Depth 4
                                        #           Child Loop BB87_337 Depth 5
                                        #         Child Loop BB87_355 Depth 4
                                        #           Child Loop BB87_357 Depth 5
                                        #         Child Loop BB87_374 Depth 4
                                        #           Child Loop BB87_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB87_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB87_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB87_187:                             # %land.end566
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB87_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB87_189:                             # %land.end574
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB87_190:                             # %for.cond577
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB87_190 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB87_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB87_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB87_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB87_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB87_206
.LBB87_194:                             # %if.then594
                                        #   in Loop: Header=BB87_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB87_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB87_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_198
.LBB87_197:                             # %cond.false604
                                        #   in Loop: Header=BB87_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_198:                             # %cond.end607
                                        #   in Loop: Header=BB87_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB87_203
.LBB87_199:                             # %cond.false610
                                        #   in Loop: Header=BB87_190 Depth=4
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB87_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB87_202
.LBB87_201:                             # %cond.false617
                                        #   in Loop: Header=BB87_190 Depth=4
	movl	$1, %eax
	jmp	.LBB87_202
.LBB87_202:                             # %cond.end618
                                        #   in Loop: Header=BB87_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_203:                             # %cond.end623
                                        #   in Loop: Header=BB87_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB87_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB87_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB87_205:                             # %if.end636
                                        #   in Loop: Header=BB87_190 Depth=4
	jmp	.LBB87_206
.LBB87_206:                             # %if.end637
                                        #   in Loop: Header=BB87_190 Depth=4
	jmp	.LBB87_207
.LBB87_207:                             # %for.inc638
                                        #   in Loop: Header=BB87_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB87_190
.LBB87_208:                             # %for.end640
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB87_210:                             # %for.cond643
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB87_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB87_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB87_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_215
.LBB87_214:                             # %cond.false660
                                        #   in Loop: Header=BB87_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_215:                             # %cond.end663
                                        #   in Loop: Header=BB87_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB87_220
.LBB87_216:                             # %cond.false667
                                        #   in Loop: Header=BB87_210 Depth=4
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB87_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB87_219
.LBB87_218:                             # %cond.false674
                                        #   in Loop: Header=BB87_210 Depth=4
	movl	$1, %eax
	jmp	.LBB87_219
.LBB87_219:                             # %cond.end675
                                        #   in Loop: Header=BB87_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_220:                             # %cond.end680
                                        #   in Loop: Header=BB87_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB87_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB87_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB87_222:                             # %if.end693
                                        #   in Loop: Header=BB87_210 Depth=4
	jmp	.LBB87_223
.LBB87_223:                             # %for.inc694
                                        #   in Loop: Header=BB87_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB87_210
.LBB87_224:                             # %for.end696
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_228
.LBB87_227:                             # %cond.false706
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_228:                             # %cond.end709
                                        #   in Loop: Header=BB87_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB87_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB87_231
.LBB87_230:                             # %cond.false719
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB87_231:                             # %cond.end721
                                        #   in Loop: Header=BB87_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB87_236
.LBB87_232:                             # %cond.false726
                                        #   in Loop: Header=BB87_184 Depth=3
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB87_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB87_235
.LBB87_234:                             # %cond.false733
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	$1, %eax
	jmp	.LBB87_235
.LBB87_235:                             # %cond.end734
                                        #   in Loop: Header=BB87_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_236:                             # %cond.end739
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB87_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_243
.LBB87_242:                             # %cond.false761
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB87_243:                             # %cond.end763
                                        #   in Loop: Header=BB87_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB87_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB87_246
.LBB87_245:                             # %cond.false773
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB87_246:                             # %cond.end775
                                        #   in Loop: Header=BB87_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB87_248
.LBB87_247:                             # %cond.false780
                                        #   in Loop: Header=BB87_184 Depth=3
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_248:                             # %cond.end784
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_252
.LBB87_251:                             # %cond.false797
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB87_252:                             # %cond.end799
                                        #   in Loop: Header=BB87_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB87_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB87_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB87_255
.LBB87_254:                             # %cond.false809
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB87_255:                             # %cond.end811
                                        #   in Loop: Header=BB87_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB87_257
.LBB87_256:                             # %cond.false816
                                        #   in Loop: Header=BB87_184 Depth=3
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_257:                             # %cond.end820
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	%eax, -180(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	jmp	.LBB87_259
.LBB87_258:                             # %if.else824
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
.LBB87_259:                             # %if.end825
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB87_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB87_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB87_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB87_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_285
.LBB87_266:                             # %if.else845
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB87_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB87_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB87_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB87_284
.LBB87_271:                             # %if.else859
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB87_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB87_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB87_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB87_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB87_283
.LBB87_276:                             # %if.else876
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB87_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB87_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jg	.LBB87_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB87_282
.LBB87_281:                             # %if.else893
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-180(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB87_282:                             # %if.end898
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_283
.LBB87_283:                             # %if.end899
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_284
.LBB87_284:                             # %if.end900
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_285
.LBB87_285:                             # %if.end901
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_295
.LBB87_286:                             # %if.else902
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB87_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_294
.LBB87_289:                             # %if.else910
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB87_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB87_293
.LBB87_292:                             # %if.else918
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB87_293:                             # %if.end920
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_294
.LBB87_294:                             # %if.end921
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_295
.LBB87_295:                             # %if.end922
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_297
.LBB87_296:                             # %if.else923
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_297:                             # %if.end925
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB87_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB87_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB87_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	$0, -24(%rbp)
.LBB87_300:                             # %for.cond933
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB87_300 Depth=4
	movl	$0, -20(%rbp)
.LBB87_302:                             # %for.cond937
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        #         Parent Loop BB87_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB87_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB87_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_302
.LBB87_305:                             # %for.end999
                                        #   in Loop: Header=BB87_300 Depth=4
	jmp	.LBB87_306
.LBB87_306:                             # %for.inc1000
                                        #   in Loop: Header=BB87_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_300
.LBB87_307:                             # %for.end1002
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_323
.LBB87_308:                             # %if.else1003
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	$0, -24(%rbp)
.LBB87_309:                             # %for.cond1004
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB87_309 Depth=4
	movl	$0, -20(%rbp)
.LBB87_311:                             # %for.cond1008
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        #         Parent Loop BB87_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB87_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB87_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB87_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB87_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB87_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB87_316
.LBB87_315:                             # %cond.false1024
                                        #   in Loop: Header=BB87_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB87_316:                             # %cond.end1025
                                        #   in Loop: Header=BB87_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB87_318
.LBB87_317:                             # %if.else1111
                                        #   in Loop: Header=BB87_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB87_318:                             # %if.end1217
                                        #   in Loop: Header=BB87_311 Depth=5
	jmp	.LBB87_319
.LBB87_319:                             # %for.inc1218
                                        #   in Loop: Header=BB87_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_311
.LBB87_320:                             # %for.end1220
                                        #   in Loop: Header=BB87_309 Depth=4
	jmp	.LBB87_321
.LBB87_321:                             # %for.inc1221
                                        #   in Loop: Header=BB87_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_309
.LBB87_322:                             # %for.end1223
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_323
.LBB87_323:                             # %if.end1224
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB87_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB87_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	$0, -24(%rbp)
.LBB87_326:                             # %for.cond1231
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB87_326 Depth=4
	movl	$0, -20(%rbp)
.LBB87_328:                             # %for.cond1235
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        #         Parent Loop BB87_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB87_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB87_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_328
.LBB87_331:                             # %for.end1303
                                        #   in Loop: Header=BB87_326 Depth=4
	jmp	.LBB87_332
.LBB87_332:                             # %for.inc1304
                                        #   in Loop: Header=BB87_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_326
.LBB87_333:                             # %for.end1306
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_351
.LBB87_334:                             # %if.else1307
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	$0, -24(%rbp)
.LBB87_335:                             # %for.cond1308
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB87_335 Depth=4
	movl	$0, -20(%rbp)
.LBB87_337:                             # %for.cond1312
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        #         Parent Loop BB87_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB87_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB87_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB87_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB87_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB87_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB87_342
.LBB87_341:                             # %cond.false1330
                                        #   in Loop: Header=BB87_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB87_342:                             # %cond.end1332
                                        #   in Loop: Header=BB87_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB87_346
.LBB87_343:                             # %if.else1419
                                        #   in Loop: Header=BB87_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB87_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB87_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB87_345:                             # %if.end1529
                                        #   in Loop: Header=BB87_337 Depth=5
	jmp	.LBB87_346
.LBB87_346:                             # %if.end1530
                                        #   in Loop: Header=BB87_337 Depth=5
	jmp	.LBB87_347
.LBB87_347:                             # %for.inc1531
                                        #   in Loop: Header=BB87_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_337
.LBB87_348:                             # %for.end1533
                                        #   in Loop: Header=BB87_335 Depth=4
	jmp	.LBB87_349
.LBB87_349:                             # %for.inc1534
                                        #   in Loop: Header=BB87_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_335
.LBB87_350:                             # %for.end1536
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_351
.LBB87_351:                             # %if.end1537
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_352
.LBB87_352:                             # %if.end1538
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_393
.LBB87_353:                             # %if.else1539
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB87_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB87_355:                             # %for.cond1546
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB87_355 Depth=4
	movl	$0, -20(%rbp)
.LBB87_357:                             # %for.cond1550
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        #         Parent Loop BB87_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB87_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB87_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB87_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB87_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB87_361
.LBB87_360:                             # %if.else1596
                                        #   in Loop: Header=BB87_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB87_361:                             # %if.end1676
                                        #   in Loop: Header=BB87_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB87_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB87_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB87_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB87_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB87_367
.LBB87_364:                             # %if.else1721
                                        #   in Loop: Header=BB87_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB87_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB87_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB87_366:                             # %if.end1805
                                        #   in Loop: Header=BB87_357 Depth=5
	jmp	.LBB87_367
.LBB87_367:                             # %if.end1806
                                        #   in Loop: Header=BB87_357 Depth=5
	jmp	.LBB87_368
.LBB87_368:                             # %if.end1807
                                        #   in Loop: Header=BB87_357 Depth=5
	jmp	.LBB87_369
.LBB87_369:                             # %for.inc1808
                                        #   in Loop: Header=BB87_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_357
.LBB87_370:                             # %for.end1810
                                        #   in Loop: Header=BB87_355 Depth=4
	jmp	.LBB87_371
.LBB87_371:                             # %for.inc1811
                                        #   in Loop: Header=BB87_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_355
.LBB87_372:                             # %for.end1813
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_392
.LBB87_373:                             # %if.else1814
                                        #   in Loop: Header=BB87_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB87_374:                             # %for.cond1818
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB87_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB87_374 Depth=4
	movl	$0, -20(%rbp)
.LBB87_376:                             # %for.cond1822
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_181 Depth=2
                                        #       Parent Loop BB87_184 Depth=3
                                        #         Parent Loop BB87_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB87_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB87_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB87_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB87_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB87_380
.LBB87_379:                             # %if.else1868
                                        #   in Loop: Header=BB87_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB87_380:                             # %if.end1948
                                        #   in Loop: Header=BB87_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB87_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB87_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB87_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB87_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB87_386
.LBB87_383:                             # %if.else1993
                                        #   in Loop: Header=BB87_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB87_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB87_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB87_385:                             # %if.end2077
                                        #   in Loop: Header=BB87_376 Depth=5
	jmp	.LBB87_386
.LBB87_386:                             # %if.end2078
                                        #   in Loop: Header=BB87_376 Depth=5
	jmp	.LBB87_387
.LBB87_387:                             # %if.end2079
                                        #   in Loop: Header=BB87_376 Depth=5
	jmp	.LBB87_388
.LBB87_388:                             # %for.inc2080
                                        #   in Loop: Header=BB87_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_376
.LBB87_389:                             # %for.end2082
                                        #   in Loop: Header=BB87_374 Depth=4
	jmp	.LBB87_390
.LBB87_390:                             # %for.inc2083
                                        #   in Loop: Header=BB87_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_374
.LBB87_391:                             # %for.end2085
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_392
.LBB87_392:                             # %if.end2086
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_393
.LBB87_393:                             # %if.end2087
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB87_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB87_399
.LBB87_395:                             # %if.else2106
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB87_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB87_398
.LBB87_397:                             # %if.else2131
                                        #   in Loop: Header=BB87_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB87_398:                             # %if.end2132
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_399
.LBB87_399:                             # %if.end2133
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB87_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB87_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB87_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB87_402:                             # %if.end2143
                                        #   in Loop: Header=BB87_184 Depth=3
	jmp	.LBB87_403
.LBB87_403:                             # %for.inc2144
                                        #   in Loop: Header=BB87_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_184
.LBB87_404:                             # %for.end2146
                                        #   in Loop: Header=BB87_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB87_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB87_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB87_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB87_407:                             # %if.end2155
                                        #   in Loop: Header=BB87_181 Depth=2
	jmp	.LBB87_408
.LBB87_408:                             # %if.end2156
                                        #   in Loop: Header=BB87_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB87_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB87_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -312(%rbp)
.LBB87_410:                             # %if.end2161
                                        #   in Loop: Header=BB87_181 Depth=2
	jmp	.LBB87_411
.LBB87_411:                             # %if.end2162
                                        #   in Loop: Header=BB87_181 Depth=2
	jmp	.LBB87_412
.LBB87_412:                             # %for.inc2163
                                        #   in Loop: Header=BB87_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB87_181
.LBB87_413:                             # %for.end2165
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB87_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB87_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB87_416:                             # %for.cond2172
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_418 Depth 3
                                        #         Child Loop BB87_445 Depth 4
                                        #         Child Loop BB87_464 Depth 4
                                        #           Child Loop BB87_466 Depth 5
                                        #         Child Loop BB87_473 Depth 4
                                        #         Child Loop BB87_508 Depth 4
                                        #           Child Loop BB87_510 Depth 5
                                        #         Child Loop BB87_532 Depth 4
                                        #           Child Loop BB87_534 Depth 5
                                        #             Child Loop BB87_536 Depth 6
                                        #         Child Loop BB87_544 Depth 4
                                        #           Child Loop BB87_546 Depth 5
                                        #       Child Loop BB87_569 Depth 3
                                        #         Child Loop BB87_571 Depth 4
                                        #           Child Loop BB87_573 Depth 5
                                        #       Child Loop BB87_581 Depth 3
                                        #         Child Loop BB87_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB87_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB87_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB87_418:                             # %for.cond2184
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_445 Depth 4
                                        #         Child Loop BB87_464 Depth 4
                                        #           Child Loop BB87_466 Depth 5
                                        #         Child Loop BB87_473 Depth 4
                                        #         Child Loop BB87_508 Depth 4
                                        #           Child Loop BB87_510 Depth 5
                                        #         Child Loop BB87_532 Depth 4
                                        #           Child Loop BB87_534 Depth 5
                                        #             Child Loop BB87_536 Depth 6
                                        #         Child Loop BB87_544 Depth 4
                                        #           Child Loop BB87_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB87_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB87_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB87_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB87_423
.LBB87_421:                             # %lor.lhs.false2196
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB87_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB87_557
.LBB87_423:                             # %if.then2201
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB87_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	$0, -220(%rbp)
	movl	$0, -212(%rbp)
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -220(%rbp)
	cmpl	$2147483647, -220(%rbp) # imm = 0x7FFFFFFF
	je	.LBB87_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB87_428
.LBB87_427:                             # %if.then2214
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB87_429
.LBB87_428:                             # %if.else2215
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-220(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-212(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB87_429:                             # %if.end2218
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB87_431
	jmp	.LBB87_430
.LBB87_430:                             # %if.end2218
                                        #   in Loop: Header=BB87_418 Depth=3
	subl	$2, %eax
	je	.LBB87_438
	jmp	.LBB87_439
.LBB87_431:                             # %sw.bb
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-212(%rbp), %eax
	cmpl	-220(%rbp), %eax
	jl	.LBB87_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB87_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB87_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB87_436
.LBB87_435:                             # %if.then2231
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_437
.LBB87_436:                             # %if.else2232
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_437:                             # %if.end2233
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_440
.LBB87_438:                             # %sw.bb2234
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_440
.LBB87_439:                             # %sw.default
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-220(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_440:                             # %sw.epilog
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB87_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-184(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB87_442:                             # %if.end2240
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB87_443:                             # %if.end2242
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB87_518
.LBB87_444:                             # %if.else2278
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB87_445:                             # %for.cond2279
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB87_445 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB87_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB87_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB87_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB87_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB87_461
.LBB87_449:                             # %if.then2296
                                        #   in Loop: Header=BB87_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB87_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB87_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_453
.LBB87_452:                             # %cond.false2306
                                        #   in Loop: Header=BB87_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_453:                             # %cond.end2309
                                        #   in Loop: Header=BB87_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB87_458
.LBB87_454:                             # %cond.false2313
                                        #   in Loop: Header=BB87_445 Depth=4
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB87_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB87_457
.LBB87_456:                             # %cond.false2320
                                        #   in Loop: Header=BB87_445 Depth=4
	movl	$1, %eax
	jmp	.LBB87_457
.LBB87_457:                             # %cond.end2321
                                        #   in Loop: Header=BB87_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_458:                             # %cond.end2326
                                        #   in Loop: Header=BB87_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB87_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB87_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB87_460:                             # %if.end2339
                                        #   in Loop: Header=BB87_445 Depth=4
	jmp	.LBB87_461
.LBB87_461:                             # %if.end2340
                                        #   in Loop: Header=BB87_445 Depth=4
	jmp	.LBB87_462
.LBB87_462:                             # %for.inc2341
                                        #   in Loop: Header=BB87_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB87_445
.LBB87_463:                             # %for.end2343
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	$0, -24(%rbp)
.LBB87_464:                             # %for.cond2344
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB87_464 Depth=4
	movl	$0, -20(%rbp)
.LBB87_466:                             # %for.cond2348
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        #         Parent Loop BB87_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB87_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB87_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB87_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_466
.LBB87_469:                             # %for.end2405
                                        #   in Loop: Header=BB87_464 Depth=4
	jmp	.LBB87_470
.LBB87_470:                             # %for.inc2406
                                        #   in Loop: Header=BB87_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_464
.LBB87_471:                             # %for.end2408
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB87_473:                             # %for.cond2411
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB87_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB87_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB87_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_478
.LBB87_477:                             # %cond.false2428
                                        #   in Loop: Header=BB87_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_478:                             # %cond.end2431
                                        #   in Loop: Header=BB87_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB87_483
.LBB87_479:                             # %cond.false2435
                                        #   in Loop: Header=BB87_473 Depth=4
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB87_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB87_482
.LBB87_481:                             # %cond.false2442
                                        #   in Loop: Header=BB87_473 Depth=4
	movl	$1, %eax
	jmp	.LBB87_482
.LBB87_482:                             # %cond.end2443
                                        #   in Loop: Header=BB87_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_483:                             # %cond.end2448
                                        #   in Loop: Header=BB87_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB87_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB87_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB87_485:                             # %if.end2461
                                        #   in Loop: Header=BB87_473 Depth=4
	jmp	.LBB87_486
.LBB87_486:                             # %for.inc2462
                                        #   in Loop: Header=BB87_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB87_473
.LBB87_487:                             # %for.end2464
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB87_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_491
.LBB87_490:                             # %cond.false2474
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_491:                             # %cond.end2477
                                        #   in Loop: Header=BB87_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB87_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB87_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB87_494
.LBB87_493:                             # %cond.false2487
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB87_494:                             # %cond.end2489
                                        #   in Loop: Header=BB87_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB87_499
.LBB87_495:                             # %cond.false2494
                                        #   in Loop: Header=BB87_418 Depth=3
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB87_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB87_498
.LBB87_497:                             # %cond.false2501
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	$1, %eax
	jmp	.LBB87_498
.LBB87_498:                             # %cond.end2502
                                        #   in Loop: Header=BB87_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_499:                             # %cond.end2507
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB87_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB87_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB87_507
.LBB87_502:                             # %if.else2517
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB87_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB87_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB87_506
.LBB87_505:                             # %if.else2524
                                        #   in Loop: Header=BB87_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB87_506:                             # %if.end2525
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_507
.LBB87_507:                             # %if.end2526
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	$0, -24(%rbp)
.LBB87_508:                             # %for.cond2527
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB87_508 Depth=4
	movl	$0, -20(%rbp)
.LBB87_510:                             # %for.cond2531
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        #         Parent Loop BB87_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB87_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB87_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB87_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_510
.LBB87_513:                             # %for.end2567
                                        #   in Loop: Header=BB87_508 Depth=4
	jmp	.LBB87_514
.LBB87_514:                             # %for.inc2568
                                        #   in Loop: Header=BB87_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_508
.LBB87_515:                             # %for.end2570
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_517
.LBB87_516:                             # %if.else2571
                                        #   in Loop: Header=BB87_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_517:                             # %if.end2572
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_518
.LBB87_518:                             # %if.end2573
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB87_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB87_526
.LBB87_520:                             # %if.else2578
                                        #   in Loop: Header=BB87_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB87_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB87_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB87_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB87_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB87_524
.LBB87_523:                             # %cond.false2592
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB87_524:                             # %cond.end2597
                                        #   in Loop: Header=BB87_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB87_525:                             # %if.end2603
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_526
.LBB87_526:                             # %if.end2604
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB87_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB87_530
.LBB87_528:                             # %lor.lhs.false2610
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB87_556
.LBB87_530:                             # %if.then2616
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -184(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB87_532:                             # %for.cond2638
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_534 Depth 5
                                        #             Child Loop BB87_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB87_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB87_532 Depth=4
	movl	$0, -24(%rbp)
.LBB87_534:                             # %for.cond2642
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        #         Parent Loop BB87_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB87_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB87_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB87_534 Depth=5
	movl	$0, -20(%rbp)
.LBB87_536:                             # %for.cond2646
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        #         Parent Loop BB87_532 Depth=4
                                        #           Parent Loop BB87_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB87_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB87_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB87_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_536
.LBB87_539:                             # %for.end2668
                                        #   in Loop: Header=BB87_534 Depth=5
	jmp	.LBB87_540
.LBB87_540:                             # %for.inc2669
                                        #   in Loop: Header=BB87_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_534
.LBB87_541:                             # %for.end2671
                                        #   in Loop: Header=BB87_532 Depth=4
	jmp	.LBB87_542
.LBB87_542:                             # %for.inc2672
                                        #   in Loop: Header=BB87_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_532
.LBB87_543:                             # %for.end2674
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_544:                             # %for.cond2675
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB87_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_546:                             # %for.cond2680
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_418 Depth=3
                                        #         Parent Loop BB87_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB87_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB87_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB87_550
.LBB87_549:                             # %if.else2705
                                        #   in Loop: Header=BB87_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB87_550:                             # %if.end2754
                                        #   in Loop: Header=BB87_546 Depth=5
	jmp	.LBB87_551
.LBB87_551:                             # %for.inc2755
                                        #   in Loop: Header=BB87_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_546
.LBB87_552:                             # %for.end2757
                                        #   in Loop: Header=BB87_544 Depth=4
	jmp	.LBB87_553
.LBB87_553:                             # %for.inc2758
                                        #   in Loop: Header=BB87_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_544
.LBB87_554:                             # %for.end2760
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_555
.LBB87_555:                             # %if.end2761
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB87_556:                             # %if.end2762
                                        #   in Loop: Header=BB87_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB87_557:                             # %if.end2763
                                        #   in Loop: Header=BB87_418 Depth=3
	jmp	.LBB87_558
.LBB87_558:                             # %for.inc2764
                                        #   in Loop: Header=BB87_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB87_418
.LBB87_559:                             # %for.end2766
                                        #   in Loop: Header=BB87_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-184(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB87_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB87_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB87_563
.LBB87_562:                             # %cond.true2782
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB87_564
.LBB87_563:                             # %cond.false2783
                                        #   in Loop: Header=BB87_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB87_564
.LBB87_564:                             # %cond.end2784
                                        #   in Loop: Header=BB87_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB87_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB87_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB87_567
.LBB87_566:                             # %cond.true2793
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB87_568
.LBB87_567:                             # %cond.false2794
                                        #   in Loop: Header=BB87_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB87_568
.LBB87_568:                             # %cond.end2795
                                        #   in Loop: Header=BB87_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB87_569:                             # %for.cond2813
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_571 Depth 4
                                        #           Child Loop BB87_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB87_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB87_569 Depth=3
	movl	$0, -24(%rbp)
.LBB87_571:                             # %for.cond2817
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB87_571 Depth=4
	movl	$0, -20(%rbp)
.LBB87_573:                             # %for.cond2821
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_569 Depth=3
                                        #         Parent Loop BB87_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB87_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB87_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB87_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_573
.LBB87_576:                             # %for.end2844
                                        #   in Loop: Header=BB87_571 Depth=4
	jmp	.LBB87_577
.LBB87_577:                             # %for.inc2845
                                        #   in Loop: Header=BB87_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_571
.LBB87_578:                             # %for.end2847
                                        #   in Loop: Header=BB87_569 Depth=3
	jmp	.LBB87_579
.LBB87_579:                             # %for.inc2848
                                        #   in Loop: Header=BB87_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_569
.LBB87_580:                             # %for.end2850
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_581:                             # %for.cond2851
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB87_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_583:                             # %for.cond2856
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_416 Depth=2
                                        #       Parent Loop BB87_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB87_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB87_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB87_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB87_587
.LBB87_586:                             # %if.else2886
                                        #   in Loop: Header=BB87_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB87_587:                             # %if.end2935
                                        #   in Loop: Header=BB87_583 Depth=4
	jmp	.LBB87_588
.LBB87_588:                             # %for.inc2936
                                        #   in Loop: Header=BB87_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_583
.LBB87_589:                             # %for.end2938
                                        #   in Loop: Header=BB87_581 Depth=3
	jmp	.LBB87_590
.LBB87_590:                             # %for.inc2939
                                        #   in Loop: Header=BB87_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_581
.LBB87_591:                             # %for.end2941
                                        #   in Loop: Header=BB87_416 Depth=2
	jmp	.LBB87_592
.LBB87_592:                             # %if.end2942
                                        #   in Loop: Header=BB87_416 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB87_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB87_594:                             # %if.end2948
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB87_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB87_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB87_596:                             # %if.end2974
                                        #   in Loop: Header=BB87_416 Depth=2
	jmp	.LBB87_597
.LBB87_597:                             # %for.inc2975
                                        #   in Loop: Header=BB87_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_416
.LBB87_598:                             # %for.end2977
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-140(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_599:                             # %if.end2980
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB87_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -140(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -144(%rbp)
	movl	$0, -28(%rbp)
.LBB87_601:                             # %for.cond2985
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_603 Depth 3
                                        #         Child Loop BB87_614 Depth 4
                                        #         Child Loop BB87_633 Depth 4
                                        #           Child Loop BB87_635 Depth 5
                                        #         Child Loop BB87_642 Depth 4
                                        #         Child Loop BB87_677 Depth 4
                                        #           Child Loop BB87_679 Depth 5
                                        #         Child Loop BB87_701 Depth 4
                                        #           Child Loop BB87_703 Depth 5
                                        #             Child Loop BB87_705 Depth 6
                                        #         Child Loop BB87_713 Depth 4
                                        #           Child Loop BB87_715 Depth 5
                                        #         Child Loop BB87_723 Depth 4
                                        #           Child Loop BB87_725 Depth 5
                                        #       Child Loop BB87_745 Depth 3
                                        #         Child Loop BB87_747 Depth 4
                                        #           Child Loop BB87_749 Depth 5
                                        #       Child Loop BB87_757 Depth 3
                                        #         Child Loop BB87_759 Depth 4
                                        #       Child Loop BB87_766 Depth 3
                                        #         Child Loop BB87_768 Depth 4
                                        #       Child Loop BB87_778 Depth 3
                                        #         Child Loop BB87_780 Depth 4
                                        #       Child Loop BB87_786 Depth 3
                                        #       Child Loop BB87_791 Depth 3
                                        #         Child Loop BB87_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB87_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB87_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -412(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -240(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB87_603:                             # %for.cond2997
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_614 Depth 4
                                        #         Child Loop BB87_633 Depth 4
                                        #           Child Loop BB87_635 Depth 5
                                        #         Child Loop BB87_642 Depth 4
                                        #         Child Loop BB87_677 Depth 4
                                        #           Child Loop BB87_679 Depth 5
                                        #         Child Loop BB87_701 Depth 4
                                        #           Child Loop BB87_703 Depth 5
                                        #             Child Loop BB87_705 Depth 6
                                        #         Child Loop BB87_713 Depth 4
                                        #           Child Loop BB87_715 Depth 5
                                        #         Child Loop BB87_723 Depth 4
                                        #           Child Loop BB87_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB87_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB87_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB87_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	$0, -248(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB87_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB87_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB87_603 Depth=3
	cmpl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB87_610
.LBB87_609:                             # %if.then3019
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB87_611
.LBB87_610:                             # %if.else3020
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
.LBB87_611:                             # %if.end3022
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
.LBB87_612:                             # %if.end3024
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB87_687
.LBB87_613:                             # %if.else3060
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB87_614:                             # %for.cond3061
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB87_614 Depth=4
	cmpl	$0, -280(%rbp)
	je	.LBB87_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB87_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB87_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB87_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB87_630
.LBB87_618:                             # %if.then3078
                                        #   in Loop: Header=BB87_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB87_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB87_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_622
.LBB87_621:                             # %cond.false3088
                                        #   in Loop: Header=BB87_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_622:                             # %cond.end3091
                                        #   in Loop: Header=BB87_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB87_627
.LBB87_623:                             # %cond.false3095
                                        #   in Loop: Header=BB87_614 Depth=4
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB87_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB87_626
.LBB87_625:                             # %cond.false3102
                                        #   in Loop: Header=BB87_614 Depth=4
	movl	$1, %eax
	jmp	.LBB87_626
.LBB87_626:                             # %cond.end3103
                                        #   in Loop: Header=BB87_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_627:                             # %cond.end3108
                                        #   in Loop: Header=BB87_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB87_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB87_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB87_629:                             # %if.end3121
                                        #   in Loop: Header=BB87_614 Depth=4
	jmp	.LBB87_630
.LBB87_630:                             # %if.end3122
                                        #   in Loop: Header=BB87_614 Depth=4
	jmp	.LBB87_631
.LBB87_631:                             # %for.inc3123
                                        #   in Loop: Header=BB87_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB87_614
.LBB87_632:                             # %for.end3125
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	$0, -24(%rbp)
.LBB87_633:                             # %for.cond3126
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB87_633 Depth=4
	movl	$0, -20(%rbp)
.LBB87_635:                             # %for.cond3130
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        #         Parent Loop BB87_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB87_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB87_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB87_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_635
.LBB87_638:                             # %for.end3187
                                        #   in Loop: Header=BB87_633 Depth=4
	jmp	.LBB87_639
.LBB87_639:                             # %for.inc3188
                                        #   in Loop: Header=BB87_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_633
.LBB87_640:                             # %for.end3190
                                        #   in Loop: Header=BB87_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB87_642:                             # %for.cond3193
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB87_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB87_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB87_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB87_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB87_647
.LBB87_646:                             # %cond.false3210
                                        #   in Loop: Header=BB87_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_647:                             # %cond.end3213
                                        #   in Loop: Header=BB87_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB87_652
.LBB87_648:                             # %cond.false3217
                                        #   in Loop: Header=BB87_642 Depth=4
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB87_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB87_651
.LBB87_650:                             # %cond.false3224
                                        #   in Loop: Header=BB87_642 Depth=4
	movl	$1, %eax
	jmp	.LBB87_651
.LBB87_651:                             # %cond.end3225
                                        #   in Loop: Header=BB87_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_652:                             # %cond.end3230
                                        #   in Loop: Header=BB87_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB87_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB87_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB87_654:                             # %if.end3243
                                        #   in Loop: Header=BB87_642 Depth=4
	jmp	.LBB87_655
.LBB87_655:                             # %for.inc3244
                                        #   in Loop: Header=BB87_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB87_642
.LBB87_656:                             # %for.end3246
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB87_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB87_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_660
.LBB87_659:                             # %cond.false3256
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB87_660:                             # %cond.end3259
                                        #   in Loop: Header=BB87_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB87_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB87_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB87_663
.LBB87_662:                             # %cond.false3269
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB87_663:                             # %cond.end3271
                                        #   in Loop: Header=BB87_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB87_668
.LBB87_664:                             # %cond.false3276
                                        #   in Loop: Header=BB87_603 Depth=3
	vmovsd	.LCPI87_5(%rip), %xmm0  # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB87_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB87_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB87_667
.LBB87_666:                             # %cond.false3283
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	$1, %eax
	jmp	.LBB87_667
.LBB87_667:                             # %cond.end3284
                                        #   in Loop: Header=BB87_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB87_668:                             # %cond.end3289
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB87_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB87_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB87_676
.LBB87_671:                             # %if.else3299
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB87_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB87_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB87_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB87_675
.LBB87_674:                             # %if.else3306
                                        #   in Loop: Header=BB87_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB87_675:                             # %if.end3307
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_676
.LBB87_676:                             # %if.end3308
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	$0, -24(%rbp)
.LBB87_677:                             # %for.cond3309
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB87_677 Depth=4
	movl	$0, -20(%rbp)
.LBB87_679:                             # %for.cond3313
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        #         Parent Loop BB87_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB87_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB87_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB87_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_679
.LBB87_682:                             # %for.end3349
                                        #   in Loop: Header=BB87_677 Depth=4
	jmp	.LBB87_683
.LBB87_683:                             # %for.inc3350
                                        #   in Loop: Header=BB87_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_677
.LBB87_684:                             # %for.end3352
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_686
.LBB87_685:                             # %if.else3353
                                        #   in Loop: Header=BB87_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_686:                             # %if.end3354
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_687
.LBB87_687:                             # %if.end3355
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB87_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB87_695
.LBB87_689:                             # %if.else3360
                                        #   in Loop: Header=BB87_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB87_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB87_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB87_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB87_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB87_693
.LBB87_692:                             # %cond.false3374
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB87_693:                             # %cond.end3379
                                        #   in Loop: Header=BB87_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB87_694:                             # %if.end3385
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_695
.LBB87_695:                             # %if.end3386
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB87_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-240(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB87_699
.LBB87_697:                             # %lor.lhs.false3392
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB87_732
.LBB87_699:                             # %if.then3398
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -184(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -176(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB87_701:                             # %for.cond3422
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_703 Depth 5
                                        #             Child Loop BB87_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB87_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB87_701 Depth=4
	movl	$0, -24(%rbp)
.LBB87_703:                             # %for.cond3426
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        #         Parent Loop BB87_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB87_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB87_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB87_703 Depth=5
	movl	$0, -20(%rbp)
.LBB87_705:                             # %for.cond3430
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        #         Parent Loop BB87_701 Depth=4
                                        #           Parent Loop BB87_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB87_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB87_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB87_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_705
.LBB87_708:                             # %for.end3453
                                        #   in Loop: Header=BB87_703 Depth=5
	jmp	.LBB87_709
.LBB87_709:                             # %for.inc3454
                                        #   in Loop: Header=BB87_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_703
.LBB87_710:                             # %for.end3456
                                        #   in Loop: Header=BB87_701 Depth=4
	jmp	.LBB87_711
.LBB87_711:                             # %for.inc3457
                                        #   in Loop: Header=BB87_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_701
.LBB87_712:                             # %for.end3459
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_713:                             # %for.cond3460
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB87_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_715:                             # %for.cond3465
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        #         Parent Loop BB87_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB87_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB87_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_715
.LBB87_718:                             # %for.end3494
                                        #   in Loop: Header=BB87_713 Depth=4
	jmp	.LBB87_719
.LBB87_719:                             # %for.inc3495
                                        #   in Loop: Header=BB87_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_713
.LBB87_720:                             # %for.end3497
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_721
.LBB87_721:                             # %if.end3498
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_723:                             # %for.cond3502
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB87_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_725:                             # %for.cond3507
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_603 Depth=3
                                        #         Parent Loop BB87_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB87_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB87_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_725
.LBB87_728:                             # %for.end3562
                                        #   in Loop: Header=BB87_723 Depth=4
	jmp	.LBB87_729
.LBB87_729:                             # %for.inc3563
                                        #   in Loop: Header=BB87_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_723
.LBB87_730:                             # %for.end3565
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_731
.LBB87_731:                             # %if.end3566
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB87_732:                             # %if.end3567
                                        #   in Loop: Header=BB87_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB87_733:                             # %if.end3568
                                        #   in Loop: Header=BB87_603 Depth=3
	jmp	.LBB87_734
.LBB87_734:                             # %for.inc3569
                                        #   in Loop: Header=BB87_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB87_603
.LBB87_735:                             # %for.end3571
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-184(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB87_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -248(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB87_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB87_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB87_739
.LBB87_738:                             # %cond.true3588
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB87_740
.LBB87_739:                             # %cond.false3589
                                        #   in Loop: Header=BB87_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB87_740
.LBB87_740:                             # %cond.end3590
                                        #   in Loop: Header=BB87_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB87_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB87_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB87_743
.LBB87_742:                             # %cond.true3599
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB87_744
.LBB87_743:                             # %cond.false3600
                                        #   in Loop: Header=BB87_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB87_744
.LBB87_744:                             # %cond.end3601
                                        #   in Loop: Header=BB87_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-248(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -176(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-248(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB87_745:                             # %for.cond3619
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_747 Depth 4
                                        #           Child Loop BB87_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB87_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB87_745 Depth=3
	movl	$0, -24(%rbp)
.LBB87_747:                             # %for.cond3623
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB87_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB87_747 Depth=4
	movl	$0, -20(%rbp)
.LBB87_749:                             # %for.cond3627
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_745 Depth=3
                                        #         Parent Loop BB87_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB87_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB87_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB87_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_749
.LBB87_752:                             # %for.end3650
                                        #   in Loop: Header=BB87_747 Depth=4
	jmp	.LBB87_753
.LBB87_753:                             # %for.inc3651
                                        #   in Loop: Header=BB87_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_747
.LBB87_754:                             # %for.end3653
                                        #   in Loop: Header=BB87_745 Depth=3
	jmp	.LBB87_755
.LBB87_755:                             # %for.inc3654
                                        #   in Loop: Header=BB87_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_745
.LBB87_756:                             # %for.end3656
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_757:                             # %for.cond3657
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB87_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_759:                             # %for.cond3662
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB87_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB87_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_759
.LBB87_762:                             # %for.end3691
                                        #   in Loop: Header=BB87_757 Depth=3
	jmp	.LBB87_763
.LBB87_763:                             # %for.inc3692
                                        #   in Loop: Header=BB87_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_757
.LBB87_764:                             # %for.end3694
                                        #   in Loop: Header=BB87_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_766:                             # %for.cond3698
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB87_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_768:                             # %for.cond3703
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB87_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB87_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_768
.LBB87_771:                             # %for.end3758
                                        #   in Loop: Header=BB87_766 Depth=3
	jmp	.LBB87_772
.LBB87_772:                             # %for.inc3759
                                        #   in Loop: Header=BB87_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_766
.LBB87_773:                             # %for.end3761
                                        #   in Loop: Header=BB87_601 Depth=2
	jmp	.LBB87_774
.LBB87_774:                             # %if.end3762
                                        #   in Loop: Header=BB87_601 Depth=2
	jmp	.LBB87_775
.LBB87_775:                             # %if.end3763
                                        #   in Loop: Header=BB87_601 Depth=2
	cmpl	$0, -176(%rbp)
	je	.LBB87_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-176(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB87_777:                             # %if.end3769
                                        #   in Loop: Header=BB87_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_778:                             # %for.cond3781
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB87_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_780:                             # %for.cond3786
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB87_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB87_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_780
.LBB87_783:                             # %for.end3797
                                        #   in Loop: Header=BB87_778 Depth=3
	jmp	.LBB87_784
.LBB87_784:                             # %for.inc3798
                                        #   in Loop: Header=BB87_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_778
.LBB87_785:                             # %for.end3800
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_786:                             # %for.cond3802
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB87_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB87_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_786
.LBB87_789:                             # %for.end3811
                                        #   in Loop: Header=BB87_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB87_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB87_791:                             # %for.cond3819
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB87_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB87_793:                             # %for.cond3824
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_601 Depth=2
                                        #       Parent Loop BB87_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB87_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB87_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_793
.LBB87_796:                             # %for.end3844
                                        #   in Loop: Header=BB87_791 Depth=3
	jmp	.LBB87_797
.LBB87_797:                             # %for.inc3845
                                        #   in Loop: Header=BB87_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_791
.LBB87_798:                             # %for.end3847
                                        #   in Loop: Header=BB87_601 Depth=2
	jmp	.LBB87_799
.LBB87_799:                             # %if.end3848
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB87_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB87_601
.LBB87_801:                             # %for.end3860
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_802
.LBB87_802:                             # %if.end3861
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB87_803:                             # %for.cond3862
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB87_803 Depth=2
	movl	$0, -24(%rbp)
.LBB87_805:                             # %for.cond3866
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB87_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB87_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_805
.LBB87_808:                             # %for.end3890
                                        #   in Loop: Header=BB87_803 Depth=2
	jmp	.LBB87_809
.LBB87_809:                             # %for.inc3891
                                        #   in Loop: Header=BB87_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_803
.LBB87_810:                             # %for.end3893
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB87_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB87_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB87_825
.LBB87_813:                             # %if.then3902
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB87_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB87_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_822
.LBB87_816:                             # %if.else3910
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-140(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB87_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB87_821
.LBB87_818:                             # %if.else3915
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB87_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_820:                             # %if.end3922
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_821
.LBB87_821:                             # %if.end3923
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_822
.LBB87_822:                             # %if.end3924
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_824
.LBB87_823:                             # %if.else3925
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_824:                             # %if.end3927
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_825
.LBB87_825:                             # %if.end3928
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_827
.LBB87_826:                             # %if.else3929
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
.LBB87_827:                             # %if.end3930
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB87_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB87_830
.LBB87_829:                             # %if.then3938
                                        #   in Loop: Header=BB87_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB87_830:                             # %if.end3939
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_832
.LBB87_831:                             # %if.else3940
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB87_832:                             # %if.end3941
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB87_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -240(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB87_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	leaq	-320(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB87_835:                             # %for.cond3949
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_853 Depth 3
                                        #         Child Loop BB87_908 Depth 4
                                        #           Child Loop BB87_911 Depth 5
                                        #             Child Loop BB87_913 Depth 6
                                        #           Child Loop BB87_920 Depth 5
                                        #             Child Loop BB87_922 Depth 6
                                        #         Child Loop BB87_955 Depth 4
                                        #           Child Loop BB87_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB87_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB87_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB87_846
.LBB87_838:                             # %lor.lhs.false3960
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB87_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB87_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB87_846
.LBB87_840:                             # %lor.lhs.false3966
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB87_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB87_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB87_846
.LBB87_842:                             # %lor.lhs.false3972
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB87_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB87_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB87_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB87_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB87_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB87_835 Depth=2
	cmpl	$0, -320(%rbp)
	jne	.LBB87_847
.LBB87_846:                             # %if.then3982
                                        #   in Loop: Header=BB87_835 Depth=2
	jmp	.LBB87_976
.LBB87_847:                             # %if.end3983
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB87_835 Depth=2
	movl	$11, -308(%rbp)
	jmp	.LBB87_850
.LBB87_849:                             # %if.else3987
                                        #   in Loop: Header=BB87_835 Depth=2
	movl	$8, -308(%rbp)
.LBB87_850:                             # %if.end3988
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB87_852:                             # %if.end3994
                                        #   in Loop: Header=BB87_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB87_853:                             # %for.cond3995
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_908 Depth 4
                                        #           Child Loop BB87_911 Depth 5
                                        #             Child Loop BB87_913 Depth 6
                                        #           Child Loop BB87_920 Depth 5
                                        #             Child Loop BB87_922 Depth 6
                                        #         Child Loop BB87_955 Depth 4
                                        #           Child Loop BB87_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-308(%rbp), %eax
	jge	.LBB87_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB87_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB87_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB87_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB87_857:                             # %if.end4010
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB87_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB87_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB87_866
.LBB87_860:                             # %lor.lhs.false4018
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB87_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB87_866
.LBB87_862:                             # %lor.lhs.false4023
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB87_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB87_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB87_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -320(%rbp)
	jne	.LBB87_867
.LBB87_866:                             # %if.then4032
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_974
.LBB87_867:                             # %if.end4033
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_869
.LBB87_868:                             # %if.else4034
                                        #   in Loop: Header=BB87_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB87_869:                             # %if.end4037
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB87_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB87_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB87_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB87_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB87_877:                             # %if.end4066
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_878
.LBB87_878:                             # %if.end4067
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB87_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB87_880:                             # %if.end4072
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB87_881:                             # %if.end4074
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB87_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB87_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB87_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB87_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB87_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB87_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB87_887:                             # %if.end4092
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_888
.LBB87_888:                             # %if.end4093
                                        #   in Loop: Header=BB87_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB87_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB87_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB87_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB87_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_902
.LBB87_893:                             # %if.else4110
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB87_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB87_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_901
.LBB87_897:                             # %if.else4120
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB87_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB87_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB87_900:                             # %if.end4128
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_901
.LBB87_901:                             # %if.end4129
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_902
.LBB87_902:                             # %if.end4130
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_903
.LBB87_903:                             # %if.end4131
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB87_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB87_947
.LBB87_907:                             # %if.then4146
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_908
.LBB87_908:                             # %while.body
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_911 Depth 5
                                        #             Child Loop BB87_913 Depth 6
                                        #           Child Loop BB87_920 Depth 5
                                        #             Child Loop BB87_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB87_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB87_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB87_908 Depth=4
	movl	$0, -20(%rbp)
.LBB87_911:                             # %for.cond4153
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        #         Parent Loop BB87_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB87_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB87_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB87_911 Depth=5
	movl	$0, -24(%rbp)
.LBB87_913:                             # %for.cond4157
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        #         Parent Loop BB87_908 Depth=4
                                        #           Parent Loop BB87_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB87_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB87_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB87_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_913
.LBB87_916:                             # %for.end4182
                                        #   in Loop: Header=BB87_911 Depth=5
	jmp	.LBB87_917
.LBB87_917:                             # %for.inc4183
                                        #   in Loop: Header=BB87_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_911
.LBB87_918:                             # %for.end4185
                                        #   in Loop: Header=BB87_908 Depth=4
	jmp	.LBB87_928
.LBB87_919:                             # %if.else4186
                                        #   in Loop: Header=BB87_908 Depth=4
	movl	$0, -20(%rbp)
.LBB87_920:                             # %for.cond4187
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        #         Parent Loop BB87_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB87_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB87_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB87_920 Depth=5
	movl	$0, -24(%rbp)
.LBB87_922:                             # %for.cond4191
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        #         Parent Loop BB87_908 Depth=4
                                        #           Parent Loop BB87_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB87_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB87_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB87_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_922
.LBB87_925:                             # %for.end4215
                                        #   in Loop: Header=BB87_920 Depth=5
	jmp	.LBB87_926
.LBB87_926:                             # %for.inc4216
                                        #   in Loop: Header=BB87_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_920
.LBB87_927:                             # %for.end4218
                                        #   in Loop: Header=BB87_908 Depth=4
	jmp	.LBB87_928
.LBB87_928:                             # %if.end4219
                                        #   in Loop: Header=BB87_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB87_929:                             # %if.end4220
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB87_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB87_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB87_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB87_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB87_934:                             # %while.body.backedge
                                        #   in Loop: Header=BB87_908 Depth=4
	jmp	.LBB87_908
.LBB87_935:                             # %if.else4236
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB87_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB87_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB87_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB87_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_934
.LBB87_940:                             # %if.else4250
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB87_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB87_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB87_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB87_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB87_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_934
.LBB87_944:                             # %if.else4262
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB87_946
.LBB87_945:                             # %if.else4264
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_946
.LBB87_946:                             # %while.end
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_947
.LBB87_947:                             # %if.end4265
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB87_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB87_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB87_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB87_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB87_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB87_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	$0, -20(%rbp)
.LBB87_955:                             # %for.cond4288
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB87_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB87_955 Depth=4
	movl	$0, -24(%rbp)
.LBB87_957:                             # %for.cond4292
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_835 Depth=2
                                        #       Parent Loop BB87_853 Depth=3
                                        #         Parent Loop BB87_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB87_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB87_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB87_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_957
.LBB87_960:                             # %for.end4316
                                        #   in Loop: Header=BB87_955 Depth=4
	jmp	.LBB87_961
.LBB87_961:                             # %for.inc4317
                                        #   in Loop: Header=BB87_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_955
.LBB87_962:                             # %for.end4319
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB87_963:                             # %if.end4320
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_964
.LBB87_964:                             # %if.end4321
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_965
.LBB87_965:                             # %if.end4322
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB87_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB87_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB87_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB87_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB87_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB87_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB87_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB87_972:                             # %if.end4356
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_973
.LBB87_973:                             # %if.end4357
                                        #   in Loop: Header=BB87_853 Depth=3
	jmp	.LBB87_974
.LBB87_974:                             # %for.inc4358
                                        #   in Loop: Header=BB87_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB87_853
.LBB87_975:                             # %for.end4360
                                        #   in Loop: Header=BB87_835 Depth=2
	jmp	.LBB87_976
.LBB87_976:                             # %for.inc4361
                                        #   in Loop: Header=BB87_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB87_835
.LBB87_977:                             # %for.end4364
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1082
.LBB87_978:                             # %if.else4365
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB87_980:                             # %if.end4371
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB87_981:                             # %for.cond4372
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1014 Depth 3
                                        #         Child Loop BB87_1017 Depth 4
                                        #           Child Loop BB87_1019 Depth 5
                                        #         Child Loop BB87_1026 Depth 4
                                        #           Child Loop BB87_1028 Depth 5
                                        #       Child Loop BB87_1061 Depth 3
                                        #         Child Loop BB87_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB87_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB87_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB87_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB87_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB87_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB87_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB87_990:                             # %if.end4407
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_991
.LBB87_991:                             # %if.end4408
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB87_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB87_993:                             # %if.end4413
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB87_994:                             # %if.end4415
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB87_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB87_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB87_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB87_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_1008
.LBB87_999:                             # %if.else4433
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB87_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB87_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB87_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_1007
.LBB87_1003:                            # %if.else4443
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB87_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB87_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB87_1006:                            # %if.end4451
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1007
.LBB87_1007:                            # %if.end4452
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1008
.LBB87_1008:                            # %if.end4453
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1009
.LBB87_1009:                            # %if.end4454
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB87_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB87_1053
.LBB87_1013:                            # %if.then4470
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1014
.LBB87_1014:                            # %while.body4471
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_1017 Depth 4
                                        #           Child Loop BB87_1019 Depth 5
                                        #         Child Loop BB87_1026 Depth 4
                                        #           Child Loop BB87_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB87_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB87_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB87_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB87_1017:                            # %for.cond4478
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        #       Parent Loop BB87_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB87_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB87_1019:                            # %for.cond4482
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        #       Parent Loop BB87_1014 Depth=3
                                        #         Parent Loop BB87_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB87_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB87_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1019
.LBB87_1022:                            # %for.end4507
                                        #   in Loop: Header=BB87_1017 Depth=4
	jmp	.LBB87_1023
.LBB87_1023:                            # %for.inc4508
                                        #   in Loop: Header=BB87_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1017
.LBB87_1024:                            # %for.end4510
                                        #   in Loop: Header=BB87_1014 Depth=3
	jmp	.LBB87_1034
.LBB87_1025:                            # %if.else4511
                                        #   in Loop: Header=BB87_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB87_1026:                            # %for.cond4512
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        #       Parent Loop BB87_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB87_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB87_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB87_1028:                            # %for.cond4516
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        #       Parent Loop BB87_1014 Depth=3
                                        #         Parent Loop BB87_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB87_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB87_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1028
.LBB87_1031:                            # %for.end4540
                                        #   in Loop: Header=BB87_1026 Depth=4
	jmp	.LBB87_1032
.LBB87_1032:                            # %for.inc4541
                                        #   in Loop: Header=BB87_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1026
.LBB87_1033:                            # %for.end4543
                                        #   in Loop: Header=BB87_1014 Depth=3
	jmp	.LBB87_1034
.LBB87_1034:                            # %if.end4544
                                        #   in Loop: Header=BB87_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB87_1035:                            # %if.end4545
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB87_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB87_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB87_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB87_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB87_1040:                            # %while.body4471.backedge
                                        #   in Loop: Header=BB87_1014 Depth=3
	jmp	.LBB87_1014
.LBB87_1041:                            # %if.else4561
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB87_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB87_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB87_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB87_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_1040
.LBB87_1046:                            # %if.else4575
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB87_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB87_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB87_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB87_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB87_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_1040
.LBB87_1050:                            # %if.else4587
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB87_1052
.LBB87_1051:                            # %if.else4589
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1052
.LBB87_1052:                            # %while.end4590
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1053
.LBB87_1053:                            # %if.end4591
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB87_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB87_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB87_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB87_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB87_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB87_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-240(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB87_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1061:                            # %for.cond4615
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB87_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB87_1063:                            # %for.cond4619
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_981 Depth=2
                                        #       Parent Loop BB87_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB87_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB87_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1063
.LBB87_1066:                            # %for.end4643
                                        #   in Loop: Header=BB87_1061 Depth=3
	jmp	.LBB87_1067
.LBB87_1067:                            # %for.inc4644
                                        #   in Loop: Header=BB87_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1061
.LBB87_1068:                            # %for.end4646
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB87_1069:                            # %if.end4647
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1070
.LBB87_1070:                            # %if.end4648
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1071
.LBB87_1071:                            # %if.end4649
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB87_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB87_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB87_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB87_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB87_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB87_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB87_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB87_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB87_1078:                            # %if.end4683
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1079
.LBB87_1079:                            # %if.end4684
                                        #   in Loop: Header=BB87_981 Depth=2
	jmp	.LBB87_1080
.LBB87_1080:                            # %for.inc4685
                                        #   in Loop: Header=BB87_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB87_981
.LBB87_1081:                            # %for.end4687
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1082
.LBB87_1082:                            # %if.end4688
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1284
.LBB87_1083:                            # %if.else4689
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -304(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB87_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB87_1085:                            # %if.end4695
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB87_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB87_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -260(%rbp)
	je	.LBB87_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB87_1090
	jmp	.LBB87_1089
.LBB87_1089:                            # %if.then4702
                                        #   in Loop: Header=BB87_171 Depth=1
	subl	$2, %eax
	je	.LBB87_1097
	jmp	.LBB87_1098
.LBB87_1090:                            # %sw.bb4704
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jl	.LBB87_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB87_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB87_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB87_1095
.LBB87_1094:                            # %if.then4716
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_1096
.LBB87_1095:                            # %if.else4717
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_1096:                            # %if.end4718
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1099
.LBB87_1097:                            # %sw.bb4719
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB87_1099
.LBB87_1098:                            # %sw.default4720
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB87_1099:                            # %sw.epilog4721
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1101
.LBB87_1100:                            # %if.else4722
                                        #   in Loop: Header=BB87_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB87_1101:                            # %if.end4724
                                        #   in Loop: Header=BB87_171 Depth=1
	vmovsd	.LCPI87_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI87_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB87_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB87_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB87_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB87_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_1110
.LBB87_1106:                            # %if.else4743
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB87_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB87_1109
.LBB87_1108:                            # %if.else4748
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_1109:                            # %if.end4750
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1110
.LBB87_1110:                            # %if.end4751
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1112
.LBB87_1111:                            # %if.else4752
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_1112:                            # %if.end4754
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1113:                            # %for.cond4755
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB87_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB87_1115:                            # %for.cond4759
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB87_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB87_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1115
.LBB87_1118:                            # %for.end4785
                                        #   in Loop: Header=BB87_1113 Depth=2
	jmp	.LBB87_1119
.LBB87_1119:                            # %for.inc4786
                                        #   in Loop: Header=BB87_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1113
.LBB87_1120:                            # %for.end4788
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB87_1122
.LBB87_1121:                            # %if.else4789
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB87_1122:                            # %if.end4792
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1123
.LBB87_1123:                            # %if.end4793
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB87_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB87_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1127:                            # %for.cond4806
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1129 Depth 3
                                        #         Child Loop BB87_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB87_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB87_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB87_1129:                            # %for.cond4810
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB87_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB87_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB87_1131:                            # %for.cond4814
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1127 Depth=2
                                        #       Parent Loop BB87_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB87_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB87_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB87_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB87_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB87_1134:                            # %if.end4826
                                        #   in Loop: Header=BB87_1131 Depth=4
	jmp	.LBB87_1135
.LBB87_1135:                            # %for.inc4827
                                        #   in Loop: Header=BB87_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_1131
.LBB87_1136:                            # %for.end4829
                                        #   in Loop: Header=BB87_1129 Depth=3
	jmp	.LBB87_1137
.LBB87_1137:                            # %for.inc4830
                                        #   in Loop: Header=BB87_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1129
.LBB87_1138:                            # %for.end4832
                                        #   in Loop: Header=BB87_1127 Depth=2
	jmp	.LBB87_1139
.LBB87_1139:                            # %for.inc4833
                                        #   in Loop: Header=BB87_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1127
.LBB87_1140:                            # %for.end4835
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
	movl	$0, -24(%rbp)
.LBB87_1141:                            # %for.cond4840
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB87_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1143:                            # %for.cond4844
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB87_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB87_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1143
.LBB87_1146:                            # %for.end4877
                                        #   in Loop: Header=BB87_1141 Depth=2
	jmp	.LBB87_1147
.LBB87_1147:                            # %for.inc4878
                                        #   in Loop: Header=BB87_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1141
.LBB87_1148:                            # %for.end4880
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1149
.LBB87_1149:                            # %if.end4881
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB87_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB87_1151:                            # %if.end4889
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -24(%rbp)
.LBB87_1152:                            # %for.cond4890
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB87_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1154:                            # %for.cond4894
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB87_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB87_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1154
.LBB87_1157:                            # %for.end4913
                                        #   in Loop: Header=BB87_1152 Depth=2
	jmp	.LBB87_1158
.LBB87_1158:                            # %for.inc4914
                                        #   in Loop: Header=BB87_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1152
.LBB87_1159:                            # %for.end4916
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1160:                            # %for.cond4917
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB87_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB87_1162:                            # %for.cond4921
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB87_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB87_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1162
.LBB87_1165:                            # %for.end4947
                                        #   in Loop: Header=BB87_1160 Depth=2
	jmp	.LBB87_1166
.LBB87_1166:                            # %for.inc4948
                                        #   in Loop: Header=BB87_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1160
.LBB87_1167:                            # %for.end4950
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB87_1169
.LBB87_1168:                            # %if.else4952
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB87_1169:                            # %if.end4954
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1170
.LBB87_1170:                            # %if.end4955
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB87_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -188(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB87_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1174:                            # %for.cond4968
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1176 Depth 3
                                        #         Child Loop BB87_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB87_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB87_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB87_1176:                            # %for.cond4972
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB87_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB87_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB87_1178:                            # %for.cond4976
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1174 Depth=2
                                        #       Parent Loop BB87_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB87_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB87_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB87_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB87_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB87_1181:                            # %if.end4988
                                        #   in Loop: Header=BB87_1178 Depth=4
	jmp	.LBB87_1182
.LBB87_1182:                            # %for.inc4989
                                        #   in Loop: Header=BB87_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_1178
.LBB87_1183:                            # %for.end4991
                                        #   in Loop: Header=BB87_1176 Depth=3
	jmp	.LBB87_1184
.LBB87_1184:                            # %for.inc4992
                                        #   in Loop: Header=BB87_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1176
.LBB87_1185:                            # %for.end4994
                                        #   in Loop: Header=BB87_1174 Depth=2
	jmp	.LBB87_1186
.LBB87_1186:                            # %for.inc4995
                                        #   in Loop: Header=BB87_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1174
.LBB87_1187:                            # %for.end4997
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-188(%rbp), %eax
	movl	%eax, -188(%rbp)
.LBB87_1188:                            # %if.end5002
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-188(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB87_1189:                            # %for.cond5004
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB87_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB87_1191:                            # %for.cond5008
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB87_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB87_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1191
.LBB87_1194:                            # %for.end5034
                                        #   in Loop: Header=BB87_1189 Depth=2
	jmp	.LBB87_1195
.LBB87_1195:                            # %for.inc5035
                                        #   in Loop: Header=BB87_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1189
.LBB87_1196:                            # %for.end5037
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB87_1198
.LBB87_1197:                            # %if.else5039
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB87_1198:                            # %if.end5043
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1199
.LBB87_1199:                            # %if.end5044
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB87_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB87_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1202:                            # %for.cond5053
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB87_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB87_1204:                            # %for.cond5057
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB87_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB87_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1204
.LBB87_1207:                            # %for.end5084
                                        #   in Loop: Header=BB87_1202 Depth=2
	jmp	.LBB87_1208
.LBB87_1208:                            # %for.inc5085
                                        #   in Loop: Header=BB87_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1202
.LBB87_1209:                            # %for.end5087
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -24(%rbp)
.LBB87_1211:                            # %for.cond5091
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB87_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1213:                            # %for.cond5095
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB87_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movl	-216(%rbp), %eax
	subl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -264(%rbp)
	movl	-224(%rbp), %eax
	subl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-264(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB87_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1213
.LBB87_1216:                            # %for.end5194
                                        #   in Loop: Header=BB87_1211 Depth=2
	jmp	.LBB87_1217
.LBB87_1217:                            # %for.inc5195
                                        #   in Loop: Header=BB87_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1211
.LBB87_1218:                            # %for.end5197
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1219
.LBB87_1219:                            # %if.end5198
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	$0, -24(%rbp)
.LBB87_1221:                            # %for.cond5204
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB87_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1223:                            # %for.cond5208
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB87_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB87_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1223
.LBB87_1226:                            # %for.end5232
                                        #   in Loop: Header=BB87_1221 Depth=2
	jmp	.LBB87_1227
.LBB87_1227:                            # %for.inc5233
                                        #   in Loop: Header=BB87_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1221
.LBB87_1228:                            # %for.end5235
                                        #   in Loop: Header=BB87_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB87_1229:                            # %for.cond5237
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB87_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1231:                            # %for.cond5241
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB87_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB87_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1231
.LBB87_1234:                            # %for.end5265
                                        #   in Loop: Header=BB87_1229 Depth=2
	jmp	.LBB87_1235
.LBB87_1235:                            # %for.inc5266
                                        #   in Loop: Header=BB87_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1229
.LBB87_1236:                            # %for.end5268
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB87_1237:                            # %for.cond5270
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB87_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1239:                            # %for.cond5274
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB87_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB87_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1239
.LBB87_1242:                            # %for.end5289
                                        #   in Loop: Header=BB87_1237 Depth=2
	jmp	.LBB87_1243
.LBB87_1243:                            # %for.inc5290
                                        #   in Loop: Header=BB87_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1237
.LBB87_1244:                            # %for.end5292
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB87_1245:                            # %for.cond5296
                                        #   Parent Loop BB87_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB87_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB87_1247:                            # %for.cond5300
                                        #   Parent Loop BB87_171 Depth=1
                                        #     Parent Loop BB87_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -264(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-264(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-264(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -172(%rbp)
	movl	-172(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -216(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-172(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB87_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB87_1251
.LBB87_1250:                            # %cond.false5344
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB87_1251:                            # %cond.end5356
                                        #   in Loop: Header=BB87_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB87_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB87_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB87_1257
.LBB87_1253:                            # %cond.false5362
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	movl	-172(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB87_1256
.LBB87_1255:                            # %cond.false5377
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB87_1256:                            # %cond.end5389
                                        #   in Loop: Header=BB87_1247 Depth=3
.LBB87_1257:                            # %cond.end5391
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB87_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_1260
.LBB87_1259:                            # %cond.false5416
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB87_1260:                            # %cond.end5426
                                        #   in Loop: Header=BB87_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB87_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB87_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB87_1266
.LBB87_1262:                            # %cond.false5432
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB87_1265
.LBB87_1264:                            # %cond.false5445
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB87_1265:                            # %cond.end5455
                                        #   in Loop: Header=BB87_1247 Depth=3
.LBB87_1266:                            # %cond.end5457
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB87_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB87_1269
.LBB87_1268:                            # %cond.false5484
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB87_1269:                            # %cond.end5496
                                        #   in Loop: Header=BB87_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB87_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB87_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB87_1275
.LBB87_1271:                            # %cond.false5502
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB87_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB87_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB87_1274
.LBB87_1273:                            # %cond.false5517
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB87_1274:                            # %cond.end5529
                                        #   in Loop: Header=BB87_1247 Depth=3
.LBB87_1275:                            # %cond.end5531
                                        #   in Loop: Header=BB87_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB87_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1247
.LBB87_1277:                            # %for.end5546
                                        #   in Loop: Header=BB87_1245 Depth=2
	jmp	.LBB87_1278
.LBB87_1278:                            # %for.inc5547
                                        #   in Loop: Header=BB87_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1245
.LBB87_1279:                            # %for.end5549
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1280
.LBB87_1280:                            # %if.end5550
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1282
.LBB87_1281:                            # %if.else5551
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-304(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB87_1282:                            # %if.end5554
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1283
.LBB87_1283:                            # %if.end5555
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1284
.LBB87_1284:                            # %if.end5556
                                        #   in Loop: Header=BB87_171 Depth=1
	cmpl	$0, -252(%rbp)
	jne	.LBB87_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB87_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB87_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB87_1288:                            # %lor.end5571
                                        #   in Loop: Header=BB87_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -256(%rbp)
.LBB87_1289:                            # %if.end5574
                                        #   in Loop: Header=BB87_171 Depth=1
	jmp	.LBB87_1290
.LBB87_1290:                            # %for.inc5575
                                        #   in Loop: Header=BB87_171 Depth=1
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
	jmp	.LBB87_171
.LBB87_1291:                            # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB87_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB87_1295
.LBB87_1294:                            # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB87_1299
.LBB87_1295:                            # %if.else5587
	cmpl	$0, cbp
	jne	.LBB87_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB87_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB87_1298:                            # %if.end5597
	jmp	.LBB87_1299
.LBB87_1299:                            # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB87_1395
.LBB87_1300:                            # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB87_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB87_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB87_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB87_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_1305:                            # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB87_1306:                            # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB87_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB87_1308:                            # %for.cond5623
                                        #   Parent Loop BB87_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB87_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB87_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_1308
.LBB87_1311:                            # %for.end5639
                                        #   in Loop: Header=BB87_1306 Depth=1
	jmp	.LBB87_1312
.LBB87_1312:                            # %for.inc5640
                                        #   in Loop: Header=BB87_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1306
.LBB87_1313:                            # %for.end5642
	jmp	.LBB87_1370
.LBB87_1314:                            # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB87_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB87_1316:                            # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB87_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB87_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB87_1318:                            # %for.cond5651
                                        #   Parent Loop BB87_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB87_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB87_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB87_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_1318
.LBB87_1321:                            # %for.end5680
                                        #   in Loop: Header=BB87_1316 Depth=1
	jmp	.LBB87_1322
.LBB87_1322:                            # %for.inc5681
                                        #   in Loop: Header=BB87_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1316
.LBB87_1323:                            # %for.end5683
	movl	$0, -24(%rbp)
.LBB87_1324:                            # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB87_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1326:                            # %for.cond5688
                                        #   Parent Loop BB87_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB87_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB87_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1326
.LBB87_1329:                            # %for.end5707
                                        #   in Loop: Header=BB87_1324 Depth=1
	jmp	.LBB87_1330
.LBB87_1330:                            # %for.inc5708
                                        #   in Loop: Header=BB87_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1324
.LBB87_1331:                            # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB87_1333:                            # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB87_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB87_1335:                            # %for.cond5718
                                        #   Parent Loop BB87_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB87_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB87_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1335
.LBB87_1338:                            # %for.end5752
                                        #   in Loop: Header=BB87_1333 Depth=1
	jmp	.LBB87_1339
.LBB87_1339:                            # %for.inc5753
                                        #   in Loop: Header=BB87_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1333
.LBB87_1340:                            # %for.end5755
	jmp	.LBB87_1341
.LBB87_1341:                            # %if.end5756
	jmp	.LBB87_1342
.LBB87_1342:                            # %if.end5757
	cmpl	$9, best_mode
	je	.LBB87_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB87_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB87_1345:                            # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB87_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB87_1347:                            # %for.cond5772
                                        #   Parent Loop BB87_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB87_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB87_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB87_1347
.LBB87_1350:                            # %for.end5788
                                        #   in Loop: Header=BB87_1345 Depth=1
	jmp	.LBB87_1351
.LBB87_1351:                            # %for.inc5789
                                        #   in Loop: Header=BB87_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1345
.LBB87_1352:                            # %for.end5791
	cmpl	$10, best_mode
	je	.LBB87_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB87_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB87_1356
# %bb.1355:                             # %if.then5800
	movl	-312(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB87_1356:                            # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB87_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB87_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_1359:                            # %if.end5811
	movl	$0, -20(%rbp)
.LBB87_1360:                            # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB87_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB87_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB87_1362:                            # %for.cond5816
                                        #   Parent Loop BB87_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB87_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB87_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB87_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_1362
.LBB87_1365:                            # %for.end5842
                                        #   in Loop: Header=BB87_1360 Depth=1
	jmp	.LBB87_1366
.LBB87_1366:                            # %for.inc5843
                                        #   in Loop: Header=BB87_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_1360
.LBB87_1367:                            # %for.end5845
	jmp	.LBB87_1368
.LBB87_1368:                            # %if.end5846
	jmp	.LBB87_1369
.LBB87_1369:                            # %if.end5847
	jmp	.LBB87_1370
.LBB87_1370:                            # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB87_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_1374:                            # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB87_1376:                            # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB87_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB87_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB87_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB87_1382
.LBB87_1380:                            # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB87_1382:                            # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB87_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB87_1384:                            # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB87_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB87_1392
.LBB87_1386:                            # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB87_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB87_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB87_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB87_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-432(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB87_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB87_1392:                            # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB87_1394:                            # %if.end5973
	jmp	.LBB87_1395
.LBB87_1395:                            # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB87_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB87_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB87_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB87_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB87_1401
.LBB87_1400:                            # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB87_1402
.LBB87_1401:                            # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB87_1402:                            # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB87_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB87_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB87_1406
.LBB87_1405:                            # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB87_1406:                            # %if.end6019
	jmp	.LBB87_1407
.LBB87_1407:                            # %if.end6020
	jmp	.LBB87_1408
.LBB87_1408:                            # %if.end6021
	jmp	.LBB87_1409
.LBB87_1409:                            # %if.end6022
	jmp	.LBB87_1410
.LBB87_1410:                            # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB87_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-240(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB87_1413
.LBB87_1412:                            # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB87_1413:                            # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB87_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB87_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB87_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB87_1420
	jmp	.LBB87_1428
.LBB87_1417:                            # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB87_1428
	jmp	.LBB87_1420
.LBB87_1419:                            # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB87_1420
	jmp	.LBB87_1428
.LBB87_1420:                            # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB87_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB87_1425
	jmp	.LBB87_1428
.LBB87_1422:                            # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB87_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB87_1428
	jmp	.LBB87_1425
.LBB87_1424:                            # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB87_1425
	jmp	.LBB87_1428
.LBB87_1425:                            # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB87_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI87_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB87_1427:                            # %if.end6068
	jmp	.LBB87_1428
.LBB87_1428:                            # %if.end6069
	jmp	.LBB87_1429
.LBB87_1429:                            # %if.end6070
	jmp	.LBB87_1430
.LBB87_1430:                            # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB87_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB87_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB87_1452
.LBB87_1433:                            # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB87_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -256(%rbp)
	jne	.LBB87_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB87_1437:                            # %lor.end6142
.LBB87_1438:                            # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB87_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB87_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB87_1441:                            # %lor.end6166
.LBB87_1442:                            # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB87_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB87_1445:                            # %lor.end6191
.LBB87_1446:                            # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -256(%rbp)
	jne	.LBB87_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB87_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB87_1449:                            # %lor.end6216
.LBB87_1450:                            # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB87_1451:                            # %if.end6232
	jmp	.LBB87_1452
.LBB87_1452:                            # %if.end6233
	jmp	.LBB87_1464
.LBB87_1453:                            # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB87_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB87_1456:                            # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB87_1458:                            # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB87_1460:                            # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB87_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB87_1462:                            # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB87_1463:                            # %if.end6319
	jmp	.LBB87_1464
.LBB87_1464:                            # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB87_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB87_1466:                            # %if.end6327
	cmpl	$1560430967, -416(%rbp) # imm = 0x5D024977
	jne	.LBB87_1468
.LBB87_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_1468:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_1467
.Lfunc_end87:
	.size	encode_one_macroblock.58, .Lfunc_end87-encode_one_macroblock.58
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.59           # -- Begin function StoreMV8x8.59
	.p2align	4, 0x90
	.type	StoreMV8x8.59,@function
StoreMV8x8.59:                          # @StoreMV8x8.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$960325561, -12(%rbp)   # imm = 0x393D67B9
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB88_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB88_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_1
.LBB88_4:                               # %for.end
	cmpl	$960325561, -12(%rbp)   # imm = 0x393D67B9
	jne	.LBB88_6
.LBB88_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_5
.Lfunc_end88:
	.size	StoreMV8x8.59, .Lfunc_end88-StoreMV8x8.59
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.60 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.60
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.60,@function
Mode_Decision_for_Intra4x4Macroblock.60: # @Mode_Decision_for_Intra4x4Macroblock.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$94146877, -24(%rbp)    # imm = 0x59C913D
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB89_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB89_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-20(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB89_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB89_4:                               # %if.end
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB89_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB89_1
.LBB89_6:                               # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$94146877, -24(%rbp)    # imm = 0x59C913D
	jne	.LBB89_8
.LBB89_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_8:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_7
.Lfunc_end89:
	.size	Mode_Decision_for_Intra4x4Macroblock.60, .Lfunc_end89-Mode_Decision_for_Intra4x4Macroblock.60
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4IntraBlocks.61 # -- Begin function RDCost_for_4x4IntraBlocks.61
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.61,@function
RDCost_for_4x4IntraBlocks.61:           # @RDCost_for_4x4IntraBlocks.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$560300255, -80(%rbp)   # imm = 0x216580DF
	movq	%rdi, -152(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -144(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -48(%rbp)
	movl	$0, -44(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -52(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -40(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	$0, -72(%rbp)
	movl	-52(%rbp), %edi
	movl	-40(%rbp), %esi
	leaq	-72(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-152(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB90_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB90_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB90_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB90_4:                               # %for.cond15
                                        #   Parent Loop BB90_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB90_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-76(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-120(%rbp), %rdx
	movl	-68(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB90_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB90_4
.LBB90_7:                               # %for.end
                                        #   in Loop: Header=BB90_2 Depth=1
	jmp	.LBB90_8
.LBB90_8:                               # %for.inc33
                                        #   in Loop: Header=BB90_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB90_2
.LBB90_9:                               # %for.end35
	jmp	.LBB90_10
.LBB90_10:                              # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-48(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB90_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB90_16
.LBB90_12:                              # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB90_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB90_15
.LBB90_14:                              # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB90_15:                              # %cond.end
.LBB90_16:                              # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-20(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB90_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB90_18:                              # %if.end50
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB90_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB90_21
.LBB90_20:                              # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB90_21:                              # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB90_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-20(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_24
.LBB90_23:                              # %if.else69
	movl	-8(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_24:                              # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm0
	vmovsd	-144(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -128(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB90_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB90_27
.LBB90_26:                              # %if.else81
	vmovsd	-128(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB90_27:                              # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$560300255, -80(%rbp)   # imm = 0x216580DF
	jne	.LBB90_29
.LBB90_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB90_28
.Lfunc_end90:
	.size	RDCost_for_4x4IntraBlocks.61, .Lfunc_end90-RDCost_for_4x4IntraBlocks.61
	.cfi_endproc
                                        # -- End function
	.globl	I16Offset.62            # -- Begin function I16Offset.62
	.p2align	4, 0x90
	.type	I16Offset.62,@function
I16Offset.62:                           # @I16Offset.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1127897196, -20(%rbp)  # imm = 0x433A586C
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	-12(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	movl	$13, %eax
	movl	$1, %ebx
	cmovnel	%eax, %ebx
	addl	-16(%rbp), %ebx
	movl	-12(%rbp), %eax
	andl	$48, %eax
	sarl	$2, %eax
	addl	%eax, %ebx
	cmpl	$1127897196, -20(%rbp)  # imm = 0x433A586C
	jne	.LBB91_2
.LBB91_1:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_1
.Lfunc_end91:
	.size	I16Offset.62, .Lfunc_end91-I16Offset.62
	.cfi_endproc
                                        # -- End function
	.globl	store_macroblock_parameters.63 # -- Begin function store_macroblock_parameters.63
	.p2align	4, 0x90
	.type	store_macroblock_parameters.63,@function
store_macroblock_parameters.63:         # @store_macroblock_parameters.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1858704969, -36(%rbp)  # imm = 0x6EC99649
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	movl	%eax, best_mode
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movl	%eax, best_c_imode
	movq	img, %rax
	movl	72380(%rax), %eax
	movl	%eax, best_i16offset
	cmpl	$1, -28(%rbp)
	jne	.LBB92_2
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	movl	580(%rax), %eax
	movl	%eax, bi_pred_me
	jmp	.LBB92_3
.LBB92_2:                               # %if.else
	movl	$0, bi_pred_me
.LBB92_3:                               # %if.end
	movl	$0, -4(%rbp)
.LBB92_4:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB92_7
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB92_4 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8mode(,%rcx,2)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	movw	%ax, b8pdir(,%rcx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB92_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_4
.LBB92_7:                               # %for.end
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB92_8:                               # %for.cond15
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_10 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_15
# %bb.9:                                # %for.body19
                                        #   in Loop: Header=BB92_8 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB92_10:                              # %for.cond20
                                        #   Parent Loop BB92_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_13
# %bb.11:                               # %for.body25
                                        #   in Loop: Header=BB92_10 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_ipredmode(,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b4_intra_pred_modes(,%rcx,4)
# %bb.12:                               # %for.inc36
                                        #   in Loop: Header=BB92_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_10
.LBB92_13:                              # %for.end39
                                        #   in Loop: Header=BB92_8 Depth=1
	jmp	.LBB92_14
.LBB92_14:                              # %for.inc40
                                        #   in Loop: Header=BB92_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_8
.LBB92_15:                              # %for.end42
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB92_16:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_18 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB92_23
# %bb.17:                               # %for.body46
                                        #   in Loop: Header=BB92_16 Depth=1
	movl	$0, -8(%rbp)
.LBB92_18:                              # %for.cond47
                                        #   Parent Loop BB92_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB92_21
# %bb.19:                               # %for.body50
                                        #   in Loop: Header=BB92_18 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	movabsq	$b8_ipredmode8x8, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movslq	-12(%rbp), %rcx
	movl	%eax, b8_intra_pred_modes8x8(,%rcx,4)
# %bb.20:                               # %for.inc67
                                        #   in Loop: Header=BB92_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_18
.LBB92_21:                              # %for.end70
                                        #   in Loop: Header=BB92_16 Depth=1
	jmp	.LBB92_22
.LBB92_22:                              # %for.inc71
                                        #   in Loop: Header=BB92_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_16
.LBB92_23:                              # %for.end73
	movl	$0, -8(%rbp)
.LBB92_24:                              # %for.cond74
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_26 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB92_31
# %bb.25:                               # %for.body77
                                        #   in Loop: Header=BB92_24 Depth=1
	movl	$0, -4(%rbp)
.LBB92_26:                              # %for.cond78
                                        #   Parent Loop BB92_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB92_29
# %bb.27:                               # %for.body81
                                        #   in Loop: Header=BB92_26 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.28:                               # %for.inc92
                                        #   in Loop: Header=BB92_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_26
.LBB92_29:                              # %for.end94
                                        #   in Loop: Header=BB92_24 Depth=1
	jmp	.LBB92_30
.LBB92_30:                              # %for.inc95
                                        #   in Loop: Header=BB92_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_24
.LBB92_31:                              # %for.end97
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB92_41
# %bb.32:                               # %if.then100
	movl	$0, -8(%rbp)
.LBB92_33:                              # %for.cond101
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_35 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB92_40
# %bb.34:                               # %for.body104
                                        #   in Loop: Header=BB92_33 Depth=1
	movl	$0, -4(%rbp)
.LBB92_35:                              # %for.cond105
                                        #   Parent Loop BB92_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB92_38
# %bb.36:                               # %for.body108
                                        #   in Loop: Header=BB92_35 Depth=2
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbU, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	164(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	160(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbV, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.37:                               # %for.inc134
                                        #   in Loop: Header=BB92_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_35
.LBB92_38:                              # %for.end136
                                        #   in Loop: Header=BB92_33 Depth=1
	jmp	.LBB92_39
.LBB92_39:                              # %for.inc137
                                        #   in Loop: Header=BB92_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_33
.LBB92_40:                              # %for.end139
	jmp	.LBB92_41
.LBB92_41:                              # %if.end140
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB92_56
# %bb.42:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB92_56
# %bb.43:                               # %if.then146
	movl	$0, -12(%rbp)
.LBB92_44:                              # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_46 Depth 2
                                        #       Child Loop BB92_48 Depth 3
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB92_55
# %bb.45:                               # %for.body150
                                        #   in Loop: Header=BB92_44 Depth=1
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB92_46:                              # %for.cond152
                                        #   Parent Loop BB92_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_48 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_53
# %bb.47:                               # %for.body157
                                        #   in Loop: Header=BB92_46 Depth=2
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB92_48:                              # %for.cond159
                                        #   Parent Loop BB92_44 Depth=1
                                        #     Parent Loop BB92_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB92_51
# %bb.49:                               # %for.body164
                                        #   in Loop: Header=BB92_48 Depth=3
	movq	decs, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	24(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc177
                                        #   in Loop: Header=BB92_48 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_48
.LBB92_51:                              # %for.end179
                                        #   in Loop: Header=BB92_46 Depth=2
	jmp	.LBB92_52
.LBB92_52:                              # %for.inc180
                                        #   in Loop: Header=BB92_46 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_46
.LBB92_53:                              # %for.end182
                                        #   in Loop: Header=BB92_44 Depth=1
	jmp	.LBB92_54
.LBB92_54:                              # %for.inc183
                                        #   in Loop: Header=BB92_44 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_44
.LBB92_55:                              # %for.end185
	jmp	.LBB92_56
.LBB92_56:                              # %if.end186
	cmpl	$0, -28(%rbp)
	jne	.LBB92_58
# %bb.57:                               # %lor.lhs.false
	cmpl	$0, -32(%rbp)
	je	.LBB92_59
.LBB92_58:                              # %if.then188
	movq	cofAC, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-56(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-48(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, cbp
	movq	-24(%rbp), %rax
	movq	464(%rax), %rax
	movq	%rax, cbp_blk
	jmp	.LBB92_60
.LBB92_59:                              # %if.else191
	movl	$0, cbp
	movq	$0, cbp_blk
.LBB92_60:                              # %if.end192
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, luma_transform_size_8x8_flag
	movl	$0, -8(%rbp)
.LBB92_61:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB92_70
# %bb.62:                               # %for.body196
                                        #   in Loop: Header=BB92_61 Depth=1
	movl	$0, -4(%rbp)
.LBB92_63:                              # %for.cond197
                                        #   Parent Loop BB92_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB92_68
# %bb.64:                               # %for.body200
                                        #   in Loop: Header=BB92_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$frefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	cmpl	$0, -32(%rbp)
	je	.LBB92_66
# %bb.65:                               # %if.then215
                                        #   in Loop: Header=BB92_63 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movabsq	$brefframe, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
.LBB92_66:                              # %if.end230
                                        #   in Loop: Header=BB92_63 Depth=2
	jmp	.LBB92_67
.LBB92_67:                              # %for.inc231
                                        #   in Loop: Header=BB92_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_63
.LBB92_68:                              # %for.end233
                                        #   in Loop: Header=BB92_61 Depth=1
	jmp	.LBB92_69
.LBB92_69:                              # %for.inc234
                                        #   in Loop: Header=BB92_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB92_61
.LBB92_70:                              # %for.end236
	cmpl	$1858704969, -36(%rbp)  # imm = 0x6EC99649
	jne	.LBB92_72
.LBB92_71:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_72:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_71
.Lfunc_end92:
	.size	store_macroblock_parameters.63, .Lfunc_end92-store_macroblock_parameters.63
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.64
.LCPI93_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.64
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.64,@function
RDCost_for_macroblocks.64:              # @RDCost_for_macroblocks.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$254802326, -104(%rbp)  # imm = 0xF2FF996
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -128(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB93_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB93_3
.LBB93_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB93_3
.LBB93_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -120(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB93_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB93_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB93_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB93_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
.LBB93_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_10 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB93_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB93_8 Depth=1
	movl	$0, -16(%rbp)
.LBB93_10:                              # %for.cond17
                                        #   Parent Loop BB93_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB93_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB93_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB93_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB93_177
.LBB93_13:                              # %if.end
                                        #   in Loop: Header=BB93_10 Depth=2
	jmp	.LBB93_14
.LBB93_14:                              # %for.inc
                                        #   in Loop: Header=BB93_10 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_10
.LBB93_15:                              # %for.end
                                        #   in Loop: Header=BB93_8 Depth=1
	jmp	.LBB93_16
.LBB93_16:                              # %for.inc30
                                        #   in Loop: Header=BB93_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_8
.LBB93_17:                              # %for.end32
	jmp	.LBB93_18
.LBB93_18:                              # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB93_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB93_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB93_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB93_177
.LBB93_23:                              # %if.end46
	jmp	.LBB93_76
.LBB93_24:                              # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB93_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB93_75
.LBB93_26:                              # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB93_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_47
# %bb.28:                               # %if.then56
	movl	$0, -12(%rbp)
.LBB93_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_31 Depth 2
                                        #       Child Loop BB93_33 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB93_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB93_29 Depth=1
	movl	$0, -16(%rbp)
.LBB93_31:                              # %for.cond61
                                        #   Parent Loop BB93_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB93_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB93_31 Depth=2
	movl	$0, -24(%rbp)
.LBB93_33:                              # %for.cond65
                                        #   Parent Loop BB93_29 Depth=1
                                        #     Parent Loop BB93_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB93_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB93_33 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB93_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB93_33 Depth=3
	movl	$2, -40(%rbp)
.LBB93_36:                              # %if.end77
                                        #   in Loop: Header=BB93_33 Depth=3
	jmp	.LBB93_37
.LBB93_37:                              # %for.inc78
                                        #   in Loop: Header=BB93_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_33
.LBB93_38:                              # %for.end80
                                        #   in Loop: Header=BB93_31 Depth=2
	jmp	.LBB93_39
.LBB93_39:                              # %for.inc81
                                        #   in Loop: Header=BB93_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_31
.LBB93_40:                              # %for.end83
                                        #   in Loop: Header=BB93_29 Depth=1
	jmp	.LBB93_41
.LBB93_41:                              # %for.inc84
                                        #   in Loop: Header=BB93_29 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_29
.LBB93_42:                              # %for.end86
	movl	$0, -36(%rbp)
.LBB93_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB93_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB93_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_43
.LBB93_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB93_47:                              # %if.end97
	jmp	.LBB93_74
.LBB93_48:                              # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB93_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB93_73
.LBB93_50:                              # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB93_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-32(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_71
# %bb.52:                               # %if.then110
	movl	$0, -12(%rbp)
.LBB93_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_55 Depth 2
                                        #       Child Loop BB93_57 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB93_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB93_53 Depth=1
	movl	$0, -16(%rbp)
.LBB93_55:                              # %for.cond115
                                        #   Parent Loop BB93_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_57 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB93_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB93_55 Depth=2
	movl	$0, -24(%rbp)
.LBB93_57:                              # %for.cond119
                                        #   Parent Loop BB93_53 Depth=1
                                        #     Parent Loop BB93_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB93_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB93_57 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB93_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB93_57 Depth=3
	movl	$2, -40(%rbp)
.LBB93_60:                              # %if.end131
                                        #   in Loop: Header=BB93_57 Depth=3
	jmp	.LBB93_61
.LBB93_61:                              # %for.inc132
                                        #   in Loop: Header=BB93_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_57
.LBB93_62:                              # %for.end134
                                        #   in Loop: Header=BB93_55 Depth=2
	jmp	.LBB93_63
.LBB93_63:                              # %for.inc135
                                        #   in Loop: Header=BB93_55 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_55
.LBB93_64:                              # %for.end137
                                        #   in Loop: Header=BB93_53 Depth=1
	jmp	.LBB93_65
.LBB93_65:                              # %for.inc138
                                        #   in Loop: Header=BB93_53 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_53
.LBB93_66:                              # %for.end140
	movl	$0, -36(%rbp)
.LBB93_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -36(%rbp)
	jge	.LBB93_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB93_67 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB93_67
.LBB93_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB93_71:                              # %if.end152
	jmp	.LBB93_72
.LBB93_72:                              # %if.end153
	jmp	.LBB93_73
.LBB93_73:                              # %if.end154
	jmp	.LBB93_74
.LBB93_74:                              # %if.end155
	jmp	.LBB93_75
.LBB93_75:                              # %if.end156
	jmp	.LBB93_76
.LBB93_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB93_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB93_81
.LBB93_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB93_81
.LBB93_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB93_82:                              # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB93_92
# %bb.83:                               # %if.then174
	movl	$0, -12(%rbp)
.LBB93_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_86 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB93_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB93_84 Depth=1
	movl	$0, -16(%rbp)
.LBB93_86:                              # %for.cond179
                                        #   Parent Loop BB93_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB93_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB93_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB93_86 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_86
.LBB93_89:                              # %for.end196
                                        #   in Loop: Header=BB93_84 Depth=1
	jmp	.LBB93_90
.LBB93_90:                              # %for.inc197
                                        #   in Loop: Header=BB93_84 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_84
.LBB93_91:                              # %for.end199
	jmp	.LBB93_101
.LBB93_92:                              # %if.else200
	movl	$0, -12(%rbp)
.LBB93_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_95 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB93_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB93_93 Depth=1
	movl	$0, -16(%rbp)
.LBB93_95:                              # %for.cond205
                                        #   Parent Loop BB93_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -16(%rbp)
	jge	.LBB93_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB93_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB93_95 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_95
.LBB93_98:                              # %for.end220
                                        #   in Loop: Header=BB93_93 Depth=1
	jmp	.LBB93_99
.LBB93_99:                              # %for.inc221
                                        #   in Loop: Header=BB93_93 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_93
.LBB93_100:                             # %for.end223
	jmp	.LBB93_101
.LBB93_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB93_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB93_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB93_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB93_107
.LBB93_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_107
# %bb.106:                              # %if.then238
	leaq	-32(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB93_107:                             # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB93_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB93_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB93_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB93_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB93_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_114 Depth 2
                                        #       Child Loop BB93_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB93_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB93_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -16(%rbp)
.LBB93_114:                             # %for.cond259
                                        #   Parent Loop BB93_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB93_116 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB93_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB93_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB93_116:                             # %for.cond263
                                        #   Parent Loop BB93_112 Depth=1
                                        #     Parent Loop BB93_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB93_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB93_116 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_116
.LBB93_119:                             # %for.end291
                                        #   in Loop: Header=BB93_114 Depth=2
	jmp	.LBB93_120
.LBB93_120:                             # %for.inc292
                                        #   in Loop: Header=BB93_114 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_114
.LBB93_121:                             # %for.end294
                                        #   in Loop: Header=BB93_112 Depth=1
	jmp	.LBB93_122
.LBB93_122:                             # %for.inc295
                                        #   in Loop: Header=BB93_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB93_112
.LBB93_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB93_133
.LBB93_124:                             # %if.else300
	movl	$0, -16(%rbp)
.LBB93_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_127 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB93_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB93_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB93_127:                             # %for.cond306
                                        #   Parent Loop BB93_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB93_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB93_127 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_127
.LBB93_130:                             # %for.end334
                                        #   in Loop: Header=BB93_125 Depth=1
	jmp	.LBB93_131
.LBB93_131:                             # %for.inc335
                                        #   in Loop: Header=BB93_125 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_125
.LBB93_132:                             # %for.end337
	jmp	.LBB93_133
.LBB93_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB93_143
# %bb.134:                              # %if.then342
	movl	$0, -16(%rbp)
.LBB93_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_137 Depth 2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB93_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB93_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -12(%rbp)
.LBB93_137:                             # %for.cond347
                                        #   Parent Loop BB93_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB93_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB93_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB93_137 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_137
.LBB93_140:                             # %for.end398
                                        #   in Loop: Header=BB93_135 Depth=1
	jmp	.LBB93_141
.LBB93_141:                             # %for.inc399
                                        #   in Loop: Header=BB93_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_135
.LBB93_142:                             # %for.end401
	jmp	.LBB93_143
.LBB93_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -92(%rbp)
	je	.LBB93_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB93_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB93_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB93_148
.LBB93_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-72(%rbp), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB93_149
.LBB93_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-32(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-32(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-32(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB93_149:                             # %if.end422
	jmp	.LBB93_151
.LBB93_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB93_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI93_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB93_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI93_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB93_154
.LBB93_153:                             # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB93_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB93_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB93_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB93_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB93_159
.LBB93_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB93_177
.LBB93_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB93_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB93_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB93_165
	jmp	.LBB93_176
.LBB93_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_176
	jmp	.LBB93_165
.LBB93_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB93_165
	jmp	.LBB93_176
.LBB93_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB93_175
# %bb.166:                              # %if.then465
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB93_171
	jmp	.LBB93_174
.LBB93_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB93_170
# %bb.169:                              # %cond.true473
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB93_174
	jmp	.LBB93_171
.LBB93_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB93_171
	jmp	.LBB93_174
.LBB93_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB93_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB93_177
.LBB93_173:                             # %if.end482
	jmp	.LBB93_174
.LBB93_174:                             # %if.end483
	jmp	.LBB93_175
.LBB93_175:                             # %if.end484
	jmp	.LBB93_176
.LBB93_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-128(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB93_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$254802326, -104(%rbp)  # imm = 0xF2FF996
	jne	.LBB93_179
.LBB93_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_178
.Lfunc_end93:
	.size	RDCost_for_macroblocks.64, .Lfunc_end93-RDCost_for_macroblocks.64
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.65 # -- Begin function Intra16x16_Mode_Decision.65
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.65,@function
Intra16x16_Mode_Decision.65:            # @Intra16x16_Mode_Decision.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$446491472, -56(%rbp)   # imm = 0x1A9CEB50
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB94_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB94_2:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB94_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB94_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB94_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB94_4 Depth=1
	movl	$0, -8(%rbp)
.LBB94_6:                               # %for.cond4
                                        #   Parent Loop BB94_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB94_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB94_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB94_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_6
.LBB94_9:                               # %for.end
                                        #   in Loop: Header=BB94_4 Depth=1
	jmp	.LBB94_10
.LBB94_10:                              # %for.inc87
                                        #   in Loop: Header=BB94_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_4
.LBB94_11:                              # %for.end89
	jmp	.LBB94_12
.LBB94_12:                              # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB94_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB94_14:                              # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB94_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	$0, -8(%rbp)
.LBB94_16:                              # %for.cond99
                                        #   Parent Loop BB94_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB94_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB94_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB94_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_16
.LBB94_19:                              # %for.end123
                                        #   in Loop: Header=BB94_14 Depth=1
	jmp	.LBB94_20
.LBB94_20:                              # %for.inc124
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_14
.LBB94_21:                              # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB94_22:                              # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB94_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB94_22 Depth=1
	movl	$0, -8(%rbp)
.LBB94_24:                              # %for.cond132
                                        #   Parent Loop BB94_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB94_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB94_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB94_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_24
.LBB94_27:                              # %for.end156
                                        #   in Loop: Header=BB94_22 Depth=1
	jmp	.LBB94_28
.LBB94_28:                              # %for.inc157
                                        #   in Loop: Header=BB94_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_22
.LBB94_29:                              # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB94_30:                              # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB94_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB94_30 Depth=1
	movl	$0, -8(%rbp)
.LBB94_32:                              # %for.cond165
                                        #   Parent Loop BB94_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB94_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB94_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB94_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_32
.LBB94_35:                              # %for.end180
                                        #   in Loop: Header=BB94_30 Depth=1
	jmp	.LBB94_36
.LBB94_36:                              # %for.inc181
                                        #   in Loop: Header=BB94_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_30
.LBB94_37:                              # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB94_38:                              # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB94_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB94_38 Depth=1
	movl	$0, -8(%rbp)
.LBB94_40:                              # %for.cond190
                                        #   Parent Loop BB94_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB94_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -20(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -32(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB94_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_44
.LBB94_43:                              # %cond.false
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB94_44:                              # %cond.end
                                        #   in Loop: Header=BB94_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB94_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB94_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB94_50
.LBB94_46:                              # %cond.false246
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB94_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_49
.LBB94_48:                              # %cond.false260
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB94_49:                              # %cond.end271
                                        #   in Loop: Header=BB94_40 Depth=2
.LBB94_50:                              # %cond.end273
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB94_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB94_53
.LBB94_52:                              # %cond.false295
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB94_53:                              # %cond.end305
                                        #   in Loop: Header=BB94_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB94_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB94_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB94_59
.LBB94_55:                              # %cond.false311
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB94_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_58
.LBB94_57:                              # %cond.false324
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB94_58:                              # %cond.end334
                                        #   in Loop: Header=BB94_40 Depth=2
.LBB94_59:                              # %cond.end336
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB94_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB94_62
.LBB94_61:                              # %cond.false359
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB94_62:                              # %cond.end370
                                        #   in Loop: Header=BB94_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB94_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB94_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB94_68
.LBB94_64:                              # %cond.false376
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB94_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB94_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB94_67
.LBB94_66:                              # %cond.false390
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB94_67:                              # %cond.end401
                                        #   in Loop: Header=BB94_40 Depth=2
.LBB94_68:                              # %cond.end403
                                        #   in Loop: Header=BB94_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB94_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB94_40
.LBB94_70:                              # %for.end416
                                        #   in Loop: Header=BB94_38 Depth=1
	jmp	.LBB94_71
.LBB94_71:                              # %for.inc417
                                        #   in Loop: Header=BB94_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB94_38
.LBB94_72:                              # %for.end419
	jmp	.LBB94_73
.LBB94_73:                              # %if.end420
	cmpl	$446491472, -56(%rbp)   # imm = 0x1A9CEB50
	jne	.LBB94_75
.LBB94_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_75:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_74
.Lfunc_end94:
	.size	Intra16x16_Mode_Decision.65, .Lfunc_end94-Intra16x16_Mode_Decision.65
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.66 # -- Begin function set_stored_macroblock_parameters.66
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.66,@function
set_stored_macroblock_parameters.66:    # @set_stored_macroblock_parameters.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$226994435, -52(%rbp)   # imm = 0xD87A903
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB95_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB95_4
.LBB95_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB95_4
.LBB95_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB95_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB95_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	$0, -4(%rbp)
.LBB95_7:                               # %for.cond9
                                        #   Parent Loop BB95_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB95_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB95_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-104(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB95_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB95_10:                              # %if.end
                                        #   in Loop: Header=BB95_7 Depth=2
	jmp	.LBB95_11
.LBB95_11:                              # %for.inc
                                        #   in Loop: Header=BB95_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_7
.LBB95_12:                              # %for.end
                                        #   in Loop: Header=BB95_5 Depth=1
	jmp	.LBB95_13
.LBB95_13:                              # %for.inc33
                                        #   in Loop: Header=BB95_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_5
.LBB95_14:                              # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB95_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB95_16:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB95_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB95_16 Depth=1
	movl	$0, -4(%rbp)
.LBB95_18:                              # %for.cond43
                                        #   Parent Loop BB95_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB95_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB95_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-72(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB95_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB95_21:                              # %if.end92
                                        #   in Loop: Header=BB95_18 Depth=2
	jmp	.LBB95_22
.LBB95_22:                              # %for.inc93
                                        #   in Loop: Header=BB95_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_18
.LBB95_23:                              # %for.end95
                                        #   in Loop: Header=BB95_16 Depth=1
	jmp	.LBB95_24
.LBB95_24:                              # %for.inc96
                                        #   in Loop: Header=BB95_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_16
.LBB95_25:                              # %for.end98
	jmp	.LBB95_26
.LBB95_26:                              # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB95_28:                              # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_30 Depth 2
                                        #       Child Loop BB95_32 Depth 3
                                        #         Child Loop BB95_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB95_28 Depth=1
	movl	$0, -8(%rbp)
.LBB95_30:                              # %for.cond118
                                        #   Parent Loop BB95_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_32 Depth 3
                                        #         Child Loop BB95_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB95_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB95_30 Depth=2
	movl	$0, -12(%rbp)
.LBB95_32:                              # %for.cond122
                                        #   Parent Loop BB95_28 Depth=1
                                        #     Parent Loop BB95_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB95_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB95_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB95_32 Depth=3
	movl	$0, -28(%rbp)
.LBB95_34:                              # %for.cond126
                                        #   Parent Loop BB95_28 Depth=1
                                        #     Parent Loop BB95_30 Depth=2
                                        #       Parent Loop BB95_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB95_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB95_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB95_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_34
.LBB95_37:                              # %for.end150
                                        #   in Loop: Header=BB95_32 Depth=3
	jmp	.LBB95_38
.LBB95_38:                              # %for.inc151
                                        #   in Loop: Header=BB95_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_32
.LBB95_39:                              # %for.end153
                                        #   in Loop: Header=BB95_30 Depth=2
	jmp	.LBB95_40
.LBB95_40:                              # %for.inc154
                                        #   in Loop: Header=BB95_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_30
.LBB95_41:                              # %for.end156
                                        #   in Loop: Header=BB95_28 Depth=1
	jmp	.LBB95_42
.LBB95_42:                              # %for.inc157
                                        #   in Loop: Header=BB95_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_28
.LBB95_43:                              # %for.end159
	movl	$0, -4(%rbp)
.LBB95_44:                              # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_46 Depth 2
                                        #       Child Loop BB95_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB95_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB95_44 Depth=1
	movl	$0, -12(%rbp)
.LBB95_46:                              # %for.cond164
                                        #   Parent Loop BB95_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB95_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB95_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB95_46 Depth=2
	movl	$0, -28(%rbp)
.LBB95_48:                              # %for.cond168
                                        #   Parent Loop BB95_44 Depth=1
                                        #     Parent Loop BB95_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB95_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB95_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB95_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB95_48
.LBB95_51:                              # %for.end188
                                        #   in Loop: Header=BB95_46 Depth=2
	jmp	.LBB95_52
.LBB95_52:                              # %for.inc189
                                        #   in Loop: Header=BB95_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_46
.LBB95_53:                              # %for.end191
                                        #   in Loop: Header=BB95_44 Depth=1
	jmp	.LBB95_54
.LBB95_54:                              # %for.inc192
                                        #   in Loop: Header=BB95_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_44
.LBB95_55:                              # %for.end194
	jmp	.LBB95_56
.LBB95_56:                              # %if.end195
	movl	$0, -4(%rbp)
.LBB95_57:                              # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB95_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB95_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB95_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB95_60:                              # %if.end225
                                        #   in Loop: Header=BB95_57 Depth=1
	jmp	.LBB95_61
.LBB95_61:                              # %for.inc226
                                        #   in Loop: Header=BB95_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_57
.LBB95_62:                              # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB95_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB95_65
.LBB95_64:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB95_65:                              # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB95_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB95_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB95_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB95_69:                              # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB95_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB95_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB95_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB95_74
.LBB95_73:                              # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB95_74:                              # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB95_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB95_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB95_77:                              # %if.end271
	movl	$0, -8(%rbp)
.LBB95_78:                              # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB95_78 Depth=1
	movl	$0, -4(%rbp)
.LBB95_80:                              # %for.cond276
                                        #   Parent Loop BB95_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB95_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB95_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB95_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB95_88
.LBB95_85:                              # %if.then299
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB95_87:                              # %if.end345
                                        #   in Loop: Header=BB95_80 Depth=2
	jmp	.LBB95_101
.LBB95_88:                              # %if.else346
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB95_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB95_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB95_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB95_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB95_94
.LBB95_93:                              # %cond.false368
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB95_94:                              # %cond.end369
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB95_96:                              # %if.end458
                                        #   in Loop: Header=BB95_80 Depth=2
	jmp	.LBB95_100
.LBB95_97:                              # %if.else459
                                        #   in Loop: Header=BB95_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB95_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB95_99:                              # %if.end578
                                        #   in Loop: Header=BB95_80 Depth=2
	jmp	.LBB95_100
.LBB95_100:                             # %if.end579
                                        #   in Loop: Header=BB95_80 Depth=2
	jmp	.LBB95_101
.LBB95_101:                             # %if.end580
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB95_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB95_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB95_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB95_108
.LBB95_105:                             # %if.then602
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB95_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB95_107:                             # %if.end654
                                        #   in Loop: Header=BB95_80 Depth=2
	jmp	.LBB95_108
.LBB95_108:                             # %if.end655
                                        #   in Loop: Header=BB95_80 Depth=2
	jmp	.LBB95_109
.LBB95_109:                             # %for.inc656
                                        #   in Loop: Header=BB95_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_80
.LBB95_110:                             # %for.end658
                                        #   in Loop: Header=BB95_78 Depth=1
	jmp	.LBB95_111
.LBB95_111:                             # %for.inc659
                                        #   in Loop: Header=BB95_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_78
.LBB95_112:                             # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB95_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB95_114:                             # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB95_114 Depth=1
	movl	$0, -4(%rbp)
.LBB95_116:                             # %for.cond668
                                        #   Parent Loop BB95_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB95_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB95_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB95_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB95_124
.LBB95_121:                             # %if.then693
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB95_123:                             # %if.end745
                                        #   in Loop: Header=BB95_116 Depth=2
	jmp	.LBB95_137
.LBB95_124:                             # %if.else746
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB95_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB95_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB95_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB95_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB95_130
.LBB95_129:                             # %cond.false770
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB95_130:                             # %cond.end772
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB95_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB95_132:                             # %if.end862
                                        #   in Loop: Header=BB95_116 Depth=2
	jmp	.LBB95_136
.LBB95_133:                             # %if.else863
                                        #   in Loop: Header=BB95_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB95_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB95_135:                             # %if.end983
                                        #   in Loop: Header=BB95_116 Depth=2
	jmp	.LBB95_136
.LBB95_136:                             # %if.end984
                                        #   in Loop: Header=BB95_116 Depth=2
	jmp	.LBB95_137
.LBB95_137:                             # %if.end985
                                        #   in Loop: Header=BB95_116 Depth=2
	jmp	.LBB95_138
.LBB95_138:                             # %for.inc986
                                        #   in Loop: Header=BB95_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_116
.LBB95_139:                             # %for.end988
                                        #   in Loop: Header=BB95_114 Depth=1
	jmp	.LBB95_140
.LBB95_140:                             # %for.inc989
                                        #   in Loop: Header=BB95_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_114
.LBB95_141:                             # %for.end991
	jmp	.LBB95_142
.LBB95_142:                             # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB95_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB95_144:                             # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB95_144 Depth=1
	movl	$0, -8(%rbp)
.LBB95_146:                             # %for.cond1002
                                        #   Parent Loop BB95_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB95_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB95_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_146
.LBB95_149:                             # %for.end1030
                                        #   in Loop: Header=BB95_144 Depth=1
	jmp	.LBB95_150
.LBB95_150:                             # %for.inc1031
                                        #   in Loop: Header=BB95_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_144
.LBB95_151:                             # %for.end1033
	jmp	.LBB95_175
.LBB95_152:                             # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB95_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB95_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB95_155:                             # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB95_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB95_157:                             # %for.cond1049
                                        #   Parent Loop BB95_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB95_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB95_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_157
.LBB95_160:                             # %for.end1065
                                        #   in Loop: Header=BB95_155 Depth=1
	jmp	.LBB95_161
.LBB95_161:                             # %for.inc1066
                                        #   in Loop: Header=BB95_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_155
.LBB95_162:                             # %for.end1068
	jmp	.LBB95_174
.LBB95_163:                             # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB95_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB95_165:                             # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB95_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB95_167:                             # %for.cond1081
                                        #   Parent Loop BB95_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB95_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB95_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_167
.LBB95_170:                             # %for.end1101
                                        #   in Loop: Header=BB95_165 Depth=1
	jmp	.LBB95_171
.LBB95_171:                             # %for.inc1102
                                        #   in Loop: Header=BB95_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_165
.LBB95_172:                             # %for.end1104
	jmp	.LBB95_173
.LBB95_173:                             # %if.end1105
	jmp	.LBB95_174
.LBB95_174:                             # %if.end1106
	jmp	.LBB95_175
.LBB95_175:                             # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB95_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB95_177:                             # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB95_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB95_177 Depth=1
	movl	$0, -8(%rbp)
.LBB95_179:                             # %for.cond1116
                                        #   Parent Loop BB95_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB95_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB95_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB95_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_179
.LBB95_182:                             # %for.end1141
                                        #   in Loop: Header=BB95_177 Depth=1
	jmp	.LBB95_183
.LBB95_183:                             # %for.inc1142
                                        #   in Loop: Header=BB95_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_177
.LBB95_184:                             # %for.end1144
	jmp	.LBB95_185
.LBB95_185:                             # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB95_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB95_187:                             # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB95_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB95_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB95_189:                             # %for.cond1157
                                        #   Parent Loop BB95_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB95_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB95_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB95_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB95_189
.LBB95_192:                             # %for.end1181
                                        #   in Loop: Header=BB95_187 Depth=1
	jmp	.LBB95_193
.LBB95_193:                             # %for.inc1182
                                        #   in Loop: Header=BB95_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB95_187
.LBB95_194:                             # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB95_195:                             # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$226994435, -52(%rbp)   # imm = 0xD87A903
	jne	.LBB95_197
.LBB95_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_197:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_196
.Lfunc_end95:
	.size	set_stored_macroblock_parameters.66, .Lfunc_end95-set_stored_macroblock_parameters.66
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.67         # -- Begin function RestoreMV8x8.67
	.p2align	4, 0x90
	.type	RestoreMV8x8.67,@function
RestoreMV8x8.67:                        # @RestoreMV8x8.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$622446158, -12(%rbp)   # imm = 0x2519C64E
	movl	%edi, -8(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB96_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB96_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-8(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB96_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB96_1
.LBB96_4:                               # %for.end
	cmpl	$622446158, -12(%rbp)   # imm = 0x2519C64E
	jne	.LBB96_6
.LBB96_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_5
.Lfunc_end96:
	.size	RestoreMV8x8.67, .Lfunc_end96-RestoreMV8x8.67
	.cfi_endproc
                                        # -- End function
	.globl	RDCost_for_4x4Blocks_Chroma.68 # -- Begin function RDCost_for_4x4Blocks_Chroma.68
	.p2align	4, 0x90
	.type	RDCost_for_4x4Blocks_Chroma.68,@function
RDCost_for_4x4Blocks_Chroma.68:         # @RDCost_for_4x4Blocks_Chroma.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1138174118, -56(%rbp)  # imm = 0x43D728A6
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -60(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	cmpl	$7, -16(%rbp)
	jle	.LBB97_2
# %bb.1:                                # %if.then
	movl	$1, -32(%rbp)
	jmp	.LBB97_3
.LBB97_2:                               # %if.else
	movl	$0, -32(%rbp)
.LBB97_3:                               # %if.end
	movl	-60(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	callq	dct_chroma4x4
	movl	%eax, %ecx
	movslq	-32(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block_temp, %rdi
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %esi
	movslq	%esi, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	movl	-32(%rbp), %edx
	addl	$1, %edx
	shll	$2, %edx
	subl	%edx, %eax
	cltd
	idivl	%ebx
	movl	%eax, %esi
	shll	$1, %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %esi
	movslq	%esi, %rax
	movl	%ecx, (%rdi,%rax,4)
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_5
# %bb.4:                                # %if.then21
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %r8d
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ebx
	idivl	%ebx
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%edx, %ecx
	shll	$4, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	%ebx
	movl	%eax, %edi
	shll	$1, %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ebx
	addl	%eax, %edi
	orl	%edi, %ecx
	movl	$7, %edi
	movl	%r8d, %edx
	callq	writeCoeff4x4_CAVLC
	movl	%eax, -36(%rbp)
	jmp	.LBB97_18
.LBB97_5:                               # %if.else31
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	$1, -52(%rbp)
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movq	img, %rax
	movl	%edx, 72(%rax)
	movl	$0, -28(%rbp)
.LBB97_6:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$17, -28(%rbp)
	jge	.LBB97_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB97_6 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB97_8:                               # %land.end
                                        #   in Loop: Header=BB97_6 Depth=1
	testb	$1, %al
	jne	.LBB97_9
	jmp	.LBB97_17
.LBB97_9:                               # %for.body
                                        #   in Loop: Header=BB97_6 Depth=1
	movq	-88(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-104(%rbp), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -116(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_11
# %bb.10:                               # %if.then53
                                        #   in Loop: Header=BB97_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB97_12
.LBB97_11:                              # %if.else54
                                        #   in Loop: Header=BB97_6 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_12:                              # %if.end55
                                        #   in Loop: Header=BB97_6 Depth=1
	movq	-24(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-24(%rbp), %rax
	movl	$10, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB97_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB97_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB97_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB97_6 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB97_15:                              # %lor.end
                                        #   in Loop: Header=BB97_6 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.16:                               # %for.inc
                                        #   in Loop: Header=BB97_6 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB97_6
.LBB97_17:                              # %for.end
	jmp	.LBB97_18
.LBB97_18:                              # %if.end73
	movq	cs_cm, %rdi
	callq	reset_coding_state
	movl	-36(%rbp), %ebx
	cmpl	$1138174118, -56(%rbp)  # imm = 0x43D728A6
	jne	.LBB97_20
.LBB97_19:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_19
.Lfunc_end97:
	.size	RDCost_for_4x4Blocks_Chroma.68, .Lfunc_end97-RDCost_for_4x4Blocks_Chroma.68
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.69
.LCPI98_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.69
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.69,@function
RDCost_for_macroblocks.69:              # @RDCost_for_macroblocks.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$678726917, -92(%rbp)   # imm = 0x28748D05
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -24(%rbp)
	movq	%rsi, -120(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB98_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB98_3
.LBB98_2:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB98_3
.LBB98_3:                               # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB98_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB98_5:                               # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -40(%rbp)
	movl	-24(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB98_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -24(%rbp)
	jne	.LBB98_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -100(%rbp)
	movl	$0, -16(%rbp)
.LBB98_8:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB98_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB98_8 Depth=1
	movl	$0, -12(%rbp)
.LBB98_10:                              # %for.cond17
                                        #   Parent Loop BB98_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB98_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB98_10 Depth=2
	movq	direct_pdir, %rax
	movl	-96(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-100(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB98_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB98_177
.LBB98_13:                              # %if.end
                                        #   in Loop: Header=BB98_10 Depth=2
	jmp	.LBB98_14
.LBB98_14:                              # %for.inc
                                        #   in Loop: Header=BB98_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_10
.LBB98_15:                              # %for.end
                                        #   in Loop: Header=BB98_8 Depth=1
	jmp	.LBB98_16
.LBB98_16:                              # %for.inc30
                                        #   in Loop: Header=BB98_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_8
.LBB98_17:                              # %for.end32
	jmp	.LBB98_18
.LBB98_18:                              # %if.end33
	cmpl	$8, -24(%rbp)
	jge	.LBB98_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -24(%rbp)
	jne	.LBB98_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB98_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB98_177
.LBB98_23:                              # %if.end46
	jmp	.LBB98_76
.LBB98_24:                              # %if.else
	cmpl	$8, -24(%rbp)
	jne	.LBB98_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB98_75
.LBB98_26:                              # %if.else50
	cmpl	$9, -24(%rbp)
	jne	.LBB98_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB98_29:                              # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_31 Depth 2
                                        #       Child Loop BB98_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB98_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB98_29 Depth=1
	movl	$0, -12(%rbp)
.LBB98_31:                              # %for.cond61
                                        #   Parent Loop BB98_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB98_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB98_31 Depth=2
	movl	$0, -20(%rbp)
.LBB98_33:                              # %for.cond65
                                        #   Parent Loop BB98_29 Depth=1
                                        #     Parent Loop BB98_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB98_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB98_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB98_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB98_33 Depth=3
	movl	$2, -40(%rbp)
.LBB98_36:                              # %if.end77
                                        #   in Loop: Header=BB98_33 Depth=3
	jmp	.LBB98_37
.LBB98_37:                              # %for.inc78
                                        #   in Loop: Header=BB98_33 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_33
.LBB98_38:                              # %for.end80
                                        #   in Loop: Header=BB98_31 Depth=2
	jmp	.LBB98_39
.LBB98_39:                              # %for.inc81
                                        #   in Loop: Header=BB98_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_31
.LBB98_40:                              # %for.end83
                                        #   in Loop: Header=BB98_29 Depth=1
	jmp	.LBB98_41
.LBB98_41:                              # %for.inc84
                                        #   in Loop: Header=BB98_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_29
.LBB98_42:                              # %for.end86
	movl	$0, -32(%rbp)
.LBB98_43:                              # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB98_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB98_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB98_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_43
.LBB98_46:                              # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB98_47:                              # %if.end97
	jmp	.LBB98_74
.LBB98_48:                              # %if.else98
	cmpl	$10, -24(%rbp)
	jne	.LBB98_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB98_73
.LBB98_50:                              # %if.else102
	cmpl	$13, -24(%rbp)
	jne	.LBB98_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB98_53:                              # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_55 Depth 2
                                        #       Child Loop BB98_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB98_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB98_53 Depth=1
	movl	$0, -12(%rbp)
.LBB98_55:                              # %for.cond115
                                        #   Parent Loop BB98_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB98_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB98_55 Depth=2
	movl	$0, -20(%rbp)
.LBB98_57:                              # %for.cond119
                                        #   Parent Loop BB98_53 Depth=1
                                        #     Parent Loop BB98_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -20(%rbp)
	jge	.LBB98_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB98_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB98_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB98_57 Depth=3
	movl	$2, -40(%rbp)
.LBB98_60:                              # %if.end131
                                        #   in Loop: Header=BB98_57 Depth=3
	jmp	.LBB98_61
.LBB98_61:                              # %for.inc132
                                        #   in Loop: Header=BB98_57 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_57
.LBB98_62:                              # %for.end134
                                        #   in Loop: Header=BB98_55 Depth=2
	jmp	.LBB98_63
.LBB98_63:                              # %for.inc135
                                        #   in Loop: Header=BB98_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_55
.LBB98_64:                              # %for.end137
                                        #   in Loop: Header=BB98_53 Depth=1
	jmp	.LBB98_65
.LBB98_65:                              # %for.inc138
                                        #   in Loop: Header=BB98_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_53
.LBB98_66:                              # %for.end140
	movl	$0, -32(%rbp)
.LBB98_67:                              # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB98_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB98_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB98_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB98_67
.LBB98_70:                              # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB98_71:                              # %if.end152
	jmp	.LBB98_72
.LBB98_72:                              # %if.end153
	jmp	.LBB98_73
.LBB98_73:                              # %if.end154
	jmp	.LBB98_74
.LBB98_74:                              # %if.end155
	jmp	.LBB98_75
.LBB98_75:                              # %if.end156
	jmp	.LBB98_76
.LBB98_76:                              # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB98_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB98_82
# %bb.78:                               # %if.then164
	cmpl	$10, -24(%rbp)
	jne	.LBB98_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB98_81
.LBB98_80:                              # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB98_81
.LBB98_81:                              # %cond.end169
	callq	compute_residue_mb
.LBB98_82:                              # %if.end171
	cmpl	$10, -24(%rbp)
	jne	.LBB98_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB98_84:                              # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB98_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB98_84 Depth=1
	movl	$0, -12(%rbp)
.LBB98_86:                              # %for.cond179
                                        #   Parent Loop BB98_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB98_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB98_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB98_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_86
.LBB98_89:                              # %for.end196
                                        #   in Loop: Header=BB98_84 Depth=1
	jmp	.LBB98_90
.LBB98_90:                              # %for.inc197
                                        #   in Loop: Header=BB98_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_84
.LBB98_91:                              # %for.end199
	jmp	.LBB98_101
.LBB98_92:                              # %if.else200
	movl	$0, -16(%rbp)
.LBB98_93:                              # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB98_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB98_93 Depth=1
	movl	$0, -12(%rbp)
.LBB98_95:                              # %for.cond205
                                        #   Parent Loop BB98_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB98_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB98_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB98_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_95
.LBB98_98:                              # %for.end220
                                        #   in Loop: Header=BB98_93 Depth=1
	jmp	.LBB98_99
.LBB98_99:                              # %for.inc221
                                        #   in Loop: Header=BB98_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_93
.LBB98_100:                             # %for.end223
	jmp	.LBB98_101
.LBB98_101:                             # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB98_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -24(%rbp)
	je	.LBB98_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -24(%rbp)
	je	.LBB98_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -24(%rbp)
	je	.LBB98_107
.LBB98_105:                             # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB98_107:                             # %if.end239
	cmpl	$10, -24(%rbp)
	jne	.LBB98_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB98_109:                             # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB98_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB98_124
# %bb.111:                              # %if.then254
	movl	$0, -20(%rbp)
.LBB98_112:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_114 Depth 2
                                        #       Child Loop BB98_116 Depth 3
	movl	-20(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB98_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB98_112 Depth=1
	movl	-20(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB98_114:                             # %for.cond259
                                        #   Parent Loop BB98_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB98_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB98_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB98_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB98_116:                             # %for.cond263
                                        #   Parent Loop BB98_112 Depth=1
                                        #     Parent Loop BB98_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB98_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB98_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_116
.LBB98_119:                             # %for.end291
                                        #   in Loop: Header=BB98_114 Depth=2
	jmp	.LBB98_120
.LBB98_120:                             # %for.inc292
                                        #   in Loop: Header=BB98_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_114
.LBB98_121:                             # %for.end294
                                        #   in Loop: Header=BB98_112 Depth=1
	jmp	.LBB98_122
.LBB98_122:                             # %for.inc295
                                        #   in Loop: Header=BB98_112 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB98_112
.LBB98_123:                             # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB98_133
.LBB98_124:                             # %if.else300
	movl	$0, -12(%rbp)
.LBB98_125:                             # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB98_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB98_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB98_127:                             # %for.cond306
                                        #   Parent Loop BB98_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB98_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB98_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_127
.LBB98_130:                             # %for.end334
                                        #   in Loop: Header=BB98_125 Depth=1
	jmp	.LBB98_131
.LBB98_131:                             # %for.inc335
                                        #   in Loop: Header=BB98_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_125
.LBB98_132:                             # %for.end337
	jmp	.LBB98_133
.LBB98_133:                             # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB98_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB98_135:                             # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB98_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB98_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB98_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB98_137:                             # %for.cond347
                                        #   Parent Loop BB98_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB98_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB98_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB98_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_137
.LBB98_140:                             # %for.end398
                                        #   in Loop: Header=BB98_135 Depth=1
	jmp	.LBB98_141
.LBB98_141:                             # %for.inc399
                                        #   in Loop: Header=BB98_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_135
.LBB98_142:                             # %for.end401
	jmp	.LBB98_143
.LBB98_143:                             # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -104(%rbp)
	je	.LBB98_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB98_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB98_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB98_148
.LBB98_147:                             # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB98_149
.LBB98_148:                             # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB98_149:                             # %if.end422
	jmp	.LBB98_151
.LBB98_150:                             # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB98_151:                             # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI98_0(%rip), %xmm2  # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB98_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI98_0(%rip), %xmm2  # xmm2 = mem[0],zero
	jmp	.LBB98_154
.LBB98_153:                             # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB98_154:                             # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB98_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB98_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB98_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB98_159
.LBB98_158:                             # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB98_177
.LBB98_159:                             # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB98_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -24(%rbp)
	je	.LBB98_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB98_165
	jmp	.LBB98_176
.LBB98_162:                             # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_176
	jmp	.LBB98_165
.LBB98_164:                             # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB98_165
	jmp	.LBB98_176
.LBB98_165:                             # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB98_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB98_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB98_171
	jmp	.LBB98_174
.LBB98_168:                             # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB98_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB98_174
	jmp	.LBB98_171
.LBB98_170:                             # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB98_171
	jmp	.LBB98_174
.LBB98_171:                             # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB98_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB98_177
.LBB98_173:                             # %if.end482
	jmp	.LBB98_174
.LBB98_174:                             # %if.end483
	jmp	.LBB98_175
.LBB98_175:                             # %if.end484
	jmp	.LBB98_176
.LBB98_176:                             # %if.end485
	vmovsd	-112(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-120(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB98_177:                             # %return
	movl	-60(%rbp), %ebx
	cmpl	$678726917, -92(%rbp)   # imm = 0x28748D05
	jne	.LBB98_179
.LBB98_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_179:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_178
.Lfunc_end98:
	.size	RDCost_for_macroblocks.69, .Lfunc_end98-RDCost_for_macroblocks.69
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.70 # -- Begin function GetBestTransformP8x8.70
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.70,@function
GetBestTransformP8x8.70:                # @GetBestTransformP8x8.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$1103384751, -64(%rbp)  # imm = 0x41C450AF
	movl	$0, -44(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB99_2
# %bb.1:                                # %if.then
	movl	$1, -40(%rbp)
	jmp	.LBB99_25
.LBB99_2:                               # %if.end
	movl	$0, -32(%rbp)
.LBB99_3:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_5 Depth 2
                                        #       Child Loop BB99_7 Depth 3
                                        #         Child Loop BB99_9 Depth 4
                                        #           Child Loop BB99_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB99_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB99_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -28(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB99_5:                               # %for.cond3
                                        #   Parent Loop BB99_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB99_7 Depth 3
                                        #         Child Loop BB99_9 Depth 4
                                        #           Child Loop BB99_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB99_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB99_7:                               # %for.cond7
                                        #   Parent Loop BB99_3 Depth=1
                                        #     Parent Loop BB99_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB99_9 Depth 4
                                        #           Child Loop BB99_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB99_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB99_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB99_9:                               # %for.cond12
                                        #   Parent Loop BB99_3 Depth=1
                                        #     Parent Loop BB99_5 Depth=2
                                        #       Parent Loop BB99_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB99_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB99_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB99_9 Depth=4
	movl	$0, -12(%rbp)
.LBB99_11:                              # %for.cond15
                                        #   Parent Loop BB99_3 Depth=1
                                        #     Parent Loop BB99_5 Depth=2
                                        #       Parent Loop BB99_7 Depth=3
                                        #         Parent Loop BB99_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB99_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB99_11 Depth=5
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB99_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB99_11
.LBB99_14:                              # %for.end
                                        #   in Loop: Header=BB99_9 Depth=4
	jmp	.LBB99_15
.LBB99_15:                              # %for.inc51
                                        #   in Loop: Header=BB99_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB99_9
.LBB99_16:                              # %for.end53
                                        #   in Loop: Header=BB99_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB99_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB99_7
.LBB99_18:                              # %for.end57
                                        #   in Loop: Header=BB99_5 Depth=2
	jmp	.LBB99_19
.LBB99_19:                              # %for.inc58
                                        #   in Loop: Header=BB99_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB99_5
.LBB99_20:                              # %for.end60
                                        #   in Loop: Header=BB99_3 Depth=1
	leaq	-336(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB99_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB99_3
.LBB99_22:                              # %for.end66
	movl	-44(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB99_24
# %bb.23:                               # %if.then69
	movl	$1, -40(%rbp)
	jmp	.LBB99_25
.LBB99_24:                              # %if.else
	movl	$0, -40(%rbp)
.LBB99_25:                              # %return
	movl	-40(%rbp), %ebx
	cmpl	$1103384751, -64(%rbp)  # imm = 0x41C450AF
	jne	.LBB99_27
.LBB99_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_27:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_26
.Lfunc_end99:
	.size	GetBestTransformP8x8.70, .Lfunc_end99-GetBestTransformP8x8.70
	.cfi_endproc
                                        # -- End function
	.globl	SetCoeffAndReconstruction8x8.71 # -- Begin function SetCoeffAndReconstruction8x8.71
	.p2align	4, 0x90
	.type	SetCoeffAndReconstruction8x8.71,@function
SetCoeffAndReconstruction8x8.71:        # @SetCoeffAndReconstruction8x8.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$312364753, -40(%rbp)   # imm = 0x129E4ED1
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB100_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB100_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB100_4
.LBB100_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB100_4
.LBB100_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB100_104
# %bb.5:                                # %if.then
	movl	$0, -4(%rbp)
.LBB100_6:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB100_9
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB100_6 Depth=1
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB100_6 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_6
.LBB100_9:                              # %for.end
	cmpl	$0, -28(%rbp)
	je	.LBB100_19
# %bb.10:                               # %if.then15
	movl	$0, -8(%rbp)
.LBB100_11:                             # %for.cond16
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_13 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB100_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB100_11 Depth=1
	movl	$0, -4(%rbp)
.LBB100_13:                             # %for.cond20
                                        #   Parent Loop BB100_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB100_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB100_13 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	movw	part8x8bwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.15:                               # %for.inc50
                                        #   in Loop: Header=BB100_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_13
.LBB100_16:                             # %for.end52
                                        #   in Loop: Header=BB100_11 Depth=1
	jmp	.LBB100_17
.LBB100_17:                             # %for.inc53
                                        #   in Loop: Header=BB100_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_11
.LBB100_18:                             # %for.end55
	jmp	.LBB100_28
.LBB100_19:                             # %if.else
	movl	$0, -8(%rbp)
.LBB100_20:                             # %for.cond56
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_22 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB100_27
# %bb.21:                               # %for.body59
                                        #   in Loop: Header=BB100_20 Depth=1
	movl	$0, -4(%rbp)
.LBB100_22:                             # %for.cond60
                                        #   Parent Loop BB100_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB100_25
# %bb.23:                               # %for.body63
                                        #   in Loop: Header=BB100_22 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -12(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	movw	part8x8fwref(,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.24:                               # %for.inc84
                                        #   in Loop: Header=BB100_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_22
.LBB100_25:                             # %for.end86
                                        #   in Loop: Header=BB100_20 Depth=1
	jmp	.LBB100_26
.LBB100_26:                             # %for.inc87
                                        #   in Loop: Header=BB100_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_20
.LBB100_27:                             # %for.end89
	jmp	.LBB100_28
.LBB100_28:                             # %if.end
	movl	$0, -8(%rbp)
.LBB100_29:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_31 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB100_39
# %bb.30:                               # %for.body93
                                        #   in Loop: Header=BB100_29 Depth=1
	movl	$0, -4(%rbp)
.LBB100_31:                             # %for.cond94
                                        #   Parent Loop BB100_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB100_37
# %bb.32:                               # %for.body97
                                        #   in Loop: Header=BB100_31 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB100_34
# %bb.33:                               # %cond.true111
                                        #   in Loop: Header=BB100_31 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB100_35
.LBB100_34:                             # %cond.false127
                                        #   in Loop: Header=BB100_31 Depth=2
	movq	$-1, %rax
	jmp	.LBB100_35
.LBB100_35:                             # %cond.end128
                                        #   in Loop: Header=BB100_31 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.36:                               # %for.inc139
                                        #   in Loop: Header=BB100_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_31
.LBB100_37:                             # %for.end141
                                        #   in Loop: Header=BB100_29 Depth=1
	jmp	.LBB100_38
.LBB100_38:                             # %for.inc142
                                        #   in Loop: Header=BB100_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_29
.LBB100_39:                             # %for.end144
	cmpl	$0, -28(%rbp)
	je	.LBB100_52
# %bb.40:                               # %if.then146
	movl	$0, -8(%rbp)
.LBB100_41:                             # %for.cond147
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_43 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB100_51
# %bb.42:                               # %for.body150
                                        #   in Loop: Header=BB100_41 Depth=1
	movl	$0, -4(%rbp)
.LBB100_43:                             # %for.cond151
                                        #   Parent Loop BB100_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB100_49
# %bb.44:                               # %for.body154
                                        #   in Loop: Header=BB100_43 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB100_46
# %bb.45:                               # %cond.true168
                                        #   in Loop: Header=BB100_43 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB100_47
.LBB100_46:                             # %cond.false185
                                        #   in Loop: Header=BB100_43 Depth=2
	movq	$-1, %rax
	jmp	.LBB100_47
.LBB100_47:                             # %cond.end186
                                        #   in Loop: Header=BB100_43 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.48:                               # %for.inc198
                                        #   in Loop: Header=BB100_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_43
.LBB100_49:                             # %for.end200
                                        #   in Loop: Header=BB100_41 Depth=1
	jmp	.LBB100_50
.LBB100_50:                             # %for.inc201
                                        #   in Loop: Header=BB100_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_41
.LBB100_51:                             # %for.end203
	jmp	.LBB100_52
.LBB100_52:                             # %if.end204
	movl	$1, %edi
	callq	StoreMV8x8
	xorl	%edi, %edi
	callq	RestoreMV8x8
	movl	$0, -16(%rbp)
.LBB100_53:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_55 Depth 2
                                        #       Child Loop BB100_57 Depth 3
                                        #         Child Loop BB100_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_68
# %bb.54:                               # %for.body208
                                        #   in Loop: Header=BB100_53 Depth=1
	movl	$0, -12(%rbp)
.LBB100_55:                             # %for.cond209
                                        #   Parent Loop BB100_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_57 Depth 3
                                        #         Child Loop BB100_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_66
# %bb.56:                               # %for.body212
                                        #   in Loop: Header=BB100_55 Depth=2
	movl	$0, -8(%rbp)
.LBB100_57:                             # %for.cond213
                                        #   Parent Loop BB100_53 Depth=1
                                        #     Parent Loop BB100_55 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_59 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB100_64
# %bb.58:                               # %for.body216
                                        #   in Loop: Header=BB100_57 Depth=3
	movl	$0, -4(%rbp)
.LBB100_59:                             # %for.cond217
                                        #   Parent Loop BB100_53 Depth=1
                                        #     Parent Loop BB100_55 Depth=2
                                        #       Parent Loop BB100_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB100_62
# %bb.60:                               # %for.body220
                                        #   in Loop: Header=BB100_59 Depth=4
	movq	cofAC_8x8ts, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc237
                                        #   in Loop: Header=BB100_59 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_59
.LBB100_62:                             # %for.end239
                                        #   in Loop: Header=BB100_57 Depth=3
	jmp	.LBB100_63
.LBB100_63:                             # %for.inc240
                                        #   in Loop: Header=BB100_57 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_57
.LBB100_64:                             # %for.end242
                                        #   in Loop: Header=BB100_55 Depth=2
	jmp	.LBB100_65
.LBB100_65:                             # %for.inc243
                                        #   in Loop: Header=BB100_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_55
.LBB100_66:                             # %for.end245
                                        #   in Loop: Header=BB100_53 Depth=1
	jmp	.LBB100_67
.LBB100_67:                             # %for.inc246
                                        #   in Loop: Header=BB100_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_53
.LBB100_68:                             # %for.end248
	cmpl	$5, cnt_nonz8_8x8ts
	jg	.LBB100_83
# %bb.69:                               # %land.lhs.true251
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB100_71
# %bb.70:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB100_83
.LBB100_71:                             # %if.then257
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB100_72:                             # %for.cond258
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_74 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB100_82
# %bb.73:                               # %for.body261
                                        #   in Loop: Header=BB100_72 Depth=1
	movl	$0, -4(%rbp)
.LBB100_74:                             # %for.cond262
                                        #   Parent Loop BB100_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB100_80
# %bb.75:                               # %for.body265
                                        #   in Loop: Header=BB100_74 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_77
# %bb.76:                               # %if.then267
                                        #   in Loop: Header=BB100_74 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB100_78
.LBB100_77:                             # %if.else278
                                        #   in Loop: Header=BB100_74 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB100_78:                             # %if.end283
                                        #   in Loop: Header=BB100_74 Depth=2
	jmp	.LBB100_79
.LBB100_79:                             # %for.inc284
                                        #   in Loop: Header=BB100_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_74
.LBB100_80:                             # %for.end286
                                        #   in Loop: Header=BB100_72 Depth=1
	jmp	.LBB100_81
.LBB100_81:                             # %for.inc287
                                        #   in Loop: Header=BB100_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_72
.LBB100_82:                             # %for.end289
	jmp	.LBB100_95
.LBB100_83:                             # %if.else290
	movl	cbp8_8x8ts, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk8_8x8ts, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB100_84:                             # %for.cond293
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_86 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB100_94
# %bb.85:                               # %for.body296
                                        #   in Loop: Header=BB100_84 Depth=1
	movl	$0, -4(%rbp)
.LBB100_86:                             # %for.cond297
                                        #   Parent Loop BB100_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB100_92
# %bb.87:                               # %for.body300
                                        #   in Loop: Header=BB100_86 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_89
# %bb.88:                               # %if.then303
                                        #   in Loop: Header=BB100_86 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB100_90
.LBB100_89:                             # %if.else317
                                        #   in Loop: Header=BB100_86 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB100_90:                             # %if.end326
                                        #   in Loop: Header=BB100_86 Depth=2
	jmp	.LBB100_91
.LBB100_91:                             # %for.inc327
                                        #   in Loop: Header=BB100_86 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_86
.LBB100_92:                             # %for.end329
                                        #   in Loop: Header=BB100_84 Depth=1
	jmp	.LBB100_93
.LBB100_93:                             # %for.inc330
                                        #   in Loop: Header=BB100_84 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_84
.LBB100_94:                             # %for.end332
	jmp	.LBB100_95
.LBB100_95:                             # %if.end333
	movl	$0, -8(%rbp)
.LBB100_96:                             # %for.cond334
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_98 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB100_103
# %bb.97:                               # %for.body337
                                        #   in Loop: Header=BB100_96 Depth=1
	movl	$0, -4(%rbp)
.LBB100_98:                             # %for.cond338
                                        #   Parent Loop BB100_96 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB100_101
# %bb.99:                               # %for.body341
                                        #   in Loop: Header=BB100_98 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8ts, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.100:                              # %for.inc382
                                        #   in Loop: Header=BB100_98 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_98
.LBB100_101:                            # %for.end384
                                        #   in Loop: Header=BB100_96 Depth=1
	jmp	.LBB100_102
.LBB100_102:                            # %for.inc385
                                        #   in Loop: Header=BB100_96 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_96
.LBB100_103:                            # %for.end387
	jmp	.LBB100_157
.LBB100_104:                            # %if.else388
	movl	$0, -16(%rbp)
.LBB100_105:                            # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_107 Depth 2
                                        #       Child Loop BB100_109 Depth 3
                                        #         Child Loop BB100_111 Depth 4
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_120
# %bb.106:                              # %for.body393
                                        #   in Loop: Header=BB100_105 Depth=1
	movl	$0, -12(%rbp)
.LBB100_107:                            # %for.cond394
                                        #   Parent Loop BB100_105 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_109 Depth 3
                                        #         Child Loop BB100_111 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_118
# %bb.108:                              # %for.body397
                                        #   in Loop: Header=BB100_107 Depth=2
	movl	$0, -8(%rbp)
.LBB100_109:                            # %for.cond398
                                        #   Parent Loop BB100_105 Depth=1
                                        #     Parent Loop BB100_107 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_111 Depth 4
	cmpl	$2, -8(%rbp)
	jge	.LBB100_116
# %bb.110:                              # %for.body401
                                        #   in Loop: Header=BB100_109 Depth=3
	movl	$0, -4(%rbp)
.LBB100_111:                            # %for.cond402
                                        #   Parent Loop BB100_105 Depth=1
                                        #     Parent Loop BB100_107 Depth=2
                                        #       Parent Loop BB100_109 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -4(%rbp)
	jge	.LBB100_114
# %bb.112:                              # %for.body405
                                        #   in Loop: Header=BB100_111 Depth=4
	movq	cofAC8x8, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.113:                              # %for.inc423
                                        #   in Loop: Header=BB100_111 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_111
.LBB100_114:                            # %for.end425
                                        #   in Loop: Header=BB100_109 Depth=3
	jmp	.LBB100_115
.LBB100_115:                            # %for.inc426
                                        #   in Loop: Header=BB100_109 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_109
.LBB100_116:                            # %for.end428
                                        #   in Loop: Header=BB100_107 Depth=2
	jmp	.LBB100_117
.LBB100_117:                            # %for.inc429
                                        #   in Loop: Header=BB100_107 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_107
.LBB100_118:                            # %for.end431
                                        #   in Loop: Header=BB100_105 Depth=1
	jmp	.LBB100_119
.LBB100_119:                            # %for.inc432
                                        #   in Loop: Header=BB100_105 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_105
.LBB100_120:                            # %for.end434
	cmpl	$5, cnt_nonz_8x8
	jg	.LBB100_136
# %bb.121:                              # %land.lhs.true437
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB100_136
# %bb.122:                              # %land.lhs.true441
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB100_124
# %bb.123:                              # %lor.lhs.false447
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB100_136
.LBB100_124:                            # %if.then451
	movq	-24(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-24(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -8(%rbp)
.LBB100_125:                            # %for.cond454
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_127 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB100_135
# %bb.126:                              # %for.body457
                                        #   in Loop: Header=BB100_125 Depth=1
	movl	$0, -4(%rbp)
.LBB100_127:                            # %for.cond458
                                        #   Parent Loop BB100_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB100_133
# %bb.128:                              # %for.body461
                                        #   in Loop: Header=BB100_127 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_130
# %bb.129:                              # %if.then464
                                        #   in Loop: Header=BB100_127 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$mpr8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB100_131
.LBB100_130:                            # %if.else478
                                        #   in Loop: Header=BB100_127 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB100_131:                            # %if.end483
                                        #   in Loop: Header=BB100_127 Depth=2
	jmp	.LBB100_132
.LBB100_132:                            # %for.inc484
                                        #   in Loop: Header=BB100_127 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_127
.LBB100_133:                            # %for.end486
                                        #   in Loop: Header=BB100_125 Depth=1
	jmp	.LBB100_134
.LBB100_134:                            # %for.inc487
                                        #   in Loop: Header=BB100_125 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_125
.LBB100_135:                            # %for.end489
	jmp	.LBB100_148
.LBB100_136:                            # %if.else490
	movl	cbp8x8, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movslq	cbp_blk8x8, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	$0, -8(%rbp)
.LBB100_137:                            # %for.cond494
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_139 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB100_147
# %bb.138:                              # %for.body497
                                        #   in Loop: Header=BB100_137 Depth=1
	movl	$0, -4(%rbp)
.LBB100_139:                            # %for.cond498
                                        #   Parent Loop BB100_137 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB100_145
# %bb.140:                              # %for.body501
                                        #   in Loop: Header=BB100_139 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_142
# %bb.141:                              # %if.then504
                                        #   in Loop: Header=BB100_139 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB100_143
.LBB100_142:                            # %if.else518
                                        #   in Loop: Header=BB100_139 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB100_143:                            # %if.end527
                                        #   in Loop: Header=BB100_139 Depth=2
	jmp	.LBB100_144
.LBB100_144:                            # %for.inc528
                                        #   in Loop: Header=BB100_139 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_139
.LBB100_145:                            # %for.end530
                                        #   in Loop: Header=BB100_137 Depth=1
	jmp	.LBB100_146
.LBB100_146:                            # %for.inc531
                                        #   in Loop: Header=BB100_137 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_137
.LBB100_147:                            # %for.end533
	jmp	.LBB100_148
.LBB100_148:                            # %if.end534
	movl	$0, -8(%rbp)
.LBB100_149:                            # %for.cond535
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_151 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB100_156
# %bb.150:                              # %for.body538
                                        #   in Loop: Header=BB100_149 Depth=1
	movl	$0, -4(%rbp)
.LBB100_151:                            # %for.cond539
                                        #   Parent Loop BB100_149 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB100_154
# %bb.152:                              # %for.body542
                                        #   in Loop: Header=BB100_151 Depth=2
	movabsq	$mprRGB, %rdx
	movq	%rdx, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rdx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movq	%rsi, %rax
	addq	$1024, %rax             # imm = 0x400
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-8(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-8(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B_8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.153:                              # %for.inc583
                                        #   in Loop: Header=BB100_151 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB100_151
.LBB100_154:                            # %for.end585
                                        #   in Loop: Header=BB100_149 Depth=1
	jmp	.LBB100_155
.LBB100_155:                            # %for.inc586
                                        #   in Loop: Header=BB100_149 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB100_149
.LBB100_156:                            # %for.end588
	jmp	.LBB100_157
.LBB100_157:                            # %if.end589
	cmpl	$312364753, -40(%rbp)   # imm = 0x129E4ED1
	jne	.LBB100_159
.LBB100_158:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_159:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_158
.Lfunc_end100:
	.size	SetCoeffAndReconstruction8x8.71, .Lfunc_end100-SetCoeffAndReconstruction8x8.71
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMVBlock8x8.72    # -- Begin function RestoreMVBlock8x8.72
	.p2align	4, 0x90
	.type	RestoreMVBlock8x8.72,@function
RestoreMVBlock8x8.72:                   # @RestoreMVBlock8x8.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$991383864, -68(%rbp)   # imm = 0x3B175138
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -40(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB101_12
# %bb.1:                                # %if.then
	cmpl	$0, -60(%rbp)
	jl	.LBB101_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_5 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB101_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_5:                              # %for.cond7
                                        #   Parent Loop BB101_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB101_5 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	32(%rdx), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	32(%rcx), %rcx
	movw	%ax, 2(%rcx)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB101_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_5
.LBB101_8:                              # %for.end
                                        #   in Loop: Header=BB101_3 Depth=1
	jmp	.LBB101_9
.LBB101_9:                              # %for.inc76
                                        #   in Loop: Header=BB101_3 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_3
.LBB101_10:                             # %for.end78
	jmp	.LBB101_11
.LBB101_11:                             # %if.end
	jmp	.LBB101_46
.LBB101_12:                             # %if.else
	cmpl	$0, -60(%rbp)
	jne	.LBB101_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_16 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB101_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_16:                             # %for.cond84
                                        #   Parent Loop BB101_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB101_16 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$pred_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movw	2(%rcx,%rax,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB101_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_16
.LBB101_19:                             # %for.end161
                                        #   in Loop: Header=BB101_14 Depth=1
	jmp	.LBB101_20
.LBB101_20:                             # %for.inc162
                                        #   in Loop: Header=BB101_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_14
.LBB101_21:                             # %for.end164
	jmp	.LBB101_45
.LBB101_22:                             # %if.else165
	cmpl	$1, -60(%rbp)
	jne	.LBB101_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_26 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB101_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_26:                             # %for.cond171
                                        #   Parent Loop BB101_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB101_26 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB101_26 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_26
.LBB101_29:                             # %for.end248
                                        #   in Loop: Header=BB101_24 Depth=1
	jmp	.LBB101_30
.LBB101_30:                             # %for.inc249
                                        #   in Loop: Header=BB101_24 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_24
.LBB101_31:                             # %for.end251
	jmp	.LBB101_44
.LBB101_32:                             # %if.else252
	cmpl	$2, -60(%rbp)
	jne	.LBB101_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB101_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB101_36 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB101_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB101_36:                             # %for.cond258
                                        #   Parent Loop BB101_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB101_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB101_36 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, (%rdx)
	movslq	-12(%rbp), %rax
	shlq	$7, %rax
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	2(%rdx,%rax,4), %ax
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%ax, 2(%rdx)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	2(%rsi,%rdx,4), %dx
	movq	-40(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	(%rsi), %rsi
	movslq	-20(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, 2(%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movw	(%rsi,%rdx,4), %dx
	movq	-48(%rbp), %rsi
	movslq	-4(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-8(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	8(%rsi), %rsi
	movslq	-24(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-16(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movw	%dx, (%rsi)
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	addq	$64, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	2(%rcx,%rdx,4), %cx
	movq	-48(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, 2(%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	addq	$64, %rdx
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	(%rdx,%rcx,4), %cx
	movq	-40(%rbp), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	%cx, (%rdx)
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	addq	$64, %rax
	movslq	-4(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	2(%rax,%rcx,4), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB101_36 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB101_36
.LBB101_39:                             # %for.end407
                                        #   in Loop: Header=BB101_34 Depth=1
	jmp	.LBB101_40
.LBB101_40:                             # %for.inc408
                                        #   in Loop: Header=BB101_34 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB101_34
.LBB101_41:                             # %for.end410
	jmp	.LBB101_43
.LBB101_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB101_43:                             # %if.end412
	jmp	.LBB101_44
.LBB101_44:                             # %if.end413
	jmp	.LBB101_45
.LBB101_45:                             # %if.end414
	jmp	.LBB101_46
.LBB101_46:                             # %if.end415
	cmpl	$991383864, -68(%rbp)   # imm = 0x3B175138
	jne	.LBB101_48
.LBB101_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_47
.Lfunc_end101:
	.size	RestoreMVBlock8x8.72, .Lfunc_end101-RestoreMVBlock8x8.72
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.73 # -- Begin function SetRefAndMotionVectors.73
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.73,@function
SetRefAndMotionVectors.73:              # @SetRefAndMotionVectors.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$147157654, -68(%rbp)   # imm = 0x8C57296
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -28(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB102_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB102_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB102_4
.LBB102_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB102_5
.LBB102_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB102_5
.LBB102_5:                              # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB102_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB102_9
.LBB102_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB102_9
.LBB102_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB102_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB102_11 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_13:                             # %for.cond34
                                        #   Parent Loop BB102_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB102_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB102_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_13
.LBB102_16:                             # %for.end
                                        #   in Loop: Header=BB102_11 Depth=1
	jmp	.LBB102_17
.LBB102_17:                             # %for.inc117
                                        #   in Loop: Header=BB102_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_11
.LBB102_18:                             # %for.end119
	jmp	.LBB102_64
.LBB102_19:                             # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB102_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB102_21 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_23:                             # %for.cond126
                                        #   Parent Loop BB102_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB102_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB102_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_23
.LBB102_26:                             # %for.end211
                                        #   in Loop: Header=BB102_21 Depth=1
	jmp	.LBB102_27
.LBB102_27:                             # %for.inc212
                                        #   in Loop: Header=BB102_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_21
.LBB102_28:                             # %for.end214
	jmp	.LBB102_64
.LBB102_29:                             # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB102_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB102_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB102_30 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB102_32:                             # %for.cond219
                                        #   Parent Loop BB102_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB102_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB102_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -28(%rbp)
.LBB102_35:                             # %if.end255
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB102_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB102_46
.LBB102_37:                             # %if.then261
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB102_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB102_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB102_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB102_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB102_43
.LBB102_42:                             # %cond.false274
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB102_43:                             # %cond.end275
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB102_45
.LBB102_44:                             # %if.else342
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB102_45:                             # %if.end424
                                        #   in Loop: Header=BB102_32 Depth=2
	jmp	.LBB102_47
.LBB102_46:                             # %if.else425
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB102_47:                             # %if.end468
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB102_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB102_58
.LBB102_49:                             # %if.then474
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB102_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB102_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB102_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB102_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB102_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB102_55
.LBB102_54:                             # %cond.false490
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB102_55:                             # %cond.end492
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB102_57
.LBB102_56:                             # %if.else559
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-28(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB102_57:                             # %if.end641
                                        #   in Loop: Header=BB102_32 Depth=2
	jmp	.LBB102_59
.LBB102_58:                             # %if.else642
                                        #   in Loop: Header=BB102_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB102_59:                             # %if.end685
                                        #   in Loop: Header=BB102_32 Depth=2
	jmp	.LBB102_60
.LBB102_60:                             # %for.inc686
                                        #   in Loop: Header=BB102_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB102_32
.LBB102_61:                             # %for.end688
                                        #   in Loop: Header=BB102_30 Depth=1
	jmp	.LBB102_62
.LBB102_62:                             # %for.inc689
                                        #   in Loop: Header=BB102_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB102_30
.LBB102_63:                             # %for.end691
	jmp	.LBB102_64
.LBB102_64:                             # %if.end692
	cmpl	$147157654, -68(%rbp)   # imm = 0x8C57296
	jne	.LBB102_66
.LBB102_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_65
.Lfunc_end102:
	.size	SetRefAndMotionVectors.73, .Lfunc_end102-SetRefAndMotionVectors.73
	.cfi_endproc
                                        # -- End function
	.globl	StoreMV8x8.74           # -- Begin function StoreMV8x8.74
	.p2align	4, 0x90
	.type	StoreMV8x8.74,@function
StoreMV8x8.74:                          # @StoreMV8x8.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$579410129, -12(%rbp)   # imm = 0x228918D1
	movl	%edi, -16(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB103_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-16(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-8(%rbp), %eax
	movl	%eax, (%rsp)
	callq	StoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_1
.LBB103_4:                              # %for.end
	cmpl	$579410129, -12(%rbp)   # imm = 0x228918D1
	jne	.LBB103_6
.LBB103_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_5
.Lfunc_end103:
	.size	StoreMV8x8.74, .Lfunc_end103-StoreMV8x8.74
	.cfi_endproc
                                        # -- End function
	.globl	Mode_Decision_for_Intra4x4Macroblock.75 # -- Begin function Mode_Decision_for_Intra4x4Macroblock.75
	.p2align	4, 0x90
	.type	Mode_Decision_for_Intra4x4Macroblock.75,@function
Mode_Decision_for_Intra4x4Macroblock.75: # @Mode_Decision_for_Intra4x4Macroblock.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$947926950, -20(%rbp)   # imm = 0x388037A6
	vmovsd	%xmm0, -40(%rbp)
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB104_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB104_6
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-12(%rbp), %edi
	vmovsd	-40(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-24(%rbp), %rsi
	callq	Mode_Decision_for_8x8IntraBlocks
	cmpl	$0, %eax
	je	.LBB104_4
# %bb.3:                                # %if.then
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-12(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB104_4:                              # %if.end
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-24(%rbp), %eax
	movq	-32(%rbp), %rcx
	addl	(%rcx), %eax
	movl	%eax, (%rcx)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB104_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB104_1
.LBB104_6:                              # %for.end
	movl	-16(%rbp), %ebx
	cmpl	$947926950, -20(%rbp)   # imm = 0x388037A6
	jne	.LBB104_8
.LBB104_7:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_7
.Lfunc_end104:
	.size	Mode_Decision_for_Intra4x4Macroblock.75, .Lfunc_end104-Mode_Decision_for_Intra4x4Macroblock.75
	.cfi_endproc
                                        # -- End function
	.globl	GetBestTransformP8x8.76 # -- Begin function GetBestTransformP8x8.76
	.p2align	4, 0x90
	.type	GetBestTransformP8x8.76,@function
GetBestTransformP8x8.76:                # @GetBestTransformP8x8.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$584, %rsp              # imm = 0x248
	.cfi_offset %rbx, -24
	movl	$37616166, -64(%rbp)    # imm = 0x23DFA26
	movl	$0, -40(%rbp)
	movl	$0, -44(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB105_2
# %bb.1:                                # %if.then
	movl	$1, -36(%rbp)
	jmp	.LBB105_25
.LBB105_2:                              # %if.end
	movl	$0, -32(%rbp)
.LBB105_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB105_5 Depth 2
                                        #       Child Loop BB105_7 Depth 3
                                        #         Child Loop BB105_9 Depth 4
                                        #           Child Loop BB105_11 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB105_22
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -56(%rbp)
	movl	$0, -28(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB105_5:                              # %for.cond3
                                        #   Parent Loop BB105_3 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB105_7 Depth 3
                                        #         Child Loop BB105_9 Depth 4
                                        #           Child Loop BB105_11 Depth 5
	movl	-20(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_20
# %bb.6:                                # %for.body5
                                        #   in Loop: Header=BB105_5 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-56(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB105_7:                              # %for.cond7
                                        #   Parent Loop BB105_3 Depth=1
                                        #     Parent Loop BB105_5 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB105_9 Depth 4
                                        #           Child Loop BB105_11 Depth 5
	movl	-24(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB105_18
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB105_7 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movslq	-28(%rbp), %rax
	shlq	$2, %rax
	leaq	-336(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -72(%rbp)
	movl	$0, -16(%rbp)
.LBB105_9:                              # %for.cond12
                                        #   Parent Loop BB105_3 Depth=1
                                        #     Parent Loop BB105_5 Depth=2
                                        #       Parent Loop BB105_7 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB105_11 Depth 5
	cmpl	$4, -16(%rbp)
	jge	.LBB105_16
# %bb.10:                               # %for.body14
                                        #   in Loop: Header=BB105_9 Depth=4
	movl	$0, -12(%rbp)
.LBB105_11:                             # %for.cond15
                                        #   Parent Loop BB105_3 Depth=1
                                        #     Parent Loop BB105_5 Depth=2
                                        #       Parent Loop BB105_7 Depth=3
                                        #         Parent Loop BB105_9 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -12(%rbp)
	jge	.LBB105_14
# %bb.12:                               # %for.body17
                                        #   in Loop: Header=BB105_11 Depth=5
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -592(%rbp,%rcx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB105_11 Depth=5
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB105_11
.LBB105_14:                             # %for.end
                                        #   in Loop: Header=BB105_9 Depth=4
	jmp	.LBB105_15
.LBB105_15:                             # %for.inc51
                                        #   in Loop: Header=BB105_9 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB105_9
.LBB105_16:                             # %for.end53
                                        #   in Loop: Header=BB105_7 Depth=3
	movq	-72(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-44(%rbp), %eax
	movl	%eax, -44(%rbp)
# %bb.17:                               # %for.inc55
                                        #   in Loop: Header=BB105_7 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB105_7
.LBB105_18:                             # %for.end57
                                        #   in Loop: Header=BB105_5 Depth=2
	jmp	.LBB105_19
.LBB105_19:                             # %for.inc58
                                        #   in Loop: Header=BB105_5 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB105_5
.LBB105_20:                             # %for.end60
                                        #   in Loop: Header=BB105_3 Depth=1
	leaq	-592(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.21:                               # %for.inc64
                                        #   in Loop: Header=BB105_3 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB105_3
.LBB105_22:                             # %for.end66
	movl	-40(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB105_24
# %bb.23:                               # %if.then69
	movl	$1, -36(%rbp)
	jmp	.LBB105_25
.LBB105_24:                             # %if.else
	movl	$0, -36(%rbp)
.LBB105_25:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$37616166, -64(%rbp)    # imm = 0x23DFA26
	jne	.LBB105_27
.LBB105_26:
	movl	%ebx, %eax
	addq	$584, %rsp              # imm = 0x248
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_26
.Lfunc_end105:
	.size	GetBestTransformP8x8.76, .Lfunc_end105-GetBestTransformP8x8.76
	.cfi_endproc
                                        # -- End function
	.globl	RestoreMV8x8.77         # -- Begin function RestoreMV8x8.77
	.p2align	4, 0x90
	.type	RestoreMV8x8.77,@function
RestoreMV8x8.77:                        # @RestoreMV8x8.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1101084534, -8(%rbp)   # imm = 0x41A13776
	movl	%edi, -12(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB106_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-12(%rbp), %edi
	movl	-4(%rbp), %esi
	movslq	-4(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-4(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-4(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-4(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RestoreMVBlock8x8
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_1
.LBB106_4:                              # %for.end
	cmpl	$1101084534, -8(%rbp)   # imm = 0x41A13776
	jne	.LBB106_6
.LBB106_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_6:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_5
.Lfunc_end106:
	.size	RestoreMV8x8.77, .Lfunc_end106-RestoreMV8x8.77
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.78      # -- Begin function StoreMVBlock8x8.78
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.78,@function
StoreMVBlock8x8.78:                     # @StoreMVBlock8x8.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$1177577172, -68(%rbp)  # imm = 0x463066D4
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB107_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB107_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB107_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB107_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_5:                              # %for.cond7
                                        #   Parent Loop BB107_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB107_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB107_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_5
.LBB107_8:                              # %for.end
                                        #   in Loop: Header=BB107_3 Depth=1
	jmp	.LBB107_9
.LBB107_9:                              # %for.inc76
                                        #   in Loop: Header=BB107_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_3
.LBB107_10:                             # %for.end78
	jmp	.LBB107_11
.LBB107_11:                             # %if.end
	jmp	.LBB107_46
.LBB107_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB107_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB107_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB107_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_16:                             # %for.cond84
                                        #   Parent Loop BB107_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB107_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB107_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_16
.LBB107_19:                             # %for.end161
                                        #   in Loop: Header=BB107_14 Depth=1
	jmp	.LBB107_20
.LBB107_20:                             # %for.inc162
                                        #   in Loop: Header=BB107_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_14
.LBB107_21:                             # %for.end164
	jmp	.LBB107_45
.LBB107_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB107_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB107_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB107_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_26:                             # %for.cond171
                                        #   Parent Loop BB107_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB107_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB107_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_26
.LBB107_29:                             # %for.end248
                                        #   in Loop: Header=BB107_24 Depth=1
	jmp	.LBB107_30
.LBB107_30:                             # %for.inc249
                                        #   in Loop: Header=BB107_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_24
.LBB107_31:                             # %for.end251
	jmp	.LBB107_44
.LBB107_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB107_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB107_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB107_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_36:                             # %for.cond258
                                        #   Parent Loop BB107_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB107_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB107_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB107_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_36
.LBB107_39:                             # %for.end407
                                        #   in Loop: Header=BB107_34 Depth=1
	jmp	.LBB107_40
.LBB107_40:                             # %for.inc408
                                        #   in Loop: Header=BB107_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_34
.LBB107_41:                             # %for.end410
	jmp	.LBB107_43
.LBB107_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB107_43:                             # %if.end412
	jmp	.LBB107_44
.LBB107_44:                             # %if.end413
	jmp	.LBB107_45
.LBB107_45:                             # %if.end414
	jmp	.LBB107_46
.LBB107_46:                             # %if.end415
	cmpl	$1177577172, -68(%rbp)  # imm = 0x463066D4
	jne	.LBB107_48
.LBB107_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_47
.Lfunc_end107:
	.size	StoreMVBlock8x8.78, .Lfunc_end107-StoreMVBlock8x8.78
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.79 # -- Begin function set_stored_macroblock_parameters.79
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.79,@function
set_stored_macroblock_parameters.79:    # @set_stored_macroblock_parameters.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$728854000, -52(%rbp)   # imm = 0x2B716DF0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB108_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB108_4
.LBB108_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB108_4
.LBB108_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB108_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB108_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	$0, -4(%rbp)
.LBB108_7:                              # %for.cond9
                                        #   Parent Loop BB108_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB108_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB108_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-96(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB108_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB108_10:                             # %if.end
                                        #   in Loop: Header=BB108_7 Depth=2
	jmp	.LBB108_11
.LBB108_11:                             # %for.inc
                                        #   in Loop: Header=BB108_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_7
.LBB108_12:                             # %for.end
                                        #   in Loop: Header=BB108_5 Depth=1
	jmp	.LBB108_13
.LBB108_13:                             # %for.inc33
                                        #   in Loop: Header=BB108_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_5
.LBB108_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB108_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB108_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB108_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB108_16 Depth=1
	movl	$0, -4(%rbp)
.LBB108_18:                             # %for.cond43
                                        #   Parent Loop BB108_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB108_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB108_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-80(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB108_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB108_21:                             # %if.end92
                                        #   in Loop: Header=BB108_18 Depth=2
	jmp	.LBB108_22
.LBB108_22:                             # %for.inc93
                                        #   in Loop: Header=BB108_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_18
.LBB108_23:                             # %for.end95
                                        #   in Loop: Header=BB108_16 Depth=1
	jmp	.LBB108_24
.LBB108_24:                             # %for.inc96
                                        #   in Loop: Header=BB108_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_16
.LBB108_25:                             # %for.end98
	jmp	.LBB108_26
.LBB108_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-88(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB108_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_30 Depth 2
                                        #       Child Loop BB108_32 Depth 3
                                        #         Child Loop BB108_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB108_28 Depth=1
	movl	$0, -8(%rbp)
.LBB108_30:                             # %for.cond118
                                        #   Parent Loop BB108_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_32 Depth 3
                                        #         Child Loop BB108_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB108_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB108_30 Depth=2
	movl	$0, -12(%rbp)
.LBB108_32:                             # %for.cond122
                                        #   Parent Loop BB108_28 Depth=1
                                        #     Parent Loop BB108_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB108_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB108_32 Depth=3
	movl	$0, -28(%rbp)
.LBB108_34:                             # %for.cond126
                                        #   Parent Loop BB108_28 Depth=1
                                        #     Parent Loop BB108_30 Depth=2
                                        #       Parent Loop BB108_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB108_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB108_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB108_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB108_34
.LBB108_37:                             # %for.end150
                                        #   in Loop: Header=BB108_32 Depth=3
	jmp	.LBB108_38
.LBB108_38:                             # %for.inc151
                                        #   in Loop: Header=BB108_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_32
.LBB108_39:                             # %for.end153
                                        #   in Loop: Header=BB108_30 Depth=2
	jmp	.LBB108_40
.LBB108_40:                             # %for.inc154
                                        #   in Loop: Header=BB108_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_30
.LBB108_41:                             # %for.end156
                                        #   in Loop: Header=BB108_28 Depth=1
	jmp	.LBB108_42
.LBB108_42:                             # %for.inc157
                                        #   in Loop: Header=BB108_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_28
.LBB108_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB108_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_46 Depth 2
                                        #       Child Loop BB108_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB108_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB108_44 Depth=1
	movl	$0, -12(%rbp)
.LBB108_46:                             # %for.cond164
                                        #   Parent Loop BB108_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB108_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB108_46 Depth=2
	movl	$0, -28(%rbp)
.LBB108_48:                             # %for.cond168
                                        #   Parent Loop BB108_44 Depth=1
                                        #     Parent Loop BB108_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB108_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB108_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB108_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB108_48
.LBB108_51:                             # %for.end188
                                        #   in Loop: Header=BB108_46 Depth=2
	jmp	.LBB108_52
.LBB108_52:                             # %for.inc189
                                        #   in Loop: Header=BB108_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_46
.LBB108_53:                             # %for.end191
                                        #   in Loop: Header=BB108_44 Depth=1
	jmp	.LBB108_54
.LBB108_54:                             # %for.inc192
                                        #   in Loop: Header=BB108_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_44
.LBB108_55:                             # %for.end194
	jmp	.LBB108_56
.LBB108_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB108_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB108_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB108_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB108_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB108_60:                             # %if.end225
                                        #   in Loop: Header=BB108_57 Depth=1
	jmp	.LBB108_61
.LBB108_61:                             # %for.inc226
                                        #   in Loop: Header=BB108_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_57
.LBB108_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB108_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB108_65
.LBB108_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB108_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB108_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB108_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB108_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB108_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB108_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB108_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB108_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB108_74
.LBB108_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB108_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB108_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB108_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB108_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB108_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB108_78 Depth=1
	movl	$0, -4(%rbp)
.LBB108_80:                             # %for.cond276
                                        #   Parent Loop BB108_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB108_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB108_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB108_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB108_88
.LBB108_85:                             # %if.then299
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB108_87:                             # %if.end345
                                        #   in Loop: Header=BB108_80 Depth=2
	jmp	.LBB108_101
.LBB108_88:                             # %if.else346
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB108_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB108_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB108_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB108_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB108_94
.LBB108_93:                             # %cond.false368
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB108_94:                             # %cond.end369
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	%rax, -64(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-64(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB108_96:                             # %if.end458
                                        #   in Loop: Header=BB108_80 Depth=2
	jmp	.LBB108_100
.LBB108_97:                             # %if.else459
                                        #   in Loop: Header=BB108_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB108_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB108_99:                             # %if.end578
                                        #   in Loop: Header=BB108_80 Depth=2
	jmp	.LBB108_100
.LBB108_100:                            # %if.end579
                                        #   in Loop: Header=BB108_80 Depth=2
	jmp	.LBB108_101
.LBB108_101:                            # %if.end580
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB108_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB108_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB108_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB108_108
.LBB108_105:                            # %if.then602
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB108_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB108_107:                            # %if.end654
                                        #   in Loop: Header=BB108_80 Depth=2
	jmp	.LBB108_108
.LBB108_108:                            # %if.end655
                                        #   in Loop: Header=BB108_80 Depth=2
	jmp	.LBB108_109
.LBB108_109:                            # %for.inc656
                                        #   in Loop: Header=BB108_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_80
.LBB108_110:                            # %for.end658
                                        #   in Loop: Header=BB108_78 Depth=1
	jmp	.LBB108_111
.LBB108_111:                            # %for.inc659
                                        #   in Loop: Header=BB108_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_78
.LBB108_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB108_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB108_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB108_114 Depth=1
	movl	$0, -4(%rbp)
.LBB108_116:                            # %for.cond668
                                        #   Parent Loop BB108_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB108_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB108_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB108_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB108_124
.LBB108_121:                            # %if.then693
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB108_123:                            # %if.end745
                                        #   in Loop: Header=BB108_116 Depth=2
	jmp	.LBB108_137
.LBB108_124:                            # %if.else746
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB108_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB108_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB108_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB108_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB108_130
.LBB108_129:                            # %cond.false770
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB108_130:                            # %cond.end772
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB108_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB108_132:                            # %if.end862
                                        #   in Loop: Header=BB108_116 Depth=2
	jmp	.LBB108_136
.LBB108_133:                            # %if.else863
                                        #   in Loop: Header=BB108_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB108_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB108_135:                            # %if.end983
                                        #   in Loop: Header=BB108_116 Depth=2
	jmp	.LBB108_136
.LBB108_136:                            # %if.end984
                                        #   in Loop: Header=BB108_116 Depth=2
	jmp	.LBB108_137
.LBB108_137:                            # %if.end985
                                        #   in Loop: Header=BB108_116 Depth=2
	jmp	.LBB108_138
.LBB108_138:                            # %for.inc986
                                        #   in Loop: Header=BB108_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_116
.LBB108_139:                            # %for.end988
                                        #   in Loop: Header=BB108_114 Depth=1
	jmp	.LBB108_140
.LBB108_140:                            # %for.inc989
                                        #   in Loop: Header=BB108_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_114
.LBB108_141:                            # %for.end991
	jmp	.LBB108_142
.LBB108_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB108_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB108_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB108_144 Depth=1
	movl	$0, -8(%rbp)
.LBB108_146:                            # %for.cond1002
                                        #   Parent Loop BB108_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB108_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB108_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_146
.LBB108_149:                            # %for.end1030
                                        #   in Loop: Header=BB108_144 Depth=1
	jmp	.LBB108_150
.LBB108_150:                            # %for.inc1031
                                        #   in Loop: Header=BB108_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_144
.LBB108_151:                            # %for.end1033
	jmp	.LBB108_175
.LBB108_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB108_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB108_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB108_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB108_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB108_157:                            # %for.cond1049
                                        #   Parent Loop BB108_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB108_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB108_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_157
.LBB108_160:                            # %for.end1065
                                        #   in Loop: Header=BB108_155 Depth=1
	jmp	.LBB108_161
.LBB108_161:                            # %for.inc1066
                                        #   in Loop: Header=BB108_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_155
.LBB108_162:                            # %for.end1068
	jmp	.LBB108_174
.LBB108_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB108_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB108_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB108_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB108_167:                            # %for.cond1081
                                        #   Parent Loop BB108_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB108_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB108_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_167
.LBB108_170:                            # %for.end1101
                                        #   in Loop: Header=BB108_165 Depth=1
	jmp	.LBB108_171
.LBB108_171:                            # %for.inc1102
                                        #   in Loop: Header=BB108_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_165
.LBB108_172:                            # %for.end1104
	jmp	.LBB108_173
.LBB108_173:                            # %if.end1105
	jmp	.LBB108_174
.LBB108_174:                            # %if.end1106
	jmp	.LBB108_175
.LBB108_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB108_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB108_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB108_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB108_177 Depth=1
	movl	$0, -8(%rbp)
.LBB108_179:                            # %for.cond1116
                                        #   Parent Loop BB108_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB108_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB108_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB108_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_179
.LBB108_182:                            # %for.end1141
                                        #   in Loop: Header=BB108_177 Depth=1
	jmp	.LBB108_183
.LBB108_183:                            # %for.inc1142
                                        #   in Loop: Header=BB108_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB108_177
.LBB108_184:                            # %for.end1144
	jmp	.LBB108_185
.LBB108_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB108_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB108_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB108_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB108_189:                            # %for.cond1157
                                        #   Parent Loop BB108_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB108_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB108_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB108_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_189
.LBB108_192:                            # %for.end1181
                                        #   in Loop: Header=BB108_187 Depth=1
	jmp	.LBB108_193
.LBB108_193:                            # %for.inc1182
                                        #   in Loop: Header=BB108_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB108_187
.LBB108_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB108_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$728854000, -52(%rbp)   # imm = 0x2B716DF0
	jne	.LBB108_197
.LBB108_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_196
.Lfunc_end108:
	.size	set_stored_macroblock_parameters.79, .Lfunc_end108-set_stored_macroblock_parameters.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.80
.LCPI109_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI109_1:
	.quad	4622945017495814144     # double 12
.LCPI109_2:
	.quad	4607182418800017408     # double 1
.LCPI109_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI109_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI109_5:
	.quad	4611686018427387904     # double 2
.LCPI109_6:
	.quad	4613937818241073152     # double 3
.LCPI109_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI109_8:
	.quad	4616189618054758400     # double 4
.LCPI109_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI109_10:
	.quad	4618441417868443648     # double 6
.LCPI109_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI109_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI109_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI109_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI109_15:
	.quad	4602678819172646912     # double 0.5
.LCPI109_16:
	.quad	4679240012837945344     # double 65536
.LCPI109_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI109_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.80
	.p2align	4, 0x90
	.type	encode_one_macroblock.80,@function
encode_one_macroblock.80:               # @encode_one_macroblock.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1633657016, -412(%rbp) # imm = 0x615FA0B8
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -472(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -180(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -264(%rbp)
	movl	$0, -176(%rbp)
	movl	$0, -316(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_4
.LBB109_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB109_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB109_5
.LBB109_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB109_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -308(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -408(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB109_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB109_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB109_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB109_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB109_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB109_11:                             # %land.end
.LBB109_12:                             # %lor.end36
.LBB109_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -300(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB109_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB109_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB109_17:                             # %lor.end51
.LBB109_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -288(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB109_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB109_21
.LBB109_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB109_21
.LBB109_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -432(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -400(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB109_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB109_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -284(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -284(%rbp)
	je	.LBB109_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB109_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB109_27
.LBB109_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB109_27:                             # %if.end
	jmp	.LBB109_29
.LBB109_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB109_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB109_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB109_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB109_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB109_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB109_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB109_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB109_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB109_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB109_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB109_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB109_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB109_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB109_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB109_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-408(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB109_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB109_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB109_53 Depth=1
	movl	$0, -56(%rbp)
.LBB109_55:                             # %for.cond156
                                        #   Parent Loop BB109_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB109_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB109_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB109_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB109_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB109_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB109_59:                             # %if.end183
                                        #   in Loop: Header=BB109_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB109_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB109_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB109_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB109_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB109_62:                             # %if.end202
                                        #   in Loop: Header=BB109_55 Depth=2
	jmp	.LBB109_63
.LBB109_63:                             # %for.inc
                                        #   in Loop: Header=BB109_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_55
.LBB109_64:                             # %for.end
                                        #   in Loop: Header=BB109_53 Depth=1
	jmp	.LBB109_65
.LBB109_65:                             # %for.inc203
                                        #   in Loop: Header=BB109_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB109_53
.LBB109_66:                             # %for.end205
	jmp	.LBB109_93
.LBB109_67:                             # %if.else206
	cmpl	$0, -284(%rbp)
	je	.LBB109_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB109_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB109_69 Depth=1
	movl	$0, -56(%rbp)
.LBB109_71:                             # %for.cond215
                                        #   Parent Loop BB109_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB109_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB109_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB109_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB109_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB109_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB109_75:                             # %if.end244
                                        #   in Loop: Header=BB109_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB109_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB109_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB109_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB109_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB109_78:                             # %if.end263
                                        #   in Loop: Header=BB109_71 Depth=2
	jmp	.LBB109_79
.LBB109_79:                             # %for.inc264
                                        #   in Loop: Header=BB109_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_71
.LBB109_80:                             # %for.end266
                                        #   in Loop: Header=BB109_69 Depth=1
	jmp	.LBB109_81
.LBB109_81:                             # %for.inc267
                                        #   in Loop: Header=BB109_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB109_69
.LBB109_82:                             # %for.end269
	jmp	.LBB109_92
.LBB109_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB109_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB109_84 Depth=1
	movl	$0, -56(%rbp)
.LBB109_86:                             # %for.cond277
                                        #   Parent Loop BB109_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB109_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB109_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_86
.LBB109_89:                             # %for.end290
                                        #   in Loop: Header=BB109_84 Depth=1
	jmp	.LBB109_90
.LBB109_90:                             # %for.inc291
                                        #   in Loop: Header=BB109_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB109_84
.LBB109_91:                             # %for.end293
	jmp	.LBB109_92
.LBB109_92:                             # %if.end294
	jmp	.LBB109_93
.LBB109_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI109_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB109_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB109_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB109_99
.LBB109_98:                             # %if.else315
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB109_99:                             # %if.end326
	jmp	.LBB109_159
.LBB109_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB109_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI109_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB109_104
.LBB109_103:                            # %cond.false336
	vmovsd	.LCPI109_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB109_104:                            # %cond.end340
	vmovsd	%xmm0, -480(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB109_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI109_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB109_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI109_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI109_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_109
.LBB109_108:                            # %cond.false357
	vmovsd	.LCPI109_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_109:                            # %cond.end359
	vmovsd	.LCPI109_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI109_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_115
.LBB109_111:                            # %cond.false364
	vmovsd	.LCPI109_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI109_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_114
.LBB109_113:                            # %cond.false369
	vmovsd	.LCPI109_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_114:                            # %cond.end371
.LBB109_115:                            # %cond.end373
	jmp	.LBB109_129
.LBB109_116:                            # %cond.false375
	cmpl	$0, -308(%rbp)
	je	.LBB109_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_120
.LBB109_119:                            # %cond.false382
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_120:                            # %cond.end384
	vmovsd	.LCPI109_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI109_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_126
.LBB109_122:                            # %cond.false389
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_125
.LBB109_124:                            # %cond.false394
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_125:                            # %cond.end396
.LBB109_126:                            # %cond.end398
	jmp	.LBB109_128
.LBB109_127:                            # %cond.false400
	vmovsd	.LCPI109_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_128
.LBB109_128:                            # %cond.end401
.LBB109_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB109_146
.LBB109_130:                            # %if.else406
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI109_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB109_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI109_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_145
.LBB109_132:                            # %cond.false415
	cmpl	$0, -308(%rbp)
	je	.LBB109_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_136
.LBB109_135:                            # %cond.false422
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_136:                            # %cond.end424
	vmovsd	.LCPI109_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI109_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_142
.LBB109_138:                            # %cond.false429
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI109_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB109_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI109_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_141
.LBB109_140:                            # %cond.false434
	vmovsd	.LCPI109_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB109_141:                            # %cond.end436
.LBB109_142:                            # %cond.end438
	jmp	.LBB109_144
.LBB109_143:                            # %cond.false440
	vmovsd	.LCPI109_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB109_144
.LBB109_144:                            # %cond.end441
.LBB109_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB109_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB109_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB109_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI109_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB109_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI109_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB109_152
.LBB109_151:                            # %cond.false465
	vmovsd	.LCPI109_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB109_152:                            # %cond.end473
	vmovsd	.LCPI109_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB109_153:                            # %if.end477
	jmp	.LBB109_158
.LBB109_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB109_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI109_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB109_157:                            # %if.end487
	jmp	.LBB109_158
.LBB109_158:                            # %if.end488
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB109_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB109_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI109_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB109_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB109_166
.LBB109_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB109_165
.LBB109_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB109_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB109_166:                            # %if.end510
	vmovsd	.LCPI109_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB109_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB109_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB109_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB109_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB109_167
.LBB109_170:                            # %for.end522
	movl	$0, -260(%rbp)
.LBB109_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_181 Depth 2
                                        #       Child Loop BB109_184 Depth 3
                                        #         Child Loop BB109_190 Depth 4
                                        #         Child Loop BB109_210 Depth 4
                                        #         Child Loop BB109_300 Depth 4
                                        #           Child Loop BB109_302 Depth 5
                                        #         Child Loop BB109_309 Depth 4
                                        #           Child Loop BB109_311 Depth 5
                                        #         Child Loop BB109_326 Depth 4
                                        #           Child Loop BB109_328 Depth 5
                                        #         Child Loop BB109_335 Depth 4
                                        #           Child Loop BB109_337 Depth 5
                                        #         Child Loop BB109_355 Depth 4
                                        #           Child Loop BB109_357 Depth 5
                                        #         Child Loop BB109_374 Depth 4
                                        #           Child Loop BB109_376 Depth 5
                                        #     Child Loop BB109_416 Depth 2
                                        #       Child Loop BB109_418 Depth 3
                                        #         Child Loop BB109_445 Depth 4
                                        #         Child Loop BB109_464 Depth 4
                                        #           Child Loop BB109_466 Depth 5
                                        #         Child Loop BB109_473 Depth 4
                                        #         Child Loop BB109_508 Depth 4
                                        #           Child Loop BB109_510 Depth 5
                                        #         Child Loop BB109_532 Depth 4
                                        #           Child Loop BB109_534 Depth 5
                                        #             Child Loop BB109_536 Depth 6
                                        #         Child Loop BB109_544 Depth 4
                                        #           Child Loop BB109_546 Depth 5
                                        #       Child Loop BB109_569 Depth 3
                                        #         Child Loop BB109_571 Depth 4
                                        #           Child Loop BB109_573 Depth 5
                                        #       Child Loop BB109_581 Depth 3
                                        #         Child Loop BB109_583 Depth 4
                                        #     Child Loop BB109_601 Depth 2
                                        #       Child Loop BB109_603 Depth 3
                                        #         Child Loop BB109_614 Depth 4
                                        #         Child Loop BB109_633 Depth 4
                                        #           Child Loop BB109_635 Depth 5
                                        #         Child Loop BB109_642 Depth 4
                                        #         Child Loop BB109_677 Depth 4
                                        #           Child Loop BB109_679 Depth 5
                                        #         Child Loop BB109_701 Depth 4
                                        #           Child Loop BB109_703 Depth 5
                                        #             Child Loop BB109_705 Depth 6
                                        #         Child Loop BB109_713 Depth 4
                                        #           Child Loop BB109_715 Depth 5
                                        #         Child Loop BB109_723 Depth 4
                                        #           Child Loop BB109_725 Depth 5
                                        #       Child Loop BB109_745 Depth 3
                                        #         Child Loop BB109_747 Depth 4
                                        #           Child Loop BB109_749 Depth 5
                                        #       Child Loop BB109_757 Depth 3
                                        #         Child Loop BB109_759 Depth 4
                                        #       Child Loop BB109_766 Depth 3
                                        #         Child Loop BB109_768 Depth 4
                                        #       Child Loop BB109_778 Depth 3
                                        #         Child Loop BB109_780 Depth 4
                                        #       Child Loop BB109_786 Depth 3
                                        #       Child Loop BB109_791 Depth 3
                                        #         Child Loop BB109_793 Depth 4
                                        #     Child Loop BB109_803 Depth 2
                                        #       Child Loop BB109_805 Depth 3
                                        #     Child Loop BB109_835 Depth 2
                                        #       Child Loop BB109_853 Depth 3
                                        #         Child Loop BB109_908 Depth 4
                                        #           Child Loop BB109_911 Depth 5
                                        #             Child Loop BB109_913 Depth 6
                                        #           Child Loop BB109_920 Depth 5
                                        #             Child Loop BB109_922 Depth 6
                                        #         Child Loop BB109_955 Depth 4
                                        #           Child Loop BB109_957 Depth 5
                                        #     Child Loop BB109_981 Depth 2
                                        #       Child Loop BB109_1014 Depth 3
                                        #         Child Loop BB109_1017 Depth 4
                                        #           Child Loop BB109_1019 Depth 5
                                        #         Child Loop BB109_1026 Depth 4
                                        #           Child Loop BB109_1028 Depth 5
                                        #       Child Loop BB109_1061 Depth 3
                                        #         Child Loop BB109_1063 Depth 4
                                        #     Child Loop BB109_1113 Depth 2
                                        #       Child Loop BB109_1115 Depth 3
                                        #     Child Loop BB109_1127 Depth 2
                                        #       Child Loop BB109_1129 Depth 3
                                        #         Child Loop BB109_1131 Depth 4
                                        #     Child Loop BB109_1141 Depth 2
                                        #       Child Loop BB109_1143 Depth 3
                                        #     Child Loop BB109_1152 Depth 2
                                        #       Child Loop BB109_1154 Depth 3
                                        #     Child Loop BB109_1160 Depth 2
                                        #       Child Loop BB109_1162 Depth 3
                                        #     Child Loop BB109_1174 Depth 2
                                        #       Child Loop BB109_1176 Depth 3
                                        #         Child Loop BB109_1178 Depth 4
                                        #     Child Loop BB109_1189 Depth 2
                                        #       Child Loop BB109_1191 Depth 3
                                        #     Child Loop BB109_1202 Depth 2
                                        #       Child Loop BB109_1204 Depth 3
                                        #     Child Loop BB109_1211 Depth 2
                                        #       Child Loop BB109_1213 Depth 3
                                        #     Child Loop BB109_1221 Depth 2
                                        #       Child Loop BB109_1223 Depth 3
                                        #     Child Loop BB109_1229 Depth 2
                                        #       Child Loop BB109_1231 Depth 3
                                        #     Child Loop BB109_1237 Depth 2
                                        #       Child Loop BB109_1239 Depth 3
                                        #     Child Loop BB109_1245 Depth 2
                                        #       Child Loop BB109_1247 Depth 3
	movl	-260(%rbp), %eax
	cmpl	-300(%rbp), %eax
	jge	.LBB109_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$2, -300(%rbp)
	jne	.LBB109_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB109_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB109_176
.LBB109_175:                            # %if.else534
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB109_176:                            # %if.end536
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_177
.LBB109_177:                            # %if.end537
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB109_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB109_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB109_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB109_180:                            # %if.end542
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB109_181:                            # %for.cond543
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_184 Depth 3
                                        #         Child Loop BB109_190 Depth 4
                                        #         Child Loop BB109_210 Depth 4
                                        #         Child Loop BB109_300 Depth 4
                                        #           Child Loop BB109_302 Depth 5
                                        #         Child Loop BB109_309 Depth 4
                                        #           Child Loop BB109_311 Depth 5
                                        #         Child Loop BB109_326 Depth 4
                                        #           Child Loop BB109_328 Depth 5
                                        #         Child Loop BB109_335 Depth 4
                                        #           Child Loop BB109_337 Depth 5
                                        #         Child Loop BB109_355 Depth 4
                                        #           Child Loop BB109_357 Depth 5
                                        #         Child Loop BB109_374 Depth 4
                                        #           Child Loop BB109_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB109_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB109_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB109_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB109_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB109_184:                            # %for.cond554
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_190 Depth 4
                                        #         Child Loop BB109_210 Depth 4
                                        #         Child Loop BB109_300 Depth 4
                                        #           Child Loop BB109_302 Depth 5
                                        #         Child Loop BB109_309 Depth 4
                                        #           Child Loop BB109_311 Depth 5
                                        #         Child Loop BB109_326 Depth 4
                                        #           Child Loop BB109_328 Depth 5
                                        #         Child Loop BB109_335 Depth 4
                                        #           Child Loop BB109_337 Depth 5
                                        #         Child Loop BB109_355 Depth 4
                                        #           Child Loop BB109_357 Depth 5
                                        #         Child Loop BB109_374 Depth 4
                                        #           Child Loop BB109_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB109_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB109_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB109_187:                            # %land.end566
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB109_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB109_189:                            # %land.end574
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB109_190:                            # %for.cond577
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB109_190 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB109_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB109_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB109_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB109_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB109_206
.LBB109_194:                            # %if.then594
                                        #   in Loop: Header=BB109_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB109_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB109_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB109_198
.LBB109_197:                            # %cond.false604
                                        #   in Loop: Header=BB109_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_198:                            # %cond.end607
                                        #   in Loop: Header=BB109_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB109_203
.LBB109_199:                            # %cond.false610
                                        #   in Loop: Header=BB109_190 Depth=4
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB109_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB109_202
.LBB109_201:                            # %cond.false617
                                        #   in Loop: Header=BB109_190 Depth=4
	movl	$1, %eax
	jmp	.LBB109_202
.LBB109_202:                            # %cond.end618
                                        #   in Loop: Header=BB109_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_203:                            # %cond.end623
                                        #   in Loop: Header=BB109_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB109_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB109_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB109_205:                            # %if.end636
                                        #   in Loop: Header=BB109_190 Depth=4
	jmp	.LBB109_206
.LBB109_206:                            # %if.end637
                                        #   in Loop: Header=BB109_190 Depth=4
	jmp	.LBB109_207
.LBB109_207:                            # %for.inc638
                                        #   in Loop: Header=BB109_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB109_190
.LBB109_208:                            # %for.end640
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB109_210:                            # %for.cond643
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB109_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB109_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB109_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB109_215
.LBB109_214:                            # %cond.false660
                                        #   in Loop: Header=BB109_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_215:                            # %cond.end663
                                        #   in Loop: Header=BB109_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB109_220
.LBB109_216:                            # %cond.false667
                                        #   in Loop: Header=BB109_210 Depth=4
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB109_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB109_219
.LBB109_218:                            # %cond.false674
                                        #   in Loop: Header=BB109_210 Depth=4
	movl	$1, %eax
	jmp	.LBB109_219
.LBB109_219:                            # %cond.end675
                                        #   in Loop: Header=BB109_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_220:                            # %cond.end680
                                        #   in Loop: Header=BB109_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB109_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB109_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB109_222:                            # %if.end693
                                        #   in Loop: Header=BB109_210 Depth=4
	jmp	.LBB109_223
.LBB109_223:                            # %for.inc694
                                        #   in Loop: Header=BB109_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB109_210
.LBB109_224:                            # %for.end696
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_228
.LBB109_227:                            # %cond.false706
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_228:                            # %cond.end709
                                        #   in Loop: Header=BB109_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB109_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB109_231
.LBB109_230:                            # %cond.false719
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB109_231:                            # %cond.end721
                                        #   in Loop: Header=BB109_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB109_236
.LBB109_232:                            # %cond.false726
                                        #   in Loop: Header=BB109_184 Depth=3
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB109_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB109_235
.LBB109_234:                            # %cond.false733
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	$1, %eax
	jmp	.LBB109_235
.LBB109_235:                            # %cond.end734
                                        #   in Loop: Header=BB109_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_236:                            # %cond.end739
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB109_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_243
.LBB109_242:                            # %cond.false761
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB109_243:                            # %cond.end763
                                        #   in Loop: Header=BB109_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB109_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB109_246
.LBB109_245:                            # %cond.false773
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB109_246:                            # %cond.end775
                                        #   in Loop: Header=BB109_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB109_248
.LBB109_247:                            # %cond.false780
                                        #   in Loop: Header=BB109_184 Depth=3
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_248:                            # %cond.end784
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_252
.LBB109_251:                            # %cond.false797
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB109_252:                            # %cond.end799
                                        #   in Loop: Header=BB109_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB109_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB109_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB109_255
.LBB109_254:                            # %cond.false809
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB109_255:                            # %cond.end811
                                        #   in Loop: Header=BB109_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB109_257
.LBB109_256:                            # %cond.false816
                                        #   in Loop: Header=BB109_184 Depth=3
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_257:                            # %cond.end820
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	%eax, -184(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	jmp	.LBB109_259
.LBB109_258:                            # %if.else824
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -184(%rbp) # imm = 0x7FFFFFFF
.LBB109_259:                            # %if.end825
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB109_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB109_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB109_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB109_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB109_285
.LBB109_266:                            # %if.else845
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB109_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB109_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB109_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB109_284
.LBB109_271:                            # %if.else859
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB109_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB109_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB109_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jge	.LBB109_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB109_283
.LBB109_276:                            # %if.else876
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB109_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB109_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-184(%rbp), %eax
	jg	.LBB109_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB109_282
.LBB109_281:                            # %if.else893
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-184(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB109_282:                            # %if.end898
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_283
.LBB109_283:                            # %if.end899
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_284
.LBB109_284:                            # %if.end900
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_285
.LBB109_285:                            # %if.end901
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_295
.LBB109_286:                            # %if.else902
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB109_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB109_294
.LBB109_289:                            # %if.else910
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB109_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB109_293
.LBB109_292:                            # %if.else918
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB109_293:                            # %if.end920
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_294
.LBB109_294:                            # %if.end921
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_295
.LBB109_295:                            # %if.end922
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_297
.LBB109_296:                            # %if.else923
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_297:                            # %if.end925
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB109_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB109_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB109_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	$0, -24(%rbp)
.LBB109_300:                            # %for.cond933
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB109_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB109_300 Depth=4
	movl	$0, -20(%rbp)
.LBB109_302:                            # %for.cond937
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        #         Parent Loop BB109_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB109_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB109_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB109_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_302
.LBB109_305:                            # %for.end999
                                        #   in Loop: Header=BB109_300 Depth=4
	jmp	.LBB109_306
.LBB109_306:                            # %for.inc1000
                                        #   in Loop: Header=BB109_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_300
.LBB109_307:                            # %for.end1002
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_323
.LBB109_308:                            # %if.else1003
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	$0, -24(%rbp)
.LBB109_309:                            # %for.cond1004
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB109_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB109_309 Depth=4
	movl	$0, -20(%rbp)
.LBB109_311:                            # %for.cond1008
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        #         Parent Loop BB109_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB109_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB109_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB109_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB109_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB109_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB109_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB109_316
.LBB109_315:                            # %cond.false1024
                                        #   in Loop: Header=BB109_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB109_316:                            # %cond.end1025
                                        #   in Loop: Header=BB109_311 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB109_318
.LBB109_317:                            # %if.else1111
                                        #   in Loop: Header=BB109_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_318:                            # %if.end1217
                                        #   in Loop: Header=BB109_311 Depth=5
	jmp	.LBB109_319
.LBB109_319:                            # %for.inc1218
                                        #   in Loop: Header=BB109_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_311
.LBB109_320:                            # %for.end1220
                                        #   in Loop: Header=BB109_309 Depth=4
	jmp	.LBB109_321
.LBB109_321:                            # %for.inc1221
                                        #   in Loop: Header=BB109_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_309
.LBB109_322:                            # %for.end1223
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_323
.LBB109_323:                            # %if.end1224
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB109_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB109_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	$0, -24(%rbp)
.LBB109_326:                            # %for.cond1231
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB109_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB109_326 Depth=4
	movl	$0, -20(%rbp)
.LBB109_328:                            # %for.cond1235
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        #         Parent Loop BB109_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB109_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB109_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB109_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_328
.LBB109_331:                            # %for.end1303
                                        #   in Loop: Header=BB109_326 Depth=4
	jmp	.LBB109_332
.LBB109_332:                            # %for.inc1304
                                        #   in Loop: Header=BB109_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_326
.LBB109_333:                            # %for.end1306
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_351
.LBB109_334:                            # %if.else1307
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	$0, -24(%rbp)
.LBB109_335:                            # %for.cond1308
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB109_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB109_335 Depth=4
	movl	$0, -20(%rbp)
.LBB109_337:                            # %for.cond1312
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        #         Parent Loop BB109_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB109_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB109_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB109_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB109_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB109_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB109_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB109_342
.LBB109_341:                            # %cond.false1330
                                        #   in Loop: Header=BB109_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB109_342:                            # %cond.end1332
                                        #   in Loop: Header=BB109_337 Depth=5
	movq	%rax, -440(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-440(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB109_346
.LBB109_343:                            # %if.else1419
                                        #   in Loop: Header=BB109_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB109_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB109_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_345:                            # %if.end1529
                                        #   in Loop: Header=BB109_337 Depth=5
	jmp	.LBB109_346
.LBB109_346:                            # %if.end1530
                                        #   in Loop: Header=BB109_337 Depth=5
	jmp	.LBB109_347
.LBB109_347:                            # %for.inc1531
                                        #   in Loop: Header=BB109_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_337
.LBB109_348:                            # %for.end1533
                                        #   in Loop: Header=BB109_335 Depth=4
	jmp	.LBB109_349
.LBB109_349:                            # %for.inc1534
                                        #   in Loop: Header=BB109_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_335
.LBB109_350:                            # %for.end1536
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_351
.LBB109_351:                            # %if.end1537
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_352
.LBB109_352:                            # %if.end1538
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_393
.LBB109_353:                            # %if.else1539
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB109_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB109_355:                            # %for.cond1546
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB109_355 Depth=4
	movl	$0, -20(%rbp)
.LBB109_357:                            # %for.cond1550
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        #         Parent Loop BB109_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB109_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB109_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB109_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB109_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB109_361
.LBB109_360:                            # %if.else1596
                                        #   in Loop: Header=BB109_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_361:                            # %if.end1676
                                        #   in Loop: Header=BB109_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB109_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB109_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB109_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB109_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-116(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB109_367
.LBB109_364:                            # %if.else1721
                                        #   in Loop: Header=BB109_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB109_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB109_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-116(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_366:                            # %if.end1805
                                        #   in Loop: Header=BB109_357 Depth=5
	jmp	.LBB109_367
.LBB109_367:                            # %if.end1806
                                        #   in Loop: Header=BB109_357 Depth=5
	jmp	.LBB109_368
.LBB109_368:                            # %if.end1807
                                        #   in Loop: Header=BB109_357 Depth=5
	jmp	.LBB109_369
.LBB109_369:                            # %for.inc1808
                                        #   in Loop: Header=BB109_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_357
.LBB109_370:                            # %for.end1810
                                        #   in Loop: Header=BB109_355 Depth=4
	jmp	.LBB109_371
.LBB109_371:                            # %for.inc1811
                                        #   in Loop: Header=BB109_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_355
.LBB109_372:                            # %for.end1813
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_392
.LBB109_373:                            # %if.else1814
                                        #   in Loop: Header=BB109_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB109_374:                            # %for.cond1818
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB109_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB109_374 Depth=4
	movl	$0, -20(%rbp)
.LBB109_376:                            # %for.cond1822
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_181 Depth=2
                                        #       Parent Loop BB109_184 Depth=3
                                        #         Parent Loop BB109_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB109_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB109_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB109_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB109_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB109_380
.LBB109_379:                            # %if.else1868
                                        #   in Loop: Header=BB109_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_380:                            # %if.end1948
                                        #   in Loop: Header=BB109_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB109_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB109_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB109_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB109_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-120(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB109_386
.LBB109_383:                            # %if.else1993
                                        #   in Loop: Header=BB109_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB109_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB109_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-120(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB109_385:                            # %if.end2077
                                        #   in Loop: Header=BB109_376 Depth=5
	jmp	.LBB109_386
.LBB109_386:                            # %if.end2078
                                        #   in Loop: Header=BB109_376 Depth=5
	jmp	.LBB109_387
.LBB109_387:                            # %if.end2079
                                        #   in Loop: Header=BB109_376 Depth=5
	jmp	.LBB109_388
.LBB109_388:                            # %for.inc2080
                                        #   in Loop: Header=BB109_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_376
.LBB109_389:                            # %for.end2082
                                        #   in Loop: Header=BB109_374 Depth=4
	jmp	.LBB109_390
.LBB109_390:                            # %for.inc2083
                                        #   in Loop: Header=BB109_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_374
.LBB109_391:                            # %for.end2085
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_392
.LBB109_392:                            # %if.end2086
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_393
.LBB109_393:                            # %if.end2087
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB109_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB109_399
.LBB109_395:                            # %if.else2106
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB109_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB109_398
.LBB109_397:                            # %if.else2131
                                        #   in Loop: Header=BB109_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB109_398:                            # %if.end2132
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_399
.LBB109_399:                            # %if.end2133
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB109_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB109_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB109_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB109_402:                            # %if.end2143
                                        #   in Loop: Header=BB109_184 Depth=3
	jmp	.LBB109_403
.LBB109_403:                            # %for.inc2144
                                        #   in Loop: Header=BB109_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB109_184
.LBB109_404:                            # %for.end2146
                                        #   in Loop: Header=BB109_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB109_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB109_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB109_407:                            # %if.end2155
                                        #   in Loop: Header=BB109_181 Depth=2
	jmp	.LBB109_408
.LBB109_408:                            # %if.end2156
                                        #   in Loop: Header=BB109_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB109_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB109_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -316(%rbp)
.LBB109_410:                            # %if.end2161
                                        #   in Loop: Header=BB109_181 Depth=2
	jmp	.LBB109_411
.LBB109_411:                            # %if.end2162
                                        #   in Loop: Header=BB109_181 Depth=2
	jmp	.LBB109_412
.LBB109_412:                            # %for.inc2163
                                        #   in Loop: Header=BB109_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB109_181
.LBB109_413:                            # %for.end2165
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB109_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB109_416:                            # %for.cond2172
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_418 Depth 3
                                        #         Child Loop BB109_445 Depth 4
                                        #         Child Loop BB109_464 Depth 4
                                        #           Child Loop BB109_466 Depth 5
                                        #         Child Loop BB109_473 Depth 4
                                        #         Child Loop BB109_508 Depth 4
                                        #           Child Loop BB109_510 Depth 5
                                        #         Child Loop BB109_532 Depth 4
                                        #           Child Loop BB109_534 Depth 5
                                        #             Child Loop BB109_536 Depth 6
                                        #         Child Loop BB109_544 Depth 4
                                        #           Child Loop BB109_546 Depth 5
                                        #       Child Loop BB109_569 Depth 3
                                        #         Child Loop BB109_571 Depth 4
                                        #           Child Loop BB109_573 Depth 5
                                        #       Child Loop BB109_581 Depth 3
                                        #         Child Loop BB109_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB109_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB109_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB109_418:                            # %for.cond2184
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_445 Depth 4
                                        #         Child Loop BB109_464 Depth 4
                                        #           Child Loop BB109_466 Depth 5
                                        #         Child Loop BB109_473 Depth 4
                                        #         Child Loop BB109_508 Depth 4
                                        #           Child Loop BB109_510 Depth 5
                                        #         Child Loop BB109_532 Depth 4
                                        #           Child Loop BB109_534 Depth 5
                                        #             Child Loop BB109_536 Depth 6
                                        #         Child Loop BB109_544 Depth 4
                                        #           Child Loop BB109_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB109_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB109_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB109_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB109_423
.LBB109_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB109_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_557
.LBB109_423:                            # %if.then2201
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB109_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	$0, -212(%rbp)
	movl	$0, -224(%rbp)
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -212(%rbp)
	cmpl	$2147483647, -212(%rbp) # imm = 0x7FFFFFFF
	je	.LBB109_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB109_428
.LBB109_427:                            # %if.then2214
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB109_429
.LBB109_428:                            # %if.else2215
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-212(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-224(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB109_429:                            # %if.end2218
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB109_431
	jmp	.LBB109_430
.LBB109_430:                            # %if.end2218
                                        #   in Loop: Header=BB109_418 Depth=3
	subl	$2, %eax
	je	.LBB109_438
	jmp	.LBB109_439
.LBB109_431:                            # %sw.bb
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-224(%rbp), %eax
	cmpl	-212(%rbp), %eax
	jl	.LBB109_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB109_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB109_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB109_436
.LBB109_435:                            # %if.then2231
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB109_437
.LBB109_436:                            # %if.else2232
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_437:                            # %if.end2233
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_440
.LBB109_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-224(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB109_440
.LBB109_439:                            # %sw.default
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_440:                            # %sw.epilog
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB109_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-188(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB109_442:                            # %if.end2240
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB109_443:                            # %if.end2242
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB109_518
.LBB109_444:                            # %if.else2278
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB109_445:                            # %for.cond2279
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB109_445 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB109_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB109_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB109_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB109_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB109_461
.LBB109_449:                            # %if.then2296
                                        #   in Loop: Header=BB109_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB109_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB109_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB109_453
.LBB109_452:                            # %cond.false2306
                                        #   in Loop: Header=BB109_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_453:                            # %cond.end2309
                                        #   in Loop: Header=BB109_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB109_458
.LBB109_454:                            # %cond.false2313
                                        #   in Loop: Header=BB109_445 Depth=4
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB109_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB109_457
.LBB109_456:                            # %cond.false2320
                                        #   in Loop: Header=BB109_445 Depth=4
	movl	$1, %eax
	jmp	.LBB109_457
.LBB109_457:                            # %cond.end2321
                                        #   in Loop: Header=BB109_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_458:                            # %cond.end2326
                                        #   in Loop: Header=BB109_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB109_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB109_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB109_460:                            # %if.end2339
                                        #   in Loop: Header=BB109_445 Depth=4
	jmp	.LBB109_461
.LBB109_461:                            # %if.end2340
                                        #   in Loop: Header=BB109_445 Depth=4
	jmp	.LBB109_462
.LBB109_462:                            # %for.inc2341
                                        #   in Loop: Header=BB109_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB109_445
.LBB109_463:                            # %for.end2343
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	$0, -24(%rbp)
.LBB109_464:                            # %for.cond2344
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB109_464 Depth=4
	movl	$0, -20(%rbp)
.LBB109_466:                            # %for.cond2348
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        #         Parent Loop BB109_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB109_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB109_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB109_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_466
.LBB109_469:                            # %for.end2405
                                        #   in Loop: Header=BB109_464 Depth=4
	jmp	.LBB109_470
.LBB109_470:                            # %for.inc2406
                                        #   in Loop: Header=BB109_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_464
.LBB109_471:                            # %for.end2408
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB109_473:                            # %for.cond2411
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB109_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB109_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB109_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB109_478
.LBB109_477:                            # %cond.false2428
                                        #   in Loop: Header=BB109_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_478:                            # %cond.end2431
                                        #   in Loop: Header=BB109_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB109_483
.LBB109_479:                            # %cond.false2435
                                        #   in Loop: Header=BB109_473 Depth=4
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB109_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB109_482
.LBB109_481:                            # %cond.false2442
                                        #   in Loop: Header=BB109_473 Depth=4
	movl	$1, %eax
	jmp	.LBB109_482
.LBB109_482:                            # %cond.end2443
                                        #   in Loop: Header=BB109_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_483:                            # %cond.end2448
                                        #   in Loop: Header=BB109_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB109_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB109_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB109_485:                            # %if.end2461
                                        #   in Loop: Header=BB109_473 Depth=4
	jmp	.LBB109_486
.LBB109_486:                            # %for.inc2462
                                        #   in Loop: Header=BB109_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB109_473
.LBB109_487:                            # %for.end2464
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB109_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_491
.LBB109_490:                            # %cond.false2474
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_491:                            # %cond.end2477
                                        #   in Loop: Header=BB109_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB109_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB109_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB109_494
.LBB109_493:                            # %cond.false2487
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB109_494:                            # %cond.end2489
                                        #   in Loop: Header=BB109_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB109_499
.LBB109_495:                            # %cond.false2494
                                        #   in Loop: Header=BB109_418 Depth=3
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB109_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB109_498
.LBB109_497:                            # %cond.false2501
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	$1, %eax
	jmp	.LBB109_498
.LBB109_498:                            # %cond.end2502
                                        #   in Loop: Header=BB109_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_499:                            # %cond.end2507
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB109_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB109_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB109_507
.LBB109_502:                            # %if.else2517
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB109_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB109_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB109_506
.LBB109_505:                            # %if.else2524
                                        #   in Loop: Header=BB109_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB109_506:                            # %if.end2525
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_507
.LBB109_507:                            # %if.end2526
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	$0, -24(%rbp)
.LBB109_508:                            # %for.cond2527
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB109_508 Depth=4
	movl	$0, -20(%rbp)
.LBB109_510:                            # %for.cond2531
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        #         Parent Loop BB109_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB109_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB109_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB109_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_510
.LBB109_513:                            # %for.end2567
                                        #   in Loop: Header=BB109_508 Depth=4
	jmp	.LBB109_514
.LBB109_514:                            # %for.inc2568
                                        #   in Loop: Header=BB109_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_508
.LBB109_515:                            # %for.end2570
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_517
.LBB109_516:                            # %if.else2571
                                        #   in Loop: Header=BB109_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_517:                            # %if.end2572
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_518
.LBB109_518:                            # %if.end2573
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB109_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB109_526
.LBB109_520:                            # %if.else2578
                                        #   in Loop: Header=BB109_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB109_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB109_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB109_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB109_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_524
.LBB109_523:                            # %cond.false2592
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB109_524:                            # %cond.end2597
                                        #   in Loop: Header=BB109_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB109_525:                            # %if.end2603
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_526
.LBB109_526:                            # %if.end2604
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB109_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB109_530
.LBB109_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB109_556
.LBB109_530:                            # %if.then2616
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -188(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB109_532:                            # %for.cond2638
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_534 Depth 5
                                        #             Child Loop BB109_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB109_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB109_532 Depth=4
	movl	$0, -24(%rbp)
.LBB109_534:                            # %for.cond2642
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        #         Parent Loop BB109_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB109_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB109_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB109_534 Depth=5
	movl	$0, -20(%rbp)
.LBB109_536:                            # %for.cond2646
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        #         Parent Loop BB109_532 Depth=4
                                        #           Parent Loop BB109_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB109_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB109_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB109_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_536
.LBB109_539:                            # %for.end2668
                                        #   in Loop: Header=BB109_534 Depth=5
	jmp	.LBB109_540
.LBB109_540:                            # %for.inc2669
                                        #   in Loop: Header=BB109_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_534
.LBB109_541:                            # %for.end2671
                                        #   in Loop: Header=BB109_532 Depth=4
	jmp	.LBB109_542
.LBB109_542:                            # %for.inc2672
                                        #   in Loop: Header=BB109_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_532
.LBB109_543:                            # %for.end2674
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_544:                            # %for.cond2675
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB109_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_546:                            # %for.cond2680
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_418 Depth=3
                                        #         Parent Loop BB109_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB109_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB109_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB109_550
.LBB109_549:                            # %if.else2705
                                        #   in Loop: Header=BB109_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB109_550:                            # %if.end2754
                                        #   in Loop: Header=BB109_546 Depth=5
	jmp	.LBB109_551
.LBB109_551:                            # %for.inc2755
                                        #   in Loop: Header=BB109_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_546
.LBB109_552:                            # %for.end2757
                                        #   in Loop: Header=BB109_544 Depth=4
	jmp	.LBB109_553
.LBB109_553:                            # %for.inc2758
                                        #   in Loop: Header=BB109_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_544
.LBB109_554:                            # %for.end2760
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_555
.LBB109_555:                            # %if.end2761
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB109_556:                            # %if.end2762
                                        #   in Loop: Header=BB109_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB109_557:                            # %if.end2763
                                        #   in Loop: Header=BB109_418 Depth=3
	jmp	.LBB109_558
.LBB109_558:                            # %for.inc2764
                                        #   in Loop: Header=BB109_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB109_418
.LBB109_559:                            # %for.end2766
                                        #   in Loop: Header=BB109_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-188(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB109_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB109_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB109_563
.LBB109_562:                            # %cond.true2782
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB109_564
.LBB109_563:                            # %cond.false2783
                                        #   in Loop: Header=BB109_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB109_564
.LBB109_564:                            # %cond.end2784
                                        #   in Loop: Header=BB109_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB109_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB109_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB109_567
.LBB109_566:                            # %cond.true2793
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB109_568
.LBB109_567:                            # %cond.false2794
                                        #   in Loop: Header=BB109_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB109_568
.LBB109_568:                            # %cond.end2795
                                        #   in Loop: Header=BB109_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB109_569:                            # %for.cond2813
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_571 Depth 4
                                        #           Child Loop BB109_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB109_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB109_569 Depth=3
	movl	$0, -24(%rbp)
.LBB109_571:                            # %for.cond2817
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB109_571 Depth=4
	movl	$0, -20(%rbp)
.LBB109_573:                            # %for.cond2821
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_569 Depth=3
                                        #         Parent Loop BB109_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB109_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB109_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB109_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_573
.LBB109_576:                            # %for.end2844
                                        #   in Loop: Header=BB109_571 Depth=4
	jmp	.LBB109_577
.LBB109_577:                            # %for.inc2845
                                        #   in Loop: Header=BB109_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_571
.LBB109_578:                            # %for.end2847
                                        #   in Loop: Header=BB109_569 Depth=3
	jmp	.LBB109_579
.LBB109_579:                            # %for.inc2848
                                        #   in Loop: Header=BB109_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_569
.LBB109_580:                            # %for.end2850
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_581:                            # %for.cond2851
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB109_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_583:                            # %for.cond2856
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_416 Depth=2
                                        #       Parent Loop BB109_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB109_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB109_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB109_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB109_587
.LBB109_586:                            # %if.else2886
                                        #   in Loop: Header=BB109_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB109_587:                            # %if.end2935
                                        #   in Loop: Header=BB109_583 Depth=4
	jmp	.LBB109_588
.LBB109_588:                            # %for.inc2936
                                        #   in Loop: Header=BB109_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_583
.LBB109_589:                            # %for.end2938
                                        #   in Loop: Header=BB109_581 Depth=3
	jmp	.LBB109_590
.LBB109_590:                            # %for.inc2939
                                        #   in Loop: Header=BB109_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_581
.LBB109_591:                            # %for.end2941
                                        #   in Loop: Header=BB109_416 Depth=2
	jmp	.LBB109_592
.LBB109_592:                            # %if.end2942
                                        #   in Loop: Header=BB109_416 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB109_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB109_594:                            # %if.end2948
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB109_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB109_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB109_596:                            # %if.end2974
                                        #   in Loop: Header=BB109_416 Depth=2
	jmp	.LBB109_597
.LBB109_597:                            # %for.inc2975
                                        #   in Loop: Header=BB109_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB109_416
.LBB109_598:                            # %for.end2977
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_599:                            # %if.end2980
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB109_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB109_601:                            # %for.cond2985
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_603 Depth 3
                                        #         Child Loop BB109_614 Depth 4
                                        #         Child Loop BB109_633 Depth 4
                                        #           Child Loop BB109_635 Depth 5
                                        #         Child Loop BB109_642 Depth 4
                                        #         Child Loop BB109_677 Depth 4
                                        #           Child Loop BB109_679 Depth 5
                                        #         Child Loop BB109_701 Depth 4
                                        #           Child Loop BB109_703 Depth 5
                                        #             Child Loop BB109_705 Depth 6
                                        #         Child Loop BB109_713 Depth 4
                                        #           Child Loop BB109_715 Depth 5
                                        #         Child Loop BB109_723 Depth 4
                                        #           Child Loop BB109_725 Depth 5
                                        #       Child Loop BB109_745 Depth 3
                                        #         Child Loop BB109_747 Depth 4
                                        #           Child Loop BB109_749 Depth 5
                                        #       Child Loop BB109_757 Depth 3
                                        #         Child Loop BB109_759 Depth 4
                                        #       Child Loop BB109_766 Depth 3
                                        #         Child Loop BB109_768 Depth 4
                                        #       Child Loop BB109_778 Depth 3
                                        #         Child Loop BB109_780 Depth 4
                                        #       Child Loop BB109_786 Depth 3
                                        #       Child Loop BB109_791 Depth 3
                                        #         Child Loop BB109_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB109_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB109_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -404(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -188(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB109_603:                            # %for.cond2997
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_614 Depth 4
                                        #         Child Loop BB109_633 Depth 4
                                        #           Child Loop BB109_635 Depth 5
                                        #         Child Loop BB109_642 Depth 4
                                        #         Child Loop BB109_677 Depth 4
                                        #           Child Loop BB109_679 Depth 5
                                        #         Child Loop BB109_701 Depth 4
                                        #           Child Loop BB109_703 Depth 5
                                        #             Child Loop BB109_705 Depth 6
                                        #         Child Loop BB109_713 Depth 4
                                        #           Child Loop BB109_715 Depth 5
                                        #         Child Loop BB109_723 Depth 4
                                        #           Child Loop BB109_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB109_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB109_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB109_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB109_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-224(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB109_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB109_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB109_610
.LBB109_609:                            # %if.then3019
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB109_611
.LBB109_610:                            # %if.else3020
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB109_611:                            # %if.end3022
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB109_612:                            # %if.end3024
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB109_687
.LBB109_613:                            # %if.else3060
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB109_614:                            # %for.cond3061
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB109_614 Depth=4
	cmpl	$0, -288(%rbp)
	je	.LBB109_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB109_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB109_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB109_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB109_630
.LBB109_618:                            # %if.then3078
                                        #   in Loop: Header=BB109_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB109_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB109_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB109_622
.LBB109_621:                            # %cond.false3088
                                        #   in Loop: Header=BB109_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_622:                            # %cond.end3091
                                        #   in Loop: Header=BB109_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB109_627
.LBB109_623:                            # %cond.false3095
                                        #   in Loop: Header=BB109_614 Depth=4
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB109_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB109_626
.LBB109_625:                            # %cond.false3102
                                        #   in Loop: Header=BB109_614 Depth=4
	movl	$1, %eax
	jmp	.LBB109_626
.LBB109_626:                            # %cond.end3103
                                        #   in Loop: Header=BB109_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_627:                            # %cond.end3108
                                        #   in Loop: Header=BB109_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB109_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB109_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB109_629:                            # %if.end3121
                                        #   in Loop: Header=BB109_614 Depth=4
	jmp	.LBB109_630
.LBB109_630:                            # %if.end3122
                                        #   in Loop: Header=BB109_614 Depth=4
	jmp	.LBB109_631
.LBB109_631:                            # %for.inc3123
                                        #   in Loop: Header=BB109_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB109_614
.LBB109_632:                            # %for.end3125
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	$0, -24(%rbp)
.LBB109_633:                            # %for.cond3126
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB109_633 Depth=4
	movl	$0, -20(%rbp)
.LBB109_635:                            # %for.cond3130
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        #         Parent Loop BB109_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB109_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB109_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB109_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_635
.LBB109_638:                            # %for.end3187
                                        #   in Loop: Header=BB109_633 Depth=4
	jmp	.LBB109_639
.LBB109_639:                            # %for.inc3188
                                        #   in Loop: Header=BB109_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_633
.LBB109_640:                            # %for.end3190
                                        #   in Loop: Header=BB109_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB109_642:                            # %for.cond3193
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB109_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB109_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB109_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB109_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB109_647
.LBB109_646:                            # %cond.false3210
                                        #   in Loop: Header=BB109_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_647:                            # %cond.end3213
                                        #   in Loop: Header=BB109_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB109_652
.LBB109_648:                            # %cond.false3217
                                        #   in Loop: Header=BB109_642 Depth=4
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB109_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB109_651
.LBB109_650:                            # %cond.false3224
                                        #   in Loop: Header=BB109_642 Depth=4
	movl	$1, %eax
	jmp	.LBB109_651
.LBB109_651:                            # %cond.end3225
                                        #   in Loop: Header=BB109_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_652:                            # %cond.end3230
                                        #   in Loop: Header=BB109_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB109_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB109_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB109_654:                            # %if.end3243
                                        #   in Loop: Header=BB109_642 Depth=4
	jmp	.LBB109_655
.LBB109_655:                            # %for.inc3244
                                        #   in Loop: Header=BB109_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB109_642
.LBB109_656:                            # %for.end3246
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB109_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB109_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_660
.LBB109_659:                            # %cond.false3256
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB109_660:                            # %cond.end3259
                                        #   in Loop: Header=BB109_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB109_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB109_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB109_663
.LBB109_662:                            # %cond.false3269
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB109_663:                            # %cond.end3271
                                        #   in Loop: Header=BB109_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB109_668
.LBB109_664:                            # %cond.false3276
                                        #   in Loop: Header=BB109_603 Depth=3
	vmovsd	.LCPI109_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB109_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB109_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB109_667
.LBB109_666:                            # %cond.false3283
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	$1, %eax
	jmp	.LBB109_667
.LBB109_667:                            # %cond.end3284
                                        #   in Loop: Header=BB109_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB109_668:                            # %cond.end3289
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB109_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB109_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB109_676
.LBB109_671:                            # %if.else3299
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB109_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB109_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB109_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB109_675
.LBB109_674:                            # %if.else3306
                                        #   in Loop: Header=BB109_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB109_675:                            # %if.end3307
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_676
.LBB109_676:                            # %if.end3308
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	$0, -24(%rbp)
.LBB109_677:                            # %for.cond3309
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB109_677 Depth=4
	movl	$0, -20(%rbp)
.LBB109_679:                            # %for.cond3313
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        #         Parent Loop BB109_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB109_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB109_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB109_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_679
.LBB109_682:                            # %for.end3349
                                        #   in Loop: Header=BB109_677 Depth=4
	jmp	.LBB109_683
.LBB109_683:                            # %for.inc3350
                                        #   in Loop: Header=BB109_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_677
.LBB109_684:                            # %for.end3352
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_686
.LBB109_685:                            # %if.else3353
                                        #   in Loop: Header=BB109_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_686:                            # %if.end3354
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_687
.LBB109_687:                            # %if.end3355
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB109_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB109_695
.LBB109_689:                            # %if.else3360
                                        #   in Loop: Header=BB109_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB109_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB109_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB109_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB109_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_693
.LBB109_692:                            # %cond.false3374
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB109_693:                            # %cond.end3379
                                        #   in Loop: Header=BB109_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB109_694:                            # %if.end3385
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_695
.LBB109_695:                            # %if.end3386
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB109_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB109_699
.LBB109_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-188(%rbp), %eax
	jge	.LBB109_732
.LBB109_699:                            # %if.then3398
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -188(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -180(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB109_701:                            # %for.cond3422
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_703 Depth 5
                                        #             Child Loop BB109_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB109_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB109_701 Depth=4
	movl	$0, -24(%rbp)
.LBB109_703:                            # %for.cond3426
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        #         Parent Loop BB109_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB109_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB109_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB109_703 Depth=5
	movl	$0, -20(%rbp)
.LBB109_705:                            # %for.cond3430
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        #         Parent Loop BB109_701 Depth=4
                                        #           Parent Loop BB109_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB109_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB109_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB109_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_705
.LBB109_708:                            # %for.end3453
                                        #   in Loop: Header=BB109_703 Depth=5
	jmp	.LBB109_709
.LBB109_709:                            # %for.inc3454
                                        #   in Loop: Header=BB109_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_703
.LBB109_710:                            # %for.end3456
                                        #   in Loop: Header=BB109_701 Depth=4
	jmp	.LBB109_711
.LBB109_711:                            # %for.inc3457
                                        #   in Loop: Header=BB109_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_701
.LBB109_712:                            # %for.end3459
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_713:                            # %for.cond3460
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB109_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_715:                            # %for.cond3465
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        #         Parent Loop BB109_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB109_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB109_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_715
.LBB109_718:                            # %for.end3494
                                        #   in Loop: Header=BB109_713 Depth=4
	jmp	.LBB109_719
.LBB109_719:                            # %for.inc3495
                                        #   in Loop: Header=BB109_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_713
.LBB109_720:                            # %for.end3497
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_721
.LBB109_721:                            # %if.end3498
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_723:                            # %for.cond3502
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB109_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_725:                            # %for.cond3507
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_603 Depth=3
                                        #         Parent Loop BB109_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB109_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB109_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_725
.LBB109_728:                            # %for.end3562
                                        #   in Loop: Header=BB109_723 Depth=4
	jmp	.LBB109_729
.LBB109_729:                            # %for.inc3563
                                        #   in Loop: Header=BB109_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_723
.LBB109_730:                            # %for.end3565
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_731
.LBB109_731:                            # %if.end3566
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB109_732:                            # %if.end3567
                                        #   in Loop: Header=BB109_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB109_733:                            # %if.end3568
                                        #   in Loop: Header=BB109_603 Depth=3
	jmp	.LBB109_734
.LBB109_734:                            # %for.inc3569
                                        #   in Loop: Header=BB109_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB109_603
.LBB109_735:                            # %for.end3571
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-188(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB109_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB109_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB109_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB109_739
.LBB109_738:                            # %cond.true3588
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB109_740
.LBB109_739:                            # %cond.false3589
                                        #   in Loop: Header=BB109_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB109_740
.LBB109_740:                            # %cond.end3590
                                        #   in Loop: Header=BB109_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB109_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB109_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB109_743
.LBB109_742:                            # %cond.true3599
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB109_744
.LBB109_743:                            # %cond.false3600
                                        #   in Loop: Header=BB109_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB109_744
.LBB109_744:                            # %cond.end3601
                                        #   in Loop: Header=BB109_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-280(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -180(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB109_745:                            # %for.cond3619
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_747 Depth 4
                                        #           Child Loop BB109_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB109_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB109_745 Depth=3
	movl	$0, -24(%rbp)
.LBB109_747:                            # %for.cond3623
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB109_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB109_747 Depth=4
	movl	$0, -20(%rbp)
.LBB109_749:                            # %for.cond3627
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_745 Depth=3
                                        #         Parent Loop BB109_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB109_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB109_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB109_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_749
.LBB109_752:                            # %for.end3650
                                        #   in Loop: Header=BB109_747 Depth=4
	jmp	.LBB109_753
.LBB109_753:                            # %for.inc3651
                                        #   in Loop: Header=BB109_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_747
.LBB109_754:                            # %for.end3653
                                        #   in Loop: Header=BB109_745 Depth=3
	jmp	.LBB109_755
.LBB109_755:                            # %for.inc3654
                                        #   in Loop: Header=BB109_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_745
.LBB109_756:                            # %for.end3656
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_757:                            # %for.cond3657
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB109_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_759:                            # %for.cond3662
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB109_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB109_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_759
.LBB109_762:                            # %for.end3691
                                        #   in Loop: Header=BB109_757 Depth=3
	jmp	.LBB109_763
.LBB109_763:                            # %for.inc3692
                                        #   in Loop: Header=BB109_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_757
.LBB109_764:                            # %for.end3694
                                        #   in Loop: Header=BB109_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_766:                            # %for.cond3698
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB109_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_768:                            # %for.cond3703
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB109_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB109_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_768
.LBB109_771:                            # %for.end3758
                                        #   in Loop: Header=BB109_766 Depth=3
	jmp	.LBB109_772
.LBB109_772:                            # %for.inc3759
                                        #   in Loop: Header=BB109_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_766
.LBB109_773:                            # %for.end3761
                                        #   in Loop: Header=BB109_601 Depth=2
	jmp	.LBB109_774
.LBB109_774:                            # %if.end3762
                                        #   in Loop: Header=BB109_601 Depth=2
	jmp	.LBB109_775
.LBB109_775:                            # %if.end3763
                                        #   in Loop: Header=BB109_601 Depth=2
	cmpl	$0, -180(%rbp)
	je	.LBB109_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-180(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB109_777:                            # %if.end3769
                                        #   in Loop: Header=BB109_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_778:                            # %for.cond3781
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB109_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_780:                            # %for.cond3786
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB109_780 Depth=4
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB109_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_780
.LBB109_783:                            # %for.end3797
                                        #   in Loop: Header=BB109_778 Depth=3
	jmp	.LBB109_784
.LBB109_784:                            # %for.inc3798
                                        #   in Loop: Header=BB109_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_778
.LBB109_785:                            # %for.end3800
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_786:                            # %for.cond3802
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB109_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB109_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_786
.LBB109_789:                            # %for.end3811
                                        #   in Loop: Header=BB109_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB109_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB109_791:                            # %for.cond3819
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB109_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB109_793:                            # %for.cond3824
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_601 Depth=2
                                        #       Parent Loop BB109_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB109_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB109_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_793
.LBB109_796:                            # %for.end3844
                                        #   in Loop: Header=BB109_791 Depth=3
	jmp	.LBB109_797
.LBB109_797:                            # %for.inc3845
                                        #   in Loop: Header=BB109_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_791
.LBB109_798:                            # %for.end3847
                                        #   in Loop: Header=BB109_601 Depth=2
	jmp	.LBB109_799
.LBB109_799:                            # %if.end3848
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB109_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB109_601
.LBB109_801:                            # %for.end3860
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_802
.LBB109_802:                            # %if.end3861
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB109_803:                            # %for.cond3862
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB109_803 Depth=2
	movl	$0, -24(%rbp)
.LBB109_805:                            # %for.cond3866
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB109_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB109_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_805
.LBB109_808:                            # %for.end3890
                                        #   in Loop: Header=BB109_803 Depth=2
	jmp	.LBB109_809
.LBB109_809:                            # %for.inc3891
                                        #   in Loop: Header=BB109_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_803
.LBB109_810:                            # %for.end3893
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB109_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB109_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB109_825
.LBB109_813:                            # %if.then3902
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB109_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_822
.LBB109_816:                            # %if.else3910
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB109_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB109_821
.LBB109_818:                            # %if.else3915
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB109_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_820:                            # %if.end3922
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_821
.LBB109_821:                            # %if.end3923
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_822
.LBB109_822:                            # %if.end3924
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_824
.LBB109_823:                            # %if.else3925
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_824:                            # %if.end3927
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_825
.LBB109_825:                            # %if.end3928
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_827
.LBB109_826:                            # %if.else3929
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB109_827:                            # %if.end3930
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_830
.LBB109_829:                            # %if.then3938
                                        #   in Loop: Header=BB109_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB109_830:                            # %if.end3939
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_832
.LBB109_831:                            # %if.else3940
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB109_832:                            # %if.end3941
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB109_171 Depth=1
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB109_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB109_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	leaq	-312(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB109_835:                            # %for.cond3949
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_853 Depth 3
                                        #         Child Loop BB109_908 Depth 4
                                        #           Child Loop BB109_911 Depth 5
                                        #             Child Loop BB109_913 Depth 6
                                        #           Child Loop BB109_920 Depth 5
                                        #             Child Loop BB109_922 Depth 6
                                        #         Child Loop BB109_955 Depth 4
                                        #           Child Loop BB109_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB109_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB109_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB109_846
.LBB109_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB109_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB109_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB109_846
.LBB109_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB109_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB109_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB109_846
.LBB109_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB109_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB109_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB109_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB109_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB109_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB109_835 Depth=2
	cmpl	$0, -312(%rbp)
	jne	.LBB109_847
.LBB109_846:                            # %if.then3982
                                        #   in Loop: Header=BB109_835 Depth=2
	jmp	.LBB109_976
.LBB109_847:                            # %if.end3983
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB109_835 Depth=2
	movl	$11, -304(%rbp)
	jmp	.LBB109_850
.LBB109_849:                            # %if.else3987
                                        #   in Loop: Header=BB109_835 Depth=2
	movl	$8, -304(%rbp)
.LBB109_850:                            # %if.end3988
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB109_852:                            # %if.end3994
                                        #   in Loop: Header=BB109_835 Depth=2
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB109_853:                            # %for.cond3995
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_908 Depth 4
                                        #           Child Loop BB109_911 Depth 5
                                        #             Child Loop BB109_913 Depth 6
                                        #           Child Loop BB109_920 Depth 5
                                        #             Child Loop BB109_922 Depth 6
                                        #         Child Loop BB109_955 Depth 4
                                        #           Child Loop BB109_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-304(%rbp), %eax
	jge	.LBB109_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB109_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB109_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB109_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -124(%rbp)
.LBB109_857:                            # %if.end4010
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB109_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -124(%rbp)
	jne	.LBB109_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB109_866
.LBB109_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$1, -124(%rbp)
	jne	.LBB109_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB109_866
.LBB109_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$3, -124(%rbp)
	jne	.LBB109_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB109_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB109_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -312(%rbp)
	jne	.LBB109_867
.LBB109_866:                            # %if.then4032
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_974
.LBB109_867:                            # %if.end4033
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_869
.LBB109_868:                            # %if.else4034
                                        #   in Loop: Header=BB109_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -124(%rbp)
.LBB109_869:                            # %if.end4037
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB109_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB109_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB109_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB109_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB109_877:                            # %if.end4066
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_878
.LBB109_878:                            # %if.end4067
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$2, -128(%rbp)
	jge	.LBB109_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB109_880:                            # %if.end4072
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB109_881:                            # %if.end4074
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB109_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB109_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB109_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB109_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB109_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB109_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB109_887:                            # %if.end4092
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_888
.LBB109_888:                            # %if.end4093
                                        #   in Loop: Header=BB109_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB109_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB109_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB109_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB109_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_902
.LBB109_893:                            # %if.else4110
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB109_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_901
.LBB109_897:                            # %if.else4120
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB109_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB109_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB109_900:                            # %if.end4128
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_901
.LBB109_901:                            # %if.end4129
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_902
.LBB109_902:                            # %if.end4130
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_903
.LBB109_903:                            # %if.end4131
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB109_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB109_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB109_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB109_947
.LBB109_907:                            # %if.then4146
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_908
.LBB109_908:                            # %while.body
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_911 Depth 5
                                        #             Child Loop BB109_913 Depth 6
                                        #           Child Loop BB109_920 Depth 5
                                        #             Child Loop BB109_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB109_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB109_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB109_908 Depth=4
	movl	$0, -20(%rbp)
.LBB109_911:                            # %for.cond4153
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        #         Parent Loop BB109_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB109_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB109_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB109_911 Depth=5
	movl	$0, -24(%rbp)
.LBB109_913:                            # %for.cond4157
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        #         Parent Loop BB109_908 Depth=4
                                        #           Parent Loop BB109_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB109_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB109_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB109_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_913
.LBB109_916:                            # %for.end4182
                                        #   in Loop: Header=BB109_911 Depth=5
	jmp	.LBB109_917
.LBB109_917:                            # %for.inc4183
                                        #   in Loop: Header=BB109_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_911
.LBB109_918:                            # %for.end4185
                                        #   in Loop: Header=BB109_908 Depth=4
	jmp	.LBB109_928
.LBB109_919:                            # %if.else4186
                                        #   in Loop: Header=BB109_908 Depth=4
	movl	$0, -20(%rbp)
.LBB109_920:                            # %for.cond4187
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        #         Parent Loop BB109_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB109_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB109_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB109_920 Depth=5
	movl	$0, -24(%rbp)
.LBB109_922:                            # %for.cond4191
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        #         Parent Loop BB109_908 Depth=4
                                        #           Parent Loop BB109_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB109_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB109_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB109_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_922
.LBB109_925:                            # %for.end4215
                                        #   in Loop: Header=BB109_920 Depth=5
	jmp	.LBB109_926
.LBB109_926:                            # %for.inc4216
                                        #   in Loop: Header=BB109_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_920
.LBB109_927:                            # %for.end4218
                                        #   in Loop: Header=BB109_908 Depth=4
	jmp	.LBB109_928
.LBB109_928:                            # %if.end4219
                                        #   in Loop: Header=BB109_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB109_929:                            # %if.end4220
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB109_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB109_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB109_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB109_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB109_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB109_908 Depth=4
	jmp	.LBB109_908
.LBB109_935:                            # %if.else4236
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB109_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB109_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB109_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_934
.LBB109_940:                            # %if.else4250
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB109_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB109_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB109_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB109_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB109_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_934
.LBB109_944:                            # %if.else4262
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB109_946
.LBB109_945:                            # %if.else4264
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_946
.LBB109_946:                            # %while.end
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_947
.LBB109_947:                            # %if.end4265
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB109_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB109_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB109_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB109_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB109_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB109_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	$0, -20(%rbp)
.LBB109_955:                            # %for.cond4288
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB109_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB109_955 Depth=4
	movl	$0, -24(%rbp)
.LBB109_957:                            # %for.cond4292
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_835 Depth=2
                                        #       Parent Loop BB109_853 Depth=3
                                        #         Parent Loop BB109_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB109_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB109_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB109_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_957
.LBB109_960:                            # %for.end4316
                                        #   in Loop: Header=BB109_955 Depth=4
	jmp	.LBB109_961
.LBB109_961:                            # %for.inc4317
                                        #   in Loop: Header=BB109_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_955
.LBB109_962:                            # %for.end4319
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB109_963:                            # %if.end4320
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_964
.LBB109_964:                            # %if.end4321
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_965
.LBB109_965:                            # %if.end4322
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$2, -128(%rbp)
	jne	.LBB109_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB109_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB109_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB109_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB109_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB109_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB109_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB109_972:                            # %if.end4356
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_973
.LBB109_973:                            # %if.end4357
                                        #   in Loop: Header=BB109_853 Depth=3
	jmp	.LBB109_974
.LBB109_974:                            # %for.inc4358
                                        #   in Loop: Header=BB109_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB109_853
.LBB109_975:                            # %for.end4360
                                        #   in Loop: Header=BB109_835 Depth=2
	jmp	.LBB109_976
.LBB109_976:                            # %for.inc4361
                                        #   in Loop: Header=BB109_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB109_835
.LBB109_977:                            # %for.end4364
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1082
.LBB109_978:                            # %if.else4365
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB109_980:                            # %if.end4371
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -128(%rbp)
	movl	$0, -80(%rbp)
.LBB109_981:                            # %for.cond4372
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1014 Depth 3
                                        #         Child Loop BB109_1017 Depth 4
                                        #           Child Loop BB109_1019 Depth 5
                                        #         Child Loop BB109_1026 Depth 4
                                        #           Child Loop BB109_1028 Depth 5
                                        #       Child Loop BB109_1061 Depth 3
                                        #         Child Loop BB109_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB109_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB109_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB109_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-128(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB109_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB109_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB109_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -128(%rbp)
.LBB109_990:                            # %if.end4407
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_991
.LBB109_991:                            # %if.end4408
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$2, -128(%rbp)
	jge	.LBB109_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB109_993:                            # %if.end4413
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
.LBB109_994:                            # %if.end4415
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB109_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB109_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB109_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB109_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_1008
.LBB109_999:                            # %if.else4433
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB109_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB109_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_1007
.LBB109_1003:                           # %if.else4443
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB109_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB109_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB109_1006:                           # %if.end4451
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1007
.LBB109_1007:                           # %if.end4452
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1008
.LBB109_1008:                           # %if.end4453
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1009
.LBB109_1009:                           # %if.end4454
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB109_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB109_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB109_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB109_1053
.LBB109_1013:                           # %if.then4470
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1014
.LBB109_1014:                           # %while.body4471
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_1017 Depth 4
                                        #           Child Loop BB109_1019 Depth 5
                                        #         Child Loop BB109_1026 Depth 4
                                        #           Child Loop BB109_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB109_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB109_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB109_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB109_1017:                           # %for.cond4478
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        #       Parent Loop BB109_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB109_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB109_1019:                           # %for.cond4482
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        #       Parent Loop BB109_1014 Depth=3
                                        #         Parent Loop BB109_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB109_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB109_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1019
.LBB109_1022:                           # %for.end4507
                                        #   in Loop: Header=BB109_1017 Depth=4
	jmp	.LBB109_1023
.LBB109_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB109_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1017
.LBB109_1024:                           # %for.end4510
                                        #   in Loop: Header=BB109_1014 Depth=3
	jmp	.LBB109_1034
.LBB109_1025:                           # %if.else4511
                                        #   in Loop: Header=BB109_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB109_1026:                           # %for.cond4512
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        #       Parent Loop BB109_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB109_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB109_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB109_1028:                           # %for.cond4516
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        #       Parent Loop BB109_1014 Depth=3
                                        #         Parent Loop BB109_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB109_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB109_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1028
.LBB109_1031:                           # %for.end4540
                                        #   in Loop: Header=BB109_1026 Depth=4
	jmp	.LBB109_1032
.LBB109_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB109_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1026
.LBB109_1033:                           # %for.end4543
                                        #   in Loop: Header=BB109_1014 Depth=3
	jmp	.LBB109_1034
.LBB109_1034:                           # %if.end4544
                                        #   in Loop: Header=BB109_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB109_1035:                           # %if.end4545
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB109_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB109_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB109_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB109_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB109_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB109_1014 Depth=3
	jmp	.LBB109_1014
.LBB109_1041:                           # %if.else4561
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB109_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB109_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB109_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_1040
.LBB109_1046:                           # %if.else4575
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB109_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB109_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB109_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB109_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB109_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_1040
.LBB109_1050:                           # %if.else4587
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB109_1052
.LBB109_1051:                           # %if.else4589
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1052
.LBB109_1052:                           # %while.end4590
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1053
.LBB109_1053:                           # %if.end4591
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB109_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB109_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB109_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB109_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB109_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB109_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-124(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB109_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1061:                           # %for.cond4615
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB109_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB109_1063:                           # %for.cond4619
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_981 Depth=2
                                        #       Parent Loop BB109_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB109_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB109_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1063
.LBB109_1066:                           # %for.end4643
                                        #   in Loop: Header=BB109_1061 Depth=3
	jmp	.LBB109_1067
.LBB109_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB109_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1061
.LBB109_1068:                           # %for.end4646
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB109_1069:                           # %if.end4647
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1070
.LBB109_1070:                           # %if.end4648
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1071
.LBB109_1071:                           # %if.end4649
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB109_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$2, -128(%rbp)
	jne	.LBB109_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB109_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB109_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB109_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB109_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB109_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB109_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB109_1078:                           # %if.end4683
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1079
.LBB109_1079:                           # %if.end4684
                                        #   in Loop: Header=BB109_981 Depth=2
	jmp	.LBB109_1080
.LBB109_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB109_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB109_981
.LBB109_1081:                           # %for.end4687
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1082
.LBB109_1082:                           # %if.end4688
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1284
.LBB109_1083:                           # %if.else4689
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -320(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB109_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB109_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB109_1085:                           # %if.end4695
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB109_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB109_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -252(%rbp)
	je	.LBB109_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB109_1090
	jmp	.LBB109_1089
.LBB109_1089:                           # %if.then4702
                                        #   in Loop: Header=BB109_171 Depth=1
	subl	$2, %eax
	je	.LBB109_1097
	jmp	.LBB109_1098
.LBB109_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB109_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB109_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB109_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB109_1095
.LBB109_1094:                           # %if.then4716
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB109_1096
.LBB109_1095:                           # %if.else4717
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_1096:                           # %if.end4718
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1099
.LBB109_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB109_1099
.LBB109_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB109_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1101
.LBB109_1100:                           # %if.else4722
                                        #   in Loop: Header=BB109_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB109_1101:                           # %if.end4724
                                        #   in Loop: Header=BB109_171 Depth=1
	vmovsd	.LCPI109_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI109_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB109_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB109_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB109_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB109_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_1110
.LBB109_1106:                           # %if.else4743
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB109_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB109_1109
.LBB109_1108:                           # %if.else4748
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_1109:                           # %if.end4750
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1110
.LBB109_1110:                           # %if.end4751
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1112
.LBB109_1111:                           # %if.else4752
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_1112:                           # %if.end4754
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1113:                           # %for.cond4755
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB109_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB109_1115:                           # %for.cond4759
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB109_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB109_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1115
.LBB109_1118:                           # %for.end4785
                                        #   in Loop: Header=BB109_1113 Depth=2
	jmp	.LBB109_1119
.LBB109_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB109_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1113
.LBB109_1120:                           # %for.end4788
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB109_1122
.LBB109_1121:                           # %if.else4789
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB109_1122:                           # %if.end4792
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1123
.LBB109_1123:                           # %if.end4793
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB109_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB109_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1127:                           # %for.cond4806
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1129 Depth 3
                                        #         Child Loop BB109_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB109_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB109_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB109_1129:                           # %for.cond4810
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB109_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB109_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB109_1131:                           # %for.cond4814
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1127 Depth=2
                                        #       Parent Loop BB109_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB109_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB109_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB109_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB109_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB109_1134:                           # %if.end4826
                                        #   in Loop: Header=BB109_1131 Depth=4
	jmp	.LBB109_1135
.LBB109_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB109_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_1131
.LBB109_1136:                           # %for.end4829
                                        #   in Loop: Header=BB109_1129 Depth=3
	jmp	.LBB109_1137
.LBB109_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB109_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1129
.LBB109_1138:                           # %for.end4832
                                        #   in Loop: Header=BB109_1127 Depth=2
	jmp	.LBB109_1139
.LBB109_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB109_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1127
.LBB109_1140:                           # %for.end4835
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
	movl	$0, -24(%rbp)
.LBB109_1141:                           # %for.cond4840
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB109_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1143:                           # %for.cond4844
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB109_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB109_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1143
.LBB109_1146:                           # %for.end4877
                                        #   in Loop: Header=BB109_1141 Depth=2
	jmp	.LBB109_1147
.LBB109_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB109_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1141
.LBB109_1148:                           # %for.end4880
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1149
.LBB109_1149:                           # %if.end4881
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB109_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB109_1151:                           # %if.end4889
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -24(%rbp)
.LBB109_1152:                           # %for.cond4890
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB109_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1154:                           # %for.cond4894
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB109_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB109_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1154
.LBB109_1157:                           # %for.end4913
                                        #   in Loop: Header=BB109_1152 Depth=2
	jmp	.LBB109_1158
.LBB109_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB109_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1152
.LBB109_1159:                           # %for.end4916
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1160:                           # %for.cond4917
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB109_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB109_1162:                           # %for.cond4921
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB109_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB109_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1162
.LBB109_1165:                           # %for.end4947
                                        #   in Loop: Header=BB109_1160 Depth=2
	jmp	.LBB109_1166
.LBB109_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB109_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1160
.LBB109_1167:                           # %for.end4950
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB109_1169
.LBB109_1168:                           # %if.else4952
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB109_1169:                           # %if.end4954
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1170
.LBB109_1170:                           # %if.end4955
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB109_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -176(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB109_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1174:                           # %for.cond4968
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1176 Depth 3
                                        #         Child Loop BB109_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB109_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB109_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB109_1176:                           # %for.cond4972
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB109_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB109_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB109_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB109_1178:                           # %for.cond4976
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1174 Depth=2
                                        #       Parent Loop BB109_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB109_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB109_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB109_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB109_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB109_1181:                           # %if.end4988
                                        #   in Loop: Header=BB109_1178 Depth=4
	jmp	.LBB109_1182
.LBB109_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB109_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_1178
.LBB109_1183:                           # %for.end4991
                                        #   in Loop: Header=BB109_1176 Depth=3
	jmp	.LBB109_1184
.LBB109_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB109_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1176
.LBB109_1185:                           # %for.end4994
                                        #   in Loop: Header=BB109_1174 Depth=2
	jmp	.LBB109_1186
.LBB109_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB109_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1174
.LBB109_1187:                           # %for.end4997
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-176(%rbp), %eax
	movl	%eax, -176(%rbp)
.LBB109_1188:                           # %if.end5002
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-176(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB109_1189:                           # %for.cond5004
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB109_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB109_1191:                           # %for.cond5008
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB109_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB109_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1191
.LBB109_1194:                           # %for.end5034
                                        #   in Loop: Header=BB109_1189 Depth=2
	jmp	.LBB109_1195
.LBB109_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB109_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1189
.LBB109_1196:                           # %for.end5037
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -220(%rbp)
	jmp	.LBB109_1198
.LBB109_1197:                           # %if.else5039
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -392(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-392(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB109_1198:                           # %if.end5043
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1199
.LBB109_1199:                           # %if.end5044
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB109_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-124(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB109_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1202:                           # %for.cond5053
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB109_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB109_1204:                           # %for.cond5057
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB109_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB109_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1204
.LBB109_1207:                           # %for.end5084
                                        #   in Loop: Header=BB109_1202 Depth=2
	jmp	.LBB109_1208
.LBB109_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB109_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1202
.LBB109_1209:                           # %for.end5087
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -24(%rbp)
.LBB109_1211:                           # %for.cond5091
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB109_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1213:                           # %for.cond5095
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB109_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -172(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -228(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -216(%rbp)
	movl	-216(%rbp), %eax
	subl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-172(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-228(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB109_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1213
.LBB109_1216:                           # %for.end5194
                                        #   in Loop: Header=BB109_1211 Depth=2
	jmp	.LBB109_1217
.LBB109_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB109_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1211
.LBB109_1218:                           # %for.end5197
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1219
.LBB109_1219:                           # %if.end5198
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$10, best_mode
	movl	-124(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	$0, -24(%rbp)
.LBB109_1221:                           # %for.cond5204
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB109_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1223:                           # %for.cond5208
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB109_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB109_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1223
.LBB109_1226:                           # %for.end5232
                                        #   in Loop: Header=BB109_1221 Depth=2
	jmp	.LBB109_1227
.LBB109_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB109_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1221
.LBB109_1228:                           # %for.end5235
                                        #   in Loop: Header=BB109_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB109_1229:                           # %for.cond5237
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB109_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1231:                           # %for.cond5241
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB109_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB109_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1231
.LBB109_1234:                           # %for.end5265
                                        #   in Loop: Header=BB109_1229 Depth=2
	jmp	.LBB109_1235
.LBB109_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB109_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1229
.LBB109_1236:                           # %for.end5268
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB109_1237:                           # %for.cond5270
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB109_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1239:                           # %for.cond5274
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB109_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB109_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1239
.LBB109_1242:                           # %for.end5289
                                        #   in Loop: Header=BB109_1237 Depth=2
	jmp	.LBB109_1243
.LBB109_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB109_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1237
.LBB109_1244:                           # %for.end5292
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB109_1245:                           # %for.cond5296
                                        #   Parent Loop BB109_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB109_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB109_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB109_1247:                           # %for.cond5300
                                        #   Parent Loop BB109_171 Depth=1
                                        #     Parent Loop BB109_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -228(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -172(%rbp)
	movl	-172(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -216(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-172(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB109_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_1251
.LBB109_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB109_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB109_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB109_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB109_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_1257
.LBB109_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	movl	-172(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_1256
.LBB109_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-172(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB109_1247 Depth=3
.LBB109_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-228(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-124(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_1260
.LBB109_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB109_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB109_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB109_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB109_1266
.LBB109_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	movl	-228(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-124(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_1265
.LBB109_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-228(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-124(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB109_1247 Depth=3
.LBB109_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-216(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB109_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB109_1269
.LBB109_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB109_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB109_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB109_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB109_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB109_1275
.LBB109_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	movl	-216(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB109_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB109_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB109_1274
.LBB109_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-216(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB109_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB109_1247 Depth=3
.LBB109_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB109_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB109_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1247
.LBB109_1277:                           # %for.end5546
                                        #   in Loop: Header=BB109_1245 Depth=2
	jmp	.LBB109_1278
.LBB109_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB109_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1245
.LBB109_1279:                           # %for.end5549
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1280
.LBB109_1280:                           # %if.end5550
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1282
.LBB109_1281:                           # %if.else5551
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-220(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB109_1282:                           # %if.end5554
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1283
.LBB109_1283:                           # %if.end5555
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1284
.LBB109_1284:                           # %if.end5556
                                        #   in Loop: Header=BB109_171 Depth=1
	cmpl	$0, -260(%rbp)
	jne	.LBB109_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB109_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB109_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB109_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB109_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -264(%rbp)
.LBB109_1289:                           # %if.end5574
                                        #   in Loop: Header=BB109_171 Depth=1
	jmp	.LBB109_1290
.LBB109_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB109_171 Depth=1
	movl	-260(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -260(%rbp)
	jmp	.LBB109_171
.LBB109_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB109_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB109_1295
.LBB109_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB109_1299
.LBB109_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB109_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB109_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB109_1298:                           # %if.end5597
	jmp	.LBB109_1299
.LBB109_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB109_1395
.LBB109_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB109_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB109_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB109_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB109_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB109_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB109_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB109_1308:                           # %for.cond5623
                                        #   Parent Loop BB109_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB109_1308 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB109_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_1308
.LBB109_1311:                           # %for.end5639
                                        #   in Loop: Header=BB109_1306 Depth=1
	jmp	.LBB109_1312
.LBB109_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB109_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1306
.LBB109_1313:                           # %for.end5642
	jmp	.LBB109_1370
.LBB109_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB109_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB109_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB109_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB109_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB109_1318:                           # %for.cond5651
                                        #   Parent Loop BB109_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB109_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB109_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB109_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_1318
.LBB109_1321:                           # %for.end5680
                                        #   in Loop: Header=BB109_1316 Depth=1
	jmp	.LBB109_1322
.LBB109_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB109_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1316
.LBB109_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB109_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB109_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1326:                           # %for.cond5688
                                        #   Parent Loop BB109_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB109_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB109_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1326
.LBB109_1329:                           # %for.end5707
                                        #   in Loop: Header=BB109_1324 Depth=1
	jmp	.LBB109_1330
.LBB109_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB109_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1324
.LBB109_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB109_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB109_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB109_1335:                           # %for.cond5718
                                        #   Parent Loop BB109_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB109_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB109_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1335
.LBB109_1338:                           # %for.end5752
                                        #   in Loop: Header=BB109_1333 Depth=1
	jmp	.LBB109_1339
.LBB109_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB109_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1333
.LBB109_1340:                           # %for.end5755
	jmp	.LBB109_1341
.LBB109_1341:                           # %if.end5756
	jmp	.LBB109_1342
.LBB109_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB109_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB109_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB109_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB109_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB109_1347:                           # %for.cond5772
                                        #   Parent Loop BB109_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB109_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB109_1347 Depth=2
	movq	-400(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB109_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB109_1347
.LBB109_1350:                           # %for.end5788
                                        #   in Loop: Header=BB109_1345 Depth=1
	jmp	.LBB109_1351
.LBB109_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB109_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1345
.LBB109_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB109_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB109_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB109_1356
# %bb.1355:                             # %if.then5800
	movl	-316(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB109_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB109_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB109_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB109_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB109_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB109_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB109_1362:                           # %for.cond5816
                                        #   Parent Loop BB109_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB109_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB109_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB109_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB109_1362
.LBB109_1365:                           # %for.end5842
                                        #   in Loop: Header=BB109_1360 Depth=1
	jmp	.LBB109_1366
.LBB109_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB109_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB109_1360
.LBB109_1367:                           # %for.end5845
	jmp	.LBB109_1368
.LBB109_1368:                           # %if.end5846
	jmp	.LBB109_1369
.LBB109_1369:                           # %if.end5847
	jmp	.LBB109_1370
.LBB109_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB109_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB109_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB109_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB109_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB109_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -280(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB109_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB109_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB109_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB109_1382
.LBB109_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB109_1382
# %bb.1381:                             # %if.then5884
	leaq	-280(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB109_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB109_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-124(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB109_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB109_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB109_1392
.LBB109_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB109_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB109_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB109_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB109_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-448(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB109_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB109_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB109_1394:                           # %if.end5973
	jmp	.LBB109_1395
.LBB109_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB109_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB109_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB109_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB109_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB109_1401
.LBB109_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB109_1402
.LBB109_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB109_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB109_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB109_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB109_1406
.LBB109_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB109_1406:                           # %if.end6019
	jmp	.LBB109_1407
.LBB109_1407:                           # %if.end6020
	jmp	.LBB109_1408
.LBB109_1408:                           # %if.end6021
	jmp	.LBB109_1409
.LBB109_1409:                           # %if.end6022
	jmp	.LBB109_1410
.LBB109_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB109_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB109_1413
.LBB109_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB109_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB109_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB109_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB109_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB109_1420
	jmp	.LBB109_1428
.LBB109_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB109_1428
	jmp	.LBB109_1420
.LBB109_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB109_1420
	jmp	.LBB109_1428
.LBB109_1420:                           # %land.lhs.true6050
	movq	-432(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB109_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB109_1425
	jmp	.LBB109_1428
.LBB109_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB109_1424
# %bb.1423:                             # %cond.true6058
	movq	-432(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB109_1428
	jmp	.LBB109_1425
.LBB109_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB109_1425
	jmp	.LBB109_1428
.LBB109_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-284(%rbp), %eax
	je	.LBB109_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI109_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB109_1427:                           # %if.end6068
	jmp	.LBB109_1428
.LBB109_1428:                           # %if.end6069
	jmp	.LBB109_1429
.LBB109_1429:                           # %if.end6070
	jmp	.LBB109_1430
.LBB109_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB109_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB109_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB109_1452
.LBB109_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB109_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -264(%rbp)
	jne	.LBB109_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB109_1437:                           # %lor.end6142
.LBB109_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB109_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB109_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB109_1441:                           # %lor.end6166
.LBB109_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB109_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB109_1445:                           # %lor.end6191
.LBB109_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -264(%rbp)
	jne	.LBB109_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB109_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB109_1449:                           # %lor.end6216
.LBB109_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB109_1451:                           # %if.end6232
	jmp	.LBB109_1452
.LBB109_1452:                           # %if.end6233
	jmp	.LBB109_1464
.LBB109_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB109_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB109_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB109_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB109_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB109_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB109_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB109_1463:                           # %if.end6319
	jmp	.LBB109_1464
.LBB109_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB109_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB109_1466:                           # %if.end6327
	cmpl	$1633657016, -412(%rbp) # imm = 0x615FA0B8
	jne	.LBB109_1468
.LBB109_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_1467
.Lfunc_end109:
	.size	encode_one_macroblock.80, .Lfunc_end109-encode_one_macroblock.80
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.81 # -- Begin function SetModesAndRefframeForBlocks.81
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.81,@function
SetModesAndRefframeForBlocks.81:        # @SetModesAndRefframeForBlocks.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$563079611, -36(%rbp)   # imm = 0x218FE9BB
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB110_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB110_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB110_4
.LBB110_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB110_4
.LBB110_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB110_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB110_7
.LBB110_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB110_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB110_42
# %bb.8:                                # %if.end
	movq	.LJTI110_0(,%rax,8), %rax
	jmpq	*%rax
.LBB110_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB110_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB110_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB110_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB110_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB110_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB110_14
.LBB110_13:                             # %cond.false26
                                        #   in Loop: Header=BB110_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB110_14
.LBB110_14:                             # %cond.end27
                                        #   in Loop: Header=BB110_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB110_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_10
.LBB110_16:                             # %for.end
	jmp	.LBB110_43
.LBB110_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB110_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB110_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB110_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB110_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_18
.LBB110_21:                             # %for.end49
	jmp	.LBB110_43
.LBB110_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB110_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB110_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB110_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB110_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_23
.LBB110_26:                             # %for.end71
	jmp	.LBB110_43
.LBB110_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB110_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB110_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB110_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB110_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_28
.LBB110_31:                             # %for.end85
	jmp	.LBB110_43
.LBB110_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB110_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB110_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB110_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB110_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_33
.LBB110_36:                             # %for.end99
	jmp	.LBB110_43
.LBB110_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB110_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB110_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB110_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB110_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_38
.LBB110_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB110_43
.LBB110_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB110_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB110_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB110_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB110_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB110_70
.LBB110_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB110_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB110_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB110_49 Depth=1
	movl	$0, -4(%rbp)
.LBB110_51:                             # %for.cond131
                                        #   Parent Loop BB110_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB110_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB110_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB110_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB110_55
.LBB110_54:                             # %if.else174
                                        #   in Loop: Header=BB110_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB110_55:                             # %if.end195
                                        #   in Loop: Header=BB110_51 Depth=2
	jmp	.LBB110_56
.LBB110_56:                             # %for.inc196
                                        #   in Loop: Header=BB110_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_51
.LBB110_57:                             # %for.end198
                                        #   in Loop: Header=BB110_49 Depth=1
	jmp	.LBB110_58
.LBB110_58:                             # %for.inc199
                                        #   in Loop: Header=BB110_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_49
.LBB110_59:                             # %for.end201
	jmp	.LBB110_69
.LBB110_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB110_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB110_61 Depth=1
	movl	$0, -4(%rbp)
.LBB110_63:                             # %for.cond207
                                        #   Parent Loop BB110_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB110_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB110_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_63
.LBB110_66:                             # %for.end227
                                        #   in Loop: Header=BB110_61 Depth=1
	jmp	.LBB110_67
.LBB110_67:                             # %for.inc228
                                        #   in Loop: Header=BB110_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_61
.LBB110_68:                             # %for.end230
	jmp	.LBB110_69
.LBB110_69:                             # %if.end231
	jmp	.LBB110_127
.LBB110_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB110_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB110_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB110_72 Depth=1
	movl	$0, -4(%rbp)
.LBB110_74:                             # %for.cond239
                                        #   Parent Loop BB110_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB110_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB110_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB110_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB110_105
.LBB110_78:                             # %if.else298
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB110_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB110_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB110_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB110_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB110_90
.LBB110_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB110_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB110_90
.LBB110_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB110_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB110_90
.LBB110_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB110_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB110_90
.LBB110_89:                             # %if.then356
                                        #   in Loop: Header=BB110_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB110_104
.LBB110_90:                             # %if.else377
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB110_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB110_96
.LBB110_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB110_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB110_96
.LBB110_95:                             # %cond.true404
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB110_97
.LBB110_96:                             # %cond.false410
                                        #   in Loop: Header=BB110_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_97
.LBB110_97:                             # %cond.end411
                                        #   in Loop: Header=BB110_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB110_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB110_102
.LBB110_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB110_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB110_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB110_102
.LBB110_101:                            # %cond.true448
                                        #   in Loop: Header=BB110_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB110_103
.LBB110_102:                            # %cond.false454
                                        #   in Loop: Header=BB110_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_103
.LBB110_103:                            # %cond.end455
                                        #   in Loop: Header=BB110_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB110_104:                            # %if.end468
                                        #   in Loop: Header=BB110_74 Depth=2
	jmp	.LBB110_105
.LBB110_105:                            # %if.end469
                                        #   in Loop: Header=BB110_74 Depth=2
	jmp	.LBB110_106
.LBB110_106:                            # %for.inc470
                                        #   in Loop: Header=BB110_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_74
.LBB110_107:                            # %for.end472
                                        #   in Loop: Header=BB110_72 Depth=1
	jmp	.LBB110_108
.LBB110_108:                            # %for.inc473
                                        #   in Loop: Header=BB110_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_72
.LBB110_109:                            # %for.end475
	jmp	.LBB110_126
.LBB110_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB110_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB110_111 Depth=1
	movl	$0, -4(%rbp)
.LBB110_113:                            # %for.cond481
                                        #   Parent Loop BB110_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB110_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB110_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB110_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB110_120
.LBB110_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB110_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB110_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB110_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB110_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB110_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB110_120
.LBB110_119:                            # %cond.true519
                                        #   in Loop: Header=BB110_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB110_121
.LBB110_120:                            # %cond.false525
                                        #   in Loop: Header=BB110_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB110_121
.LBB110_121:                            # %cond.end526
                                        #   in Loop: Header=BB110_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB110_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_113
.LBB110_123:                            # %for.end541
                                        #   in Loop: Header=BB110_111 Depth=1
	jmp	.LBB110_124
.LBB110_124:                            # %for.inc542
                                        #   in Loop: Header=BB110_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_111
.LBB110_125:                            # %for.end544
	jmp	.LBB110_126
.LBB110_126:                            # %if.end545
	jmp	.LBB110_127
.LBB110_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB110_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB110_128 Depth=1
	movl	$0, -4(%rbp)
.LBB110_130:                            # %for.cond551
                                        #   Parent Loop BB110_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB110_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB110_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB110_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB110_134
.LBB110_133:                            # %cond.false584
                                        #   in Loop: Header=BB110_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB110_134
.LBB110_134:                            # %cond.end585
                                        #   in Loop: Header=BB110_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB110_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_130
.LBB110_136:                            # %for.end598
                                        #   in Loop: Header=BB110_128 Depth=1
	jmp	.LBB110_137
.LBB110_137:                            # %for.inc599
                                        #   in Loop: Header=BB110_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_128
.LBB110_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB110_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB110_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB110_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB110_140 Depth=1
	movl	$0, -4(%rbp)
.LBB110_142:                            # %for.cond608
                                        #   Parent Loop BB110_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB110_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB110_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB110_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB110_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB110_146
.LBB110_145:                            # %cond.false642
                                        #   in Loop: Header=BB110_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB110_146
.LBB110_146:                            # %cond.end643
                                        #   in Loop: Header=BB110_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB110_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_142
.LBB110_148:                            # %for.end657
                                        #   in Loop: Header=BB110_140 Depth=1
	jmp	.LBB110_149
.LBB110_149:                            # %for.inc658
                                        #   in Loop: Header=BB110_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_140
.LBB110_150:                            # %for.end660
	jmp	.LBB110_151
.LBB110_151:                            # %if.end661
	cmpl	$563079611, -36(%rbp)   # imm = 0x218FE9BB
	jne	.LBB110_153
.LBB110_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_152
.Lfunc_end110:
	.size	SetModesAndRefframeForBlocks.81, .Lfunc_end110-SetModesAndRefframeForBlocks.81
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI110_0:
	.quad	.LBB110_9
	.quad	.LBB110_17
	.quad	.LBB110_17
	.quad	.LBB110_17
	.quad	.LBB110_42
	.quad	.LBB110_42
	.quad	.LBB110_42
	.quad	.LBB110_42
	.quad	.LBB110_22
	.quad	.LBB110_27
	.quad	.LBB110_32
	.quad	.LBB110_42
	.quad	.LBB110_42
	.quad	.LBB110_37
                                        # -- End function
	.text
	.globl	RDCost_for_4x4IntraBlocks.82 # -- Begin function RDCost_for_4x4IntraBlocks.82
	.p2align	4, 0x90
	.type	RDCost_for_4x4IntraBlocks.82,@function
RDCost_for_4x4IntraBlocks.82:           # @RDCost_for_4x4IntraBlocks.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	$1901014521, -76(%rbp)  # imm = 0x714F2DF9
	movq	%rdi, -144(%rbp)
	movl	%esi, -8(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	vmovsd	%xmm0, -112(%rbp)
	vmovsd	%xmm1, -160(%rbp)
	movl	%r8d, -56(%rbp)
	movl	$0, -40(%rbp)
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%edx, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -48(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%eax, %ecx
	shll	$3, %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -44(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-88(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	$0, -68(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	leaq	-68(%rbp), %rdx
	movl	$1, %ecx
	callq	dct_luma
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB111_10
# %bb.1:                                # %if.then
	movl	$0, -16(%rbp)
.LBB111_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_4 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB111_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB111_4:                              # %for.cond15
                                        #   Parent Loop BB111_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_7
# %bb.5:                                # %for.body18
                                        #   in Loop: Header=BB111_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-80(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-128(%rbp), %rdx
	movl	-72(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB111_4 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_4
.LBB111_7:                              # %for.end
                                        #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_8
.LBB111_8:                              # %for.inc33
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB111_2
.LBB111_9:                              # %for.end35
	jmp	.LBB111_10
.LBB111_10:                             # %if.end
	movq	cs_cm, %rdi
	callq	store_coding_state
	movl	-56(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jne	.LBB111_12
# %bb.11:                               # %cond.true
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB111_16
.LBB111_12:                             # %cond.false
	movl	-36(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB111_14
# %bb.13:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB111_15
.LBB111_14:                             # %cond.false41
	movl	-36(%rbp), %eax
	subl	$1, %eax
.LBB111_15:                             # %cond.end
.LBB111_16:                             # %cond.end43
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movl	$4, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB111_18
# %bb.17:                               # %if.then49
	movq	-32(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB111_18:                             # %if.end50
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_20
# %bb.19:                               # %if.then57
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB111_21
.LBB111_20:                             # %if.else
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB111_21:                             # %if.end60
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB111_23
# %bb.22:                               # %if.then66
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %edx
	xorl	%edi, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_24
.LBB111_23:                             # %if.else69
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	$1, %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-4(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_24:                             # %if.end72
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm0
	vmovsd	-112(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB111_26
# %bb.25:                               # %if.then79
	vcvtsi2sdl	-4(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -96(%rbp)
	jmp	.LBB111_27
.LBB111_26:                             # %if.else81
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -96(%rbp)
.LBB111_27:                             # %return
	vmovsd	-96(%rbp), %xmm0        # xmm0 = mem[0],zero
	cmpl	$1901014521, -76(%rbp)  # imm = 0x714F2DF9
	jne	.LBB111_29
.LBB111_28:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -104(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-104(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB111_28
.Lfunc_end111:
	.size	RDCost_for_4x4IntraBlocks.82, .Lfunc_end111-RDCost_for_4x4IntraBlocks.82
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.83 # -- Begin function field_flag_inference.83
	.p2align	4, 0x90
	.type	field_flag_inference.83,@function
field_flag_inference.83:                # @field_flag_inference.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1780498940, -28(%rbp)  # imm = 0x6A2041FC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB112_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_6
.LBB112_2:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB112_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB112_5
.LBB112_4:                              # %if.else11
	movl	$0, -12(%rbp)
.LBB112_5:                              # %if.end
	jmp	.LBB112_6
.LBB112_6:                              # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$1780498940, -28(%rbp)  # imm = 0x6A2041FC
	jne	.LBB112_8
.LBB112_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_7
.Lfunc_end112:
	.size	field_flag_inference.83, .Lfunc_end112-field_flag_inference.83
	.cfi_endproc
                                        # -- End function
	.globl	set_stored_macroblock_parameters.84 # -- Begin function set_stored_macroblock_parameters.84
	.p2align	4, 0x90
	.type	set_stored_macroblock_parameters.84,@function
set_stored_macroblock_parameters.84:    # @set_stored_macroblock_parameters.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1518615780, -52(%rbp)  # imm = 0x5A843CE4
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	best_mode, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movq	104(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB113_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB113_4
.LBB113_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB113_4
.LBB113_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB113_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_7 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB113_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -4(%rbp)
.LBB113_7:                              # %for.cond9
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB113_12
# %bb.8:                                # %for.body12
                                        #   in Loop: Header=BB113_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-88(%rbp), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_10
# %bb.9:                                # %if.then
                                        #   in Loop: Header=BB113_7 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$8, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB113_10:                             # %if.end
                                        #   in Loop: Header=BB113_7 Depth=2
	jmp	.LBB113_11
.LBB113_11:                             # %for.inc
                                        #   in Loop: Header=BB113_7 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_7
.LBB113_12:                             # %for.end
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_13
.LBB113_13:                             # %for.inc33
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_5
.LBB113_14:                             # %for.end35
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB113_26
# %bb.15:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB113_16:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_18 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_25
# %bb.17:                               # %for.body42
                                        #   in Loop: Header=BB113_16 Depth=1
	movl	$0, -4(%rbp)
.LBB113_18:                             # %for.cond43
                                        #   Parent Loop BB113_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_23
# %bb.19:                               # %for.body46
                                        #   in Loop: Header=BB113_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	-64(%rbp), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_21
# %bb.20:                               # %if.then73
                                        #   in Loop: Header=BB113_18 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbU, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$1032, %rcx             # imm = 0x408
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-8(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbV, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movzwl	(%rcx,%rax,2), %eax
	movq	rdopt, %rcx
	addq	$2056, %rcx             # imm = 0x808
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB113_21:                             # %if.end92
                                        #   in Loop: Header=BB113_18 Depth=2
	jmp	.LBB113_22
.LBB113_22:                             # %for.inc93
                                        #   in Loop: Header=BB113_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_18
.LBB113_23:                             # %for.end95
                                        #   in Loop: Header=BB113_16 Depth=1
	jmp	.LBB113_24
.LBB113_24:                             # %for.inc96
                                        #   in Loop: Header=BB113_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_16
.LBB113_25:                             # %for.end98
	jmp	.LBB113_26
.LBB113_26:                             # %if.end99
	movq	cofAC, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-96(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
	movq	cofDC, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	%rax, cofDC
	movq	-104(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14144(%rcx)
	movl	cbp, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	cbp_blk, %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movl	-32(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_56
# %bb.27:                               # %if.then104
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3224(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
	movl	cbp, %eax
	movq	rdopt, %rcx
	movl	%eax, 3208(%rcx)
	movq	cbp_blk, %rax
	movq	rdopt, %rcx
	movq	%rax, 3216(%rcx)
	movl	-32(%rbp), %eax
	movq	rdopt, %rcx
	movl	%eax, 3096(%rcx)
	movq	-24(%rbp), %rax
	movl	592(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3348(%rcx)
	movq	-24(%rbp), %rax
	movl	596(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3352(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3344(%rcx)
	movl	$0, -4(%rbp)
.LBB113_28:                             # %for.cond113
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_30 Depth 2
                                        #       Child Loop BB113_32 Depth 3
                                        #         Child Loop BB113_34 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_43
# %bb.29:                               # %for.body117
                                        #   in Loop: Header=BB113_28 Depth=1
	movl	$0, -8(%rbp)
.LBB113_30:                             # %for.cond118
                                        #   Parent Loop BB113_28 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_32 Depth 3
                                        #         Child Loop BB113_34 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB113_41
# %bb.31:                               # %for.body121
                                        #   in Loop: Header=BB113_30 Depth=2
	movl	$0, -12(%rbp)
.LBB113_32:                             # %for.cond122
                                        #   Parent Loop BB113_28 Depth=1
                                        #     Parent Loop BB113_30 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB113_34 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB113_39
# %bb.33:                               # %for.body125
                                        #   in Loop: Header=BB113_32 Depth=3
	movl	$0, -28(%rbp)
.LBB113_34:                             # %for.cond126
                                        #   Parent Loop BB113_28 Depth=1
                                        #     Parent Loop BB113_30 Depth=2
                                        #       Parent Loop BB113_32 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -28(%rbp)
	jge	.LBB113_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB113_34 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3080(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc148
                                        #   in Loop: Header=BB113_34 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_34
.LBB113_37:                             # %for.end150
                                        #   in Loop: Header=BB113_32 Depth=3
	jmp	.LBB113_38
.LBB113_38:                             # %for.inc151
                                        #   in Loop: Header=BB113_32 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_32
.LBB113_39:                             # %for.end153
                                        #   in Loop: Header=BB113_30 Depth=2
	jmp	.LBB113_40
.LBB113_40:                             # %for.inc154
                                        #   in Loop: Header=BB113_30 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_30
.LBB113_41:                             # %for.end156
                                        #   in Loop: Header=BB113_28 Depth=1
	jmp	.LBB113_42
.LBB113_42:                             # %for.inc157
                                        #   in Loop: Header=BB113_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_28
.LBB113_43:                             # %for.end159
	movl	$0, -4(%rbp)
.LBB113_44:                             # %for.cond160
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_46 Depth 2
                                        #       Child Loop BB113_48 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB113_55
# %bb.45:                               # %for.body163
                                        #   in Loop: Header=BB113_44 Depth=1
	movl	$0, -12(%rbp)
.LBB113_46:                             # %for.cond164
                                        #   Parent Loop BB113_44 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_48 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB113_53
# %bb.47:                               # %for.body167
                                        #   in Loop: Header=BB113_46 Depth=2
	movl	$0, -28(%rbp)
.LBB113_48:                             # %for.cond168
                                        #   Parent Loop BB113_44 Depth=1
                                        #     Parent Loop BB113_46 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -28(%rbp)
	jge	.LBB113_51
# %bb.49:                               # %for.body171
                                        #   in Loop: Header=BB113_48 Depth=3
	movq	img, %rax
	movq	14144(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3088(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.50:                               # %for.inc186
                                        #   in Loop: Header=BB113_48 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB113_48
.LBB113_51:                             # %for.end188
                                        #   in Loop: Header=BB113_46 Depth=2
	jmp	.LBB113_52
.LBB113_52:                             # %for.inc189
                                        #   in Loop: Header=BB113_46 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_46
.LBB113_53:                             # %for.end191
                                        #   in Loop: Header=BB113_44 Depth=1
	jmp	.LBB113_54
.LBB113_54:                             # %for.inc192
                                        #   in Loop: Header=BB113_44 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_44
.LBB113_55:                             # %for.end194
	jmp	.LBB113_56
.LBB113_56:                             # %if.end195
	movl	$0, -4(%rbp)
.LBB113_57:                             # %for.cond196
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB113_62
# %bb.58:                               # %for.body199
                                        #   in Loop: Header=BB113_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_60
# %bb.59:                               # %if.then212
                                        #   in Loop: Header=BB113_57 Depth=1
	movslq	-4(%rbp), %rax
	movswl	b8mode(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3104(%rcx,%rdx,4)
	movslq	-4(%rbp), %rax
	movswl	b8pdir(,%rax,2), %eax
	movq	rdopt, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 3120(%rcx,%rdx,4)
.LBB113_60:                             # %if.end225
                                        #   in Loop: Header=BB113_57 Depth=1
	jmp	.LBB113_61
.LBB113_61:                             # %for.inc226
                                        #   in Loop: Header=BB113_57 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_57
.LBB113_62:                             # %for.end228
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB113_64
# %bb.63:                               # %if.then232
	movl	bi_pred_me, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB113_65
.LBB113_64:                             # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB113_65:                             # %if.end234
	cmpl	$8, -32(%rbp)
	jne	.LBB113_69
# %bb.66:                               # %land.lhs.true237
	cmpl	$0, luma_transform_size_8x8_flag
	jne	.LBB113_69
# %bb.67:                               # %land.lhs.true239
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB113_69
# %bb.68:                               # %if.then241
	movl	$1, %edi
	callq	RestoreMV8x8
.LBB113_69:                             # %if.end242
	movq	-24(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB113_73
# %bb.70:                               # %land.lhs.true246
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_73
# %bb.71:                               # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB113_73
# %bb.72:                               # %if.then253
	movq	-24(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB113_74
.LBB113_73:                             # %if.else254
	movl	luma_transform_size_8x8_flag, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB113_74:                             # %if.end256
	movq	-24(%rbp), %rax
	movl	572(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3336(%rcx)
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB113_77
# %bb.75:                               # %land.lhs.true261
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB113_77
# %bb.76:                               # %if.then265
	movl	-32(%rbp), %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movq	img, %rdx
	movslq	136(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movslq	140(%rdx), %rdx
	movb	%al, (%rcx,%rdx)
.LBB113_77:                             # %if.end271
	movl	$0, -8(%rbp)
.LBB113_78:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_80 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_112
# %bb.79:                               # %for.body275
                                        #   in Loop: Header=BB113_78 Depth=1
	movl	$0, -4(%rbp)
.LBB113_80:                             # %for.cond276
                                        #   Parent Loop BB113_78 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_110
# %bb.81:                               # %for.body279
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$1, 488(%rsi,%rax,4)
	je	.LBB113_85
# %bb.82:                               # %lor.lhs.false287
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_85
# %bb.83:                               # %lor.lhs.false291
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_85
# %bb.84:                               # %lor.lhs.false295
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB113_88
.LBB113_85:                             # %if.then299
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_87
# %bb.86:                               # %if.then339
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB113_87:                             # %if.end345
                                        #   in Loop: Header=BB113_80 Depth=2
	jmp	.LBB113_101
.LBB113_88:                             # %if.else346
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB113_97
# %bb.89:                               # %land.lhs.true349
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB113_97
# %bb.90:                               # %land.lhs.true359
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB113_97
# %bb.91:                               # %if.then363
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB113_93
# %bb.92:                               # %cond.true367
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB113_94
.LBB113_93:                             # %cond.false368
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB113_94:                             # %cond.end369
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	%rax, -80(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_96
# %bb.95:                               # %if.then451
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB113_96:                             # %if.end458
                                        #   in Loop: Header=BB113_80 Depth=2
	jmp	.LBB113_100
.LBB113_97:                             # %if.else459
                                        #   in Loop: Header=BB113_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_99
# %bb.98:                               # %if.then567
                                        #   in Loop: Header=BB113_80 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$frefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB113_99:                             # %if.end578
                                        #   in Loop: Header=BB113_80 Depth=2
	jmp	.LBB113_100
.LBB113_100:                            # %if.end579
                                        #   in Loop: Header=BB113_80 Depth=2
	jmp	.LBB113_101
.LBB113_101:                            # %if.end580
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	je	.LBB113_105
# %bb.102:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_105
# %bb.103:                              # %lor.lhs.false594
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_105
# %bb.104:                              # %lor.lhs.false598
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB113_108
.LBB113_105:                            # %if.then602
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_107
# %bb.106:                              # %if.then647
                                        #   in Loop: Header=BB113_80 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB113_107:                            # %if.end654
                                        #   in Loop: Header=BB113_80 Depth=2
	jmp	.LBB113_108
.LBB113_108:                            # %if.end655
                                        #   in Loop: Header=BB113_80 Depth=2
	jmp	.LBB113_109
.LBB113_109:                            # %for.inc656
                                        #   in Loop: Header=BB113_80 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_80
.LBB113_110:                            # %for.end658
                                        #   in Loop: Header=BB113_78 Depth=1
	jmp	.LBB113_111
.LBB113_111:                            # %for.inc659
                                        #   in Loop: Header=BB113_78 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_78
.LBB113_112:                            # %for.end661
	cmpl	$0, -40(%rbp)
	je	.LBB113_142
# %bb.113:                              # %if.then663
	movl	$0, -8(%rbp)
.LBB113_114:                            # %for.cond664
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_116 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_141
# %bb.115:                              # %for.body667
                                        #   in Loop: Header=BB113_114 Depth=1
	movl	$0, -4(%rbp)
.LBB113_116:                            # %for.cond668
                                        #   Parent Loop BB113_114 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_139
# %bb.117:                              # %for.body671
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_121
# %bb.118:                              # %lor.lhs.false675
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_121
# %bb.119:                              # %lor.lhs.false679
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB113_121
# %bb.120:                              # %lor.lhs.false683
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$0, 488(%rsi,%rax,4)
	jne	.LBB113_124
.LBB113_121:                            # %if.then693
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_123
# %bb.122:                              # %if.then738
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB113_123:                            # %if.end745
                                        #   in Loop: Header=BB113_116 Depth=2
	jmp	.LBB113_137
.LBB113_124:                            # %if.else746
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB113_133
# %bb.125:                              # %land.lhs.true749
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	cmpl	$2, 488(%rsi,%rax,4)
	jne	.LBB113_133
# %bb.126:                              # %land.lhs.true759
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB113_133
# %bb.127:                              # %if.then763
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB113_129
# %bb.128:                              # %cond.true768
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB113_130
.LBB113_129:                            # %cond.false770
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB113_130:                            # %cond.end772
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	%rax, -72(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-72(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_132
# %bb.131:                              # %if.then855
                                        #   in Loop: Header=BB113_116 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
.LBB113_132:                            # %if.end862
                                        #   in Loop: Header=BB113_116 Depth=2
	jmp	.LBB113_136
.LBB113_133:                            # %if.else863
                                        #   in Loop: Header=BB113_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %r9
	movq	%r9, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-36(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	movq	%r9, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movswq	(%rdx,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %r8d
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rsi,%rax,4), %rax
	movq	(%rdi,%rax,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %r9
	movslq	-4(%rbp), %rcx
	movswq	(%r9,%rcx,2), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	-24(%rbp), %rdi
	movl	-4(%rbp), %eax
	cltd
	idivl	%r8d
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%r8d
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movslq	472(%rdi,%rax,4), %rax
	movq	(%rsi,%rax,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_135
# %bb.134:                              # %if.then972
                                        #   in Loop: Header=BB113_116 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$3, %rax
	movabsq	$brefframe, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB113_135:                            # %if.end983
                                        #   in Loop: Header=BB113_116 Depth=2
	jmp	.LBB113_136
.LBB113_136:                            # %if.end984
                                        #   in Loop: Header=BB113_116 Depth=2
	jmp	.LBB113_137
.LBB113_137:                            # %if.end985
                                        #   in Loop: Header=BB113_116 Depth=2
	jmp	.LBB113_138
.LBB113_138:                            # %for.inc986
                                        #   in Loop: Header=BB113_116 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_116
.LBB113_139:                            # %for.end988
                                        #   in Loop: Header=BB113_114 Depth=1
	jmp	.LBB113_140
.LBB113_140:                            # %for.inc989
                                        #   in Loop: Header=BB113_114 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_114
.LBB113_141:                            # %for.end991
	jmp	.LBB113_142
.LBB113_142:                            # %if.end992
	movl	best_c_imode, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	best_i16offset, %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB113_152
# %bb.143:                              # %if.then997
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB113_144:                            # %for.cond998
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_146 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_151
# %bb.145:                              # %for.body1001
                                        #   in Loop: Header=BB113_144 Depth=1
	movl	$0, -8(%rbp)
.LBB113_146:                            # %for.cond1002
                                        #   Parent Loop BB113_144 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_149
# %bb.147:                              # %for.body1005
                                        #   in Loop: Header=BB113_146 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.148:                              # %for.inc1027
                                        #   in Loop: Header=BB113_146 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_146
.LBB113_149:                            # %for.end1030
                                        #   in Loop: Header=BB113_144 Depth=1
	jmp	.LBB113_150
.LBB113_150:                            # %for.inc1031
                                        #   in Loop: Header=BB113_144 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_144
.LBB113_151:                            # %for.end1033
	jmp	.LBB113_175
.LBB113_152:                            # %if.else1034
	cmpl	$9, -32(%rbp)
	je	.LBB113_163
# %bb.153:                              # %land.lhs.true1037
	cmpl	$13, -32(%rbp)
	je	.LBB113_163
# %bb.154:                              # %if.then1040
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB113_155:                            # %for.cond1042
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_157 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_162
# %bb.156:                              # %for.body1047
                                        #   in Loop: Header=BB113_155 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB113_157:                            # %for.cond1049
                                        #   Parent Loop BB113_155 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_160
# %bb.158:                              # %for.body1054
                                        #   in Loop: Header=BB113_157 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.159:                              # %for.inc1062
                                        #   in Loop: Header=BB113_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_157
.LBB113_160:                            # %for.end1065
                                        #   in Loop: Header=BB113_155 Depth=1
	jmp	.LBB113_161
.LBB113_161:                            # %for.inc1066
                                        #   in Loop: Header=BB113_155 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_155
.LBB113_162:                            # %for.end1068
	jmp	.LBB113_174
.LBB113_163:                            # %if.else1069
	cmpl	$9, -32(%rbp)
	jne	.LBB113_173
# %bb.164:                              # %if.then1072
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB113_165:                            # %for.cond1074
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_167 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_172
# %bb.166:                              # %for.body1079
                                        #   in Loop: Header=BB113_165 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB113_167:                            # %for.cond1081
                                        #   Parent Loop BB113_165 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_170
# %bb.168:                              # %for.body1086
                                        #   in Loop: Header=BB113_167 Depth=2
	movslq	-12(%rbp), %rax
	movl	b4_ipredmode(,%rax,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b4_intra_pred_modes(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.169:                              # %for.inc1098
                                        #   in Loop: Header=BB113_167 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_167
.LBB113_170:                            # %for.end1101
                                        #   in Loop: Header=BB113_165 Depth=1
	jmp	.LBB113_171
.LBB113_171:                            # %for.inc1102
                                        #   in Loop: Header=BB113_165 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_165
.LBB113_172:                            # %for.end1104
	jmp	.LBB113_173
.LBB113_173:                            # %if.end1105
	jmp	.LBB113_174
.LBB113_174:                            # %if.end1106
	jmp	.LBB113_175
.LBB113_175:                            # %if.end1107
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB113_185
# %bb.176:                              # %if.then1111
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB113_177:                            # %for.cond1112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_179 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB113_184
# %bb.178:                              # %for.body1115
                                        #   in Loop: Header=BB113_177 Depth=1
	movl	$0, -8(%rbp)
.LBB113_179:                            # %for.cond1116
                                        #   Parent Loop BB113_177 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB113_182
# %bb.180:                              # %for.body1119
                                        #   in Loop: Header=BB113_179 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$4, %rax
	movabsq	$b8_ipredmode8x8, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	movl	b8_intra_pred_modes8x8(,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.181:                              # %for.inc1138
                                        #   in Loop: Header=BB113_179 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_179
.LBB113_182:                            # %for.end1141
                                        #   in Loop: Header=BB113_177 Depth=1
	jmp	.LBB113_183
.LBB113_183:                            # %for.inc1142
                                        #   in Loop: Header=BB113_177 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_177
.LBB113_184:                            # %for.end1144
	jmp	.LBB113_185
.LBB113_185:                            # %if.end1145
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB113_195
# %bb.186:                              # %if.then1148
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB113_187:                            # %for.cond1150
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_189 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_194
# %bb.188:                              # %for.body1155
                                        #   in Loop: Header=BB113_187 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB113_189:                            # %for.cond1157
                                        #   Parent Loop BB113_187 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_192
# %bb.190:                              # %for.body1162
                                        #   in Loop: Header=BB113_189 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movq	3136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	332(%rax,%rcx,4), %eax
	movq	rdopt, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 3144(%rcx,%rdx,4)
# %bb.191:                              # %for.inc1178
                                        #   in Loop: Header=BB113_189 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_189
.LBB113_192:                            # %for.end1181
                                        #   in Loop: Header=BB113_187 Depth=1
	jmp	.LBB113_193
.LBB113_193:                            # %for.inc1182
                                        #   in Loop: Header=BB113_187 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_187
.LBB113_194:                            # %for.end1184
	movq	-24(%rbp), %rax
	movl	524(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3332(%rcx)
	movq	img, %rax
	movl	72380(%rax), %eax
	movq	rdopt, %rcx
	movl	%eax, 3328(%rcx)
.LBB113_195:                            # %if.end1189
	movq	-24(%rbp), %rdi
	movl	-40(%rbp), %esi
	callq	SetMotionVectorsMB
	cmpl	$1518615780, -52(%rbp)  # imm = 0x5A843CE4
	jne	.LBB113_197
.LBB113_196:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_197:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_196
.Lfunc_end113:
	.size	set_stored_macroblock_parameters.84, .Lfunc_end113-set_stored_macroblock_parameters.84
	.cfi_endproc
                                        # -- End function
	.globl	StoreMVBlock8x8.85      # -- Begin function StoreMVBlock8x8.85
	.p2align	4, 0x90
	.type	StoreMVBlock8x8.85,@function
StoreMVBlock8x8.85:                     # @StoreMVBlock8x8.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	16(%rbp), %eax
	movl	$405775079, -68(%rbp)   # imm = 0x182FA2E7
	movl	%edi, -12(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -56(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -48(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -32(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	cmpl	$0, 16(%rbp)
	jne	.LBB114_12
# %bb.1:                                # %if.then
	cmpl	$0, -56(%rbp)
	jl	.LBB114_11
# %bb.2:                                # %if.then5
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_3:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_5 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_10
# %bb.4:                                # %for.body
                                        #   in Loop: Header=BB114_3 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_5:                              # %for.cond7
                                        #   Parent Loop BB114_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_8
# %bb.6:                                # %for.body9
                                        #   in Loop: Header=BB114_5 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	32(%rax), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.7:                                # %for.inc
                                        #   in Loop: Header=BB114_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_5
.LBB114_8:                              # %for.end
                                        #   in Loop: Header=BB114_3 Depth=1
	jmp	.LBB114_9
.LBB114_9:                              # %for.inc76
                                        #   in Loop: Header=BB114_3 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_3
.LBB114_10:                             # %for.end78
	jmp	.LBB114_11
.LBB114_11:                             # %if.end
	jmp	.LBB114_46
.LBB114_12:                             # %if.else
	cmpl	$0, -56(%rbp)
	jne	.LBB114_22
# %bb.13:                               # %if.then80
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_14:                             # %for.cond81
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_16 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_21
# %bb.15:                               # %for.body83
                                        #   in Loop: Header=BB114_14 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_16:                             # %for.cond84
                                        #   Parent Loop BB114_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_19
# %bb.17:                               # %for.body86
                                        #   in Loop: Header=BB114_16 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$all_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	movabsq	$pred_mv8x8, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rsi,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, 2(%rdx,%rcx,4)
# %bb.18:                               # %for.inc159
                                        #   in Loop: Header=BB114_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_16
.LBB114_19:                             # %for.end161
                                        #   in Loop: Header=BB114_14 Depth=1
	jmp	.LBB114_20
.LBB114_20:                             # %for.inc162
                                        #   in Loop: Header=BB114_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_14
.LBB114_21:                             # %for.end164
	jmp	.LBB114_45
.LBB114_22:                             # %if.else165
	cmpl	$1, -56(%rbp)
	jne	.LBB114_32
# %bb.23:                               # %if.then167
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_24:                             # %for.cond168
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_26 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_31
# %bb.25:                               # %for.body170
                                        #   in Loop: Header=BB114_24 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_26:                             # %for.cond171
                                        #   Parent Loop BB114_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_29
# %bb.27:                               # %for.body173
                                        #   in Loop: Header=BB114_26 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.28:                               # %for.inc246
                                        #   in Loop: Header=BB114_26 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_26
.LBB114_29:                             # %for.end248
                                        #   in Loop: Header=BB114_24 Depth=1
	jmp	.LBB114_30
.LBB114_30:                             # %for.inc249
                                        #   in Loop: Header=BB114_24 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_24
.LBB114_31:                             # %for.end251
	jmp	.LBB114_44
.LBB114_32:                             # %if.else252
	cmpl	$2, -56(%rbp)
	jne	.LBB114_42
# %bb.33:                               # %if.then254
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB114_34:                             # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_36 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_41
# %bb.35:                               # %for.body257
                                        #   in Loop: Header=BB114_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB114_36:                             # %for.cond258
                                        #   Parent Loop BB114_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB114_39
# %bb.37:                               # %for.body260
                                        #   in Loop: Header=BB114_36 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movabsq	$all_mv8x8, %rcx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rsi,%rdx,4)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	2(%rax), %ax
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rcx, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%ax, 2(%rsi,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-8(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-4(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-16(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movw	(%rax), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movabsq	$pred_mv8x8, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-48(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	(%rdx), %rdx
	movslq	-20(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	movq	%rcx, %rdi
	addq	%rsi, %rdi
	addq	$64, %rdi
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movw	%dx, (%rdi,%rsi,4)
	movq	-40(%rbp), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movw	2(%rdx), %dx
	movslq	-12(%rbp), %rsi
	shlq	$7, %rsi
	addq	%rsi, %rcx
	addq	$64, %rcx
	movslq	-8(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	movw	%dx, 2(%rcx,%rsi,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addq	$64, %rsi
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movw	%cx, (%rsi,%rdx,4)
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	2(%rcx), %cx
	movslq	-12(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rax
	addq	$64, %rax
	movslq	-8(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movw	%cx, 2(%rax,%rdx,4)
# %bb.38:                               # %for.inc405
                                        #   in Loop: Header=BB114_36 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_36
.LBB114_39:                             # %for.end407
                                        #   in Loop: Header=BB114_34 Depth=1
	jmp	.LBB114_40
.LBB114_40:                             # %for.inc408
                                        #   in Loop: Header=BB114_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_34
.LBB114_41:                             # %for.end410
	jmp	.LBB114_43
.LBB114_42:                             # %if.else411
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB114_43:                             # %if.end412
	jmp	.LBB114_44
.LBB114_44:                             # %if.end413
	jmp	.LBB114_45
.LBB114_45:                             # %if.end414
	jmp	.LBB114_46
.LBB114_46:                             # %if.end415
	cmpl	$405775079, -68(%rbp)   # imm = 0x182FA2E7
	jne	.LBB114_48
.LBB114_47:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_48:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_47
.Lfunc_end114:
	.size	StoreMVBlock8x8.85, .Lfunc_end114-StoreMVBlock8x8.85
	.cfi_endproc
                                        # -- End function
	.globl	field_flag_inference.86 # -- Begin function field_flag_inference.86
	.p2align	4, 0x90
	.type	field_flag_inference.86,@function
field_flag_inference.86:                # @field_flag_inference.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$465540325, -28(%rbp)   # imm = 0x1BBF94E5
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	cmpl	$0, 552(%rax)
	je	.LBB115_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	536(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_6
.LBB115_2:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$0, 556(%rax)
	je	.LBB115_4
# %bb.3:                                # %if.then6
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	540(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	532(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_5
.LBB115_4:                              # %if.else11
	movl	$0, -12(%rbp)
.LBB115_5:                              # %if.end
	jmp	.LBB115_6
.LBB115_6:                              # %if.end12
	movl	-12(%rbp), %ebx
	cmpl	$465540325, -28(%rbp)   # imm = 0x1BBF94E5
	jne	.LBB115_8
.LBB115_7:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_7
.Lfunc_end115:
	.size	field_flag_inference.86, .Lfunc_end115-field_flag_inference.86
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.87 # -- Begin function SetModesAndRefframeForBlocks.87
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.87,@function
SetModesAndRefframeForBlocks.87:        # @SetModesAndRefframeForBlocks.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$564594493, -40(%rbp)   # imm = 0x21A7073D
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB116_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB116_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB116_4
.LBB116_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB116_4
.LBB116_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB116_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB116_7
.LBB116_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB116_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB116_42
# %bb.8:                                # %if.end
	movq	.LJTI116_0(,%rax,8), %rax
	jmpq	*%rax
.LBB116_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB116_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB116_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB116_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB116_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB116_14
.LBB116_13:                             # %cond.false26
                                        #   in Loop: Header=BB116_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB116_14
.LBB116_14:                             # %cond.end27
                                        #   in Loop: Header=BB116_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB116_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_10
.LBB116_16:                             # %for.end
	jmp	.LBB116_43
.LBB116_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB116_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB116_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB116_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_18
.LBB116_21:                             # %for.end49
	jmp	.LBB116_43
.LBB116_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB116_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB116_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB116_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_23
.LBB116_26:                             # %for.end71
	jmp	.LBB116_43
.LBB116_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB116_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB116_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB116_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_28
.LBB116_31:                             # %for.end85
	jmp	.LBB116_43
.LBB116_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB116_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB116_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB116_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_33
.LBB116_36:                             # %for.end99
	jmp	.LBB116_43
.LBB116_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB116_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB116_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB116_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB116_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_38
.LBB116_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB116_43
.LBB116_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB116_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB116_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB116_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB116_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB116_70
.LBB116_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB116_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB116_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB116_49 Depth=1
	movl	$0, -4(%rbp)
.LBB116_51:                             # %for.cond131
                                        #   Parent Loop BB116_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB116_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB116_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB116_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_55
.LBB116_54:                             # %if.else174
                                        #   in Loop: Header=BB116_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB116_55:                             # %if.end195
                                        #   in Loop: Header=BB116_51 Depth=2
	jmp	.LBB116_56
.LBB116_56:                             # %for.inc196
                                        #   in Loop: Header=BB116_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_51
.LBB116_57:                             # %for.end198
                                        #   in Loop: Header=BB116_49 Depth=1
	jmp	.LBB116_58
.LBB116_58:                             # %for.inc199
                                        #   in Loop: Header=BB116_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_49
.LBB116_59:                             # %for.end201
	jmp	.LBB116_69
.LBB116_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB116_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB116_61 Depth=1
	movl	$0, -4(%rbp)
.LBB116_63:                             # %for.cond207
                                        #   Parent Loop BB116_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB116_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB116_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_63
.LBB116_66:                             # %for.end227
                                        #   in Loop: Header=BB116_61 Depth=1
	jmp	.LBB116_67
.LBB116_67:                             # %for.inc228
                                        #   in Loop: Header=BB116_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_61
.LBB116_68:                             # %for.end230
	jmp	.LBB116_69
.LBB116_69:                             # %if.end231
	jmp	.LBB116_127
.LBB116_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB116_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB116_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB116_72 Depth=1
	movl	$0, -4(%rbp)
.LBB116_74:                             # %for.cond239
                                        #   Parent Loop BB116_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB116_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB116_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB116_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB116_105
.LBB116_78:                             # %if.else298
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB116_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB116_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB116_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB116_90
.LBB116_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB116_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB116_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB116_90
.LBB116_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB116_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB116_90
.LBB116_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB116_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB116_90
.LBB116_89:                             # %if.then356
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB116_104
.LBB116_90:                             # %if.else377
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB116_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB116_96
.LBB116_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB116_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB116_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB116_96
.LBB116_95:                             # %cond.true404
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB116_97
.LBB116_96:                             # %cond.false410
                                        #   in Loop: Header=BB116_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB116_97
.LBB116_97:                             # %cond.end411
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB116_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB116_102
.LBB116_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB116_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB116_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB116_102
.LBB116_101:                            # %cond.true448
                                        #   in Loop: Header=BB116_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB116_103
.LBB116_102:                            # %cond.false454
                                        #   in Loop: Header=BB116_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB116_103
.LBB116_103:                            # %cond.end455
                                        #   in Loop: Header=BB116_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB116_104:                            # %if.end468
                                        #   in Loop: Header=BB116_74 Depth=2
	jmp	.LBB116_105
.LBB116_105:                            # %if.end469
                                        #   in Loop: Header=BB116_74 Depth=2
	jmp	.LBB116_106
.LBB116_106:                            # %for.inc470
                                        #   in Loop: Header=BB116_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_74
.LBB116_107:                            # %for.end472
                                        #   in Loop: Header=BB116_72 Depth=1
	jmp	.LBB116_108
.LBB116_108:                            # %for.inc473
                                        #   in Loop: Header=BB116_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_72
.LBB116_109:                            # %for.end475
	jmp	.LBB116_126
.LBB116_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB116_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB116_111 Depth=1
	movl	$0, -4(%rbp)
.LBB116_113:                            # %for.cond481
                                        #   Parent Loop BB116_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB116_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB116_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB116_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB116_120
.LBB116_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB116_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB116_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB116_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB116_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB116_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB116_120
.LBB116_119:                            # %cond.true519
                                        #   in Loop: Header=BB116_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB116_121
.LBB116_120:                            # %cond.false525
                                        #   in Loop: Header=BB116_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB116_121
.LBB116_121:                            # %cond.end526
                                        #   in Loop: Header=BB116_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB116_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_113
.LBB116_123:                            # %for.end541
                                        #   in Loop: Header=BB116_111 Depth=1
	jmp	.LBB116_124
.LBB116_124:                            # %for.inc542
                                        #   in Loop: Header=BB116_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_111
.LBB116_125:                            # %for.end544
	jmp	.LBB116_126
.LBB116_126:                            # %if.end545
	jmp	.LBB116_127
.LBB116_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB116_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB116_128 Depth=1
	movl	$0, -4(%rbp)
.LBB116_130:                            # %for.cond551
                                        #   Parent Loop BB116_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB116_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB116_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB116_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB116_134
.LBB116_133:                            # %cond.false584
                                        #   in Loop: Header=BB116_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB116_134
.LBB116_134:                            # %cond.end585
                                        #   in Loop: Header=BB116_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB116_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_130
.LBB116_136:                            # %for.end598
                                        #   in Loop: Header=BB116_128 Depth=1
	jmp	.LBB116_137
.LBB116_137:                            # %for.inc599
                                        #   in Loop: Header=BB116_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_128
.LBB116_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB116_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB116_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB116_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB116_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB116_140 Depth=1
	movl	$0, -4(%rbp)
.LBB116_142:                            # %for.cond608
                                        #   Parent Loop BB116_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB116_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB116_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB116_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB116_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB116_146
.LBB116_145:                            # %cond.false642
                                        #   in Loop: Header=BB116_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB116_146
.LBB116_146:                            # %cond.end643
                                        #   in Loop: Header=BB116_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB116_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_142
.LBB116_148:                            # %for.end657
                                        #   in Loop: Header=BB116_140 Depth=1
	jmp	.LBB116_149
.LBB116_149:                            # %for.inc658
                                        #   in Loop: Header=BB116_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB116_140
.LBB116_150:                            # %for.end660
	jmp	.LBB116_151
.LBB116_151:                            # %if.end661
	cmpl	$564594493, -40(%rbp)   # imm = 0x21A7073D
	jne	.LBB116_153
.LBB116_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_152
.Lfunc_end116:
	.size	SetModesAndRefframeForBlocks.87, .Lfunc_end116-SetModesAndRefframeForBlocks.87
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI116_0:
	.quad	.LBB116_9
	.quad	.LBB116_17
	.quad	.LBB116_17
	.quad	.LBB116_17
	.quad	.LBB116_42
	.quad	.LBB116_42
	.quad	.LBB116_42
	.quad	.LBB116_42
	.quad	.LBB116_22
	.quad	.LBB116_27
	.quad	.LBB116_32
	.quad	.LBB116_42
	.quad	.LBB116_42
	.quad	.LBB116_37
                                        # -- End function
	.text
	.globl	SetRefAndMotionVectors.88 # -- Begin function SetRefAndMotionVectors.88
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.88,@function
SetRefAndMotionVectors.88:              # @SetRefAndMotionVectors.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$863073084, -68(%rbp)   # imm = 0x3371733C
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB117_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB117_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB117_4
.LBB117_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB117_5
.LBB117_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB117_5
.LBB117_5:                              # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -36(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB117_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB117_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB117_9
.LBB117_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB117_9
.LBB117_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB117_19
# %bb.10:                               # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB117_11 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_13:                             # %for.cond34
                                        #   Parent Loop BB117_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB117_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB117_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_13
.LBB117_16:                             # %for.end
                                        #   in Loop: Header=BB117_11 Depth=1
	jmp	.LBB117_17
.LBB117_17:                             # %for.inc117
                                        #   in Loop: Header=BB117_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_11
.LBB117_18:                             # %for.end119
	jmp	.LBB117_64
.LBB117_19:                             # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB117_29
# %bb.20:                               # %if.then121
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB117_21 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_23:                             # %for.cond126
                                        #   Parent Loop BB117_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB117_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB117_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_23
.LBB117_26:                             # %for.end211
                                        #   in Loop: Header=BB117_21 Depth=1
	jmp	.LBB117_27
.LBB117_27:                             # %for.inc212
                                        #   in Loop: Header=BB117_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_21
.LBB117_28:                             # %for.end214
	jmp	.LBB117_64
.LBB117_29:                             # %if.else
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB117_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB117_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB117_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB117_30 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB117_32:                             # %for.cond219
                                        #   Parent Loop BB117_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB117_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB117_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB117_35:                             # %if.end255
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB117_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB117_46
.LBB117_37:                             # %if.then261
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB117_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB117_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB117_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB117_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_43
.LBB117_42:                             # %cond.false274
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_43:                             # %cond.end275
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB117_45
.LBB117_44:                             # %if.else342
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_45:                             # %if.end424
                                        #   in Loop: Header=BB117_32 Depth=2
	jmp	.LBB117_47
.LBB117_46:                             # %if.else425
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB117_47:                             # %if.end468
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB117_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB117_58
.LBB117_49:                             # %if.then474
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB117_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB117_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB117_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB117_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB117_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB117_55
.LBB117_54:                             # %cond.false490
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB117_55:                             # %cond.end492
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB117_57
.LBB117_56:                             # %if.else559
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB117_57:                             # %if.end641
                                        #   in Loop: Header=BB117_32 Depth=2
	jmp	.LBB117_59
.LBB117_58:                             # %if.else642
                                        #   in Loop: Header=BB117_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB117_59:                             # %if.end685
                                        #   in Loop: Header=BB117_32 Depth=2
	jmp	.LBB117_60
.LBB117_60:                             # %for.inc686
                                        #   in Loop: Header=BB117_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB117_32
.LBB117_61:                             # %for.end688
                                        #   in Loop: Header=BB117_30 Depth=1
	jmp	.LBB117_62
.LBB117_62:                             # %for.inc689
                                        #   in Loop: Header=BB117_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB117_30
.LBB117_63:                             # %for.end691
	jmp	.LBB117_64
.LBB117_64:                             # %if.end692
	cmpl	$863073084, -68(%rbp)   # imm = 0x3371733C
	jne	.LBB117_66
.LBB117_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_65
.Lfunc_end117:
	.size	SetRefAndMotionVectors.88, .Lfunc_end117-SetRefAndMotionVectors.88
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.89 # -- Begin function Intra16x16_Mode_Decision.89
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.89,@function
Intra16x16_Mode_Decision.89:            # @Intra16x16_Mode_Decision.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$322104391, -56(%rbp)   # imm = 0x1332EC47
	movq	%rdi, -72(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -64(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB118_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB118_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB118_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB118_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB118_4 Depth=1
	movl	$0, -8(%rbp)
.LBB118_6:                              # %for.cond4
                                        #   Parent Loop BB118_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB118_6 Depth=2
	movq	-64(%rbp), %rax
	movq	(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-64(%rbp), %rax
	movq	8(%rax), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB118_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_6
.LBB118_9:                              # %for.end
                                        #   in Loop: Header=BB118_4 Depth=1
	jmp	.LBB118_10
.LBB118_10:                             # %for.inc87
                                        #   in Loop: Header=BB118_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_4
.LBB118_11:                             # %for.end89
	jmp	.LBB118_12
.LBB118_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-72(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB118_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB118_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB118_14 Depth=1
	movl	$0, -8(%rbp)
.LBB118_16:                             # %for.cond99
                                        #   Parent Loop BB118_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB118_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB118_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_16
.LBB118_19:                             # %for.end123
                                        #   in Loop: Header=BB118_14 Depth=1
	jmp	.LBB118_20
.LBB118_20:                             # %for.inc124
                                        #   in Loop: Header=BB118_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_14
.LBB118_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB118_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB118_22 Depth=1
	movl	$0, -8(%rbp)
.LBB118_24:                             # %for.cond132
                                        #   Parent Loop BB118_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB118_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB118_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_24
.LBB118_27:                             # %for.end156
                                        #   in Loop: Header=BB118_22 Depth=1
	jmp	.LBB118_28
.LBB118_28:                             # %for.inc157
                                        #   in Loop: Header=BB118_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_22
.LBB118_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB118_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB118_30 Depth=1
	movl	$0, -8(%rbp)
.LBB118_32:                             # %for.cond165
                                        #   Parent Loop BB118_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB118_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB118_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_32
.LBB118_35:                             # %for.end180
                                        #   in Loop: Header=BB118_30 Depth=1
	jmp	.LBB118_36
.LBB118_36:                             # %for.inc181
                                        #   in Loop: Header=BB118_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_30
.LBB118_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-72(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB118_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB118_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB118_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB118_38 Depth=1
	movl	$0, -8(%rbp)
.LBB118_40:                             # %for.cond190
                                        #   Parent Loop BB118_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB118_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB118_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_44
.LBB118_43:                             # %cond.false
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB118_44:                             # %cond.end
                                        #   in Loop: Header=BB118_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB118_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB118_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB118_50
.LBB118_46:                             # %cond.false246
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_49
.LBB118_48:                             # %cond.false260
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB118_49:                             # %cond.end271
                                        #   in Loop: Header=BB118_40 Depth=2
.LBB118_50:                             # %cond.end273
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB118_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB118_53
.LBB118_52:                             # %cond.false295
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB118_53:                             # %cond.end305
                                        #   in Loop: Header=BB118_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB118_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB118_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB118_59
.LBB118_55:                             # %cond.false311
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_58
.LBB118_57:                             # %cond.false324
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB118_58:                             # %cond.end334
                                        #   in Loop: Header=BB118_40 Depth=2
.LBB118_59:                             # %cond.end336
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-28(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB118_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB118_62
.LBB118_61:                             # %cond.false359
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB118_62:                             # %cond.end370
                                        #   in Loop: Header=BB118_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB118_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB118_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB118_68
.LBB118_64:                             # %cond.false376
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB118_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB118_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB118_67
.LBB118_66:                             # %cond.false390
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB118_67:                             # %cond.end401
                                        #   in Loop: Header=BB118_40 Depth=2
.LBB118_68:                             # %cond.end403
                                        #   in Loop: Header=BB118_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB118_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB118_40
.LBB118_70:                             # %for.end416
                                        #   in Loop: Header=BB118_38 Depth=1
	jmp	.LBB118_71
.LBB118_71:                             # %for.inc417
                                        #   in Loop: Header=BB118_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB118_38
.LBB118_72:                             # %for.end419
	jmp	.LBB118_73
.LBB118_73:                             # %if.end420
	cmpl	$322104391, -56(%rbp)   # imm = 0x1332EC47
	jne	.LBB118_75
.LBB118_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_74
.Lfunc_end118:
	.size	Intra16x16_Mode_Decision.89, .Lfunc_end118-Intra16x16_Mode_Decision.89
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.90   # -- Begin function SetMotionVectorsMB.90
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.90,@function
SetMotionVectorsMB.90:                  # @SetMotionVectorsMB.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1508504208, -68(%rbp)  # imm = 0x59E9F290
	movq	%rdi, -64(%rbp)
	movl	%esi, -72(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB119_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB119_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	$0, -4(%rbp)
.LBB119_3:                              # %for.cond3
                                        #   Parent Loop BB119_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB119_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB119_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB119_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB119_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB119_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB119_10
.LBB119_9:                              # %cond.false
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB119_10:                             # %cond.end
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB119_11:                             # %if.end
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB119_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB119_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB119_15
.LBB119_14:                             # %if.else
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB119_15:                             # %if.end89
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_29
.LBB119_16:                             # %if.else90
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB119_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_28
.LBB119_18:                             # %if.else122
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB119_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB119_27
.LBB119_20:                             # %if.else174
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB119_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB119_26
.LBB119_22:                             # %if.else226
                                        #   in Loop: Header=BB119_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB119_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB119_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB119_25
.LBB119_24:                             # %if.else298
                                        #   in Loop: Header=BB119_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB119_25:                             # %if.end299
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_26
.LBB119_26:                             # %if.end300
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_27
.LBB119_27:                             # %if.end301
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_28
.LBB119_28:                             # %if.end302
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_29
.LBB119_29:                             # %if.end303
                                        #   in Loop: Header=BB119_3 Depth=2
	jmp	.LBB119_30
.LBB119_30:                             # %for.inc
                                        #   in Loop: Header=BB119_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_3
.LBB119_31:                             # %for.end
                                        #   in Loop: Header=BB119_1 Depth=1
	jmp	.LBB119_32
.LBB119_32:                             # %for.inc304
                                        #   in Loop: Header=BB119_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_1
.LBB119_33:                             # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB119_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB119_35:                             # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB119_37 Depth 2
                                        #       Child Loop BB119_39 Depth 3
                                        #         Child Loop BB119_41 Depth 4
                                        #           Child Loop BB119_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB119_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	$0, -8(%rbp)
.LBB119_37:                             # %for.cond313
                                        #   Parent Loop BB119_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB119_39 Depth 3
                                        #         Child Loop BB119_41 Depth 4
                                        #           Child Loop BB119_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB119_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB119_37 Depth=2
	movl	$0, -20(%rbp)
.LBB119_39:                             # %for.cond317
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB119_41 Depth 4
                                        #           Child Loop BB119_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB119_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	$0, -24(%rbp)
.LBB119_41:                             # %for.cond321
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB119_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB119_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB119_41 Depth=4
	movl	$0, -28(%rbp)
.LBB119_43:                             # %for.cond325
                                        #   Parent Loop BB119_35 Depth=1
                                        #     Parent Loop BB119_37 Depth=2
                                        #       Parent Loop BB119_39 Depth=3
                                        #         Parent Loop BB119_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB119_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB119_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB119_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB119_43
.LBB119_46:                             # %for.end423
                                        #   in Loop: Header=BB119_41 Depth=4
	jmp	.LBB119_47
.LBB119_47:                             # %for.inc424
                                        #   in Loop: Header=BB119_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB119_41
.LBB119_48:                             # %for.end426
                                        #   in Loop: Header=BB119_39 Depth=3
	jmp	.LBB119_49
.LBB119_49:                             # %for.inc427
                                        #   in Loop: Header=BB119_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB119_39
.LBB119_50:                             # %for.end429
                                        #   in Loop: Header=BB119_37 Depth=2
	jmp	.LBB119_51
.LBB119_51:                             # %for.inc430
                                        #   in Loop: Header=BB119_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_37
.LBB119_52:                             # %for.end432
                                        #   in Loop: Header=BB119_35 Depth=1
	jmp	.LBB119_53
.LBB119_53:                             # %for.inc433
                                        #   in Loop: Header=BB119_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB119_35
.LBB119_54:                             # %for.end435
	jmp	.LBB119_55
.LBB119_55:                             # %if.end436
	cmpl	$1508504208, -68(%rbp)  # imm = 0x59E9F290
	jne	.LBB119_57
.LBB119_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_56
.Lfunc_end119:
	.size	SetMotionVectorsMB.90, .Lfunc_end119-SetMotionVectorsMB.90
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframeForBlocks.91 # -- Begin function SetModesAndRefframeForBlocks.91
	.p2align	4, 0x90
	.type	SetModesAndRefframeForBlocks.91,@function
SetModesAndRefframeForBlocks.91:        # @SetModesAndRefframeForBlocks.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$843097526, -36(%rbp)   # imm = 0x3240A5B6
	movl	%edi, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB120_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB120_4
.LBB120_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB120_4
.LBB120_4:                              # %cond.end
	movl	%ecx, -32(%rbp)
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	cmpl	$1, -12(%rbp)
	jne	.LBB120_6
# %bb.5:                                # %if.then
	movq	img, %rax
	movslq	-12(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	jmp	.LBB120_7
.LBB120_6:                              # %if.else
	movq	-24(%rbp), %rax
	movl	$0, 580(%rax)
.LBB120_7:                              # %if.end
	movl	-12(%rbp), %eax
	movq	%rax, %rcx
	subq	$13, %rcx
	ja	.LBB120_42
# %bb.8:                                # %if.end
	movq	.LJTI120_0(,%rax,8), %rax
	jmpq	*%rax
.LBB120_9:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB120_10:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_16
# %bb.11:                               # %for.body
                                        #   in Loop: Header=BB120_10 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	cmpl	$0, -28(%rbp)
	je	.LBB120_13
# %bb.12:                               # %cond.true17
                                        #   in Loop: Header=BB120_10 Depth=1
	movq	direct_pdir, %rcx
	movq	img, %rax
	movl	144(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	shll	$1, %edx
	addl	%edx, %esi
	movslq	%esi, %rax
	movq	(%rcx,%rax,8), %rcx
	movq	img, %rax
	movl	148(%rax), %esi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %esi
	movslq	%esi, %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB120_14
.LBB120_13:                             # %cond.false26
                                        #   in Loop: Header=BB120_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB120_14
.LBB120_14:                             # %cond.end27
                                        #   in Loop: Header=BB120_10 Depth=1
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB120_10 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_10
.LBB120_16:                             # %for.end
	jmp	.LBB120_43
.LBB120_17:                             # %sw.bb31
	movl	$0, -4(%rbp)
.LBB120_18:                             # %for.cond32
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_21
# %bb.19:                               # %for.body35
                                        #   in Loop: Header=BB120_18 Depth=1
	movl	-12(%rbp), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.20:                               # %for.inc47
                                        #   in Loop: Header=BB120_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_18
.LBB120_21:                             # %for.end49
	jmp	.LBB120_43
.LBB120_22:                             # %sw.bb50
	movl	$0, -4(%rbp)
.LBB120_23:                             # %for.cond51
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_26
# %bb.24:                               # %for.body54
                                        #   in Loop: Header=BB120_23 Depth=1
	movslq	-4(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.25:                               # %for.inc69
                                        #   in Loop: Header=BB120_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_23
.LBB120_26:                             # %for.end71
	jmp	.LBB120_43
.LBB120_27:                             # %sw.bb72
	movl	$0, -4(%rbp)
.LBB120_28:                             # %for.cond73
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_31
# %bb.29:                               # %for.body76
                                        #   in Loop: Header=BB120_28 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$11, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.30:                               # %for.inc83
                                        #   in Loop: Header=BB120_28 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_28
.LBB120_31:                             # %for.end85
	jmp	.LBB120_43
.LBB120_32:                             # %sw.bb86
	movl	$0, -4(%rbp)
.LBB120_33:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_36
# %bb.34:                               # %for.body90
                                        #   in Loop: Header=BB120_33 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$0, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.35:                               # %for.inc97
                                        #   in Loop: Header=BB120_33 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_33
.LBB120_36:                             # %for.end99
	jmp	.LBB120_43
.LBB120_37:                             # %sw.bb100
	movl	$0, -4(%rbp)
.LBB120_38:                             # %for.cond101
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB120_41
# %bb.39:                               # %for.body104
                                        #   in Loop: Header=BB120_38 Depth=1
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$13, 472(%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	$-1, 488(%rax,%rcx,4)
# %bb.40:                               # %for.inc111
                                        #   in Loop: Header=BB120_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_38
.LBB120_41:                             # %for.end113
	movq	-24(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB120_43
.LBB120_42:                             # %sw.default
	movabsq	$.L.str, %rdi
	movb	$0, %al
	callq	printf
	movl	$1, %edi
	callq	exit
.LBB120_43:                             # %sw.epilog
	cmpl	$0, -12(%rbp)
	je	.LBB120_47
# %bb.44:                               # %lor.lhs.false
	cmpl	$9, -12(%rbp)
	je	.LBB120_47
# %bb.45:                               # %lor.lhs.false118
	cmpl	$10, -12(%rbp)
	je	.LBB120_47
# %bb.46:                               # %lor.lhs.false121
	cmpl	$13, -12(%rbp)
	jne	.LBB120_70
.LBB120_47:                             # %if.then124
	cmpl	$0, -28(%rbp)
	je	.LBB120_60
# %bb.48:                               # %if.then126
	movl	$0, -8(%rbp)
.LBB120_49:                             # %for.cond127
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_51 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_59
# %bb.50:                               # %for.body130
                                        #   in Loop: Header=BB120_49 Depth=1
	movl	$0, -4(%rbp)
.LBB120_51:                             # %for.cond131
                                        #   Parent Loop BB120_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_57
# %bb.52:                               # %for.body134
                                        #   in Loop: Header=BB120_51 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB120_54
# %bb.53:                               # %if.then136
                                        #   in Loop: Header=BB120_51 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB120_55
.LBB120_54:                             # %if.else174
                                        #   in Loop: Header=BB120_51 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
.LBB120_55:                             # %if.end195
                                        #   in Loop: Header=BB120_51 Depth=2
	jmp	.LBB120_56
.LBB120_56:                             # %for.inc196
                                        #   in Loop: Header=BB120_51 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_51
.LBB120_57:                             # %for.end198
                                        #   in Loop: Header=BB120_49 Depth=1
	jmp	.LBB120_58
.LBB120_58:                             # %for.inc199
                                        #   in Loop: Header=BB120_49 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_49
.LBB120_59:                             # %for.end201
	jmp	.LBB120_69
.LBB120_60:                             # %if.else202
	movl	$0, -8(%rbp)
.LBB120_61:                             # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_63 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_68
# %bb.62:                               # %for.body206
                                        #   in Loop: Header=BB120_61 Depth=1
	movl	$0, -4(%rbp)
.LBB120_63:                             # %for.cond207
                                        #   Parent Loop BB120_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_66
# %bb.64:                               # %for.body210
                                        #   in Loop: Header=BB120_63 Depth=2
	xorl	%eax, %eax
	movl	-12(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	cmovel	%eax, %ecx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.65:                               # %for.inc225
                                        #   in Loop: Header=BB120_63 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_63
.LBB120_66:                             # %for.end227
                                        #   in Loop: Header=BB120_61 Depth=1
	jmp	.LBB120_67
.LBB120_67:                             # %for.inc228
                                        #   in Loop: Header=BB120_61 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_61
.LBB120_68:                             # %for.end230
	jmp	.LBB120_69
.LBB120_69:                             # %if.end231
	jmp	.LBB120_127
.LBB120_70:                             # %if.else232
	cmpl	$0, -28(%rbp)
	je	.LBB120_110
# %bb.71:                               # %if.then234
	movl	$0, -8(%rbp)
.LBB120_72:                             # %for.cond235
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_74 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_109
# %bb.73:                               # %for.body238
                                        #   in Loop: Header=BB120_72 Depth=1
	movl	$0, -4(%rbp)
.LBB120_74:                             # %for.cond239
                                        #   Parent Loop BB120_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_107
# %bb.75:                               # %for.body242
                                        #   in Loop: Header=BB120_74 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	cmpl	$8, -12(%rbp)
	jne	.LBB120_78
# %bb.76:                               # %land.lhs.true253
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB120_78
# %bb.77:                               # %if.then259
                                        #   in Loop: Header=BB120_74 Depth=2
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB120_105
.LBB120_78:                             # %if.else298
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB120_90
# %bb.79:                               # %land.lhs.true301
                                        #   in Loop: Header=BB120_74 Depth=2
	movq	-24(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB120_90
# %bb.80:                               # %land.lhs.true304
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB120_82
# %bb.81:                               # %lor.lhs.false312
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB120_90
.LBB120_82:                             # %land.lhs.true320
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB120_85
# %bb.83:                               # %lor.lhs.false323
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB120_85
# %bb.84:                               # %lor.lhs.false329
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB120_90
.LBB120_85:                             # %land.lhs.true331
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB120_87
# %bb.86:                               # %lor.lhs.false339
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB120_90
.LBB120_87:                             # %land.lhs.true347
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB120_89
# %bb.88:                               # %lor.lhs.false350
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB120_90
.LBB120_89:                             # %if.then356
                                        #   in Loop: Header=BB120_74 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	jmp	.LBB120_104
.LBB120_90:                             # %if.else377
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB120_92
# %bb.91:                               # %lor.lhs.false385
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB120_96
.LBB120_92:                             # %land.lhs.true393
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB120_95
# %bb.93:                               # %lor.lhs.false396
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB120_95
# %bb.94:                               # %lor.lhs.false402
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB120_96
.LBB120_95:                             # %cond.true404
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB120_97
.LBB120_96:                             # %cond.false410
                                        #   in Loop: Header=BB120_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB120_97
.LBB120_97:                             # %cond.end411
                                        #   in Loop: Header=BB120_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$1, %eax
	je	.LBB120_99
# %bb.98:                               # %lor.lhs.false431
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB120_102
.LBB120_99:                             # %land.lhs.true439
                                        #   in Loop: Header=BB120_74 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB120_101
# %bb.100:                              # %lor.lhs.false442
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB120_102
.LBB120_101:                            # %cond.true448
                                        #   in Loop: Header=BB120_74 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8bwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB120_103
.LBB120_102:                            # %cond.false454
                                        #   in Loop: Header=BB120_74 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB120_103
.LBB120_103:                            # %cond.end455
                                        #   in Loop: Header=BB120_74 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
.LBB120_104:                            # %if.end468
                                        #   in Loop: Header=BB120_74 Depth=2
	jmp	.LBB120_105
.LBB120_105:                            # %if.end469
                                        #   in Loop: Header=BB120_74 Depth=2
	jmp	.LBB120_106
.LBB120_106:                            # %for.inc470
                                        #   in Loop: Header=BB120_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_74
.LBB120_107:                            # %for.end472
                                        #   in Loop: Header=BB120_72 Depth=1
	jmp	.LBB120_108
.LBB120_108:                            # %for.inc473
                                        #   in Loop: Header=BB120_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_72
.LBB120_109:                            # %for.end475
	jmp	.LBB120_126
.LBB120_110:                            # %if.else476
	movl	$0, -8(%rbp)
.LBB120_111:                            # %for.cond477
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_113 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_125
# %bb.112:                              # %for.body480
                                        #   in Loop: Header=BB120_111 Depth=1
	movl	$0, -4(%rbp)
.LBB120_113:                            # %for.cond481
                                        #   Parent Loop BB120_111 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_123
# %bb.114:                              # %for.body484
                                        #   in Loop: Header=BB120_113 Depth=2
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -16(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$0, %eax
	je	.LBB120_116
# %bb.115:                              # %lor.lhs.false500
                                        #   in Loop: Header=BB120_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8pdir, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	cmpl	$2, %eax
	jne	.LBB120_120
.LBB120_116:                            # %land.lhs.true508
                                        #   in Loop: Header=BB120_113 Depth=2
	cmpl	$8, -12(%rbp)
	jne	.LBB120_119
# %bb.117:                              # %lor.lhs.false511
                                        #   in Loop: Header=BB120_113 Depth=2
	movslq	-16(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	cmpl	$0, %eax
	jne	.LBB120_119
# %bb.118:                              # %lor.lhs.false517
                                        #   in Loop: Header=BB120_113 Depth=2
	cmpl	$0, -28(%rbp)
	jne	.LBB120_120
.LBB120_119:                            # %cond.true519
                                        #   in Loop: Header=BB120_113 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$3, %rax
	movabsq	$best8x8fwref, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movswl	(%rcx,%rax,2), %eax
	jmp	.LBB120_121
.LBB120_120:                            # %cond.false525
                                        #   in Loop: Header=BB120_113 Depth=2
	movl	$4294967295, %eax       # imm = 0xFFFFFFFF
	jmp	.LBB120_121
.LBB120_121:                            # %cond.end526
                                        #   in Loop: Header=BB120_113 Depth=2
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.122:                              # %for.inc539
                                        #   in Loop: Header=BB120_113 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_113
.LBB120_123:                            # %for.end541
                                        #   in Loop: Header=BB120_111 Depth=1
	jmp	.LBB120_124
.LBB120_124:                            # %for.inc542
                                        #   in Loop: Header=BB120_111 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_111
.LBB120_125:                            # %for.end544
	jmp	.LBB120_126
.LBB120_126:                            # %if.end545
	jmp	.LBB120_127
.LBB120_127:                            # %if.end546
	movl	$0, -8(%rbp)
.LBB120_128:                            # %for.cond547
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_130 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_138
# %bb.129:                              # %for.body550
                                        #   in Loop: Header=BB120_128 Depth=1
	movl	$0, -4(%rbp)
.LBB120_130:                            # %for.cond551
                                        #   Parent Loop BB120_128 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_136
# %bb.131:                              # %for.body554
                                        #   in Loop: Header=BB120_130 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB120_133
# %bb.132:                              # %cond.true568
                                        #   in Loop: Header=BB120_130 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB120_134
.LBB120_133:                            # %cond.false584
                                        #   in Loop: Header=BB120_130 Depth=2
	movq	$-1, %rax
	jmp	.LBB120_134
.LBB120_134:                            # %cond.end585
                                        #   in Loop: Header=BB120_130 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.135:                              # %for.inc596
                                        #   in Loop: Header=BB120_130 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_130
.LBB120_136:                            # %for.end598
                                        #   in Loop: Header=BB120_128 Depth=1
	jmp	.LBB120_137
.LBB120_137:                            # %for.inc599
                                        #   in Loop: Header=BB120_128 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_128
.LBB120_138:                            # %for.end601
	cmpl	$0, -28(%rbp)
	je	.LBB120_151
# %bb.139:                              # %if.then603
	movl	$0, -8(%rbp)
.LBB120_140:                            # %for.cond604
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB120_142 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB120_150
# %bb.141:                              # %for.body607
                                        #   in Loop: Header=BB120_140 Depth=1
	movl	$0, -4(%rbp)
.LBB120_142:                            # %for.cond608
                                        #   Parent Loop BB120_140 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB120_148
# %bb.143:                              # %for.body611
                                        #   in Loop: Header=BB120_142 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jl	.LBB120_145
# %bb.144:                              # %cond.true625
                                        #   in Loop: Header=BB120_142 Depth=2
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-32(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	jmp	.LBB120_146
.LBB120_145:                            # %cond.false642
                                        #   in Loop: Header=BB120_142 Depth=2
	movq	$-1, %rax
	jmp	.LBB120_146
.LBB120_146:                            # %cond.end643
                                        #   in Loop: Header=BB120_142 Depth=2
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.147:                              # %for.inc655
                                        #   in Loop: Header=BB120_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB120_142
.LBB120_148:                            # %for.end657
                                        #   in Loop: Header=BB120_140 Depth=1
	jmp	.LBB120_149
.LBB120_149:                            # %for.inc658
                                        #   in Loop: Header=BB120_140 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB120_140
.LBB120_150:                            # %for.end660
	jmp	.LBB120_151
.LBB120_151:                            # %if.end661
	cmpl	$843097526, -36(%rbp)   # imm = 0x3240A5B6
	jne	.LBB120_153
.LBB120_152:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_153:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_152
.Lfunc_end120:
	.size	SetModesAndRefframeForBlocks.91, .Lfunc_end120-SetModesAndRefframeForBlocks.91
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI120_0:
	.quad	.LBB120_9
	.quad	.LBB120_17
	.quad	.LBB120_17
	.quad	.LBB120_17
	.quad	.LBB120_42
	.quad	.LBB120_42
	.quad	.LBB120_42
	.quad	.LBB120_42
	.quad	.LBB120_22
	.quad	.LBB120_27
	.quad	.LBB120_32
	.quad	.LBB120_42
	.quad	.LBB120_42
	.quad	.LBB120_37
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_macroblocks.92
.LCPI121_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.globl	RDCost_for_macroblocks.92
	.p2align	4, 0x90
	.type	RDCost_for_macroblocks.92,@function
RDCost_for_macroblocks.92:              # @RDCost_for_macroblocks.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$433940388, -100(%rbp)  # imm = 0x19DD67A4
	vmovsd	%xmm0, -88(%rbp)
	movl	%edi, -20(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -64(%rbp)
	movl	$0, -28(%rbp)
	movq	$0, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB121_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB121_3
.LBB121_2:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB121_3
.LBB121_3:                              # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -128(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -76(%rbp)
	movq	img, %rcx
	cmpl	$2, 24(%rcx)
	je	.LBB121_5
# %bb.4:                                # %land.rhs
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	setne	%al
.LBB121_5:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	-20(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$0, -76(%rbp)
	je	.LBB121_18
# %bb.6:                                # %land.lhs.true
	cmpl	$0, -20(%rbp)
	jne	.LBB121_18
# %bb.7:                                # %if.then
	movq	img, %rax
	movl	152(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	sarl	$2, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -16(%rbp)
.LBB121_8:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_10 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB121_17
# %bb.9:                                # %for.body
                                        #   in Loop: Header=BB121_8 Depth=1
	movl	$0, -12(%rbp)
.LBB121_10:                             # %for.cond17
                                        #   Parent Loop BB121_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB121_15
# %bb.11:                               # %for.body20
                                        #   in Loop: Header=BB121_10 Depth=2
	movq	direct_pdir, %rax
	movl	-92(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-104(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB121_13
# %bb.12:                               # %if.then29
	movl	$0, -60(%rbp)
	jmp	.LBB121_177
.LBB121_13:                             # %if.end
                                        #   in Loop: Header=BB121_10 Depth=2
	jmp	.LBB121_14
.LBB121_14:                             # %for.inc
                                        #   in Loop: Header=BB121_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_10
.LBB121_15:                             # %for.end
                                        #   in Loop: Header=BB121_8 Depth=1
	jmp	.LBB121_16
.LBB121_16:                             # %for.inc30
                                        #   in Loop: Header=BB121_8 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_8
.LBB121_17:                             # %for.end32
	jmp	.LBB121_18
.LBB121_18:                             # %if.end33
	cmpl	$8, -20(%rbp)
	jge	.LBB121_24
# %bb.19:                               # %if.then36
	movb	$0, %al
	callq	LumaResidualCoding
	cmpl	$0, -20(%rbp)
	jne	.LBB121_23
# %bb.20:                               # %land.lhs.true39
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_23
# %bb.21:                               # %land.lhs.true42
	movq	-48(%rbp), %rax
	cmpl	$1, 572(%rax)
	jne	.LBB121_23
# %bb.22:                               # %if.then45
	movl	$0, -60(%rbp)
	jmp	.LBB121_177
.LBB121_23:                             # %if.end46
	jmp	.LBB121_76
.LBB121_24:                             # %if.else
	cmpl	$8, -20(%rbp)
	jne	.LBB121_26
# %bb.25:                               # %if.then49
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	jmp	.LBB121_75
.LBB121_26:                             # %if.else50
	cmpl	$9, -20(%rbp)
	jne	.LBB121_48
# %bb.27:                               # %if.then53
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_47
# %bb.28:                               # %if.then56
	movl	$0, -16(%rbp)
.LBB121_29:                             # %for.cond57
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_31 Depth 2
                                        #       Child Loop BB121_33 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB121_42
# %bb.30:                               # %for.body60
                                        #   in Loop: Header=BB121_29 Depth=1
	movl	$0, -12(%rbp)
.LBB121_31:                             # %for.cond61
                                        #   Parent Loop BB121_29 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_33 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB121_40
# %bb.32:                               # %for.body64
                                        #   in Loop: Header=BB121_31 Depth=2
	movl	$0, -24(%rbp)
.LBB121_33:                             # %for.cond65
                                        #   Parent Loop BB121_29 Depth=1
                                        #     Parent Loop BB121_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB121_38
# %bb.34:                               # %for.body68
                                        #   in Loop: Header=BB121_33 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB121_36
# %bb.35:                               # %if.then76
                                        #   in Loop: Header=BB121_33 Depth=3
	movl	$2, -40(%rbp)
.LBB121_36:                             # %if.end77
                                        #   in Loop: Header=BB121_33 Depth=3
	jmp	.LBB121_37
.LBB121_37:                             # %for.inc78
                                        #   in Loop: Header=BB121_33 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_33
.LBB121_38:                             # %for.end80
                                        #   in Loop: Header=BB121_31 Depth=2
	jmp	.LBB121_39
.LBB121_39:                             # %for.inc81
                                        #   in Loop: Header=BB121_31 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_31
.LBB121_40:                             # %for.end83
                                        #   in Loop: Header=BB121_29 Depth=1
	jmp	.LBB121_41
.LBB121_41:                             # %for.inc84
                                        #   in Loop: Header=BB121_29 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_29
.LBB121_42:                             # %for.end86
	movl	$0, -32(%rbp)
.LBB121_43:                             # %for.cond87
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB121_46
# %bb.44:                               # %for.body90
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.45:                               # %for.inc92
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB121_43
.LBB121_46:                             # %for.end94
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB121_47:                             # %if.end97
	jmp	.LBB121_74
.LBB121_48:                             # %if.else98
	cmpl	$10, -20(%rbp)
	jne	.LBB121_50
# %bb.49:                               # %if.then101
	movq	-48(%rbp), %rdi
	leaq	-64(%rbp), %rsi
	callq	Intra16x16_Mode_Decision
	jmp	.LBB121_73
.LBB121_50:                             # %if.else102
	cmpl	$13, -20(%rbp)
	jne	.LBB121_72
# %bb.51:                               # %if.then105
	vmovsd	-88(%rbp), %xmm0        # xmm0 = mem[0],zero
	leaq	-36(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_71
# %bb.52:                               # %if.then110
	movl	$0, -16(%rbp)
.LBB121_53:                             # %for.cond111
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_55 Depth 2
                                        #       Child Loop BB121_57 Depth 3
	cmpl	$2, -16(%rbp)
	jge	.LBB121_66
# %bb.54:                               # %for.body114
                                        #   in Loop: Header=BB121_53 Depth=1
	movl	$0, -12(%rbp)
.LBB121_55:                             # %for.cond115
                                        #   Parent Loop BB121_53 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_57 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB121_64
# %bb.56:                               # %for.body118
                                        #   in Loop: Header=BB121_55 Depth=2
	movl	$0, -24(%rbp)
.LBB121_57:                             # %for.cond119
                                        #   Parent Loop BB121_53 Depth=1
                                        #     Parent Loop BB121_55 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -24(%rbp)
	jge	.LBB121_62
# %bb.58:                               # %for.body122
                                        #   in Loop: Header=BB121_57 Depth=3
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB121_60
# %bb.59:                               # %if.then130
                                        #   in Loop: Header=BB121_57 Depth=3
	movl	$2, -40(%rbp)
.LBB121_60:                             # %if.end131
                                        #   in Loop: Header=BB121_57 Depth=3
	jmp	.LBB121_61
.LBB121_61:                             # %for.inc132
                                        #   in Loop: Header=BB121_57 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_57
.LBB121_62:                             # %for.end134
                                        #   in Loop: Header=BB121_55 Depth=2
	jmp	.LBB121_63
.LBB121_63:                             # %for.inc135
                                        #   in Loop: Header=BB121_55 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_55
.LBB121_64:                             # %for.end137
                                        #   in Loop: Header=BB121_53 Depth=1
	jmp	.LBB121_65
.LBB121_65:                             # %for.inc138
                                        #   in Loop: Header=BB121_53 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_53
.LBB121_66:                             # %for.end140
	movl	$0, -32(%rbp)
.LBB121_67:                             # %for.cond141
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$2, -32(%rbp)
	jge	.LBB121_70
# %bb.68:                               # %for.body144
                                        #   in Loop: Header=BB121_67 Depth=1
	movl	-32(%rbp), %edi
	movl	-40(%rbp), %esi
	callq	dct_chroma_DC
	movl	%eax, -40(%rbp)
# %bb.69:                               # %for.inc146
                                        #   in Loop: Header=BB121_67 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB121_67
.LBB121_70:                             # %for.end148
	movl	-40(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
.LBB121_71:                             # %if.end152
	jmp	.LBB121_72
.LBB121_72:                             # %if.end153
	jmp	.LBB121_73
.LBB121_73:                             # %if.end154
	jmp	.LBB121_74
.LBB121_74:                             # %if.end155
	jmp	.LBB121_75
.LBB121_75:                             # %if.end156
	jmp	.LBB121_76
.LBB121_76:                             # %if.end157
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB121_82
# %bb.77:                               # %land.lhs.true160
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB121_82
# %bb.78:                               # %if.then164
	cmpl	$10, -20(%rbp)
	jne	.LBB121_80
# %bb.79:                               # %cond.true167
	movl	-64(%rbp), %edi
	jmp	.LBB121_81
.LBB121_80:                             # %cond.false168
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	jmp	.LBB121_81
.LBB121_81:                             # %cond.end169
	callq	compute_residue_mb
.LBB121_82:                             # %if.end171
	cmpl	$10, -20(%rbp)
	jne	.LBB121_92
# %bb.83:                               # %if.then174
	movl	$0, -16(%rbp)
.LBB121_84:                             # %for.cond175
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_86 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB121_91
# %bb.85:                               # %for.body178
                                        #   in Loop: Header=BB121_84 Depth=1
	movl	$0, -12(%rbp)
.LBB121_86:                             # %for.cond179
                                        #   Parent Loop BB121_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB121_89
# %bb.87:                               # %for.body182
                                        #   in Loop: Header=BB121_86 Depth=2
	movq	img, %rax
	addq	$4792, %rax             # imm = 0x12B8
	movslq	-64(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc194
                                        #   in Loop: Header=BB121_86 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_86
.LBB121_89:                             # %for.end196
                                        #   in Loop: Header=BB121_84 Depth=1
	jmp	.LBB121_90
.LBB121_90:                             # %for.inc197
                                        #   in Loop: Header=BB121_84 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_84
.LBB121_91:                             # %for.end199
	jmp	.LBB121_101
.LBB121_92:                             # %if.else200
	movl	$0, -16(%rbp)
.LBB121_93:                             # %for.cond201
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_95 Depth 2
	cmpl	$16, -16(%rbp)
	jge	.LBB121_100
# %bb.94:                               # %for.body204
                                        #   in Loop: Header=BB121_93 Depth=1
	movl	$0, -12(%rbp)
.LBB121_95:                             # %for.cond205
                                        #   Parent Loop BB121_93 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB121_98
# %bb.96:                               # %for.body208
                                        #   in Loop: Header=BB121_95 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.97:                               # %for.inc218
                                        #   in Loop: Header=BB121_95 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_95
.LBB121_98:                             # %for.end220
                                        #   in Loop: Header=BB121_93 Depth=1
	jmp	.LBB121_99
.LBB121_99:                             # %for.inc221
                                        #   in Loop: Header=BB121_93 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_93
.LBB121_100:                            # %for.end223
	jmp	.LBB121_101
.LBB121_101:                            # %if.end224
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB121_105
# %bb.102:                              # %land.lhs.true227
	cmpl	$9, -20(%rbp)
	je	.LBB121_107
# %bb.103:                              # %lor.lhs.false
	cmpl	$10, -20(%rbp)
	je	.LBB121_107
# %bb.104:                              # %lor.lhs.false232
	cmpl	$13, -20(%rbp)
	je	.LBB121_107
.LBB121_105:                            # %land.lhs.true235
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_107
# %bb.106:                              # %if.then238
	leaq	-36(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB121_107:                            # %if.end239
	cmpl	$10, -20(%rbp)
	jne	.LBB121_109
# %bb.108:                              # %if.then242
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-64(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB121_109:                            # %if.end246
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB121_124
# %bb.110:                              # %land.lhs.true250
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB121_124
# %bb.111:                              # %if.then254
	movl	$0, -24(%rbp)
.LBB121_112:                            # %for.cond255
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_114 Depth 2
                                        #       Child Loop BB121_116 Depth 3
	movl	-24(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB121_123
# %bb.113:                              # %for.body258
                                        #   in Loop: Header=BB121_112 Depth=1
	movl	-24(%rbp), %edi
	movq	-48(%rbp), %rsi
	callq	decode_one_mb
	movl	$0, -12(%rbp)
.LBB121_114:                            # %for.cond259
                                        #   Parent Loop BB121_112 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_116 Depth 3
	cmpl	$16, -12(%rbp)
	jge	.LBB121_121
# %bb.115:                              # %for.body262
                                        #   in Loop: Header=BB121_114 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB121_116:                            # %for.cond263
                                        #   Parent Loop BB121_112 Depth=1
                                        #     Parent Loop BB121_114 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_119
# %bb.117:                              # %for.body268
                                        #   in Loop: Header=BB121_116 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	172(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.118:                              # %for.inc289
                                        #   in Loop: Header=BB121_116 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_116
.LBB121_119:                            # %for.end291
                                        #   in Loop: Header=BB121_114 Depth=2
	jmp	.LBB121_120
.LBB121_120:                            # %for.inc292
                                        #   in Loop: Header=BB121_114 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_114
.LBB121_121:                            # %for.end294
                                        #   in Loop: Header=BB121_112 Depth=1
	jmp	.LBB121_122
.LBB121_122:                            # %for.inc295
                                        #   in Loop: Header=BB121_112 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB121_112
.LBB121_123:                            # %for.end297
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-56(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -56(%rbp)
	jmp	.LBB121_133
.LBB121_124:                            # %if.else300
	movl	$0, -12(%rbp)
.LBB121_125:                            # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_127 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB121_132
# %bb.126:                              # %for.body304
                                        #   in Loop: Header=BB121_125 Depth=1
	movq	img, %rax
	movl	168(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB121_127:                            # %for.cond306
                                        #   Parent Loop BB121_125 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	$16, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_130
# %bb.128:                              # %for.body311
                                        #   in Loop: Header=BB121_127 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	172(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.129:                              # %for.inc332
                                        #   in Loop: Header=BB121_127 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_127
.LBB121_130:                            # %for.end334
                                        #   in Loop: Header=BB121_125 Depth=1
	jmp	.LBB121_131
.LBB121_131:                            # %for.inc335
                                        #   in Loop: Header=BB121_125 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_125
.LBB121_132:                            # %for.end337
	jmp	.LBB121_133
.LBB121_133:                            # %if.end338
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_143
# %bb.134:                              # %if.then342
	movl	$0, -12(%rbp)
.LBB121_135:                            # %for.cond343
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_137 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB121_142
# %bb.136:                              # %for.body346
                                        #   in Loop: Header=BB121_135 Depth=1
	movq	img, %rax
	movl	176(%rax), %eax
	movl	%eax, -16(%rbp)
.LBB121_137:                            # %for.cond347
                                        #   Parent Loop BB121_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	movq	img, %rdx
	addl	72708(%rdx), %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_140
# %bb.138:                              # %for.body352
                                        #   in Loop: Header=BB121_137 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-12(%rbp), %edx
	movq	img, %rsi
	addl	180(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	164(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-56(%rbp), %rax
	movq	%rax, -56(%rbp)
# %bb.139:                              # %for.inc396
                                        #   in Loop: Header=BB121_137 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_137
.LBB121_140:                            # %for.end398
                                        #   in Loop: Header=BB121_135 Depth=1
	jmp	.LBB121_141
.LBB121_141:                            # %for.inc399
                                        #   in Loop: Header=BB121_135 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_135
.LBB121_142:                            # %for.end401
	jmp	.LBB121_143
.LBB121_143:                            # %if.end402
	movq	cs_cm, %rdi
	callq	store_coding_state
	cmpl	$0, -96(%rbp)
	je	.LBB121_150
# %bb.144:                              # %if.then404
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB121_147
# %bb.145:                              # %lor.lhs.false407
	cmpl	$0, -76(%rbp)
	je	.LBB121_148
# %bb.146:                              # %land.lhs.true409
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB121_148
.LBB121_147:                            # %if.then413
	movq	img, %rax
	movl	120(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 120(%rcx)
	jmp	.LBB121_149
.LBB121_148:                            # %if.else417
	movq	img, %rax
	movl	120(%rax), %edi
	addl	$1, %edi
	movl	-36(%rbp), %esi
	leaq	-28(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movq	img, %rax
	movl	120(%rax), %edi
	movl	-36(%rbp), %esi
	leaq	-68(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	callq	ue_linfo
	movl	-68(%rbp), %eax
	movl	-28(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -28(%rbp)
.LBB121_149:                            # %if.end422
	jmp	.LBB121_151
.LBB121_150:                            # %if.else423
	movl	$1, %edi
	callq	writeMBLayer
	movl	%eax, -28(%rbp)
.LBB121_151:                            # %if.end425
	movq	cs_cm, %rdi
	callq	reset_coding_state
	vmovsd	.LCPI121_0(%rip), %xmm2 # xmm2 = mem[0],zero
	vcvtsi2sdq	-56(%rbp), %xmm0, %xmm0
	vmovsd	-88(%rbp), %xmm1        # xmm1 = mem[0],zero
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm3
	vucomisd	%xmm3, %xmm2
	jbe	.LBB121_153
# %bb.152:                              # %cond.true430
	vmovsd	.LCPI121_0(%rip), %xmm2 # xmm2 = mem[0],zero
	jmp	.LBB121_154
.LBB121_153:                            # %cond.false431
	vcvtsi2sdl	-28(%rbp), %xmm0, %xmm2
.LBB121_154:                            # %cond.end433
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -120(%rbp)
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vucomisd	(%rax), %xmm0
	jae	.LBB121_158
# %bb.155:                              # %lor.lhs.false438
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB121_159
# %bb.156:                              # %land.lhs.true442
	movq	img, %rax
	cmpl	$1, 72704(%rax)
	jne	.LBB121_159
# %bb.157:                              # %land.lhs.true445
	cmpq	$0, -56(%rbp)
	je	.LBB121_159
.LBB121_158:                            # %if.then448
	movl	$0, -60(%rbp)
	jmp	.LBB121_177
.LBB121_159:                            # %if.end449
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_176
# %bb.160:                              # %land.lhs.true451
	cmpl	$0, -20(%rbp)
	je	.LBB121_162
# %bb.161:                              # %cond.true453
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB121_165
	jmp	.LBB121_176
.LBB121_162:                            # %cond.false454
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_164
# %bb.163:                              # %cond.true458
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_176
	jmp	.LBB121_165
.LBB121_164:                            # %cond.false461
	movb	$1, %al
	testb	$1, %al
	jne	.LBB121_165
	jmp	.LBB121_176
.LBB121_165:                            # %if.then462
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB121_175
# %bb.166:                              # %if.then465
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB121_168
# %bb.167:                              # %cond.true468
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB121_171
	jmp	.LBB121_174
.LBB121_168:                            # %cond.false469
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB121_170
# %bb.169:                              # %cond.true473
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB121_174
	jmp	.LBB121_171
.LBB121_170:                            # %cond.false476
	movb	$1, %al
	testb	$1, %al
	jne	.LBB121_171
	jmp	.LBB121_174
.LBB121_171:                            # %if.then477
	callq	field_flag_inference
	movq	-48(%rbp), %rcx
	cmpl	532(%rcx), %eax
	je	.LBB121_173
# %bb.172:                              # %if.then481
	movl	$0, -60(%rbp)
	jmp	.LBB121_177
.LBB121_173:                            # %if.end482
	jmp	.LBB121_174
.LBB121_174:                            # %if.end483
	jmp	.LBB121_175
.LBB121_175:                            # %if.end484
	jmp	.LBB121_176
.LBB121_176:                            # %if.end485
	vmovsd	-120(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	-112(%rbp), %rax
	vmovsd	%xmm0, (%rax)
	movl	$1, -60(%rbp)
.LBB121_177:                            # %return
	movl	-60(%rbp), %ebx
	cmpl	$433940388, -100(%rbp)  # imm = 0x19DD67A4
	jne	.LBB121_179
.LBB121_178:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_179:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_178
.Lfunc_end121:
	.size	RDCost_for_macroblocks.92, .Lfunc_end121-RDCost_for_macroblocks.92
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.93 # -- Begin function Intra16x16_Mode_Decision.93
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.93,@function
Intra16x16_Mode_Decision.93:            # @Intra16x16_Mode_Decision.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$666542849, -56(%rbp)   # imm = 0x27BAA301
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -32(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB122_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB122_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_12
# %bb.3:                                # %if.then3
	movl	$0, -8(%rbp)
.LBB122_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_6 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB122_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB122_4 Depth=1
	movl	$0, -4(%rbp)
.LBB122_6:                              # %for.cond4
                                        #   Parent Loop BB122_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB122_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB122_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -28(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-28(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB122_6 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_6
.LBB122_9:                              # %for.end
                                        #   in Loop: Header=BB122_4 Depth=1
	jmp	.LBB122_10
.LBB122_10:                             # %for.inc87
                                        #   in Loop: Header=BB122_4 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_4
.LBB122_11:                             # %for.end89
	jmp	.LBB122_12
.LBB122_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB122_73
# %bb.13:                               # %if.then94
	movl	$0, -8(%rbp)
.LBB122_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_16 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB122_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	$0, -4(%rbp)
.LBB122_16:                             # %for.cond99
                                        #   Parent Loop BB122_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB122_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB122_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_16
.LBB122_19:                             # %for.end123
                                        #   in Loop: Header=BB122_14 Depth=1
	jmp	.LBB122_20
.LBB122_20:                             # %for.inc124
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_14
.LBB122_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB122_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_24 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB122_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	$0, -4(%rbp)
.LBB122_24:                             # %for.cond132
                                        #   Parent Loop BB122_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB122_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB122_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB122_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_24
.LBB122_27:                             # %for.end156
                                        #   in Loop: Header=BB122_22 Depth=1
	jmp	.LBB122_28
.LBB122_28:                             # %for.inc157
                                        #   in Loop: Header=BB122_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_22
.LBB122_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB122_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_32 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB122_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB122_30 Depth=1
	movl	$0, -4(%rbp)
.LBB122_32:                             # %for.cond165
                                        #   Parent Loop BB122_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB122_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB122_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB122_32 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_32
.LBB122_35:                             # %for.end180
                                        #   in Loop: Header=BB122_30 Depth=1
	jmp	.LBB122_36
.LBB122_36:                             # %for.inc181
                                        #   in Loop: Header=BB122_30 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_30
.LBB122_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -8(%rbp)
.LBB122_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_40 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB122_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB122_38 Depth=1
	movl	$0, -4(%rbp)
.LBB122_40:                             # %for.cond190
                                        #   Parent Loop BB122_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB122_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-8(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -28(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -20(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB122_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_44
.LBB122_43:                             # %cond.false
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB122_44:                             # %cond.end
                                        #   in Loop: Header=BB122_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB122_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB122_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_50
.LBB122_46:                             # %cond.false246
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_49
.LBB122_48:                             # %cond.false260
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_49:                             # %cond.end271
                                        #   in Loop: Header=BB122_40 Depth=2
.LBB122_50:                             # %cond.end273
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB122_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_53
.LBB122_52:                             # %cond.false295
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB122_53:                             # %cond.end305
                                        #   in Loop: Header=BB122_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB122_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB122_59
.LBB122_55:                             # %cond.false311
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_58
.LBB122_57:                             # %cond.false324
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-28(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_58:                             # %cond.end334
                                        #   in Loop: Header=BB122_40 Depth=2
.LBB122_59:                             # %cond.end336
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-32(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-24(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-20(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB122_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB122_62
.LBB122_61:                             # %cond.false359
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB122_62:                             # %cond.end370
                                        #   in Loop: Header=BB122_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB122_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB122_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB122_68
.LBB122_64:                             # %cond.false376
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB122_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB122_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB122_67
.LBB122_66:                             # %cond.false390
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB122_67:                             # %cond.end401
                                        #   in Loop: Header=BB122_40 Depth=2
.LBB122_68:                             # %cond.end403
                                        #   in Loop: Header=BB122_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-24(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB122_40 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_40
.LBB122_70:                             # %for.end416
                                        #   in Loop: Header=BB122_38 Depth=1
	jmp	.LBB122_71
.LBB122_71:                             # %for.inc417
                                        #   in Loop: Header=BB122_38 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB122_38
.LBB122_72:                             # %for.end419
	jmp	.LBB122_73
.LBB122_73:                             # %if.end420
	cmpl	$666542849, -56(%rbp)   # imm = 0x27BAA301
	jne	.LBB122_75
.LBB122_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_74
.Lfunc_end122:
	.size	Intra16x16_Mode_Decision.93, .Lfunc_end122-Intra16x16_Mode_Decision.93
	.cfi_endproc
                                        # -- End function
	.globl	SetRefAndMotionVectors.94 # -- Begin function SetRefAndMotionVectors.94
	.p2align	4, 0x90
	.type	SetRefAndMotionVectors.94,@function
SetRefAndMotionVectors.94:              # @SetRefAndMotionVectors.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$814958829, -68(%rbp)   # imm = 0x309348ED
	movl	%edi, -52(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -32(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	cmpl	$1, -12(%rbp)
	je	.LBB123_3
# %bb.1:                                # %lor.lhs.false
	cmpl	$2, -12(%rbp)
	je	.LBB123_3
# %bb.2:                                # %lor.lhs.false5
	cmpl	$3, -12(%rbp)
	jne	.LBB123_4
.LBB123_3:                              # %cond.true
	movl	-12(%rbp), %eax
	jmp	.LBB123_5
.LBB123_4:                              # %cond.false
	movl	$4, %eax
	jmp	.LBB123_5
.LBB123_5:                              # %cond.end
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -28(%rbp)
	movl	-36(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	148(%rcx,%rdx,8), %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	movq	input, %rcx
	movslq	-48(%rbp), %rdx
	addl	144(%rcx,%rdx,8), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB123_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB123_8
# %bb.7:                                # %cond.true18
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB123_9
.LBB123_8:                              # %cond.false23
	xorl	%ecx, %ecx
	jmp	.LBB123_9
.LBB123_9:                              # %cond.end24
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	cmpl	$0, -16(%rbp)
	jge	.LBB123_19
# %bb.10:                               # %if.then
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_11:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB123_18
# %bb.12:                               # %for.body
                                        #   in Loop: Header=BB123_11 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_13:                             # %for.cond34
                                        #   Parent Loop BB123_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB123_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB123_13 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB123_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_13
.LBB123_16:                             # %for.end
                                        #   in Loop: Header=BB123_11 Depth=1
	jmp	.LBB123_17
.LBB123_17:                             # %for.inc117
                                        #   in Loop: Header=BB123_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_11
.LBB123_18:                             # %for.end119
	jmp	.LBB123_64
.LBB123_19:                             # %if.end
	cmpl	$0, -72(%rbp)
	jne	.LBB123_29
# %bb.20:                               # %if.then121
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_21:                             # %for.cond122
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_23 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB123_28
# %bb.22:                               # %for.body125
                                        #   in Loop: Header=BB123_21 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_23:                             # %for.cond126
                                        #   Parent Loop BB123_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB123_26
# %bb.24:                               # %for.body129
                                        #   in Loop: Header=BB123_23 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.25:                               # %for.inc209
                                        #   in Loop: Header=BB123_23 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_23
.LBB123_26:                             # %for.end211
                                        #   in Loop: Header=BB123_21 Depth=1
	jmp	.LBB123_27
.LBB123_27:                             # %for.inc212
                                        #   in Loop: Header=BB123_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_21
.LBB123_28:                             # %for.end214
	jmp	.LBB123_64
.LBB123_29:                             # %if.else
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_30:                             # %for.cond215
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_32 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB123_63
# %bb.31:                               # %for.body218
                                        #   in Loop: Header=BB123_30 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_32:                             # %for.cond219
                                        #   Parent Loop BB123_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB123_61
# %bb.33:                               # %for.body222
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$0, -12(%rbp)
	jne	.LBB123_35
# %bb.34:                               # %if.then225
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -16(%rbp)
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -20(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -32(%rbp)
.LBB123_35:                             # %if.end255
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$0, -16(%rbp)
	je	.LBB123_37
# %bb.36:                               # %lor.lhs.false258
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB123_46
.LBB123_37:                             # %if.then261
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB123_44
# %bb.38:                               # %land.lhs.true263
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB123_44
# %bb.39:                               # %land.lhs.true266
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB123_44
# %bb.40:                               # %if.then269
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB123_42
# %bb.41:                               # %cond.true273
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB123_43
.LBB123_42:                             # %cond.false274
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB123_43:                             # %cond.end275
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-88(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB123_45
.LBB123_44:                             # %if.else342
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-20(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB123_45:                             # %if.end424
                                        #   in Loop: Header=BB123_32 Depth=2
	jmp	.LBB123_47
.LBB123_46:                             # %if.else425
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB123_47:                             # %if.end468
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$1, -16(%rbp)
	je	.LBB123_49
# %bb.48:                               # %lor.lhs.false471
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB123_58
.LBB123_49:                             # %if.then474
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB123_56
# %bb.50:                               # %land.lhs.true477
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$2, -16(%rbp)
	jne	.LBB123_56
# %bb.51:                               # %land.lhs.true480
                                        #   in Loop: Header=BB123_32 Depth=2
	cmpl	$1, -12(%rbp)
	jne	.LBB123_56
# %bb.52:                               # %if.then483
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB123_54
# %bb.53:                               # %cond.true488
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB123_55
.LBB123_54:                             # %cond.false490
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB123_55:                             # %cond.end492
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	jmp	.LBB123_57
.LBB123_56:                             # %if.else559
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movl	-32(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB123_57:                             # %if.end641
                                        #   in Loop: Header=BB123_32 Depth=2
	jmp	.LBB123_59
.LBB123_58:                             # %if.else642
                                        #   in Loop: Header=BB123_32 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
.LBB123_59:                             # %if.end685
                                        #   in Loop: Header=BB123_32 Depth=2
	jmp	.LBB123_60
.LBB123_60:                             # %for.inc686
                                        #   in Loop: Header=BB123_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_32
.LBB123_61:                             # %for.end688
                                        #   in Loop: Header=BB123_30 Depth=1
	jmp	.LBB123_62
.LBB123_62:                             # %for.inc689
                                        #   in Loop: Header=BB123_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_30
.LBB123_63:                             # %for.end691
	jmp	.LBB123_64
.LBB123_64:                             # %if.end692
	cmpl	$814958829, -68(%rbp)   # imm = 0x309348ED
	jne	.LBB123_66
.LBB123_65:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_66:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_65
.Lfunc_end123:
	.size	SetRefAndMotionVectors.94, .Lfunc_end123-SetRefAndMotionVectors.94
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function encode_one_macroblock.95
.LCPI124_0:
	.quad	5055640609639927018     # double 1.0E+30
.LCPI124_1:
	.quad	4622945017495814144     # double 12
.LCPI124_2:
	.quad	4607182418800017408     # double 1
.LCPI124_3:
	.quad	4587366580439587226     # double 0.050000000000000003
.LCPI124_4:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI124_5:
	.quad	4611686018427387904     # double 2
.LCPI124_6:
	.quad	4613937818241073152     # double 3
.LCPI124_7:
	.quad	4608983858650965606     # double 1.3999999999999999
.LCPI124_8:
	.quad	4616189618054758400     # double 4
.LCPI124_9:
	.quad	4604300115038500291     # double 0.68000000000000005
.LCPI124_10:
	.quad	4618441417868443648     # double 6
.LCPI124_11:
	.quad	4605380978949069210     # double 0.80000000000000004
.LCPI124_12:
	.quad	4600877379321698714     # double 0.40000000000000002
.LCPI124_13:
	.quad	4596373779694328218     # double 0.20000000000000001
.LCPI124_14:
	.quad	4606732058837280358     # double 0.94999999999999996
.LCPI124_15:
	.quad	4602678819172646912     # double 0.5
.LCPI124_16:
	.quad	4679240012837945344     # double 65536
.LCPI124_17:
	.quad	4602677017732795964     # double 0.49990000000000001
.LCPI124_18:
	.quad	4625196817309499392     # double 16
	.text
	.globl	encode_one_macroblock.95
	.p2align	4, 0x90
	.type	encode_one_macroblock.95,@function
encode_one_macroblock.95:               # @encode_one_macroblock.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	subq	$480, %rsp              # imm = 0x1E0
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	$1718736779, -412(%rbp) # imm = 0x6671D78B
	vxorps	%xmm1, %xmm1, %xmm1
	vmovsd	%xmm1, -296(%rbp)
	vmovsd	%xmm0, -480(%rbp)
	movl	$2147483647, -208(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -276(%rbp)
	movl	$0, -188(%rbp)
	movw	$0, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, -140(%rbp)
	movl	$0, -252(%rbp)
	movl	$0, -260(%rbp)
	movl	$0, -184(%rbp)
	movl	$0, -320(%rbp)
	movl	$0, -204(%rbp)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_2
# %bb.1:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB124_4
.LBB124_2:                              # %land.lhs.true
	movq	img, %rax
	movl	140(%rax), %eax
	movq	img, %rcx
	cmpl	88(%rcx), %eax
	jne	.LBB124_4
# %bb.3:                                # %land.lhs.true4
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	cmpl	92(%rcx), %eax
	movb	$1, %cl
	jne	.LBB124_5
.LBB124_4:                              # %lor.rhs
	movq	img, %rax
	cmpl	$2, 24(%rax)
	sete	%cl
.LBB124_5:                              # %lor.end
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -136(%rbp)
	movq	img, %rcx
	cmpl	$3, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -304(%rbp)
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -404(%rbp)
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	sete	%cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -108(%rbp)
	movq	input, %rcx
	cmpl	$1, 2908(%rcx)
	jne	.LBB124_13
# %bb.6:                                # %land.lhs.true19
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$2, 2464(%rcx)
	jne	.LBB124_13
# %bb.7:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB124_12
# %bb.8:                                # %lor.lhs.false25
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB124_12
# %bb.9:                                # %lor.rhs29
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB124_11
# %bb.10:                               # %land.rhs33
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB124_11:                             # %land.end
.LBB124_12:                             # %lor.end36
.LBB124_13:                             # %land.end38
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	movl	$1, %edx
	cmovnel	%eax, %edx
	movl	%edx, -316(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_18
# %bb.14:                               # %land.lhs.true40
	xorl	%ecx, %ecx
	movq	input, %rax
	cmpl	$0, 2908(%rax)
	je	.LBB124_18
# %bb.15:                               # %land.rhs43
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %cl
	je	.LBB124_17
# %bb.16:                               # %lor.rhs47
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%cl
.LBB124_17:                             # %lor.end51
.LBB124_18:                             # %land.end53
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -284(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB124_20
# %bb.19:                               # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rcx
	movq	img, %rax
	movl	12(%rax), %eax
	subl	$1, %eax
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	jmp	.LBB124_21
.LBB124_20:                             # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB124_21
.LBB124_21:                             # %cond.end
	xorl	%eax, %eax
	movq	%rcx, -448(%rbp)
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	%rcx, -392(%rbp)
	movw	$-1, -38(%rbp)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movq	%rcx, -440(%rbp)
	movq	img, %rcx
	cmpl	$0, 72400(%rcx)
	je	.LBB124_23
# %bb.22:                               # %land.rhs62
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	setne	%al
.LBB124_23:                             # %land.end64
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -280(%rbp)
	movl	$0, -132(%rbp)
	cmpl	$0, -280(%rbp)
	je	.LBB124_28
# %bb.24:                               # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB124_26
# %bb.25:                               # %if.then69
	movl	$4, -64(%rbp)
	jmp	.LBB124_27
.LBB124_26:                             # %if.else
	movl	$2, -64(%rbp)
.LBB124_27:                             # %if.end
	jmp	.LBB124_29
.LBB124_28:                             # %if.else70
	movl	$0, -64(%rbp)
.LBB124_29:                             # %if.end71
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB124_31
# %bb.30:                               # %if.then73
	movb	$0, %al
	callq	decide_intrabk_SAD
.LBB124_31:                             # %if.end74
	movq	img, %rax
	movl	12(%rax), %edi
	callq	RandomIntra
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	orl	-136(%rbp), %eax
	movl	%eax, -136(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	movl	%eax, -332(%rbp)
	movq	input, %rax
	movl	3220(%rax), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovel	%edx, %eax
	movl	%eax, -348(%rbp)
	movl	$1, -344(%rbp)
	cmpl	$0, -136(%rbp)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -384(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_33
# %bb.32:                               # %land.rhs86
	movq	input, %rax
	cmpl	$0, 2368(%rax)
	setne	%cl
.LBB124_33:                             # %land.end88
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -380(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_35
# %bb.34:                               # %land.rhs92
	movq	input, %rax
	cmpl	$0, 2372(%rax)
	setne	%al
.LBB124_35:                             # %land.end94
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -376(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_37
# %bb.36:                               # %land.rhs98
	movq	input, %rax
	cmpl	$0, 2376(%rax)
	setne	%cl
.LBB124_37:                             # %land.end100
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -372(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_39
# %bb.38:                               # %land.rhs104
	movq	input, %rax
	cmpl	$0, 2380(%rax)
	setne	%al
.LBB124_39:                             # %land.end106
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -368(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_41
# %bb.40:                               # %land.rhs110
	movq	input, %rax
	cmpl	$0, 2384(%rax)
	setne	%cl
.LBB124_41:                             # %land.end112
	xorl	%eax, %eax
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, -364(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_43
# %bb.42:                               # %land.rhs116
	movq	input, %rax
	cmpl	$0, 2388(%rax)
	setne	%al
.LBB124_43:                             # %land.end118
	xorl	%ecx, %ecx
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -360(%rbp)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_45
# %bb.44:                               # %land.rhs122
	movq	input, %rax
	cmpl	$0, 2392(%rax)
	setne	%cl
.LBB124_45:                             # %land.end124
	andb	$1, %cl
	movzbl	%cl, %eax
	movl	%eax, -356(%rbp)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_47
# %bb.46:                               # %if.then130
	movl	$0, -356(%rbp)
	movl	$0, -360(%rbp)
	movl	$0, -364(%rbp)
.LBB124_47:                             # %if.end134
	cmpl	$0, -368(%rbp)
	movb	$1, %al
	jne	.LBB124_51
# %bb.48:                               # %lor.lhs.false137
	cmpl	$0, -364(%rbp)
	movb	$1, %al
	jne	.LBB124_51
# %bb.49:                               # %lor.lhs.false140
	cmpl	$0, -360(%rbp)
	movb	$1, %al
	jne	.LBB124_51
# %bb.50:                               # %lor.rhs143
	cmpl	$0, -356(%rbp)
	setne	%al
.LBB124_51:                             # %lor.end146
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -352(%rbp)
	movl	-404(%rbp), %eax
	movl	%eax, -336(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	jne	.LBB124_67
# %bb.52:                               # %if.then152
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB124_53:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_55 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_66
# %bb.54:                               # %for.body
                                        #   in Loop: Header=BB124_53 Depth=1
	movl	$0, -56(%rbp)
.LBB124_55:                             # %for.cond156
                                        #   Parent Loop BB124_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_64
# %bb.56:                               # %for.body161
                                        #   in Loop: Header=BB124_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	cmpl	$1, 28(%rax)
	jne	.LBB124_59
# %bb.57:                               # %land.lhs.true168
                                        #   in Loop: Header=BB124_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB124_59
# %bb.58:                               # %if.then177
                                        #   in Loop: Header=BB124_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB124_59:                             # %if.end183
                                        #   in Loop: Header=BB124_55 Depth=2
	movq	img, %rax
	cmpl	$2, 28(%rax)
	jne	.LBB124_62
# %bb.60:                               # %land.lhs.true187
                                        #   in Loop: Header=BB124_55 Depth=2
	movq	img, %rax
	movl	28(%rax), %eax
	movslq	-84(%rbp), %rcx
	movq	listX(,%rcx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	cmpl	(%rcx), %eax
	je	.LBB124_62
# %bb.61:                               # %if.then196
                                        #   in Loop: Header=BB124_55 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB124_62:                             # %if.end202
                                        #   in Loop: Header=BB124_55 Depth=2
	jmp	.LBB124_63
.LBB124_63:                             # %for.inc
                                        #   in Loop: Header=BB124_55 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_55
.LBB124_64:                             # %for.end
                                        #   in Loop: Header=BB124_53 Depth=1
	jmp	.LBB124_65
.LBB124_65:                             # %for.inc203
                                        #   in Loop: Header=BB124_53 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB124_53
.LBB124_66:                             # %for.end205
	jmp	.LBB124_93
.LBB124_67:                             # %if.else206
	cmpl	$0, -280(%rbp)
	je	.LBB124_83
# %bb.68:                               # %if.then208
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB124_69:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_71 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_82
# %bb.70:                               # %for.body214
                                        #   in Loop: Header=BB124_69 Depth=1
	movl	$0, -56(%rbp)
.LBB124_71:                             # %for.cond215
                                        #   Parent Loop BB124_69 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_80
# %bb.72:                               # %for.body220
                                        #   in Loop: Header=BB124_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB124_75
# %bb.73:                               # %land.lhs.true230
                                        #   in Loop: Header=BB124_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$2, (%rax)
	jne	.LBB124_75
# %bb.74:                               # %if.then238
                                        #   in Loop: Header=BB124_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$-2, 6408(%rax)
.LBB124_75:                             # %if.end244
                                        #   in Loop: Header=BB124_71 Depth=2
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	jne	.LBB124_78
# %bb.76:                               # %land.lhs.true249
                                        #   in Loop: Header=BB124_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	cmpl	$1, (%rax)
	jne	.LBB124_78
# %bb.77:                               # %if.then257
                                        #   in Loop: Header=BB124_71 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$2, 6408(%rax)
.LBB124_78:                             # %if.end263
                                        #   in Loop: Header=BB124_71 Depth=2
	jmp	.LBB124_79
.LBB124_79:                             # %for.inc264
                                        #   in Loop: Header=BB124_71 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_71
.LBB124_80:                             # %for.end266
                                        #   in Loop: Header=BB124_69 Depth=1
	jmp	.LBB124_81
.LBB124_81:                             # %for.inc267
                                        #   in Loop: Header=BB124_69 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB124_69
.LBB124_82:                             # %for.end269
	jmp	.LBB124_92
.LBB124_83:                             # %if.else270
	movl	-64(%rbp), %eax
	addl	$0, %eax
	movl	%eax, -84(%rbp)
.LBB124_84:                             # %for.cond272
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_86 Depth 2
	movl	-84(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_91
# %bb.85:                               # %for.body276
                                        #   in Loop: Header=BB124_84 Depth=1
	movl	$0, -56(%rbp)
.LBB124_86:                             # %for.cond277
                                        #   Parent Loop BB124_84 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-56(%rbp), %eax
	movslq	-84(%rbp), %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_89
# %bb.87:                               # %for.body282
                                        #   in Loop: Header=BB124_86 Depth=2
	movslq	-84(%rbp), %rax
	movq	listX(,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	$0, 6408(%rax)
# %bb.88:                               # %for.inc288
                                        #   in Loop: Header=BB124_86 Depth=2
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_86
.LBB124_89:                             # %for.end290
                                        #   in Loop: Header=BB124_84 Depth=1
	jmp	.LBB124_90
.LBB124_90:                             # %for.inc291
                                        #   in Loop: Header=BB124_84 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB124_84
.LBB124_91:                             # %for.end293
	jmp	.LBB124_92
.LBB124_92:                             # %if.end294
	jmp	.LBB124_93
.LBB124_93:                             # %if.end295
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_162
# %bb.94:                               # %if.then298
	vmovsd	.LCPI124_1(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	40(%rax), %xmm0, %xmm1
	vsubsd	%xmm0, %xmm1, %xmm0
	vmovsd	%xmm0, -200(%rbp)
	movq	input, %rax
	cmpl	$0, 3332(%rax)
	je	.LBB124_100
# %bb.95:                               # %if.then303
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_98
# %bb.96:                               # %land.lhs.true307
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB124_98
# %bb.97:                               # %if.then310
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vmovsd	3376(%rax), %xmm2       # xmm2 = mem[0],zero
	vmovsd	%xmm2, -456(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-456(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB124_99
.LBB124_98:                             # %if.else315
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	vmovsd	3336(%rax,%rcx,8), %xmm2 # xmm2 = mem[0],zero
	vmovsd	%xmm2, -464(%rbp)       # 8-byte Spill
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmulsd	-464(%rbp), %xmm0, %xmm0 # 8-byte Folded Reload
	vmovsd	%xmm0, -160(%rbp)
.LBB124_99:                             # %if.end326
	jmp	.LBB124_159
.LBB124_100:                            # %if.else327
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_103
# %bb.101:                              # %land.lhs.true331
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB124_103
# %bb.102:                              # %cond.true335
	vmovsd	.LCPI124_2(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB124_104
.LBB124_103:                            # %cond.false336
	vmovsd	.LCPI124_2(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_3(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	input, %rax
	vcvtsi2sdl	20(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vsubsd	%xmm1, %xmm0, %xmm0
.LBB124_104:                            # %cond.end340
	vmovsd	%xmm0, -472(%rbp)
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	jle	.LBB124_130
# %bb.105:                              # %if.then344
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI124_9(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB124_116
# %bb.106:                              # %cond.true352
	vmovsd	.LCPI124_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI124_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_108
# %bb.107:                              # %cond.true356
	vmovsd	.LCPI124_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_109
.LBB124_108:                            # %cond.false357
	vmovsd	.LCPI124_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB124_109:                            # %cond.end359
	vmovsd	.LCPI124_5(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_111
# %bb.110:                              # %cond.true363
	vmovsd	.LCPI124_5(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_115
.LBB124_111:                            # %cond.false364
	vmovsd	.LCPI124_8(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI124_10(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_113
# %bb.112:                              # %cond.true368
	vmovsd	.LCPI124_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_114
.LBB124_113:                            # %cond.false369
	vmovsd	.LCPI124_10(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB124_114:                            # %cond.end371
.LBB124_115:                            # %cond.end373
	jmp	.LBB124_129
.LBB124_116:                            # %cond.false375
	cmpl	$0, -304(%rbp)
	je	.LBB124_127
# %bb.117:                              # %cond.true377
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_119
# %bb.118:                              # %cond.true381
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_120
.LBB124_119:                            # %cond.false382
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB124_120:                            # %cond.end384
	vmovsd	.LCPI124_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_122
# %bb.121:                              # %cond.true388
	vmovsd	.LCPI124_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_126
.LBB124_122:                            # %cond.false389
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_124
# %bb.123:                              # %cond.true393
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_125
.LBB124_124:                            # %cond.false394
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB124_125:                            # %cond.end396
.LBB124_126:                            # %cond.end398
	jmp	.LBB124_128
.LBB124_127:                            # %cond.false400
	vmovsd	.LCPI124_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_128
.LBB124_128:                            # %cond.end401
.LBB124_129:                            # %cond.end403
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
	jmp	.LBB124_146
.LBB124_130:                            # %if.else406
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI124_4(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	cmpl	$0, -108(%rbp)
	je	.LBB124_132
# %bb.131:                              # %cond.true414
	vmovsd	.LCPI124_8(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_145
.LBB124_132:                            # %cond.false415
	cmpl	$0, -304(%rbp)
	je	.LBB124_143
# %bb.133:                              # %cond.true417
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_135
# %bb.134:                              # %cond.true421
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_136
.LBB124_135:                            # %cond.false422
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB124_136:                            # %cond.end424
	vmovsd	.LCPI124_7(%rip), %xmm2 # xmm2 = mem[0],zero
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_138
# %bb.137:                              # %cond.true428
	vmovsd	.LCPI124_7(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_142
.LBB124_138:                            # %cond.false429
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	.LCPI124_1(%rip), %xmm2 # xmm2 = mem[0],zero
	vmovsd	-200(%rbp), %xmm3       # xmm3 = mem[0],zero
	vdivsd	%xmm2, %xmm3, %xmm2
	vucomisd	%xmm1, %xmm2
	jbe	.LBB124_140
# %bb.139:                              # %cond.true433
	vmovsd	.LCPI124_6(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_141
.LBB124_140:                            # %cond.false434
	vmovsd	.LCPI124_1(%rip), %xmm1 # xmm1 = mem[0],zero
	vmovsd	-200(%rbp), %xmm2       # xmm2 = mem[0],zero
	vdivsd	%xmm1, %xmm2, %xmm1
.LBB124_141:                            # %cond.end436
.LBB124_142:                            # %cond.end438
	jmp	.LBB124_144
.LBB124_143:                            # %cond.false440
	vmovsd	.LCPI124_2(%rip), %xmm1 # xmm1 = mem[0],zero
	jmp	.LBB124_144
.LBB124_144:                            # %cond.end441
.LBB124_145:                            # %cond.end443
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB124_146:                            # %if.end446
	movq	input, %rax
	cmpl	$2, 1320(%rax)
	jne	.LBB124_154
# %bb.147:                              # %if.then449
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_153
# %bb.148:                              # %land.lhs.true453
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB124_153
# %bb.149:                              # %if.then456
	vmovsd	.LCPI124_12(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_13(%rip), %xmm1 # xmm1 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB124_151
# %bb.150:                              # %cond.true464
	vmovsd	.LCPI124_12(%rip), %xmm0 # xmm0 = mem[0],zero
	jmp	.LBB124_152
.LBB124_151:                            # %cond.false465
	vmovsd	.LCPI124_13(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	vcvtsi2sdl	16(%rax), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
.LBB124_152:                            # %cond.end473
	vmovsd	.LCPI124_2(%rip), %xmm1 # xmm1 = mem[0],zero
	vsubsd	%xmm0, %xmm1, %xmm0
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB124_153:                            # %if.end477
	jmp	.LBB124_158
.LBB124_154:                            # %if.else478
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_157
# %bb.155:                              # %land.lhs.true482
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB124_157
# %bb.156:                              # %if.then485
	vmovsd	.LCPI124_11(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB124_157:                            # %if.end487
	jmp	.LBB124_158
.LBB124_158:                            # %if.end488
	vmovsd	-472(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB124_159:                            # %if.end490
	movq	input, %rax
	cmpl	$0, 28(%rax)
	je	.LBB124_161
# %bb.160:                              # %if.then492
	vmovsd	.LCPI124_14(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-160(%rbp), %xmm0, %xmm0
	vmovsd	%xmm0, -160(%rbp)
.LBB124_161:                            # %if.end494
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	sqrt
	vmovsd	%xmm0, -168(%rbp)
	jmp	.LBB124_166
.LBB124_162:                            # %if.else496
	xorl	%eax, %eax
	movq	img, %rcx
	movl	40(%rcx), %ecx
	subl	$12, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_164
# %bb.163:                              # %cond.true501
	xorl	%eax, %eax
	jmp	.LBB124_165
.LBB124_164:                            # %cond.false502
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
.LBB124_165:                            # %cond.end505
	cltq
	vcvtsi2sdl	QP2QUANT(,%rax,4), %xmm0, %xmm0
	vmovsd	%xmm0, -168(%rbp)
	vmovsd	%xmm0, -160(%rbp)
.LBB124_166:                            # %if.end510
	vmovsd	.LCPI124_15(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_16(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -32(%rbp)
.LBB124_167:                            # %for.cond514
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$15, -32(%rbp)
	jge	.LBB124_170
# %bb.168:                              # %for.body517
                                        #   in Loop: Header=BB124_167 Depth=1
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
# %bb.169:                              # %for.inc520
                                        #   in Loop: Header=BB124_167 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB124_167
.LBB124_170:                            # %for.end522
	movl	$0, -264(%rbp)
.LBB124_171:                            # %for.cond523
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_181 Depth 2
                                        #       Child Loop BB124_184 Depth 3
                                        #         Child Loop BB124_190 Depth 4
                                        #         Child Loop BB124_210 Depth 4
                                        #         Child Loop BB124_300 Depth 4
                                        #           Child Loop BB124_302 Depth 5
                                        #         Child Loop BB124_309 Depth 4
                                        #           Child Loop BB124_311 Depth 5
                                        #         Child Loop BB124_326 Depth 4
                                        #           Child Loop BB124_328 Depth 5
                                        #         Child Loop BB124_335 Depth 4
                                        #           Child Loop BB124_337 Depth 5
                                        #         Child Loop BB124_355 Depth 4
                                        #           Child Loop BB124_357 Depth 5
                                        #         Child Loop BB124_374 Depth 4
                                        #           Child Loop BB124_376 Depth 5
                                        #     Child Loop BB124_416 Depth 2
                                        #       Child Loop BB124_418 Depth 3
                                        #         Child Loop BB124_445 Depth 4
                                        #         Child Loop BB124_464 Depth 4
                                        #           Child Loop BB124_466 Depth 5
                                        #         Child Loop BB124_473 Depth 4
                                        #         Child Loop BB124_508 Depth 4
                                        #           Child Loop BB124_510 Depth 5
                                        #         Child Loop BB124_532 Depth 4
                                        #           Child Loop BB124_534 Depth 5
                                        #             Child Loop BB124_536 Depth 6
                                        #         Child Loop BB124_544 Depth 4
                                        #           Child Loop BB124_546 Depth 5
                                        #       Child Loop BB124_569 Depth 3
                                        #         Child Loop BB124_571 Depth 4
                                        #           Child Loop BB124_573 Depth 5
                                        #       Child Loop BB124_581 Depth 3
                                        #         Child Loop BB124_583 Depth 4
                                        #     Child Loop BB124_601 Depth 2
                                        #       Child Loop BB124_603 Depth 3
                                        #         Child Loop BB124_614 Depth 4
                                        #         Child Loop BB124_633 Depth 4
                                        #           Child Loop BB124_635 Depth 5
                                        #         Child Loop BB124_642 Depth 4
                                        #         Child Loop BB124_677 Depth 4
                                        #           Child Loop BB124_679 Depth 5
                                        #         Child Loop BB124_701 Depth 4
                                        #           Child Loop BB124_703 Depth 5
                                        #             Child Loop BB124_705 Depth 6
                                        #         Child Loop BB124_713 Depth 4
                                        #           Child Loop BB124_715 Depth 5
                                        #         Child Loop BB124_723 Depth 4
                                        #           Child Loop BB124_725 Depth 5
                                        #       Child Loop BB124_745 Depth 3
                                        #         Child Loop BB124_747 Depth 4
                                        #           Child Loop BB124_749 Depth 5
                                        #       Child Loop BB124_757 Depth 3
                                        #         Child Loop BB124_759 Depth 4
                                        #       Child Loop BB124_766 Depth 3
                                        #         Child Loop BB124_768 Depth 4
                                        #       Child Loop BB124_778 Depth 3
                                        #         Child Loop BB124_780 Depth 4
                                        #       Child Loop BB124_786 Depth 3
                                        #       Child Loop BB124_791 Depth 3
                                        #         Child Loop BB124_793 Depth 4
                                        #     Child Loop BB124_803 Depth 2
                                        #       Child Loop BB124_805 Depth 3
                                        #     Child Loop BB124_835 Depth 2
                                        #       Child Loop BB124_853 Depth 3
                                        #         Child Loop BB124_908 Depth 4
                                        #           Child Loop BB124_911 Depth 5
                                        #             Child Loop BB124_913 Depth 6
                                        #           Child Loop BB124_920 Depth 5
                                        #             Child Loop BB124_922 Depth 6
                                        #         Child Loop BB124_955 Depth 4
                                        #           Child Loop BB124_957 Depth 5
                                        #     Child Loop BB124_981 Depth 2
                                        #       Child Loop BB124_1014 Depth 3
                                        #         Child Loop BB124_1017 Depth 4
                                        #           Child Loop BB124_1019 Depth 5
                                        #         Child Loop BB124_1026 Depth 4
                                        #           Child Loop BB124_1028 Depth 5
                                        #       Child Loop BB124_1061 Depth 3
                                        #         Child Loop BB124_1063 Depth 4
                                        #     Child Loop BB124_1113 Depth 2
                                        #       Child Loop BB124_1115 Depth 3
                                        #     Child Loop BB124_1127 Depth 2
                                        #       Child Loop BB124_1129 Depth 3
                                        #         Child Loop BB124_1131 Depth 4
                                        #     Child Loop BB124_1141 Depth 2
                                        #       Child Loop BB124_1143 Depth 3
                                        #     Child Loop BB124_1152 Depth 2
                                        #       Child Loop BB124_1154 Depth 3
                                        #     Child Loop BB124_1160 Depth 2
                                        #       Child Loop BB124_1162 Depth 3
                                        #     Child Loop BB124_1174 Depth 2
                                        #       Child Loop BB124_1176 Depth 3
                                        #         Child Loop BB124_1178 Depth 4
                                        #     Child Loop BB124_1189 Depth 2
                                        #       Child Loop BB124_1191 Depth 3
                                        #     Child Loop BB124_1202 Depth 2
                                        #       Child Loop BB124_1204 Depth 3
                                        #     Child Loop BB124_1211 Depth 2
                                        #       Child Loop BB124_1213 Depth 3
                                        #     Child Loop BB124_1221 Depth 2
                                        #       Child Loop BB124_1223 Depth 3
                                        #     Child Loop BB124_1229 Depth 2
                                        #       Child Loop BB124_1231 Depth 3
                                        #     Child Loop BB124_1237 Depth 2
                                        #       Child Loop BB124_1239 Depth 3
                                        #     Child Loop BB124_1245 Depth 2
                                        #       Child Loop BB124_1247 Depth 3
	movl	-264(%rbp), %eax
	cmpl	-316(%rbp), %eax
	jge	.LBB124_1291
# %bb.172:                              # %for.body526
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$2, -316(%rbp)
	jne	.LBB124_177
# %bb.173:                              # %if.then529
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB124_175
# %bb.174:                              # %if.then532
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	movl	$1, 2464(%rax)
	jmp	.LBB124_176
.LBB124_175:                            # %if.else534
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	movl	$2, 2464(%rax)
.LBB124_176:                            # %if.end536
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_177
.LBB124_177:                            # %if.end537
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
	cmpl	$0, -136(%rbp)
	jne	.LBB124_831
# %bb.178:                              # %if.then539
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB124_180
# %bb.179:                              # %if.then541
                                        #   in Loop: Header=BB124_171 Depth=1
	movb	$0, %al
	callq	Get_Direct_Motion_Vectors
.LBB124_180:                            # %if.end542
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
	movl	$1, best_mode
	movl	$1, -32(%rbp)
.LBB124_181:                            # %for.cond543
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_184 Depth 3
                                        #         Child Loop BB124_190 Depth 4
                                        #         Child Loop BB124_210 Depth 4
                                        #         Child Loop BB124_300 Depth 4
                                        #           Child Loop BB124_302 Depth 5
                                        #         Child Loop BB124_309 Depth 4
                                        #           Child Loop BB124_311 Depth 5
                                        #         Child Loop BB124_326 Depth 4
                                        #           Child Loop BB124_328 Depth 5
                                        #         Child Loop BB124_335 Depth 4
                                        #           Child Loop BB124_337 Depth 5
                                        #         Child Loop BB124_355 Depth 4
                                        #           Child Loop BB124_357 Depth 5
                                        #         Child Loop BB124_374 Depth 4
                                        #           Child Loop BB124_376 Depth 5
	cmpl	$4, -32(%rbp)
	jge	.LBB124_413
# %bb.182:                              # %for.body546
                                        #   in Loop: Header=BB124_181 Depth=2
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB124_411
# %bb.183:                              # %if.then553
                                        #   in Loop: Header=BB124_181 Depth=2
	movl	$0, -60(%rbp)
	movl	$0, -28(%rbp)
.LBB124_184:                            # %for.cond554
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_190 Depth 4
                                        #         Child Loop BB124_210 Depth 4
                                        #         Child Loop BB124_300 Depth 4
                                        #           Child Loop BB124_302 Depth 5
                                        #         Child Loop BB124_309 Depth 4
                                        #           Child Loop BB124_311 Depth 5
                                        #         Child Loop BB124_326 Depth 4
                                        #           Child Loop BB124_328 Depth 5
                                        #         Child Loop BB124_335 Depth 4
                                        #           Child Loop BB124_337 Depth 5
                                        #         Child Loop BB124_355 Depth 4
                                        #           Child Loop BB124_357 Depth 5
                                        #         Child Loop BB124_374 Depth 4
                                        #           Child Loop BB124_376 Depth 5
	movl	-28(%rbp), %eax
	movl	-32(%rbp), %ecx
	cmpl	$1, %ecx
	movl	$1, %ecx
	movl	$2, %edx
	cmovel	%ecx, %edx
	cmpl	%edx, %eax
	jge	.LBB124_404
# %bb.185:                              # %for.body560
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	xorl	%ecx, %ecx
	cmpl	$1, -28(%rbp)
	jne	.LBB124_187
# %bb.186:                              # %land.rhs563
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$2, -32(%rbp)
	sete	%cl
.LBB124_187:                            # %land.end566
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$2, %ecx
	cmovnel	%ecx, %edx
	movl	%edx, -24(%rbp)
	cmpl	$1, -28(%rbp)
	jne	.LBB124_189
# %bb.188:                              # %land.rhs571
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$3, -32(%rbp)
	sete	%al
.LBB124_189:                            # %land.end574
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$2, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB124_190:                            # %for.cond577
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_208
# %bb.191:                              # %for.body584
                                        #   in Loop: Header=BB124_190 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB124_194
# %bb.192:                              # %lor.lhs.false586
                                        #   in Loop: Header=BB124_190 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB124_194
# %bb.193:                              # %lor.lhs.false590
                                        #   in Loop: Header=BB124_190 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB124_206
.LBB124_194:                            # %if.then594
                                        #   in Loop: Header=BB124_190 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_199
# %bb.195:                              # %cond.true597
                                        #   in Loop: Header=BB124_190 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_197
# %bb.196:                              # %cond.true603
                                        #   in Loop: Header=BB124_190 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB124_198
.LBB124_197:                            # %cond.false604
                                        #   in Loop: Header=BB124_190 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_198:                            # %cond.end607
                                        #   in Loop: Header=BB124_190 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB124_203
.LBB124_199:                            # %cond.false610
                                        #   in Loop: Header=BB124_190 Depth=4
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_201
# %bb.200:                              # %cond.true615
                                        #   in Loop: Header=BB124_190 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB124_202
.LBB124_201:                            # %cond.false617
                                        #   in Loop: Header=BB124_190 Depth=4
	movl	$1, %eax
	jmp	.LBB124_202
.LBB124_202:                            # %cond.end618
                                        #   in Loop: Header=BB124_190 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_203:                            # %cond.end623
                                        #   in Loop: Header=BB124_190 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB124_205
# %bb.204:                              # %if.then635
                                        #   in Loop: Header=BB124_190 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB124_205:                            # %if.end636
                                        #   in Loop: Header=BB124_190 Depth=4
	jmp	.LBB124_206
.LBB124_206:                            # %if.end637
                                        #   in Loop: Header=BB124_190 Depth=4
	jmp	.LBB124_207
.LBB124_207:                            # %for.inc638
                                        #   in Loop: Header=BB124_190 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB124_190
.LBB124_208:                            # %for.end640
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_296
# %bb.209:                              # %if.then642
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB124_210:                            # %for.cond643
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_224
# %bb.211:                              # %for.body650
                                        #   in Loop: Header=BB124_210 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_216
# %bb.212:                              # %cond.true653
                                        #   in Loop: Header=BB124_210 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_214
# %bb.213:                              # %cond.true659
                                        #   in Loop: Header=BB124_210 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB124_215
.LBB124_214:                            # %cond.false660
                                        #   in Loop: Header=BB124_210 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_215:                            # %cond.end663
                                        #   in Loop: Header=BB124_210 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB124_220
.LBB124_216:                            # %cond.false667
                                        #   in Loop: Header=BB124_210 Depth=4
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_218
# %bb.217:                              # %cond.true672
                                        #   in Loop: Header=BB124_210 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB124_219
.LBB124_218:                            # %cond.false674
                                        #   in Loop: Header=BB124_210 Depth=4
	movl	$1, %eax
	jmp	.LBB124_219
.LBB124_219:                            # %cond.end675
                                        #   in Loop: Header=BB124_210 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_220:                            # %cond.end680
                                        #   in Loop: Header=BB124_210 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB124_222
# %bb.221:                              # %if.then692
                                        #   in Loop: Header=BB124_210 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB124_222:                            # %if.end693
                                        #   in Loop: Header=BB124_210 Depth=4
	jmp	.LBB124_223
.LBB124_223:                            # %for.inc694
                                        #   in Loop: Header=BB124_210 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB124_210
.LBB124_224:                            # %for.end696
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_232
# %bb.225:                              # %cond.true699
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_227
# %bb.226:                              # %cond.true705
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_228
.LBB124_227:                            # %cond.false706
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_228:                            # %cond.end709
                                        #   in Loop: Header=BB124_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB124_230
# %bb.229:                              # %cond.true718
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB124_231
.LBB124_230:                            # %cond.false719
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB124_231:                            # %cond.end721
                                        #   in Loop: Header=BB124_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB124_236
.LBB124_232:                            # %cond.false726
                                        #   in Loop: Header=BB124_184 Depth=3
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_234
# %bb.233:                              # %cond.true731
                                        #   in Loop: Header=BB124_184 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB124_235
.LBB124_234:                            # %cond.false733
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	$1, %eax
	jmp	.LBB124_235
.LBB124_235:                            # %cond.end734
                                        #   in Loop: Header=BB124_184 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_236:                            # %cond.end739
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB124_258
# %bb.237:                              # %land.lhs.true745
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_258
# %bb.238:                              # %land.lhs.true749
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_258
# %bb.239:                              # %if.then751
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_247
# %bb.240:                              # %cond.true754
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_242
# %bb.241:                              # %cond.true760
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_243
.LBB124_242:                            # %cond.false761
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB124_243:                            # %cond.end763
                                        #   in Loop: Header=BB124_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB124_245
# %bb.244:                              # %cond.true772
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB124_246
.LBB124_245:                            # %cond.false773
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB124_246:                            # %cond.end775
                                        #   in Loop: Header=BB124_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB124_248
.LBB124_247:                            # %cond.false780
                                        #   in Loop: Header=BB124_184 Depth=3
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_248:                            # %cond.end784
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	%eax, -148(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	xorl	%r9d, %r9d
	callq	BPredPartitionCost
	addl	-148(%rbp), %eax
	movl	%eax, -148(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_256
# %bb.249:                              # %cond.true790
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_251
# %bb.250:                              # %cond.true796
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_252
.LBB124_251:                            # %cond.false797
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	refbits, %rcx
	movl	(%rcx), %ecx
.LBB124_252:                            # %cond.end799
                                        #   in Loop: Header=BB124_184 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB124_254
# %bb.253:                              # %cond.true808
                                        #   in Loop: Header=BB124_184 Depth=3
	xorl	%edx, %edx
	jmp	.LBB124_255
.LBB124_254:                            # %cond.false809
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB124_255:                            # %cond.end811
                                        #   in Loop: Header=BB124_184 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB124_257
.LBB124_256:                            # %cond.false816
                                        #   in Loop: Header=BB124_184 Depth=3
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_257:                            # %cond.end820
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	%eax, -180(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-96(%rbp), %r8d
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	movl	$1, %r9d
	callq	BPredPartitionCost
	addl	-180(%rbp), %eax
	movl	%eax, -180(%rbp)
	jmp	.LBB124_259
.LBB124_258:                            # %if.else824
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	$2147483647, -148(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -180(%rbp) # imm = 0x7FFFFFFF
.LBB124_259:                            # %if.end825
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_286
# %bb.260:                              # %land.lhs.true828
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB124_286
# %bb.261:                              # %if.then831
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB124_266
# %bb.262:                              # %land.lhs.true834
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_266
# %bb.263:                              # %land.lhs.true837
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB124_266
# %bb.264:                              # %land.lhs.true840
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB124_266
# %bb.265:                              # %if.then843
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB124_285
.LBB124_266:                            # %if.else845
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB124_271
# %bb.267:                              # %land.lhs.true848
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_271
# %bb.268:                              # %land.lhs.true851
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB124_271
# %bb.269:                              # %land.lhs.true854
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB124_271
# %bb.270:                              # %if.then857
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB124_284
.LBB124_271:                            # %if.else859
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB124_276
# %bb.272:                              # %land.lhs.true862
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB124_276
# %bb.273:                              # %land.lhs.true865
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-148(%rbp), %eax
	jge	.LBB124_276
# %bb.274:                              # %land.lhs.true868
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-88(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jge	.LBB124_276
# %bb.275:                              # %if.then871
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$0, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$0, 71952(%rax,%rcx,2)
	movw	$0, -38(%rbp)
	jmp	.LBB124_283
.LBB124_276:                            # %if.else876
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB124_281
# %bb.277:                              # %land.lhs.true879
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB124_281
# %bb.278:                              # %land.lhs.true882
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_281
# %bb.279:                              # %land.lhs.true885
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-148(%rbp), %eax
	cmpl	-180(%rbp), %eax
	jg	.LBB124_281
# %bb.280:                              # %if.then888
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$2, -50(%rbp)
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movl	-148(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$1, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$1, 71952(%rax,%rcx,2)
	jmp	.LBB124_282
.LBB124_281:                            # %if.else893
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$0, -38(%rbp)
	movw	$0, -36(%rbp)
	movw	$2, -50(%rbp)
	movl	-180(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	$2, bi_pred_me
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movw	$2, 71952(%rax,%rcx,2)
.LBB124_282:                            # %if.end898
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_283
.LBB124_283:                            # %if.end899
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_284
.LBB124_284:                            # %if.end900
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_285
.LBB124_285:                            # %if.end901
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_295
.LBB124_286:                            # %if.else902
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB124_289
# %bb.287:                              # %land.lhs.true905
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_289
# %bb.288:                              # %if.then908
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$0, -50(%rbp)
	movw	$0, -38(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB124_294
.LBB124_289:                            # %if.else910
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB124_292
# %bb.290:                              # %land.lhs.true913
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_292
# %bb.291:                              # %if.then916
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -36(%rbp)
	jmp	.LBB124_293
.LBB124_292:                            # %if.else918
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB124_293:                            # %if.end920
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_294
.LBB124_294:                            # %if.end921
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_295
.LBB124_295:                            # %if.end922
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_297
.LBB124_296:                            # %if.else923
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_297:                            # %if.end925
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB124_353
# %bb.298:                              # %if.then928
                                        #   in Loop: Header=BB124_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB124_308
# %bb.299:                              # %if.then932
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	$0, -24(%rbp)
.LBB124_300:                            # %for.cond933
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_302 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB124_307
# %bb.301:                              # %for.body936
                                        #   in Loop: Header=BB124_300 Depth=4
	movl	$0, -20(%rbp)
.LBB124_302:                            # %for.cond937
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        #         Parent Loop BB124_300 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB124_305
# %bb.303:                              # %for.body940
                                        #   in Loop: Header=BB124_302 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.304:                              # %for.inc997
                                        #   in Loop: Header=BB124_302 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_302
.LBB124_305:                            # %for.end999
                                        #   in Loop: Header=BB124_300 Depth=4
	jmp	.LBB124_306
.LBB124_306:                            # %for.inc1000
                                        #   in Loop: Header=BB124_300 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_300
.LBB124_307:                            # %for.end1002
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_323
.LBB124_308:                            # %if.else1003
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	$0, -24(%rbp)
.LBB124_309:                            # %for.cond1004
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_311 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB124_322
# %bb.310:                              # %for.body1007
                                        #   in Loop: Header=BB124_309 Depth=4
	movl	$0, -20(%rbp)
.LBB124_311:                            # %for.cond1008
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        #         Parent Loop BB124_309 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB124_320
# %bb.312:                              # %for.body1011
                                        #   in Loop: Header=BB124_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB124_317
# %bb.313:                              # %if.then1016
                                        #   in Loop: Header=BB124_311 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB124_315
# %bb.314:                              # %cond.true1023
                                        #   in Loop: Header=BB124_311 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB124_316
.LBB124_315:                            # %cond.false1024
                                        #   in Loop: Header=BB124_311 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB124_316:                            # %cond.end1025
                                        #   in Loop: Header=BB124_311 Depth=5
	movq	%rax, -432(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-432(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB124_318
.LBB124_317:                            # %if.else1111
                                        #   in Loop: Header=BB124_311 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB124_318:                            # %if.end1217
                                        #   in Loop: Header=BB124_311 Depth=5
	jmp	.LBB124_319
.LBB124_319:                            # %for.inc1218
                                        #   in Loop: Header=BB124_311 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_311
.LBB124_320:                            # %for.end1220
                                        #   in Loop: Header=BB124_309 Depth=4
	jmp	.LBB124_321
.LBB124_321:                            # %for.inc1221
                                        #   in Loop: Header=BB124_309 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_309
.LBB124_322:                            # %for.end1223
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_323
.LBB124_323:                            # %if.end1224
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_352
# %bb.324:                              # %if.then1226
                                        #   in Loop: Header=BB124_184 Depth=3
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB124_334
# %bb.325:                              # %if.then1230
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	$0, -24(%rbp)
.LBB124_326:                            # %for.cond1231
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_328 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB124_333
# %bb.327:                              # %for.body1234
                                        #   in Loop: Header=BB124_326 Depth=4
	movl	$0, -20(%rbp)
.LBB124_328:                            # %for.cond1235
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        #         Parent Loop BB124_326 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB124_331
# %bb.329:                              # %for.body1238
                                        #   in Loop: Header=BB124_328 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
# %bb.330:                              # %for.inc1301
                                        #   in Loop: Header=BB124_328 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_328
.LBB124_331:                            # %for.end1303
                                        #   in Loop: Header=BB124_326 Depth=4
	jmp	.LBB124_332
.LBB124_332:                            # %for.inc1304
                                        #   in Loop: Header=BB124_326 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_326
.LBB124_333:                            # %for.end1306
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_351
.LBB124_334:                            # %if.else1307
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	$0, -24(%rbp)
.LBB124_335:                            # %for.cond1308
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_337 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB124_350
# %bb.336:                              # %for.body1311
                                        #   in Loop: Header=BB124_335 Depth=4
	movl	$0, -20(%rbp)
.LBB124_337:                            # %for.cond1312
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        #         Parent Loop BB124_335 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB124_348
# %bb.338:                              # %for.body1315
                                        #   in Loop: Header=BB124_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	cmpw	$0, 71952(%rax,%rcx,2)
	je	.LBB124_343
# %bb.339:                              # %if.then1320
                                        #   in Loop: Header=BB124_337 Depth=5
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$1, %eax
	jne	.LBB124_341
# %bb.340:                              # %cond.true1328
                                        #   in Loop: Header=BB124_337 Depth=5
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB124_342
.LBB124_341:                            # %cond.false1330
                                        #   in Loop: Header=BB124_337 Depth=5
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB124_342:                            # %cond.end1332
                                        #   in Loop: Header=BB124_337 Depth=5
	movq	%rax, -424(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$0, (%rax,%rcx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-424(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB124_346
.LBB124_343:                            # %if.else1419
                                        #   in Loop: Header=BB124_337 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB124_345
# %bb.344:                              # %if.then1474
                                        #   in Loop: Header=BB124_337 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB124_345:                            # %if.end1529
                                        #   in Loop: Header=BB124_337 Depth=5
	jmp	.LBB124_346
.LBB124_346:                            # %if.end1530
                                        #   in Loop: Header=BB124_337 Depth=5
	jmp	.LBB124_347
.LBB124_347:                            # %for.inc1531
                                        #   in Loop: Header=BB124_337 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_337
.LBB124_348:                            # %for.end1533
                                        #   in Loop: Header=BB124_335 Depth=4
	jmp	.LBB124_349
.LBB124_349:                            # %for.inc1534
                                        #   in Loop: Header=BB124_335 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_335
.LBB124_350:                            # %for.end1536
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_351
.LBB124_351:                            # %if.end1537
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_352
.LBB124_352:                            # %if.end1538
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_393
.LBB124_353:                            # %if.else1539
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB124_373
# %bb.354:                              # %if.then1542
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	img, %rax
	movl	148(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -24(%rbp)
.LBB124_355:                            # %for.cond1546
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_357 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_372
# %bb.356:                              # %for.body1549
                                        #   in Loop: Header=BB124_355 Depth=4
	movl	$0, -20(%rbp)
.LBB124_357:                            # %for.cond1550
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        #         Parent Loop BB124_355 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -20(%rbp)
	jge	.LBB124_370
# %bb.358:                              # %for.body1553
                                        #   in Loop: Header=BB124_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB124_360
# %bb.359:                              # %if.then1557
                                        #   in Loop: Header=BB124_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB124_361
.LBB124_360:                            # %if.else1596
                                        #   in Loop: Header=BB124_357 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB124_361:                            # %if.end1676
                                        #   in Loop: Header=BB124_357 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB124_368
# %bb.362:                              # %if.then1678
                                        #   in Loop: Header=BB124_357 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB124_364
# %bb.363:                              # %if.then1682
                                        #   in Loop: Header=BB124_357 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-120(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB124_367
.LBB124_364:                            # %if.else1721
                                        #   in Loop: Header=BB124_357 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB124_366
# %bb.365:                              # %if.then1758
                                        #   in Loop: Header=BB124_357 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-120(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB124_366:                            # %if.end1805
                                        #   in Loop: Header=BB124_357 Depth=5
	jmp	.LBB124_367
.LBB124_367:                            # %if.end1806
                                        #   in Loop: Header=BB124_357 Depth=5
	jmp	.LBB124_368
.LBB124_368:                            # %if.end1807
                                        #   in Loop: Header=BB124_357 Depth=5
	jmp	.LBB124_369
.LBB124_369:                            # %for.inc1808
                                        #   in Loop: Header=BB124_357 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_357
.LBB124_370:                            # %for.end1810
                                        #   in Loop: Header=BB124_355 Depth=4
	jmp	.LBB124_371
.LBB124_371:                            # %for.inc1811
                                        #   in Loop: Header=BB124_355 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_355
.LBB124_372:                            # %for.end1813
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_392
.LBB124_373:                            # %if.else1814
                                        #   in Loop: Header=BB124_184 Depth=3
	movq	img, %rax
	movl	144(%rax), %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -24(%rbp)
.LBB124_374:                            # %for.cond1818
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_376 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB124_391
# %bb.375:                              # %for.body1821
                                        #   in Loop: Header=BB124_374 Depth=4
	movl	$0, -20(%rbp)
.LBB124_376:                            # %for.cond1822
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_181 Depth=2
                                        #       Parent Loop BB124_184 Depth=3
                                        #         Parent Loop BB124_374 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB124_389
# %bb.377:                              # %for.body1825
                                        #   in Loop: Header=BB124_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$1, %eax
	jne	.LBB124_379
# %bb.378:                              # %if.then1829
                                        #   in Loop: Header=BB124_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB124_380
.LBB124_379:                            # %if.else1868
                                        #   in Loop: Header=BB124_376 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB124_380:                            # %if.end1948
                                        #   in Loop: Header=BB124_376 Depth=5
	cmpl	$0, -108(%rbp)
	je	.LBB124_387
# %bb.381:                              # %if.then1950
                                        #   in Loop: Header=BB124_376 Depth=5
	movswl	-50(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB124_383
# %bb.382:                              # %if.then1954
                                        #   in Loop: Header=BB124_376 Depth=5
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-116(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB124_386
.LBB124_383:                            # %if.else1993
                                        #   in Loop: Header=BB124_376 Depth=5
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	movswl	-38(%rbp), %eax
	cmpl	$0, %eax
	jl	.LBB124_385
# %bb.384:                              # %if.then2030
                                        #   in Loop: Header=BB124_376 Depth=5
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	movq	71928(%rax), %rax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-38(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-116(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB124_385:                            # %if.end2077
                                        #   in Loop: Header=BB124_376 Depth=5
	jmp	.LBB124_386
.LBB124_386:                            # %if.end2078
                                        #   in Loop: Header=BB124_376 Depth=5
	jmp	.LBB124_387
.LBB124_387:                            # %if.end2079
                                        #   in Loop: Header=BB124_376 Depth=5
	jmp	.LBB124_388
.LBB124_388:                            # %for.inc2080
                                        #   in Loop: Header=BB124_376 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_376
.LBB124_389:                            # %for.end2082
                                        #   in Loop: Header=BB124_374 Depth=4
	jmp	.LBB124_390
.LBB124_390:                            # %for.inc2083
                                        #   in Loop: Header=BB124_374 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_374
.LBB124_391:                            # %for.end2085
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_392
.LBB124_392:                            # %if.end2086
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_393
.LBB124_393:                            # %if.end2087
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$3, -32(%rbp)
	jne	.LBB124_395
# %bb.394:                              # %if.then2090
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+24(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+24(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+24(,%rcx,2)
	jmp	.LBB124_399
.LBB124_395:                            # %if.else2106
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$2, -32(%rbp)
	jne	.LBB124_397
# %bb.396:                              # %if.then2109
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	-36(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8fwref+16(,%rcx,2)
	movw	-50(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8pdir+16(,%rcx,2)
	movw	-38(%rbp), %ax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	%ax, best8x8bwref+16(,%rcx,2)
	jmp	.LBB124_398
.LBB124_397:                            # %if.else2131
                                        #   in Loop: Header=BB124_184 Depth=3
	movw	-36(%rbp), %ax
	movw	%ax, best8x8fwref+14
	movw	%ax, best8x8fwref+12
	movw	%ax, best8x8fwref+10
	movw	%ax, best8x8fwref+8
	movw	-50(%rbp), %ax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movw	-38(%rbp), %ax
	movw	%ax, best8x8bwref+14
	movw	%ax, best8x8bwref+12
	movw	%ax, best8x8bwref+10
	movw	%ax, best8x8bwref+8
.LBB124_398:                            # %if.end2132
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_399
.LBB124_399:                            # %if.end2133
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$1, -32(%rbp)
	jle	.LBB124_402
# %bb.400:                              # %land.lhs.true2136
                                        #   in Loop: Header=BB124_184 Depth=3
	cmpl	$0, -28(%rbp)
	jne	.LBB124_402
# %bb.401:                              # %if.then2139
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movswl	-50(%rbp), %edx
	movswl	-36(%rbp), %ecx
	movswl	-38(%rbp), %r8d
	callq	SetRefAndMotionVectors
.LBB124_402:                            # %if.end2143
                                        #   in Loop: Header=BB124_184 Depth=3
	jmp	.LBB124_403
.LBB124_403:                            # %for.inc2144
                                        #   in Loop: Header=BB124_184 Depth=3
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB124_184
.LBB124_404:                            # %for.end2146
                                        #   in Loop: Header=BB124_181 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_408
# %bb.405:                              # %if.then2149
                                        #   in Loop: Header=BB124_181 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB124_407
# %bb.406:                              # %if.then2152
                                        #   in Loop: Header=BB124_181 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	leaq	-60(%rbp), %rsi
	callq	TransformDecision
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB124_407:                            # %if.end2155
                                        #   in Loop: Header=BB124_181 Depth=2
	jmp	.LBB124_408
.LBB124_408:                            # %if.end2156
                                        #   in Loop: Header=BB124_181 Depth=2
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB124_410
# %bb.409:                              # %if.then2159
                                        #   in Loop: Header=BB124_181 Depth=2
	movl	-32(%rbp), %eax
	movl	%eax, best_mode
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -320(%rbp)
.LBB124_410:                            # %if.end2161
                                        #   in Loop: Header=BB124_181 Depth=2
	jmp	.LBB124_411
.LBB124_411:                            # %if.end2162
                                        #   in Loop: Header=BB124_181 Depth=2
	jmp	.LBB124_412
.LBB124_412:                            # %for.inc2163
                                        #   in Loop: Header=BB124_181 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB124_181
.LBB124_413:                            # %for.end2165
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -352(%rbp)
	je	.LBB124_826
# %bb.414:                              # %if.then2168
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$2147483647, cost8_8x8ts # imm = 0x7FFFFFFF
	movq	cs_mb, %rdi
	callq	store_coding_state
	movq	-48(%rbp), %rax
	movl	$-1, 568(%rax)
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB124_599
# %bb.415:                              # %if.then2171
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB124_416:                            # %for.cond2172
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_418 Depth 3
                                        #         Child Loop BB124_445 Depth 4
                                        #         Child Loop BB124_464 Depth 4
                                        #           Child Loop BB124_466 Depth 5
                                        #         Child Loop BB124_473 Depth 4
                                        #         Child Loop BB124_508 Depth 4
                                        #           Child Loop BB124_510 Depth 5
                                        #         Child Loop BB124_532 Depth 4
                                        #           Child Loop BB124_534 Depth 5
                                        #             Child Loop BB124_536 Depth 6
                                        #         Child Loop BB124_544 Depth 4
                                        #           Child Loop BB124_546 Depth 5
                                        #       Child Loop BB124_569 Depth 3
                                        #         Child Loop BB124_571 Depth 4
                                        #           Child Loop BB124_573 Depth 5
                                        #       Child Loop BB124_581 Depth 3
                                        #         Child Loop BB124_583 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB124_598
# %bb.417:                              # %for.body2175
                                        #   in Loop: Header=BB124_416 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB124_418:                            # %for.cond2184
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_445 Depth 4
                                        #         Child Loop BB124_464 Depth 4
                                        #           Child Loop BB124_466 Depth 5
                                        #         Child Loop BB124_473 Depth 4
                                        #         Child Loop BB124_508 Depth 4
                                        #           Child Loop BB124_510 Depth 5
                                        #         Child Loop BB124_532 Depth 4
                                        #           Child Loop BB124_534 Depth 5
                                        #             Child Loop BB124_536 Depth 6
                                        #         Child Loop BB124_544 Depth 4
                                        #           Child Loop BB124_546 Depth 5
	cmpl	$2, -80(%rbp)
	jge	.LBB124_559
# %bb.419:                              # %for.body2187
                                        #   in Loop: Header=BB124_418 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB124_421
# %bb.420:                              # %land.lhs.true2193
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB124_423
.LBB124_421:                            # %lor.lhs.false2196
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB124_557
# %bb.422:                              # %land.lhs.true2199
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB124_557
.LBB124_423:                            # %if.then2201
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB124_444
# %bb.424:                              # %if.then2204
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_443
# %bb.425:                              # %if.then2207
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	$0, -216(%rbp)
	movl	$0, -212(%rbp)
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -216(%rbp)
	cmpl	$2147483647, -216(%rbp) # imm = 0x7FFFFFFF
	je	.LBB124_427
# %bb.426:                              # %lor.lhs.false2211
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB124_428
.LBB124_427:                            # %if.then2214
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	movl	$2147483647, -204(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB124_429
.LBB124_428:                            # %if.else2215
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-216(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-212(%rbp), %eax
	addl	-204(%rbp), %eax
	movl	%eax, -204(%rbp)
.LBB124_429:                            # %if.end2218
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB124_431
	jmp	.LBB124_430
.LBB124_430:                            # %if.end2218
                                        #   in Loop: Header=BB124_418 Depth=3
	subl	$2, %eax
	je	.LBB124_438
	jmp	.LBB124_439
.LBB124_431:                            # %sw.bb
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-212(%rbp), %eax
	cmpl	-216(%rbp), %eax
	jl	.LBB124_435
# %bb.432:                              # %lor.lhs.false2222
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$0, -364(%rbp)
	je	.LBB124_435
# %bb.433:                              # %land.lhs.true2225
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$0, -360(%rbp)
	je	.LBB124_435
# %bb.434:                              # %land.lhs.true2228
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$0, -356(%rbp)
	jne	.LBB124_436
.LBB124_435:                            # %if.then2231
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB124_437
.LBB124_436:                            # %if.else2232
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_437:                            # %if.end2233
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_440
.LBB124_438:                            # %sw.bb2234
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-212(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB124_440
.LBB124_439:                            # %sw.default
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-216(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_440:                            # %sw.epilog
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_442
# %bb.441:                              # %if.then2238
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-172(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB124_442:                            # %if.end2240
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB124_443:                            # %if.end2242
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB124_518
.LBB124_444:                            # %if.else2278
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB124_445:                            # %for.cond2279
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_463
# %bb.446:                              # %for.body2286
                                        #   in Loop: Header=BB124_445 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB124_449
# %bb.447:                              # %lor.lhs.false2288
                                        #   in Loop: Header=BB124_445 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB124_449
# %bb.448:                              # %lor.lhs.false2292
                                        #   in Loop: Header=BB124_445 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB124_461
.LBB124_449:                            # %if.then2296
                                        #   in Loop: Header=BB124_445 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_454
# %bb.450:                              # %cond.true2299
                                        #   in Loop: Header=BB124_445 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_452
# %bb.451:                              # %cond.true2305
                                        #   in Loop: Header=BB124_445 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB124_453
.LBB124_452:                            # %cond.false2306
                                        #   in Loop: Header=BB124_445 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_453:                            # %cond.end2309
                                        #   in Loop: Header=BB124_445 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB124_458
.LBB124_454:                            # %cond.false2313
                                        #   in Loop: Header=BB124_445 Depth=4
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_456
# %bb.455:                              # %cond.true2318
                                        #   in Loop: Header=BB124_445 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB124_457
.LBB124_456:                            # %cond.false2320
                                        #   in Loop: Header=BB124_445 Depth=4
	movl	$1, %eax
	jmp	.LBB124_457
.LBB124_457:                            # %cond.end2321
                                        #   in Loop: Header=BB124_445 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_458:                            # %cond.end2326
                                        #   in Loop: Header=BB124_445 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB124_460
# %bb.459:                              # %if.then2338
                                        #   in Loop: Header=BB124_445 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB124_460:                            # %if.end2339
                                        #   in Loop: Header=BB124_445 Depth=4
	jmp	.LBB124_461
.LBB124_461:                            # %if.end2340
                                        #   in Loop: Header=BB124_445 Depth=4
	jmp	.LBB124_462
.LBB124_462:                            # %for.inc2341
                                        #   in Loop: Header=BB124_445 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB124_445
.LBB124_463:                            # %for.end2343
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	$0, -24(%rbp)
.LBB124_464:                            # %for.cond2344
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_466 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_471
# %bb.465:                              # %for.body2347
                                        #   in Loop: Header=BB124_464 Depth=4
	movl	$0, -20(%rbp)
.LBB124_466:                            # %for.cond2348
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        #         Parent Loop BB124_464 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB124_469
# %bb.467:                              # %for.body2351
                                        #   in Loop: Header=BB124_466 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.468:                              # %for.inc2403
                                        #   in Loop: Header=BB124_466 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_466
.LBB124_469:                            # %for.end2405
                                        #   in Loop: Header=BB124_464 Depth=4
	jmp	.LBB124_470
.LBB124_470:                            # %for.inc2406
                                        #   in Loop: Header=BB124_464 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_464
.LBB124_471:                            # %for.end2408
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_516
# %bb.472:                              # %if.then2410
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB124_473:                            # %for.cond2411
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_487
# %bb.474:                              # %for.body2418
                                        #   in Loop: Header=BB124_473 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_479
# %bb.475:                              # %cond.true2421
                                        #   in Loop: Header=BB124_473 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_477
# %bb.476:                              # %cond.true2427
                                        #   in Loop: Header=BB124_473 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB124_478
.LBB124_477:                            # %cond.false2428
                                        #   in Loop: Header=BB124_473 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_478:                            # %cond.end2431
                                        #   in Loop: Header=BB124_473 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB124_483
.LBB124_479:                            # %cond.false2435
                                        #   in Loop: Header=BB124_473 Depth=4
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_481
# %bb.480:                              # %cond.true2440
                                        #   in Loop: Header=BB124_473 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB124_482
.LBB124_481:                            # %cond.false2442
                                        #   in Loop: Header=BB124_473 Depth=4
	movl	$1, %eax
	jmp	.LBB124_482
.LBB124_482:                            # %cond.end2443
                                        #   in Loop: Header=BB124_473 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_483:                            # %cond.end2448
                                        #   in Loop: Header=BB124_473 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB124_485
# %bb.484:                              # %if.then2460
                                        #   in Loop: Header=BB124_473 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB124_485:                            # %if.end2461
                                        #   in Loop: Header=BB124_473 Depth=4
	jmp	.LBB124_486
.LBB124_486:                            # %for.inc2462
                                        #   in Loop: Header=BB124_473 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB124_473
.LBB124_487:                            # %for.end2464
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_495
# %bb.488:                              # %cond.true2467
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_490
# %bb.489:                              # %cond.true2473
                                        #   in Loop: Header=BB124_418 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_491
.LBB124_490:                            # %cond.false2474
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_491:                            # %cond.end2477
                                        #   in Loop: Header=BB124_418 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB124_493
# %bb.492:                              # %cond.true2486
                                        #   in Loop: Header=BB124_418 Depth=3
	xorl	%edx, %edx
	jmp	.LBB124_494
.LBB124_493:                            # %cond.false2487
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB124_494:                            # %cond.end2489
                                        #   in Loop: Header=BB124_418 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB124_499
.LBB124_495:                            # %cond.false2494
                                        #   in Loop: Header=BB124_418 Depth=3
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_497
# %bb.496:                              # %cond.true2499
                                        #   in Loop: Header=BB124_418 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB124_498
.LBB124_497:                            # %cond.false2501
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	$1, %eax
	jmp	.LBB124_498
.LBB124_498:                            # %cond.end2502
                                        #   in Loop: Header=BB124_418 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_499:                            # %cond.end2507
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB124_502
# %bb.500:                              # %land.lhs.true2513
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_502
# %bb.501:                              # %if.then2516
                                        #   in Loop: Header=BB124_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB124_507
.LBB124_502:                            # %if.else2517
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB124_505
# %bb.503:                              # %land.lhs.true2520
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_505
# %bb.504:                              # %if.then2523
                                        #   in Loop: Header=BB124_418 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB124_506
.LBB124_505:                            # %if.else2524
                                        #   in Loop: Header=BB124_418 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB124_506:                            # %if.end2525
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_507
.LBB124_507:                            # %if.end2526
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	$0, -24(%rbp)
.LBB124_508:                            # %for.cond2527
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_510 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_515
# %bb.509:                              # %for.body2530
                                        #   in Loop: Header=BB124_508 Depth=4
	movl	$0, -20(%rbp)
.LBB124_510:                            # %for.cond2531
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        #         Parent Loop BB124_508 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB124_513
# %bb.511:                              # %for.body2534
                                        #   in Loop: Header=BB124_510 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.512:                              # %for.inc2565
                                        #   in Loop: Header=BB124_510 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_510
.LBB124_513:                            # %for.end2567
                                        #   in Loop: Header=BB124_508 Depth=4
	jmp	.LBB124_514
.LBB124_514:                            # %for.inc2568
                                        #   in Loop: Header=BB124_508 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_508
.LBB124_515:                            # %for.end2570
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_517
.LBB124_516:                            # %if.else2571
                                        #   in Loop: Header=BB124_418 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_517:                            # %if.end2572
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_518
.LBB124_518:                            # %if.end2573
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_520
# %bb.519:                              # %if.then2576
                                        #   in Loop: Header=BB124_418 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB124_526
.LBB124_520:                            # %if.else2578
                                        #   in Loop: Header=BB124_418 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB124_525
# %bb.521:                              # %if.then2581
                                        #   in Loop: Header=BB124_418 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB124_523
# %bb.522:                              # %cond.true2591
                                        #   in Loop: Header=BB124_418 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_524
.LBB124_523:                            # %cond.false2592
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB124_524:                            # %cond.end2597
                                        #   in Loop: Header=BB124_418 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB124_525:                            # %if.end2603
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_526
.LBB124_526:                            # %if.end2604
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_528
# %bb.527:                              # %land.lhs.true2607
                                        #   in Loop: Header=BB124_418 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB124_530
.LBB124_528:                            # %lor.lhs.false2610
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_556
# %bb.529:                              # %land.lhs.true2613
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB124_556
.LBB124_530:                            # %if.then2616
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, part8x8mode(,%rcx,4)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8pdir(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8fwref(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, part8x8bwref(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_555
# %bb.531:                              # %if.then2627
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB124_532:                            # %for.cond2638
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_534 Depth 5
                                        #             Child Loop BB124_536 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB124_543
# %bb.533:                              # %for.body2641
                                        #   in Loop: Header=BB124_532 Depth=4
	movl	$0, -24(%rbp)
.LBB124_534:                            # %for.cond2642
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        #         Parent Loop BB124_532 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB124_536 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB124_541
# %bb.535:                              # %for.body2645
                                        #   in Loop: Header=BB124_534 Depth=5
	movl	$0, -20(%rbp)
.LBB124_536:                            # %for.cond2646
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        #         Parent Loop BB124_532 Depth=4
                                        #           Parent Loop BB124_534 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB124_539
# %bb.537:                              # %for.body2649
                                        #   in Loop: Header=BB124_536 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.538:                              # %for.inc2666
                                        #   in Loop: Header=BB124_536 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_536
.LBB124_539:                            # %for.end2668
                                        #   in Loop: Header=BB124_534 Depth=5
	jmp	.LBB124_540
.LBB124_540:                            # %for.inc2669
                                        #   in Loop: Header=BB124_534 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_534
.LBB124_541:                            # %for.end2671
                                        #   in Loop: Header=BB124_532 Depth=4
	jmp	.LBB124_542
.LBB124_542:                            # %for.inc2672
                                        #   in Loop: Header=BB124_532 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_532
.LBB124_543:                            # %for.end2674
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_544:                            # %for.cond2675
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_546 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_554
# %bb.545:                              # %for.body2679
                                        #   in Loop: Header=BB124_544 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_546:                            # %for.cond2680
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_418 Depth=3
                                        #         Parent Loop BB124_544 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_552
# %bb.547:                              # %for.body2684
                                        #   in Loop: Header=BB124_546 Depth=5
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_549
# %bb.548:                              # %if.then2686
                                        #   in Loop: Header=BB124_546 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB124_550
.LBB124_549:                            # %if.else2705
                                        #   in Loop: Header=BB124_546 Depth=5
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB124_550:                            # %if.end2754
                                        #   in Loop: Header=BB124_546 Depth=5
	jmp	.LBB124_551
.LBB124_551:                            # %for.inc2755
                                        #   in Loop: Header=BB124_546 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_546
.LBB124_552:                            # %for.end2757
                                        #   in Loop: Header=BB124_544 Depth=4
	jmp	.LBB124_553
.LBB124_553:                            # %for.inc2758
                                        #   in Loop: Header=BB124_544 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_544
.LBB124_554:                            # %for.end2760
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_555
.LBB124_555:                            # %if.end2761
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB124_556:                            # %if.end2762
                                        #   in Loop: Header=BB124_418 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB124_557:                            # %if.end2763
                                        #   in Loop: Header=BB124_418 Depth=3
	jmp	.LBB124_558
.LBB124_558:                            # %for.inc2764
                                        #   in Loop: Header=BB124_418 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB124_418
.LBB124_559:                            # %for.end2766
                                        #   in Loop: Header=BB124_416 Depth=2
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_592
# %bb.560:                              # %if.then2769
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	part8x8pdir(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB124_562
# %bb.561:                              # %lor.lhs.false2778
                                        #   in Loop: Header=BB124_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB124_563
.LBB124_562:                            # %cond.true2782
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB124_564
.LBB124_563:                            # %cond.false2783
                                        #   in Loop: Header=BB124_416 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB124_564
.LBB124_564:                            # %cond.end2784
                                        #   in Loop: Header=BB124_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB124_566
# %bb.565:                              # %lor.lhs.false2789
                                        #   in Loop: Header=BB124_416 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB124_567
.LBB124_566:                            # %cond.true2793
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB124_568
.LBB124_567:                            # %cond.false2794
                                        #   in Loop: Header=BB124_416 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB124_568
.LBB124_568:                            # %cond.end2795
                                        #   in Loop: Header=BB124_416 Depth=2
	movslq	-28(%rbp), %rcx
	movw	part8x8fwref(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	part8x8bwref(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB124_569:                            # %for.cond2813
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_571 Depth 4
                                        #           Child Loop BB124_573 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB124_580
# %bb.570:                              # %for.body2816
                                        #   in Loop: Header=BB124_569 Depth=3
	movl	$0, -24(%rbp)
.LBB124_571:                            # %for.cond2817
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_569 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_573 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_578
# %bb.572:                              # %for.body2820
                                        #   in Loop: Header=BB124_571 Depth=4
	movl	$0, -20(%rbp)
.LBB124_573:                            # %for.cond2821
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_569 Depth=3
                                        #         Parent Loop BB124_571 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB124_576
# %bb.574:                              # %for.body2824
                                        #   in Loop: Header=BB124_573 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC_8x8ts, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.575:                              # %for.inc2842
                                        #   in Loop: Header=BB124_573 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_573
.LBB124_576:                            # %for.end2844
                                        #   in Loop: Header=BB124_571 Depth=4
	jmp	.LBB124_577
.LBB124_577:                            # %for.inc2845
                                        #   in Loop: Header=BB124_571 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_571
.LBB124_578:                            # %for.end2847
                                        #   in Loop: Header=BB124_569 Depth=3
	jmp	.LBB124_579
.LBB124_579:                            # %for.inc2848
                                        #   in Loop: Header=BB124_569 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_569
.LBB124_580:                            # %for.end2850
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_581:                            # %for.cond2851
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_583 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_591
# %bb.582:                              # %for.body2855
                                        #   in Loop: Header=BB124_581 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_583:                            # %for.cond2856
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_416 Depth=2
                                        #       Parent Loop BB124_581 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_589
# %bb.584:                              # %for.body2860
                                        #   in Loop: Header=BB124_583 Depth=4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB124_586
# %bb.585:                              # %if.then2863
                                        #   in Loop: Header=BB124_583 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr_8x8ts, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	jmp	.LBB124_587
.LBB124_586:                            # %if.else2886
                                        #   in Loop: Header=BB124_583 Depth=4
	movabsq	$mprRGB_8x8ts, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8ts, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8ts, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
.LBB124_587:                            # %if.end2935
                                        #   in Loop: Header=BB124_583 Depth=4
	jmp	.LBB124_588
.LBB124_588:                            # %for.inc2936
                                        #   in Loop: Header=BB124_583 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_583
.LBB124_589:                            # %for.end2938
                                        #   in Loop: Header=BB124_581 Depth=3
	jmp	.LBB124_590
.LBB124_590:                            # %for.inc2939
                                        #   in Loop: Header=BB124_581 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_581
.LBB124_591:                            # %for.end2941
                                        #   in Loop: Header=BB124_416 Depth=2
	jmp	.LBB124_592
.LBB124_592:                            # %if.end2942
                                        #   in Loop: Header=BB124_416 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB124_594
# %bb.593:                              # %if.then2944
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB124_594:                            # %if.end2948
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-28(%rbp), %esi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %r9d
	movl	-108(%rbp), %eax
	xorl	%edi, %edi
	movl	%eax, (%rsp)
	callq	StoreNewMotionVectorsBlock8x8
	movl	-28(%rbp), %edi
	movslq	-28(%rbp), %rax
	movl	part8x8mode(,%rax,4), %esi
	movslq	-28(%rbp), %rax
	movswl	part8x8pdir(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	part8x8fwref(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	part8x8bwref(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	cmpl	$3, -28(%rbp)
	jge	.LBB124_596
# %bb.595:                              # %if.then2973
                                        #   in Loop: Header=BB124_416 Depth=2
	movq	cs_b8, %rdi
	callq	reset_coding_state
.LBB124_596:                            # %if.end2974
                                        #   in Loop: Header=BB124_416 Depth=2
	jmp	.LBB124_597
.LBB124_597:                            # %for.inc2975
                                        #   in Loop: Header=BB124_416 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB124_416
.LBB124_598:                            # %for.end2977
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	cbp8x8, %eax
	movl	%eax, cbp8_8x8ts
	movslq	cbp_blk8x8, %rax
	movq	%rax, cbp_blk8_8x8ts
	movl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz8_8x8ts
	movl	-144(%rbp), %eax
	movl	%eax, cost8_8x8ts
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_599:                            # %if.end2980
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB124_802
# %bb.600:                              # %if.then2984
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -144(%rbp)
	movl	$0, cnt_nonz_8x8
	movl	$0, cbp_blk8x8
	movl	$0, cbp8x8
	movl	$0, -140(%rbp)
	movl	$0, -28(%rbp)
.LBB124_601:                            # %for.cond2985
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_603 Depth 3
                                        #         Child Loop BB124_614 Depth 4
                                        #         Child Loop BB124_633 Depth 4
                                        #           Child Loop BB124_635 Depth 5
                                        #         Child Loop BB124_642 Depth 4
                                        #         Child Loop BB124_677 Depth 4
                                        #           Child Loop BB124_679 Depth 5
                                        #         Child Loop BB124_701 Depth 4
                                        #           Child Loop BB124_703 Depth 5
                                        #             Child Loop BB124_705 Depth 6
                                        #         Child Loop BB124_713 Depth 4
                                        #           Child Loop BB124_715 Depth 5
                                        #         Child Loop BB124_723 Depth 4
                                        #           Child Loop BB124_725 Depth 5
                                        #       Child Loop BB124_745 Depth 3
                                        #         Child Loop BB124_747 Depth 4
                                        #           Child Loop BB124_749 Depth 5
                                        #       Child Loop BB124_757 Depth 3
                                        #         Child Loop BB124_759 Depth 4
                                        #       Child Loop BB124_766 Depth 3
                                        #         Child Loop BB124_768 Depth 4
                                        #       Child Loop BB124_778 Depth 3
                                        #         Child Loop BB124_780 Depth 4
                                        #       Child Loop BB124_786 Depth 3
                                        #       Child Loop BB124_791 Depth 3
                                        #         Child Loop BB124_793 Depth 4
	cmpl	$4, -28(%rbp)
	jge	.LBB124_801
# %bb.602:                              # %for.body2988
                                        #   in Loop: Header=BB124_601 Depth=2
	xorl	%ecx, %ecx
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -408(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -416(%rbp)
	movl	$2147483647, -172(%rbp) # imm = 0x7FFFFFFF
	vmovsd	%xmm0, -248(%rbp)
	movl	-108(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movl	%eax, -80(%rbp)
.LBB124_603:                            # %for.cond2997
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_614 Depth 4
                                        #         Child Loop BB124_633 Depth 4
                                        #           Child Loop BB124_635 Depth 5
                                        #         Child Loop BB124_642 Depth 4
                                        #         Child Loop BB124_677 Depth 4
                                        #           Child Loop BB124_679 Depth 5
                                        #         Child Loop BB124_701 Depth 4
                                        #           Child Loop BB124_703 Depth 5
                                        #             Child Loop BB124_705 Depth 6
                                        #         Child Loop BB124_713 Depth 4
                                        #           Child Loop BB124_715 Depth 5
                                        #         Child Loop BB124_723 Depth 4
                                        #           Child Loop BB124_725 Depth 5
	cmpl	$5, -80(%rbp)
	jge	.LBB124_735
# %bb.604:                              # %for.body3000
                                        #   in Loop: Header=BB124_603 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.b8_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cltq
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB124_733
# %bb.605:                              # %if.then3006
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	$0, -240(%rbp)
	cmpl	$0, -32(%rbp)
	jne	.LBB124_613
# %bb.606:                              # %if.then3009
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_612
# %bb.607:                              # %if.then3012
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-28(%rbp), %edi
	leaq	-212(%rbp), %rsi
	callq	Get_Direct_Cost8x8
	movl	%eax, -60(%rbp)
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB124_609
# %bb.608:                              # %lor.lhs.false3016
                                        #   in Loop: Header=BB124_603 Depth=3
	cmpl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jne	.LBB124_610
.LBB124_609:                            # %if.then3019
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	$2147483647, -140(%rbp) # imm = 0x7FFFFFFF
	jmp	.LBB124_611
.LBB124_610:                            # %if.else3020
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-60(%rbp), %eax
	addl	-140(%rbp), %eax
	movl	%eax, -140(%rbp)
.LBB124_611:                            # %if.end3022
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-252(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -252(%rbp)
.LBB124_612:                            # %if.end3024
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -36(%rbp)
	movq	direct_ref_idx, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -38(%rbp)
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$1, %edx
	shll	$1, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	movl	-28(%rbp), %edx
	andl	$2, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movw	%ax, -50(%rbp)
	jmp	.LBB124_687
.LBB124_613:                            # %if.else3060
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-168(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	PartitionMotionSearch
	movl	-208(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	$0, -34(%rbp)
.LBB124_614:                            # %for.cond3061
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_632
# %bb.615:                              # %for.body3068
                                        #   in Loop: Header=BB124_614 Depth=4
	cmpl	$0, -284(%rbp)
	je	.LBB124_618
# %bb.616:                              # %lor.lhs.false3070
                                        #   in Loop: Header=BB124_614 Depth=4
	movswl	-34(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB124_618
# %bb.617:                              # %lor.lhs.false3074
                                        #   in Loop: Header=BB124_614 Depth=4
	movl	-28(%rbp), %edi
	movswl	-34(%rbp), %edx
	movl	-32(%rbp), %ecx
	xorl	%esi, %esi
	callq	CheckReliabilityOfRef
	cmpl	$0, %eax
	je	.LBB124_630
.LBB124_618:                            # %if.then3078
                                        #   in Loop: Header=BB124_614 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_623
# %bb.619:                              # %cond.true3081
                                        #   in Loop: Header=BB124_614 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_621
# %bb.620:                              # %cond.true3087
                                        #   in Loop: Header=BB124_614 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB124_622
.LBB124_621:                            # %cond.false3088
                                        #   in Loop: Header=BB124_614 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_622:                            # %cond.end3091
                                        #   in Loop: Header=BB124_614 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB124_627
.LBB124_623:                            # %cond.false3095
                                        #   in Loop: Header=BB124_614 Depth=4
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_625
# %bb.624:                              # %cond.true3100
                                        #   in Loop: Header=BB124_614 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB124_626
.LBB124_625:                            # %cond.false3102
                                        #   in Loop: Header=BB124_614 Depth=4
	movl	$1, %eax
	jmp	.LBB124_626
.LBB124_626:                            # %cond.end3103
                                        #   in Loop: Header=BB124_614 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_627:                            # %cond.end3108
                                        #   in Loop: Header=BB124_614 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB124_629
# %bb.628:                              # %if.then3120
                                        #   in Loop: Header=BB124_614 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -68(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -36(%rbp)
.LBB124_629:                            # %if.end3121
                                        #   in Loop: Header=BB124_614 Depth=4
	jmp	.LBB124_630
.LBB124_630:                            # %if.end3122
                                        #   in Loop: Header=BB124_614 Depth=4
	jmp	.LBB124_631
.LBB124_631:                            # %for.inc3123
                                        #   in Loop: Header=BB124_614 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB124_614
.LBB124_632:                            # %for.end3125
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	$0, -24(%rbp)
.LBB124_633:                            # %for.cond3126
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_635 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_640
# %bb.634:                              # %for.body3129
                                        #   in Loop: Header=BB124_633 Depth=4
	movl	$0, -20(%rbp)
.LBB124_635:                            # %for.cond3130
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        #         Parent Loop BB124_633 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB124_638
# %bb.636:                              # %for.body3133
                                        #   in Loop: Header=BB124_635 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
# %bb.637:                              # %for.inc3185
                                        #   in Loop: Header=BB124_635 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_635
.LBB124_638:                            # %for.end3187
                                        #   in Loop: Header=BB124_633 Depth=4
	jmp	.LBB124_639
.LBB124_639:                            # %for.inc3188
                                        #   in Loop: Header=BB124_633 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_633
.LBB124_640:                            # %for.end3190
                                        #   in Loop: Header=BB124_603 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_685
# %bb.641:                              # %if.then3192
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-208(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	$0, -34(%rbp)
.LBB124_642:                            # %for.cond3193
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movswl	-34(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	listXsize(,%rcx,4), %eax
	jge	.LBB124_656
# %bb.643:                              # %for.body3200
                                        #   in Loop: Header=BB124_642 Depth=4
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_648
# %bb.644:                              # %cond.true3203
                                        #   in Loop: Header=BB124_642 Depth=4
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_646
# %bb.645:                              # %cond.true3209
                                        #   in Loop: Header=BB124_642 Depth=4
	xorl	%ecx, %ecx
	jmp	.LBB124_647
.LBB124_646:                            # %cond.false3210
                                        #   in Loop: Header=BB124_642 Depth=4
	movq	refbits, %rcx
	movswq	-34(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_647:                            # %cond.end3213
                                        #   in Loop: Header=BB124_642 Depth=4
	imull	%ecx, %eax
	sarl	$16, %eax
	jmp	.LBB124_652
.LBB124_648:                            # %cond.false3217
                                        #   in Loop: Header=BB124_642 Depth=4
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-34(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_650
# %bb.649:                              # %cond.true3222
                                        #   in Loop: Header=BB124_642 Depth=4
	movswl	-34(%rbp), %eax
	jmp	.LBB124_651
.LBB124_650:                            # %cond.false3224
                                        #   in Loop: Header=BB124_642 Depth=4
	movl	$1, %eax
	jmp	.LBB124_651
.LBB124_651:                            # %cond.end3225
                                        #   in Loop: Header=BB124_642 Depth=4
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_652:                            # %cond.end3230
                                        #   in Loop: Header=BB124_642 Depth=4
	movl	%eax, -72(%rbp)
	movq	motion_cost, %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB124_654
# %bb.653:                              # %if.then3242
                                        #   in Loop: Header=BB124_642 Depth=4
	movl	-72(%rbp), %eax
	movl	%eax, -76(%rbp)
	movw	-34(%rbp), %ax
	movw	%ax, -38(%rbp)
.LBB124_654:                            # %if.end3243
                                        #   in Loop: Header=BB124_642 Depth=4
	jmp	.LBB124_655
.LBB124_655:                            # %for.inc3244
                                        #   in Loop: Header=BB124_642 Depth=4
	movw	-34(%rbp), %ax
	addw	$1, %ax
	movw	%ax, -34(%rbp)
	jmp	.LBB124_642
.LBB124_656:                            # %for.end3246
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_664
# %bb.657:                              # %cond.true3249
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-96(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	cmpl	$1, listXsize(,%rcx,4)
	jg	.LBB124_659
# %bb.658:                              # %cond.true3255
                                        #   in Loop: Header=BB124_603 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_660
.LBB124_659:                            # %cond.false3256
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	refbits, %rcx
	movswq	-36(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
.LBB124_660:                            # %cond.end3259
                                        #   in Loop: Header=BB124_603 Depth=3
	imull	%ecx, %eax
	sarl	$16, %eax
	movl	-96(%rbp), %ecx
	movl	-64(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	cmpl	$1, listXsize(,%rdx,4)
	jg	.LBB124_662
# %bb.661:                              # %cond.true3268
                                        #   in Loop: Header=BB124_603 Depth=3
	xorl	%edx, %edx
	jmp	.LBB124_663
.LBB124_662:                            # %cond.false3269
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	refbits, %rdx
	movl	(%rdx), %edx
.LBB124_663:                            # %cond.end3271
                                        #   in Loop: Header=BB124_603 Depth=3
	imull	%edx, %ecx
	sarl	$16, %ecx
	addl	%ecx, %eax
	jmp	.LBB124_668
.LBB124_664:                            # %cond.false3276
                                        #   in Loop: Header=BB124_603 Depth=3
	vmovsd	.LCPI124_5(%rip), %xmm0 # xmm0 = mem[0],zero
	vmulsd	-168(%rbp), %xmm0, %xmm0
	movswl	-36(%rbp), %eax
	cmpl	$1, %eax
	jge	.LBB124_666
# %bb.665:                              # %cond.true3281
                                        #   in Loop: Header=BB124_603 Depth=3
	movswl	-36(%rbp), %eax
	jmp	.LBB124_667
.LBB124_666:                            # %cond.false3283
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	$1, %eax
	jmp	.LBB124_667
.LBB124_667:                            # %cond.end3284
                                        #   in Loop: Header=BB124_603 Depth=3
	vcvtsi2sd	%eax, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
.LBB124_668:                            # %cond.end3289
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	%eax, -88(%rbp)
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movw	-36(%rbp), %ax
	movl	-96(%rbp), %r8d
	movswl	%ax, %edx
	xorl	%ecx, %ecx
	callq	BIDPartitionCost
	addl	-88(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-68(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jg	.LBB124_671
# %bb.669:                              # %land.lhs.true3295
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-68(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_671
# %bb.670:                              # %if.then3298
                                        #   in Loop: Header=BB124_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -38(%rbp)
	jmp	.LBB124_676
.LBB124_671:                            # %if.else3299
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jg	.LBB124_674
# %bb.672:                              # %land.lhs.true3302
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-76(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jg	.LBB124_674
# %bb.673:                              # %if.then3305
                                        #   in Loop: Header=BB124_603 Depth=3
	movw	$1, -50(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$-1, -36(%rbp)
	jmp	.LBB124_675
.LBB124_674:                            # %if.else3306
                                        #   in Loop: Header=BB124_603 Depth=3
	movw	$2, -50(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movw	$0, -38(%rbp)
.LBB124_675:                            # %if.end3307
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_676
.LBB124_676:                            # %if.end3308
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	$0, -24(%rbp)
.LBB124_677:                            # %for.cond3309
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_679 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_684
# %bb.678:                              # %for.body3312
                                        #   in Loop: Header=BB124_677 Depth=4
	movl	$0, -20(%rbp)
.LBB124_679:                            # %for.cond3313
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        #         Parent Loop BB124_677 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$2, -20(%rbp)
	jge	.LBB124_682
# %bb.680:                              # %for.body3316
                                        #   in Loop: Header=BB124_679 Depth=5
	movw	-36(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movw	-38(%rbp), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$1, %esi
	shll	$1, %esi
	addl	%esi, %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	movl	-28(%rbp), %esi
	andl	$2, %esi
	addl	%esi, %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.681:                              # %for.inc3347
                                        #   in Loop: Header=BB124_679 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_679
.LBB124_682:                            # %for.end3349
                                        #   in Loop: Header=BB124_677 Depth=4
	jmp	.LBB124_683
.LBB124_683:                            # %for.inc3350
                                        #   in Loop: Header=BB124_677 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_677
.LBB124_684:                            # %for.end3352
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_686
.LBB124_685:                            # %if.else3353
                                        #   in Loop: Header=BB124_603 Depth=3
	movw	$0, -50(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_686:                            # %if.end3354
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_687
.LBB124_687:                            # %if.end3355
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	cs_cm, %rdi
	callq	store_coding_state
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_689
# %bb.688:                              # %if.then3358
                                        #   in Loop: Header=BB124_603 Depth=3
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movw	-50(%rbp), %ax
	movw	-36(%rbp), %bx
	leaq	-276(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%ax, %r8d
	movswl	%bx, %r9d
	movswl	-38(%rbp), %eax
	movl	%eax, (%rsp)
	callq	RDCost_for_8x8blocks
	vmovsd	%xmm0, -296(%rbp)
	jmp	.LBB124_695
.LBB124_689:                            # %if.else3360
                                        #   in Loop: Header=BB124_603 Depth=3
	cmpl	$2147483647, -60(%rbp)  # imm = 0x7FFFFFFF
	je	.LBB124_694
# %bb.690:                              # %if.then3363
                                        #   in Loop: Header=BB124_603 Depth=3
	xorl	%eax, %eax
	movl	-96(%rbp), %ebx
	movl	-64(%rbp), %ecx
	movswl	-50(%rbp), %edx
	cmpl	$1, %edx
	movl	$1, %edx
	cmovll	%eax, %edx
	addl	%edx, %ecx
	movslq	%ecx, %rax
	cmpl	$1, listXsize(,%rax,4)
	jg	.LBB124_692
# %bb.691:                              # %cond.true3373
                                        #   in Loop: Header=BB124_603 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_693
.LBB124_692:                            # %cond.false3374
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	refbits, %r14
	movl	-32(%rbp), %edi
	movswl	-50(%rbp), %esi
	callq	B8Mode2Value
	cltq
	movl	(%r14,%rax,4), %eax
.LBB124_693:                            # %cond.end3379
                                        #   in Loop: Header=BB124_603 Depth=3
	imull	%eax, %ebx
	sarl	$16, %ebx
	subl	$1, %ebx
	addl	-60(%rbp), %ebx
	movl	%ebx, -60(%rbp)
.LBB124_694:                            # %if.end3385
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_695
.LBB124_695:                            # %if.end3386
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_697
# %bb.696:                              # %land.lhs.true3389
                                        #   in Loop: Header=BB124_603 Depth=3
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	-248(%rbp), %xmm1       # xmm1 = mem[0],zero
	vucomisd	%xmm0, %xmm1
	ja	.LBB124_699
.LBB124_697:                            # %lor.lhs.false3392
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_732
# %bb.698:                              # %land.lhs.true3395
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-60(%rbp), %eax
	cmpl	-172(%rbp), %eax
	jge	.LBB124_732
.LBB124_699:                            # %if.then3398
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -172(%rbp)
	vmovsd	-296(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movl	-32(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8mode(,%rcx,2)
	movw	-50(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8pdir+64(,%rcx,2)
	movw	-36(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8fwref+64(,%rcx,2)
	movw	-38(%rbp), %ax
	movslq	-28(%rbp), %rcx
	movw	%ax, best8x8bwref+64(,%rcx,2)
	movl	-276(%rbp), %eax
	movl	%eax, -188(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_721
# %bb.700:                              # %if.then3410
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB124_701:                            # %for.cond3422
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_703 Depth 5
                                        #             Child Loop BB124_705 Depth 6
	cmpl	$4, -56(%rbp)
	jge	.LBB124_712
# %bb.702:                              # %for.body3425
                                        #   in Loop: Header=BB124_701 Depth=4
	movl	$0, -24(%rbp)
.LBB124_703:                            # %for.cond3426
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        #         Parent Loop BB124_701 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB124_705 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB124_710
# %bb.704:                              # %for.body3429
                                        #   in Loop: Header=BB124_703 Depth=5
	movl	$0, -20(%rbp)
.LBB124_705:                            # %for.cond3430
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        #         Parent Loop BB124_701 Depth=4
                                        #           Parent Loop BB124_703 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$65, -20(%rbp)
	jge	.LBB124_708
# %bb.706:                              # %for.body3433
                                        #   in Loop: Header=BB124_705 Depth=6
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.707:                              # %for.inc3451
                                        #   in Loop: Header=BB124_705 Depth=6
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_705
.LBB124_708:                            # %for.end3453
                                        #   in Loop: Header=BB124_703 Depth=5
	jmp	.LBB124_709
.LBB124_709:                            # %for.inc3454
                                        #   in Loop: Header=BB124_703 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_703
.LBB124_710:                            # %for.end3456
                                        #   in Loop: Header=BB124_701 Depth=4
	jmp	.LBB124_711
.LBB124_711:                            # %for.inc3457
                                        #   in Loop: Header=BB124_701 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_701
.LBB124_712:                            # %for.end3459
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_713:                            # %for.cond3460
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_715 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_720
# %bb.714:                              # %for.body3464
                                        #   in Loop: Header=BB124_713 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_715:                            # %for.cond3465
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        #         Parent Loop BB124_713 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_718
# %bb.716:                              # %for.body3469
                                        #   in Loop: Header=BB124_715 Depth=5
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.717:                              # %for.inc3492
                                        #   in Loop: Header=BB124_715 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_715
.LBB124_718:                            # %for.end3494
                                        #   in Loop: Header=BB124_713 Depth=4
	jmp	.LBB124_719
.LBB124_719:                            # %for.inc3495
                                        #   in Loop: Header=BB124_713 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_713
.LBB124_720:                            # %for.end3497
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_721
.LBB124_721:                            # %if.end3498
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_731
# %bb.722:                              # %if.then3501
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_723:                            # %for.cond3502
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_725 Depth 5
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_730
# %bb.724:                              # %for.body3506
                                        #   in Loop: Header=BB124_723 Depth=4
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_725:                            # %for.cond3507
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_603 Depth=3
                                        #         Parent Loop BB124_723 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_728
# %bb.726:                              # %for.body3511
                                        #   in Loop: Header=BB124_725 Depth=5
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.727:                              # %for.inc3560
                                        #   in Loop: Header=BB124_725 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_725
.LBB124_728:                            # %for.end3562
                                        #   in Loop: Header=BB124_723 Depth=4
	jmp	.LBB124_729
.LBB124_729:                            # %for.inc3563
                                        #   in Loop: Header=BB124_723 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_723
.LBB124_730:                            # %for.end3565
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_731
.LBB124_731:                            # %if.end3566
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	cs_b8, %rdi
	callq	store_coding_state
.LBB124_732:                            # %if.end3567
                                        #   in Loop: Header=BB124_603 Depth=3
	movq	cs_cm, %rdi
	callq	reset_coding_state
.LBB124_733:                            # %if.end3568
                                        #   in Loop: Header=BB124_603 Depth=3
	jmp	.LBB124_734
.LBB124_734:                            # %for.inc3569
                                        #   in Loop: Header=BB124_603 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB124_603
.LBB124_735:                            # %for.end3571
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-172(%rbp), %eax
	addl	-144(%rbp), %eax
	movl	%eax, -144(%rbp)
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_775
# %bb.736:                              # %if.then3575
                                        #   in Loop: Header=BB124_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movslq	-28(%rbp), %rax
	movw	best8x8pdir+64(,%rax,2), %ax
	movw	%ax, -98(%rbp)
	movq	$0, -240(%rbp)
	movl	-28(%rbp), %edx
	movw	-98(%rbp), %r10w
	movswl	-98(%rbp), %ecx
	cmpl	$0, %ecx
	je	.LBB124_738
# %bb.737:                              # %lor.lhs.false3584
                                        #   in Loop: Header=BB124_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB124_739
.LBB124_738:                            # %cond.true3588
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-32(%rbp), %r8d
	jmp	.LBB124_740
.LBB124_739:                            # %cond.false3589
                                        #   in Loop: Header=BB124_601 Depth=2
	xorl	%r8d, %r8d
	jmp	.LBB124_740
.LBB124_740:                            # %cond.end3590
                                        #   in Loop: Header=BB124_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$1, %ecx
	je	.LBB124_742
# %bb.741:                              # %lor.lhs.false3595
                                        #   in Loop: Header=BB124_601 Depth=2
	movswl	-98(%rbp), %ecx
	cmpl	$2, %ecx
	jne	.LBB124_743
.LBB124_742:                            # %cond.true3599
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-32(%rbp), %r9d
	jmp	.LBB124_744
.LBB124_743:                            # %cond.false3600
                                        #   in Loop: Header=BB124_601 Depth=2
	xorl	%r9d, %r9d
	jmp	.LBB124_744
.LBB124_744:                            # %cond.end3601
                                        #   in Loop: Header=BB124_601 Depth=2
	movslq	-28(%rbp), %rcx
	movw	best8x8fwref+64(,%rcx,2), %bx
	movslq	-28(%rbp), %rax
	leaq	-288(%rbp), %rdi
	leaq	-240(%rbp), %rsi
	movswl	%r10w, %ecx
	movswl	%bx, %ebx
	movl	%ebx, (%rsp)
	movswl	best8x8bwref+64(,%rax,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movl	%eax, -188(%rbp)
	movl	-28(%rbp), %ecx
	sarl	$1, %ecx
	shll	$3, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	andl	cbp_blk8x8, %eax
	movl	%eax, cbp_blk8x8
	movq	-240(%rbp), %rax
	movslq	cbp_blk8x8, %rcx
	orq	%rax, %rcx
	movl	%ecx, cbp_blk8x8
	movl	$0, -56(%rbp)
.LBB124_745:                            # %for.cond3619
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_747 Depth 4
                                        #           Child Loop BB124_749 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB124_756
# %bb.746:                              # %for.body3622
                                        #   in Loop: Header=BB124_745 Depth=3
	movl	$0, -24(%rbp)
.LBB124_747:                            # %for.cond3623
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_745 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_749 Depth 5
	cmpl	$2, -24(%rbp)
	jge	.LBB124_754
# %bb.748:                              # %for.body3626
                                        #   in Loop: Header=BB124_747 Depth=4
	movl	$0, -20(%rbp)
.LBB124_749:                            # %for.cond3627
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_745 Depth=3
                                        #         Parent Loop BB124_747 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$65, -20(%rbp)
	jge	.LBB124_752
# %bb.750:                              # %for.body3630
                                        #   in Loop: Header=BB124_749 Depth=5
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	cofAC8x8, %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.751:                              # %for.inc3648
                                        #   in Loop: Header=BB124_749 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_749
.LBB124_752:                            # %for.end3650
                                        #   in Loop: Header=BB124_747 Depth=4
	jmp	.LBB124_753
.LBB124_753:                            # %for.inc3651
                                        #   in Loop: Header=BB124_747 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_747
.LBB124_754:                            # %for.end3653
                                        #   in Loop: Header=BB124_745 Depth=3
	jmp	.LBB124_755
.LBB124_755:                            # %for.inc3654
                                        #   in Loop: Header=BB124_745 Depth=3
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_745
.LBB124_756:                            # %for.end3656
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_757:                            # %for.cond3657
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_759 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_764
# %bb.758:                              # %for.body3661
                                        #   in Loop: Header=BB124_757 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_759:                            # %for.cond3662
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_757 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_762
# %bb.760:                              # %for.body3666
                                        #   in Loop: Header=BB124_759 Depth=4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$rec_mbY8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.761:                              # %for.inc3689
                                        #   in Loop: Header=BB124_759 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_759
.LBB124_762:                            # %for.end3691
                                        #   in Loop: Header=BB124_757 Depth=3
	jmp	.LBB124_763
.LBB124_763:                            # %for.inc3692
                                        #   in Loop: Header=BB124_757 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_757
.LBB124_764:                            # %for.end3694
                                        #   in Loop: Header=BB124_601 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_774
# %bb.765:                              # %if.then3697
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_766:                            # %for.cond3698
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_768 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_773
# %bb.767:                              # %for.body3702
                                        #   in Loop: Header=BB124_766 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_768:                            # %for.cond3703
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_766 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_771
# %bb.769:                              # %for.body3707
                                        #   in Loop: Header=BB124_768 Depth=4
	movabsq	$mprRGB_8x8, %rsi
	movq	%rsi, %r8
	addq	$2048, %r8              # imm = 0x800
	movabsq	$mprRGB, %rcx
	movq	%rcx, %r9
	addq	$2048, %r9              # imm = 0x800
	movq	%rsi, %r10
	addq	$1024, %r10             # imm = 0x400
	movq	%rcx, %rdi
	addq	$1024, %rdi             # imm = 0x400
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG, %rax
	addq	%rbx, %rax
	movslq	-24(%rbp), %rbx
	movl	(%rax,%rbx,4), %eax
	movslq	-20(%rbp), %rbx
	shlq	$6, %rbx
	movabsq	$rec_resG_8x8, %rdx
	addq	%rbx, %rdx
	movslq	-24(%rbp), %rbx
	movl	%eax, (%rdx,%rbx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_R_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rdx
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$resTrans_B_8x8, %rbx
	addq	%rdx, %rbx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rbx,%rdx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdi
	movslq	-24(%rbp), %rax
	movl	(%rdi,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r10
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r10,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %r9
	movslq	-24(%rbp), %rax
	movl	(%r9,%rax,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %r8
	movslq	-24(%rbp), %rcx
	movl	%eax, (%r8,%rcx,4)
# %bb.770:                              # %for.inc3756
                                        #   in Loop: Header=BB124_768 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_768
.LBB124_771:                            # %for.end3758
                                        #   in Loop: Header=BB124_766 Depth=3
	jmp	.LBB124_772
.LBB124_772:                            # %for.inc3759
                                        #   in Loop: Header=BB124_766 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_766
.LBB124_773:                            # %for.end3761
                                        #   in Loop: Header=BB124_601 Depth=2
	jmp	.LBB124_774
.LBB124_774:                            # %if.end3762
                                        #   in Loop: Header=BB124_601 Depth=2
	jmp	.LBB124_775
.LBB124_775:                            # %if.end3763
                                        #   in Loop: Header=BB124_601 Depth=2
	cmpl	$0, -188(%rbp)
	je	.LBB124_777
# %bb.776:                              # %if.then3765
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	orl	cbp8x8, %eax
	movl	%eax, cbp8x8
	movl	-188(%rbp), %eax
	addl	cnt_nonz_8x8, %eax
	movl	%eax, cnt_nonz_8x8
.LBB124_777:                            # %if.end3769
                                        #   in Loop: Header=BB124_601 Depth=2
	movslq	-28(%rbp), %rax
	movswl	best8x8mode(,%rax,2), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	148(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movq	img, %rax
	movl	144(%rax), %ecx
	movl	-28(%rbp), %eax
	cltd
	idivl	%esi
	shll	$1, %edx
	addl	%edx, %ecx
	movl	%ecx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_778:                            # %for.cond3781
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_780 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_785
# %bb.779:                              # %for.body3785
                                        #   in Loop: Header=BB124_778 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_780:                            # %for.cond3786
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_778 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_783
# %bb.781:                              # %for.body3790
                                        #   in Loop: Header=BB124_780 Depth=4
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
# %bb.782:                              # %for.inc3795
                                        #   in Loop: Header=BB124_780 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_780
.LBB124_783:                            # %for.end3797
                                        #   in Loop: Header=BB124_778 Depth=3
	jmp	.LBB124_784
.LBB124_784:                            # %for.inc3798
                                        #   in Loop: Header=BB124_778 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_778
.LBB124_785:                            # %for.end3800
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-28(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_786:                            # %for.cond3802
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_789
# %bb.787:                              # %for.body3806
                                        #   in Loop: Header=BB124_786 Depth=3
	movq	-48(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.788:                              # %for.inc3809
                                        #   in Loop: Header=BB124_786 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_786
.LBB124_789:                            # %for.end3811
                                        #   in Loop: Header=BB124_601 Depth=2
	cmpl	$3, -28(%rbp)
	jge	.LBB124_799
# %bb.790:                              # %if.then3814
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -104(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -92(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB124_791:                            # %for.cond3819
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_793 Depth 4
	movl	-24(%rbp), %eax
	movl	-104(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_798
# %bb.792:                              # %for.body3823
                                        #   in Loop: Header=BB124_791 Depth=3
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB124_793:                            # %for.cond3824
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_601 Depth=2
                                        #       Parent Loop BB124_791 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-20(%rbp), %eax
	movl	-92(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_796
# %bb.794:                              # %for.body3828
                                        #   in Loop: Header=BB124_793 Depth=4
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$rec_mbY8x8, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.795:                              # %for.inc3842
                                        #   in Loop: Header=BB124_793 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_793
.LBB124_796:                            # %for.end3844
                                        #   in Loop: Header=BB124_791 Depth=3
	jmp	.LBB124_797
.LBB124_797:                            # %for.inc3845
                                        #   in Loop: Header=BB124_791 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_791
.LBB124_798:                            # %for.end3847
                                        #   in Loop: Header=BB124_601 Depth=2
	jmp	.LBB124_799
.LBB124_799:                            # %if.end3848
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movslq	-28(%rbp), %rax
	movswl	best8x8pdir+64(,%rax,2), %edx
	movslq	-28(%rbp), %rax
	movswl	best8x8fwref+64(,%rax,2), %ecx
	movslq	-28(%rbp), %rax
	movswl	best8x8bwref+64(,%rax,2), %r8d
	callq	SetRefAndMotionVectors
	movq	cs_b8, %rdi
	callq	reset_coding_state
# %bb.800:                              # %for.inc3858
                                        #   in Loop: Header=BB124_601 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB124_601
.LBB124_801:                            # %for.end3860
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_802
.LBB124_802:                            # %if.end3861
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	cs_mb, %rdi
	callq	reset_coding_state
	movl	$0, -20(%rbp)
.LBB124_803:                            # %for.cond3862
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_805 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_810
# %bb.804:                              # %for.body3865
                                        #   in Loop: Header=BB124_803 Depth=2
	movl	$0, -24(%rbp)
.LBB124_805:                            # %for.cond3866
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_803 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_808
# %bb.806:                              # %for.body3869
                                        #   in Loop: Header=BB124_805 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.807:                              # %for.inc3888
                                        #   in Loop: Header=BB124_805 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_805
.LBB124_808:                            # %for.end3890
                                        #   in Loop: Header=BB124_803 Depth=2
	jmp	.LBB124_809
.LBB124_809:                            # %for.inc3891
                                        #   in Loop: Header=BB124_803 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_803
.LBB124_810:                            # %for.end3893
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB124_825
# %bb.811:                              # %land.lhs.true3896
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jl	.LBB124_813
# %bb.812:                              # %lor.lhs.false3899
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB124_825
.LBB124_813:                            # %if.then3902
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$8, best_mode
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB124_823
# %bb.814:                              # %if.then3905
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	cost8_8x8ts, %eax
	cmpl	-144(%rbp), %eax
	jge	.LBB124_816
# %bb.815:                              # %if.then3908
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_822
.LBB124_816:                            # %if.else3910
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-144(%rbp), %eax
	cmpl	cost8_8x8ts, %eax
	jge	.LBB124_818
# %bb.817:                              # %if.then3913
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB124_821
.LBB124_818:                            # %if.else3915
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	cost8_8x8ts, %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	callq	GetBestTransformP8x8
	cmpl	$0, %eax
	jne	.LBB124_820
# %bb.819:                              # %if.then3920
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_820:                            # %if.end3922
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_821
.LBB124_821:                            # %if.end3923
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_822
.LBB124_822:                            # %if.end3924
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_824
.LBB124_823:                            # %if.else3925
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-144(%rbp), %eax
	movl	%eax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_824:                            # %if.end3927
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_825
.LBB124_825:                            # %if.end3928
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_827
.LBB124_826:                            # %if.else3929
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$2147483647, -144(%rbp) # imm = 0x7FFFFFFF
.LBB124_827:                            # %if.end3930
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_829
# %bb.828:                              # %lor.lhs.false3934
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB124_830
.LBB124_829:                            # %if.then3938
                                        #   in Loop: Header=BB124_171 Depth=1
	movb	$0, %al
	callq	FindSkipModeMotionVector
.LBB124_830:                            # %if.end3939
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_832
.LBB124_831:                            # %if.else3940
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$2147483647, -112(%rbp) # imm = 0x7FFFFFFF
.LBB124_832:                            # %if.end3941
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_1083
# %bb.833:                              # %if.then3944
                                        #   in Loop: Header=BB124_171 Depth=1
	vmovsd	-480(%rbp), %xmm0       # xmm0 = mem[0],zero
	vmovsd	%xmm0, -248(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB124_978
# %bb.834:                              # %if.then3947
                                        #   in Loop: Header=BB124_171 Depth=1
	leaq	-268(%rbp), %rdi
	leaq	-272(%rbp), %rsi
	leaq	-300(%rbp), %rdx
	callq	IntraChromaPrediction
	movq	-48(%rbp), %rax
	movl	$0, 524(%rax)
.LBB124_835:                            # %for.cond3949
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_853 Depth 3
                                        #         Child Loop BB124_908 Depth 4
                                        #           Child Loop BB124_911 Depth 5
                                        #             Child Loop BB124_913 Depth 6
                                        #           Child Loop BB124_920 Depth 5
                                        #             Child Loop BB124_922 Depth 6
                                        #         Child Loop BB124_955 Depth 4
                                        #           Child Loop BB124_957 Depth 5
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jg	.LBB124_977
# %bb.836:                              # %for.body3953
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB124_838
# %bb.837:                              # %land.lhs.true3956
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	jne	.LBB124_846
.LBB124_838:                            # %lor.lhs.false3960
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$2, 524(%rax)
	jne	.LBB124_840
# %bb.839:                              # %land.lhs.true3964
                                        #   in Loop: Header=BB124_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB124_846
.LBB124_840:                            # %lor.lhs.false3966
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$1, 524(%rax)
	jne	.LBB124_842
# %bb.841:                              # %land.lhs.true3970
                                        #   in Loop: Header=BB124_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB124_846
.LBB124_842:                            # %lor.lhs.false3972
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$3, 524(%rax)
	jne	.LBB124_847
# %bb.843:                              # %land.lhs.true3976
                                        #   in Loop: Header=BB124_835 Depth=2
	cmpl	$0, -272(%rbp)
	je	.LBB124_846
# %bb.844:                              # %lor.lhs.false3978
                                        #   in Loop: Header=BB124_835 Depth=2
	cmpl	$0, -268(%rbp)
	je	.LBB124_846
# %bb.845:                              # %lor.lhs.false3980
                                        #   in Loop: Header=BB124_835 Depth=2
	cmpl	$0, -300(%rbp)
	jne	.LBB124_847
.LBB124_846:                            # %if.then3982
                                        #   in Loop: Header=BB124_835 Depth=2
	jmp	.LBB124_976
.LBB124_847:                            # %if.end3983
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_849
# %bb.848:                              # %if.then3986
                                        #   in Loop: Header=BB124_835 Depth=2
	movl	$11, -312(%rbp)
	jmp	.LBB124_850
.LBB124_849:                            # %if.else3987
                                        #   in Loop: Header=BB124_835 Depth=2
	movl	$8, -312(%rbp)
.LBB124_850:                            # %if.end3988
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_852
# %bb.851:                              # %if.then3991
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB124_852:                            # %if.end3994
                                        #   in Loop: Header=BB124_835 Depth=2
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB124_853:                            # %for.cond3995
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_908 Depth 4
                                        #           Child Loop BB124_911 Depth 5
                                        #             Child Loop BB124_913 Depth 6
                                        #           Child Loop BB124_920 Depth 5
                                        #             Child Loop BB124_922 Depth 6
                                        #         Child Loop BB124_955 Depth 4
                                        #           Child Loop BB124_957 Depth 5
	movl	-80(%rbp), %eax
	cmpl	-312(%rbp), %eax
	jge	.LBB124_975
# %bb.854:                              # %for.body3998
                                        #   in Loop: Header=BB124_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_868
# %bb.855:                              # %if.then4003
                                        #   in Loop: Header=BB124_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table_RCT(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$10, -32(%rbp)
	jne	.LBB124_857
# %bb.856:                              # %if.then4008
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-80(%rbp), %eax
	subl	$5, %eax
	movl	%eax, -128(%rbp)
.LBB124_857:                            # %if.end4010
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$10, -32(%rbp)
	jne	.LBB124_867
# %bb.858:                              # %land.lhs.true4013
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -128(%rbp)
	jne	.LBB124_860
# %bb.859:                              # %land.lhs.true4016
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB124_866
.LBB124_860:                            # %lor.lhs.false4018
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$1, -128(%rbp)
	jne	.LBB124_862
# %bb.861:                              # %land.lhs.true4021
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB124_866
.LBB124_862:                            # %lor.lhs.false4023
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$3, -128(%rbp)
	jne	.LBB124_867
# %bb.863:                              # %land.lhs.true4026
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -272(%rbp)
	je	.LBB124_866
# %bb.864:                              # %lor.lhs.false4028
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -268(%rbp)
	je	.LBB124_866
# %bb.865:                              # %lor.lhs.false4030
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -300(%rbp)
	jne	.LBB124_867
.LBB124_866:                            # %if.then4032
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_974
.LBB124_867:                            # %if.end4033
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_869
.LBB124_868:                            # %if.else4034
                                        #   in Loop: Header=BB124_853 Depth=3
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -128(%rbp)
.LBB124_869:                            # %if.end4037
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB124_881
# %bb.870:                              # %land.lhs.true4040
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_881
# %bb.871:                              # %if.then4044
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_878
# %bb.872:                              # %land.lhs.true4048
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_878
# %bb.873:                              # %if.then4052
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB124_877
# %bb.874:                              # %land.lhs.true4055
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB124_877
# %bb.875:                              # %land.lhs.true4062
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB124_877
# %bb.876:                              # %if.then4065
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB124_877:                            # %if.end4066
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_878
.LBB124_878:                            # %if.end4067
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$2, -124(%rbp)
	jge	.LBB124_880
# %bb.879:                              # %if.then4070
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB124_880:                            # %if.end4072
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB124_881:                            # %if.end4074
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	movl	$0, 72392(%rax)
	movq	input, %rax
	cmpl	$0, 1312(%rax)
	je	.LBB124_888
# %bb.882:                              # %land.lhs.true4076
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB124_888
# %bb.883:                              # %if.then4080
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$10, -32(%rbp)
	jl	.LBB124_887
# %bb.884:                              # %land.lhs.true4083
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, best_mode
	jne	.LBB124_887
# %bb.885:                              # %land.lhs.true4086
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB124_887
# %bb.886:                              # %if.then4089
                                        #   in Loop: Header=BB124_853 Depth=3
	movslq	-32(%rbp), %rax
	movl	$0, -384(%rbp,%rax,4)
.LBB124_887:                            # %if.end4092
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_888
.LBB124_888:                            # %if.end4093
                                        #   in Loop: Header=BB124_853 Depth=3
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB124_965
# %bb.889:                              # %if.then4097
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_903
# %bb.890:                              # %if.then4102
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB124_893
# %bb.891:                              # %land.lhs.true4105
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB124_893
# %bb.892:                              # %if.then4108
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_902
.LBB124_893:                            # %if.else4110
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB124_897
# %bb.894:                              # %land.lhs.true4113
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_897
# %bb.895:                              # %land.lhs.true4115
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB124_897
# %bb.896:                              # %if.then4118
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_901
.LBB124_897:                            # %if.else4120
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB124_900
# %bb.898:                              # %land.lhs.true4123
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB124_900
# %bb.899:                              # %if.then4126
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB124_900:                            # %if.end4128
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_901
.LBB124_901:                            # %if.end4129
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_902
.LBB124_902:                            # %if.end4130
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_903
.LBB124_903:                            # %if.end4131
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB124_907
# %bb.904:                              # %lor.lhs.false4135
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_907
# %bb.905:                              # %lor.lhs.false4138
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_907
# %bb.906:                              # %lor.lhs.false4142
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB124_947
.LBB124_907:                            # %if.then4146
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_908
.LBB124_908:                            # %while.body
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_911 Depth 5
                                        #             Child Loop BB124_913 Depth 6
                                        #           Child Loop BB124_920 Depth 5
                                        #             Child Loop BB124_922 Depth 6
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB124_929
# %bb.909:                              # %if.then4149
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB124_919
# %bb.910:                              # %if.then4152
                                        #   in Loop: Header=BB124_908 Depth=4
	movl	$0, -20(%rbp)
.LBB124_911:                            # %for.cond4153
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        #         Parent Loop BB124_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB124_913 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB124_918
# %bb.912:                              # %for.body4156
                                        #   in Loop: Header=BB124_911 Depth=5
	movl	$0, -24(%rbp)
.LBB124_913:                            # %for.cond4157
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        #         Parent Loop BB124_908 Depth=4
                                        #           Parent Loop BB124_911 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB124_916
# %bb.914:                              # %for.body4160
                                        #   in Loop: Header=BB124_913 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.915:                              # %for.inc4180
                                        #   in Loop: Header=BB124_913 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_913
.LBB124_916:                            # %for.end4182
                                        #   in Loop: Header=BB124_911 Depth=5
	jmp	.LBB124_917
.LBB124_917:                            # %for.inc4183
                                        #   in Loop: Header=BB124_911 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_911
.LBB124_918:                            # %for.end4185
                                        #   in Loop: Header=BB124_908 Depth=4
	jmp	.LBB124_928
.LBB124_919:                            # %if.else4186
                                        #   in Loop: Header=BB124_908 Depth=4
	movl	$0, -20(%rbp)
.LBB124_920:                            # %for.cond4187
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        #         Parent Loop BB124_908 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB124_922 Depth 6
	cmpl	$16, -20(%rbp)
	jge	.LBB124_927
# %bb.921:                              # %for.body4190
                                        #   in Loop: Header=BB124_920 Depth=5
	movl	$0, -24(%rbp)
.LBB124_922:                            # %for.cond4191
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        #         Parent Loop BB124_908 Depth=4
                                        #           Parent Loop BB124_920 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	cmpl	$16, -24(%rbp)
	jge	.LBB124_925
# %bb.923:                              # %for.body4194
                                        #   in Loop: Header=BB124_922 Depth=6
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.924:                              # %for.inc4213
                                        #   in Loop: Header=BB124_922 Depth=6
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_922
.LBB124_925:                            # %for.end4215
                                        #   in Loop: Header=BB124_920 Depth=5
	jmp	.LBB124_926
.LBB124_926:                            # %for.inc4216
                                        #   in Loop: Header=BB124_920 Depth=5
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_920
.LBB124_927:                            # %for.end4218
                                        #   in Loop: Header=BB124_908 Depth=4
	jmp	.LBB124_928
.LBB124_928:                            # %if.end4219
                                        #   in Loop: Header=BB124_908 Depth=4
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB124_929:                            # %if.end4220
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB124_945
# %bb.930:                              # %if.then4224
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$1, -32(%rbp)
	jl	.LBB124_935
# %bb.931:                              # %land.lhs.true4227
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$3, -32(%rbp)
	jg	.LBB124_935
# %bb.932:                              # %land.lhs.true4230
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB124_935
# %bb.933:                              # %if.then4234
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB124_934:                            # %while.body.backedge
                                        #   in Loop: Header=BB124_908 Depth=4
	jmp	.LBB124_908
.LBB124_935:                            # %if.else4236
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$0, -32(%rbp)
	jne	.LBB124_940
# %bb.936:                              # %land.lhs.true4239
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$0, -108(%rbp)
	je	.LBB124_940
# %bb.937:                              # %land.lhs.true4241
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB124_940
# %bb.938:                              # %land.lhs.true4244
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB124_940
# %bb.939:                              # %if.then4248
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_934
.LBB124_940:                            # %if.else4250
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$8, -32(%rbp)
	jne	.LBB124_944
# %bb.941:                              # %land.lhs.true4253
                                        #   in Loop: Header=BB124_908 Depth=4
	cmpl	$0, -368(%rbp)
	je	.LBB124_944
# %bb.942:                              # %land.lhs.true4256
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB124_944
# %bb.943:                              # %if.then4260
                                        #   in Loop: Header=BB124_908 Depth=4
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_934
.LBB124_944:                            # %if.else4262
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB124_946
.LBB124_945:                            # %if.else4264
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_946
.LBB124_946:                            # %while.end
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_947
.LBB124_947:                            # %if.end4265
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -384(%rbp)
	je	.LBB124_964
# %bb.948:                              # %land.lhs.true4268
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_964
# %bb.949:                              # %land.lhs.true4270
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB124_964
# %bb.950:                              # %land.lhs.true4273
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB124_964
# %bb.951:                              # %land.lhs.true4276
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB124_964
# %bb.952:                              # %land.lhs.true4281
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB124_964
# %bb.953:                              # %if.then4283
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB124_963
# %bb.954:                              # %if.then4287
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	$0, -20(%rbp)
.LBB124_955:                            # %for.cond4288
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_957 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB124_962
# %bb.956:                              # %for.body4291
                                        #   in Loop: Header=BB124_955 Depth=4
	movl	$0, -24(%rbp)
.LBB124_957:                            # %for.cond4292
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_835 Depth=2
                                        #       Parent Loop BB124_853 Depth=3
                                        #         Parent Loop BB124_955 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB124_960
# %bb.958:                              # %for.body4295
                                        #   in Loop: Header=BB124_957 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.959:                              # %for.inc4314
                                        #   in Loop: Header=BB124_957 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_957
.LBB124_960:                            # %for.end4316
                                        #   in Loop: Header=BB124_955 Depth=4
	jmp	.LBB124_961
.LBB124_961:                            # %for.inc4317
                                        #   in Loop: Header=BB124_955 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_955
.LBB124_962:                            # %for.end4319
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB124_963:                            # %if.end4320
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_964
.LBB124_964:                            # %if.end4321
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_965
.LBB124_965:                            # %if.end4322
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_973
# %bb.966:                              # %land.lhs.true4325
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_973
# %bb.967:                              # %if.then4329
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$2, -124(%rbp)
	jne	.LBB124_972
# %bb.968:                              # %land.lhs.true4332
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB124_972
# %bb.969:                              # %land.lhs.true4339
                                        #   in Loop: Header=BB124_853 Depth=3
	cmpl	$1, -32(%rbp)
	jne	.LBB124_972
# %bb.970:                              # %land.lhs.true4342
                                        #   in Loop: Header=BB124_853 Depth=3
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB124_972
# %bb.971:                              # %if.then4346
                                        #   in Loop: Header=BB124_853 Depth=3
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB124_972:                            # %if.end4356
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_973
.LBB124_973:                            # %if.end4357
                                        #   in Loop: Header=BB124_853 Depth=3
	jmp	.LBB124_974
.LBB124_974:                            # %for.inc4358
                                        #   in Loop: Header=BB124_853 Depth=3
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB124_853
.LBB124_975:                            # %for.end4360
                                        #   in Loop: Header=BB124_835 Depth=2
	jmp	.LBB124_976
.LBB124_976:                            # %for.inc4361
                                        #   in Loop: Header=BB124_835 Depth=2
	movq	-48(%rbp), %rax
	movl	524(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 524(%rax)
	jmp	.LBB124_835
.LBB124_977:                            # %for.end4364
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1082
.LBB124_978:                            # %if.else4365
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_980
# %bb.979:                              # %if.then4368
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	img, %rax
	movw	$0, 71954(%rax)
.LBB124_980:                            # %if.end4371
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -124(%rbp)
	movl	$0, -80(%rbp)
.LBB124_981:                            # %for.cond4372
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1014 Depth 3
                                        #         Child Loop BB124_1017 Depth 4
                                        #           Child Loop BB124_1019 Depth 5
                                        #         Child Loop BB124_1026 Depth 4
                                        #           Child Loop BB124_1028 Depth 5
                                        #       Child Loop BB124_1061 Depth 3
                                        #         Child Loop BB124_1063 Depth 4
	cmpl	$8, -80(%rbp)
	jge	.LBB124_1081
# %bb.982:                              # %for.body4375
                                        #   in Loop: Header=BB124_981 Depth=2
	movslq	-80(%rbp), %rax
	movl	encode_one_macroblock.mb_mode_table(,%rax,4), %eax
	movl	%eax, -32(%rbp)
	cmpl	$1, -32(%rbp)
	jne	.LBB124_994
# %bb.983:                              # %land.lhs.true4380
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_994
# %bb.984:                              # %if.then4384
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-124(%rbp), %eax
	movw	%ax, best8x8pdir+14
	movw	%ax, best8x8pdir+12
	movw	%ax, best8x8pdir+10
	movw	%ax, best8x8pdir+8
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_991
# %bb.985:                              # %land.lhs.true4388
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_991
# %bb.986:                              # %if.then4392
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB124_990
# %bb.987:                              # %land.lhs.true4395
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB124_990
# %bb.988:                              # %land.lhs.true4402
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB124_990
# %bb.989:                              # %if.then4405
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -124(%rbp)
.LBB124_990:                            # %if.end4407
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_991
.LBB124_991:                            # %if.end4408
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$2, -124(%rbp)
	jge	.LBB124_993
# %bb.992:                              # %if.then4411
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -80(%rbp)
.LBB124_993:                            # %if.end4413
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
.LBB124_994:                            # %if.end4415
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	movl	$0, 72392(%rax)
	movslq	-32(%rbp), %rax
	cmpl	$0, -384(%rbp,%rax,4)
	je	.LBB124_1071
# %bb.995:                              # %if.then4420
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_1009
# %bb.996:                              # %if.then4425
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$1, -32(%rbp)
	jl	.LBB124_999
# %bb.997:                              # %land.lhs.true4428
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$3, -32(%rbp)
	jg	.LBB124_999
# %bb.998:                              # %if.then4431
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_1008
.LBB124_999:                            # %if.else4433
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB124_1003
# %bb.1000:                             # %land.lhs.true4436
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB124_1003
# %bb.1001:                             # %land.lhs.true4438
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB124_1003
# %bb.1002:                             # %if.then4441
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_1007
.LBB124_1003:                           # %if.else4443
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$8, -32(%rbp)
	jne	.LBB124_1006
# %bb.1004:                             # %land.lhs.true4446
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$0, -368(%rbp)
	je	.LBB124_1006
# %bb.1005:                             # %if.then4449
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB124_1006:                           # %if.end4451
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1007
.LBB124_1007:                           # %if.end4452
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1008
.LBB124_1008:                           # %if.end4453
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1009
.LBB124_1009:                           # %if.end4454
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-32(%rbp), %edi
	callq	SetModesAndRefframeForBlocks
	movq	-48(%rbp), %rax
	cmpl	$0, 524(%rax)
	je	.LBB124_1013
# %bb.1010:                             # %lor.lhs.false4458
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_1013
# %bb.1011:                             # %lor.lhs.false4462
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_1013
# %bb.1012:                             # %lor.lhs.false4466
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB124_1053
.LBB124_1013:                           # %if.then4470
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1014
.LBB124_1014:                           # %while.body4471
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_1017 Depth 4
                                        #           Child Loop BB124_1019 Depth 5
                                        #         Child Loop BB124_1026 Depth 4
                                        #           Child Loop BB124_1028 Depth 5
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB124_1035
# %bb.1015:                             # %if.then4474
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB124_1025
# %bb.1016:                             # %if.then4477
                                        #   in Loop: Header=BB124_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB124_1017:                           # %for.cond4478
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        #       Parent Loop BB124_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_1019 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1024
# %bb.1018:                             # %for.body4481
                                        #   in Loop: Header=BB124_1017 Depth=4
	movl	$0, -24(%rbp)
.LBB124_1019:                           # %for.cond4482
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        #       Parent Loop BB124_1014 Depth=3
                                        #         Parent Loop BB124_1017 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1022
# %bb.1020:                             # %for.body4485
                                        #   in Loop: Header=BB124_1019 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$mpr8x8, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movzwl	(%rdx,%rcx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1021:                             # %for.inc4505
                                        #   in Loop: Header=BB124_1019 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1019
.LBB124_1022:                           # %for.end4507
                                        #   in Loop: Header=BB124_1017 Depth=4
	jmp	.LBB124_1023
.LBB124_1023:                           # %for.inc4508
                                        #   in Loop: Header=BB124_1017 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1017
.LBB124_1024:                           # %for.end4510
                                        #   in Loop: Header=BB124_1014 Depth=3
	jmp	.LBB124_1034
.LBB124_1025:                           # %if.else4511
                                        #   in Loop: Header=BB124_1014 Depth=3
	movl	$0, -20(%rbp)
.LBB124_1026:                           # %for.cond4512
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        #       Parent Loop BB124_1014 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB124_1028 Depth 5
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1033
# %bb.1027:                             # %for.body4515
                                        #   in Loop: Header=BB124_1026 Depth=4
	movl	$0, -24(%rbp)
.LBB124_1028:                           # %for.cond4516
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        #       Parent Loop BB124_1014 Depth=3
                                        #         Parent Loop BB124_1026 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1031
# %bb.1029:                             # %for.body4519
                                        #   in Loop: Header=BB124_1028 Depth=5
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1030:                             # %for.inc4538
                                        #   in Loop: Header=BB124_1028 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1028
.LBB124_1031:                           # %for.end4540
                                        #   in Loop: Header=BB124_1026 Depth=4
	jmp	.LBB124_1032
.LBB124_1032:                           # %for.inc4541
                                        #   in Loop: Header=BB124_1026 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1026
.LBB124_1033:                           # %for.end4543
                                        #   in Loop: Header=BB124_1014 Depth=3
	jmp	.LBB124_1034
.LBB124_1034:                           # %if.end4544
                                        #   in Loop: Header=BB124_1014 Depth=3
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB124_1035:                           # %if.end4545
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	input, %rax
	cmpl	$1, 3220(%rax)
	jne	.LBB124_1051
# %bb.1036:                             # %if.then4549
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$1, -32(%rbp)
	jl	.LBB124_1041
# %bb.1037:                             # %land.lhs.true4552
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$3, -32(%rbp)
	jg	.LBB124_1041
# %bb.1038:                             # %land.lhs.true4555
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB124_1041
# %bb.1039:                             # %if.then4559
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
.LBB124_1040:                           # %while.body4471.backedge
                                        #   in Loop: Header=BB124_1014 Depth=3
	jmp	.LBB124_1014
.LBB124_1041:                           # %if.else4561
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$0, -32(%rbp)
	jne	.LBB124_1046
# %bb.1042:                             # %land.lhs.true4564
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$0, -108(%rbp)
	je	.LBB124_1046
# %bb.1043:                             # %land.lhs.true4566
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB124_1046
# %bb.1044:                             # %land.lhs.true4569
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB124_1046
# %bb.1045:                             # %if.then4573
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_1040
.LBB124_1046:                           # %if.else4575
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$8, -32(%rbp)
	jne	.LBB124_1050
# %bb.1047:                             # %land.lhs.true4578
                                        #   in Loop: Header=BB124_1014 Depth=3
	cmpl	$0, -368(%rbp)
	je	.LBB124_1050
# %bb.1048:                             # %land.lhs.true4581
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	jne	.LBB124_1050
# %bb.1049:                             # %if.then4585
                                        #   in Loop: Header=BB124_1014 Depth=3
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_1040
.LBB124_1050:                           # %if.else4587
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	jmp	.LBB124_1052
.LBB124_1051:                           # %if.else4589
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1052
.LBB124_1052:                           # %while.end4590
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1053
.LBB124_1053:                           # %if.end4591
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$0, -384(%rbp)
	je	.LBB124_1070
# %bb.1054:                             # %land.lhs.true4594
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$0, -108(%rbp)
	je	.LBB124_1070
# %bb.1055:                             # %land.lhs.true4596
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$0, -32(%rbp)
	jne	.LBB124_1070
# %bb.1056:                             # %land.lhs.true4599
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB124_1070
# %bb.1057:                             # %land.lhs.true4602
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$15, %eax
	je	.LBB124_1070
# %bb.1058:                             # %land.lhs.true4607
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	input, %rax
	cmpl	$0, 2472(%rax)
	jne	.LBB124_1070
# %bb.1059:                             # %if.then4610
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	movl	$1, 72392(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	movl	-32(%rbp), %edi
	movl	-128(%rbp), %edx
	leaq	-248(%rbp), %rsi
	callq	RDCost_for_macroblocks
	cmpl	$0, %eax
	je	.LBB124_1069
# %bb.1060:                             # %if.then4614
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1061:                           # %for.cond4615
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_1063 Depth 4
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1068
# %bb.1062:                             # %for.body4618
                                        #   in Loop: Header=BB124_1061 Depth=3
	movl	$0, -24(%rbp)
.LBB124_1063:                           # %for.cond4619
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_981 Depth=2
                                        #       Parent Loop BB124_1061 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1066
# %bb.1064:                             # %for.body4622
                                        #   in Loop: Header=BB124_1063 Depth=4
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$pred, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	subl	(%rdx,%rcx,4), %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1065:                             # %for.inc4641
                                        #   in Loop: Header=BB124_1063 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1063
.LBB124_1066:                           # %for.end4643
                                        #   in Loop: Header=BB124_1061 Depth=3
	jmp	.LBB124_1067
.LBB124_1067:                           # %for.inc4644
                                        #   in Loop: Header=BB124_1061 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1061
.LBB124_1068:                           # %for.end4646
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-32(%rbp), %edi
	callq	store_macroblock_parameters
.LBB124_1069:                           # %if.end4647
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1070
.LBB124_1070:                           # %if.end4648
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1071
.LBB124_1071:                           # %if.end4649
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB124_1079
# %bb.1072:                             # %land.lhs.true4652
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_1079
# %bb.1073:                             # %if.then4656
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$2, -124(%rbp)
	jne	.LBB124_1078
# %bb.1074:                             # %land.lhs.true4659
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	cmpl	$2, %eax
	jge	.LBB124_1078
# %bb.1075:                             # %land.lhs.true4666
                                        #   in Loop: Header=BB124_981 Depth=2
	cmpl	$1, -32(%rbp)
	jne	.LBB124_1078
# %bb.1076:                             # %land.lhs.true4669
                                        #   in Loop: Header=BB124_981 Depth=2
	movswl	best8x8pdir+8, %eax
	cmpl	$2, %eax
	jne	.LBB124_1078
# %bb.1077:                             # %if.then4673
                                        #   in Loop: Header=BB124_981 Depth=2
	movq	img, %rax
	movslq	-32(%rbp), %rcx
	movswl	71952(%rax,%rcx,2), %eax
	addl	$1, %eax
	movq	img, %rcx
	movslq	-32(%rbp), %rdx
	movw	%ax, 71952(%rcx,%rdx,2)
.LBB124_1078:                           # %if.end4683
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1079
.LBB124_1079:                           # %if.end4684
                                        #   in Loop: Header=BB124_981 Depth=2
	jmp	.LBB124_1080
.LBB124_1080:                           # %for.inc4685
                                        #   in Loop: Header=BB124_981 Depth=2
	movl	-80(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -80(%rbp)
	jmp	.LBB124_981
.LBB124_1081:                           # %for.end4687
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1082
.LBB124_1082:                           # %if.end4688
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1284
.LBB124_1083:                           # %if.else4689
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	movq	-48(%rbp), %rax
	movl	576(%rax), %eax
	movl	%eax, -308(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB124_1085
# %bb.1084:                             # %if.then4694
                                        #   in Loop: Header=BB124_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB124_1085:                           # %if.end4695
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -384(%rbp)
	je	.LBB124_1123
# %bb.1086:                             # %land.lhs.true4698
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -108(%rbp)
	je	.LBB124_1123
# %bb.1087:                             # %if.then4700
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -252(%rbp)
	je	.LBB124_1100
# %bb.1088:                             # %if.then4702
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input(%rip), %rax
	movl	3220(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB124_1090
	jmp	.LBB124_1089
.LBB124_1089:                           # %if.then4702
                                        #   in Loop: Header=BB124_171 Depth=1
	subl	$2, %eax
	je	.LBB124_1097
	jmp	.LBB124_1098
.LBB124_1090:                           # %sw.bb4704
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jl	.LBB124_1094
# %bb.1091:                             # %lor.lhs.false4707
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -364(%rbp)
	je	.LBB124_1094
# %bb.1092:                             # %land.lhs.true4710
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -360(%rbp)
	je	.LBB124_1094
# %bb.1093:                             # %land.lhs.true4713
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -356(%rbp)
	jne	.LBB124_1095
.LBB124_1094:                           # %if.then4716
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB124_1096
.LBB124_1095:                           # %if.else4717
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_1096:                           # %if.end4718
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1099
.LBB124_1097:                           # %sw.bb4719
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-204(%rbp), %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB124_1099
.LBB124_1098:                           # %sw.default4720
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-140(%rbp), %eax
	movl	%eax, -60(%rbp)
.LBB124_1099:                           # %sw.epilog4721
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1101
.LBB124_1100:                           # %if.else4722
                                        #   in Loop: Header=BB124_171 Depth=1
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	callq	Get_Direct_CostMB
	movl	%eax, -60(%rbp)
.LBB124_1101:                           # %if.end4724
                                        #   in Loop: Header=BB124_171 Depth=1
	vmovsd	.LCPI124_17(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI124_18(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	-168(%rbp), %xmm1, %xmm1
	vaddsd	%xmm0, %xmm1, %xmm0
	vroundsd	$9, %xmm0, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %eax
	movl	-60(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB124_1121
# %bb.1102:                             # %if.then4731
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	je	.LBB124_1111
# %bb.1103:                             # %land.lhs.true4734
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB124_1111
# %bb.1104:                             # %if.then4737
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB124_1106
# %bb.1105:                             # %if.then4741
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_1110
.LBB124_1106:                           # %if.else4743
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-204(%rbp), %eax
	cmpl	-140(%rbp), %eax
	jge	.LBB124_1108
# %bb.1107:                             # %if.then4746
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	jmp	.LBB124_1109
.LBB124_1108:                           # %if.else4748
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_1109:                           # %if.end4750
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1110
.LBB124_1110:                           # %if.end4751
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1112
.LBB124_1111:                           # %if.else4752
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_1112:                           # %if.end4754
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1113:                           # %for.cond4755
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1115 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1120
# %bb.1114:                             # %for.body4758
                                        #   in Loop: Header=BB124_1113 Depth=2
	movl	$0, -24(%rbp)
.LBB124_1115:                           # %for.cond4759
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1113 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1118
# %bb.1116:                             # %for.body4762
                                        #   in Loop: Header=BB124_1115 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1117:                             # %for.inc4783
                                        #   in Loop: Header=BB124_1115 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1115
.LBB124_1118:                           # %for.end4785
                                        #   in Loop: Header=BB124_1113 Depth=2
	jmp	.LBB124_1119
.LBB124_1119:                           # %for.inc4786
                                        #   in Loop: Header=BB124_1113 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1113
.LBB124_1120:                           # %for.end4788
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$0, best_mode
	jmp	.LBB124_1122
.LBB124_1121:                           # %if.else4789
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB124_1122:                           # %if.end4792
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1123
.LBB124_1123:                           # %if.end4793
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -332(%rbp)
	je	.LBB124_1170
# %bb.1124:                             # %if.then4796
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$13, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_new_Intra8x8Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB124_1168
# %bb.1125:                             # %if.then4802
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_1149
# %bb.1126:                             # %if.then4805
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1127:                           # %for.cond4806
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1129 Depth 3
                                        #         Child Loop BB124_1131 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB124_1140
# %bb.1128:                             # %for.body4809
                                        #   in Loop: Header=BB124_1127 Depth=2
	movl	$0, -24(%rbp)
.LBB124_1129:                           # %for.cond4810
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1127 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_1131 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB124_1138
# %bb.1130:                             # %for.body4813
                                        #   in Loop: Header=BB124_1129 Depth=3
	movl	$0, -56(%rbp)
.LBB124_1131:                           # %for.cond4814
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1127 Depth=2
                                        #       Parent Loop BB124_1129 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB124_1136
# %bb.1132:                             # %for.body4817
                                        #   in Loop: Header=BB124_1131 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB124_1134
# %bb.1133:                             # %if.then4825
                                        #   in Loop: Header=BB124_1131 Depth=4
	movl	$2, -132(%rbp)
.LBB124_1134:                           # %if.end4826
                                        #   in Loop: Header=BB124_1131 Depth=4
	jmp	.LBB124_1135
.LBB124_1135:                           # %for.inc4827
                                        #   in Loop: Header=BB124_1131 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_1131
.LBB124_1136:                           # %for.end4829
                                        #   in Loop: Header=BB124_1129 Depth=3
	jmp	.LBB124_1137
.LBB124_1137:                           # %for.inc4830
                                        #   in Loop: Header=BB124_1129 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1129
.LBB124_1138:                           # %for.end4832
                                        #   in Loop: Header=BB124_1127 Depth=2
	jmp	.LBB124_1139
.LBB124_1139:                           # %for.inc4833
                                        #   in Loop: Header=BB124_1127 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1127
.LBB124_1140:                           # %for.end4835
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
	movl	$0, -24(%rbp)
.LBB124_1141:                           # %for.cond4840
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1143 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1148
# %bb.1142:                             # %for.body4843
                                        #   in Loop: Header=BB124_1141 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1143:                           # %for.cond4844
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1141 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1146
# %bb.1144:                             # %for.body4847
                                        #   in Loop: Header=BB124_1143 Depth=3
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgU, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgV, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1145:                             # %for.inc4875
                                        #   in Loop: Header=BB124_1143 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1143
.LBB124_1146:                           # %for.end4877
                                        #   in Loop: Header=BB124_1141 Depth=2
	jmp	.LBB124_1147
.LBB124_1147:                           # %for.inc4878
                                        #   in Loop: Header=BB124_1141 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1141
.LBB124_1148:                           # %for.end4880
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1149
.LBB124_1149:                           # %if.end4881
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB124_1151
# %bb.1150:                             # %if.then4886
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB124_1151:                           # %if.end4889
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -24(%rbp)
.LBB124_1152:                           # %for.cond4890
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1154 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1159
# %bb.1153:                             # %for.body4893
                                        #   in Loop: Header=BB124_1152 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1154:                           # %for.cond4894
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1152 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1157
# %bb.1155:                             # %for.body4897
                                        #   in Loop: Header=BB124_1154 Depth=3
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-24(%rbp), %rcx
	shlq	$5, %rcx
	movabsq	$temp_imgY, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.1156:                             # %for.inc4911
                                        #   in Loop: Header=BB124_1154 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1154
.LBB124_1157:                           # %for.end4913
                                        #   in Loop: Header=BB124_1152 Depth=2
	jmp	.LBB124_1158
.LBB124_1158:                           # %for.inc4914
                                        #   in Loop: Header=BB124_1152 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1152
.LBB124_1159:                           # %for.end4916
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1160:                           # %for.cond4917
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1162 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1167
# %bb.1161:                             # %for.body4920
                                        #   in Loop: Header=BB124_1160 Depth=2
	movl	$0, -24(%rbp)
.LBB124_1162:                           # %for.cond4921
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1160 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1165
# %bb.1163:                             # %for.body4924
                                        #   in Loop: Header=BB124_1162 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1164:                             # %for.inc4945
                                        #   in Loop: Header=BB124_1162 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1162
.LBB124_1165:                           # %for.end4947
                                        #   in Loop: Header=BB124_1160 Depth=2
	jmp	.LBB124_1166
.LBB124_1166:                           # %for.inc4948
                                        #   in Loop: Header=BB124_1160 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1160
.LBB124_1167:                           # %for.end4950
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$13, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB124_1169
.LBB124_1168:                           # %if.else4952
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB124_1169:                           # %if.end4954
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1170
.LBB124_1170:                           # %if.end4955
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -348(%rbp)
	je	.LBB124_1199
# %bb.1171:                             # %if.then4958
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movq	-48(%rbp), %rax
	movl	$9, 72(%rax)
	vmovsd	-160(%rbp), %xmm0       # xmm0 = mem[0],zero
	leaq	-60(%rbp), %rdi
	callq	Mode_Decision_for_Intra4x4Macroblock
	movl	%eax, -184(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jg	.LBB124_1197
# %bb.1172:                             # %if.then4964
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_1188
# %bb.1173:                             # %if.then4967
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1174:                           # %for.cond4968
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1176 Depth 3
                                        #         Child Loop BB124_1178 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB124_1187
# %bb.1175:                             # %for.body4971
                                        #   in Loop: Header=BB124_1174 Depth=2
	movl	$0, -24(%rbp)
.LBB124_1176:                           # %for.cond4972
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1174 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_1178 Depth 4
	cmpl	$4, -24(%rbp)
	jge	.LBB124_1185
# %bb.1177:                             # %for.body4975
                                        #   in Loop: Header=BB124_1176 Depth=3
	movl	$0, -56(%rbp)
.LBB124_1178:                           # %for.cond4976
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1174 Depth=2
                                        #       Parent Loop BB124_1176 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -56(%rbp)
	jge	.LBB124_1183
# %bb.1179:                             # %for.body4979
                                        #   in Loop: Header=BB124_1178 Depth=4
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$cbp_chroma_block, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-56(%rbp), %rax
	cmpl	$0, (%rcx,%rax,4)
	je	.LBB124_1181
# %bb.1180:                             # %if.then4987
                                        #   in Loop: Header=BB124_1178 Depth=4
	movl	$2, -132(%rbp)
.LBB124_1181:                           # %if.end4988
                                        #   in Loop: Header=BB124_1178 Depth=4
	jmp	.LBB124_1182
.LBB124_1182:                           # %for.inc4989
                                        #   in Loop: Header=BB124_1178 Depth=4
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_1178
.LBB124_1183:                           # %for.end4991
                                        #   in Loop: Header=BB124_1176 Depth=3
	jmp	.LBB124_1184
.LBB124_1184:                           # %for.inc4992
                                        #   in Loop: Header=BB124_1176 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1176
.LBB124_1185:                           # %for.end4994
                                        #   in Loop: Header=BB124_1174 Depth=2
	jmp	.LBB124_1186
.LBB124_1186:                           # %for.inc4995
                                        #   in Loop: Header=BB124_1174 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1174
.LBB124_1187:                           # %for.end4997
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-132(%rbp), %esi
	xorl	%edi, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma_DC
	movl	%eax, -132(%rbp)
	movl	-132(%rbp), %eax
	shll	$4, %eax
	addl	-184(%rbp), %eax
	movl	%eax, -184(%rbp)
.LBB124_1188:                           # %if.end5002
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-184(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movl	$0, -20(%rbp)
.LBB124_1189:                           # %for.cond5004
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1191 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1196
# %bb.1190:                             # %for.body5007
                                        #   in Loop: Header=BB124_1189 Depth=2
	movl	$0, -24(%rbp)
.LBB124_1191:                           # %for.cond5008
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1189 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1194
# %bb.1192:                             # %for.body5011
                                        #   in Loop: Header=BB124_1191 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1193:                             # %for.inc5032
                                        #   in Loop: Header=BB124_1191 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1191
.LBB124_1194:                           # %for.end5034
                                        #   in Loop: Header=BB124_1189 Depth=2
	jmp	.LBB124_1195
.LBB124_1195:                           # %for.inc5035
                                        #   in Loop: Header=BB124_1189 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1189
.LBB124_1196:                           # %for.end5037
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-60(%rbp), %eax
	movl	%eax, -112(%rbp)
	movl	$9, best_mode
	movq	-48(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -228(%rbp)
	jmp	.LBB124_1198
.LBB124_1197:                           # %if.else5039
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movq	cofAC, %rax
	movq	%rax, -400(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movq	%rax, cofAC
	movq	-400(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14136(%rcx)
.LBB124_1198:                           # %if.end5043
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1199
.LBB124_1199:                           # %if.end5044
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -344(%rbp)
	je	.LBB124_1283
# %bb.1200:                             # %if.then5047
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
	movb	$0, %al
	callq	intrapred_luma_16x16
	leaq	-128(%rbp), %rdi
	callq	find_sad_16x16
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	cmpl	-112(%rbp), %eax
	jge	.LBB124_1281
# %bb.1201:                             # %if.then5052
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1202:                           # %for.cond5053
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1204 Depth 3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1209
# %bb.1203:                             # %for.body5056
                                        #   in Loop: Header=BB124_1202 Depth=2
	movl	$0, -24(%rbp)
.LBB124_1204:                           # %for.cond5057
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1202 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1207
# %bb.1205:                             # %for.body5060
                                        #   in Loop: Header=BB124_1204 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1206:                             # %for.inc5082
                                        #   in Loop: Header=BB124_1204 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1204
.LBB124_1207:                           # %for.end5084
                                        #   in Loop: Header=BB124_1202 Depth=2
	jmp	.LBB124_1208
.LBB124_1208:                           # %for.inc5085
                                        #   in Loop: Header=BB124_1202 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1202
.LBB124_1209:                           # %for.end5087
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_1219
# %bb.1210:                             # %if.then5090
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -24(%rbp)
.LBB124_1211:                           # %for.cond5091
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1213 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1218
# %bb.1212:                             # %for.body5094
                                        #   in Loop: Header=BB124_1211 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1213:                           # %for.cond5095
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1211 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1216
# %bb.1214:                             # %for.body5098
                                        #   in Loop: Header=BB124_1213 Depth=3
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -176(%rbp)
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -224(%rbp)
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -220(%rbp)
	movl	-220(%rbp), %eax
	subl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-176(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -256(%rbp)
	movl	-224(%rbp), %eax
	subl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-256(%rbp), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-24(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1215:                             # %for.inc5192
                                        #   in Loop: Header=BB124_1213 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1213
.LBB124_1216:                           # %for.end5194
                                        #   in Loop: Header=BB124_1211 Depth=2
	jmp	.LBB124_1217
.LBB124_1217:                           # %for.inc5195
                                        #   in Loop: Header=BB124_1211 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1211
.LBB124_1218:                           # %for.end5197
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1219
.LBB124_1219:                           # %if.end5198
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$10, best_mode
	movl	-128(%rbp), %edi
	callq	dct_luma_16x16
	movq	-48(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_1280
# %bb.1220:                             # %if.then5203
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	$0, -24(%rbp)
.LBB124_1221:                           # %for.cond5204
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1223 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1228
# %bb.1222:                             # %for.body5207
                                        #   in Loop: Header=BB124_1221 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1223:                           # %for.cond5208
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1221 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1226
# %bb.1224:                             # %for.body5211
                                        #   in Loop: Header=BB124_1223 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1225:                             # %for.inc5230
                                        #   in Loop: Header=BB124_1223 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1223
.LBB124_1226:                           # %for.end5232
                                        #   in Loop: Header=BB124_1221 Depth=2
	jmp	.LBB124_1227
.LBB124_1227:                           # %for.inc5233
                                        #   in Loop: Header=BB124_1221 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1221
.LBB124_1228:                           # %for.end5235
                                        #   in Loop: Header=BB124_171 Depth=1
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB124_1229:                           # %for.cond5237
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1231 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1236
# %bb.1230:                             # %for.body5240
                                        #   in Loop: Header=BB124_1229 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1231:                           # %for.cond5241
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1229 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1234
# %bb.1232:                             # %for.body5244
                                        #   in Loop: Header=BB124_1231 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.1233:                             # %for.inc5263
                                        #   in Loop: Header=BB124_1231 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1231
.LBB124_1234:                           # %for.end5265
                                        #   in Loop: Header=BB124_1229 Depth=2
	jmp	.LBB124_1235
.LBB124_1235:                           # %for.inc5266
                                        #   in Loop: Header=BB124_1229 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1229
.LBB124_1236:                           # %for.end5268
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-132(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -132(%rbp)
	movl	$0, -24(%rbp)
.LBB124_1237:                           # %for.cond5270
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1239 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1244
# %bb.1238:                             # %for.body5273
                                        #   in Loop: Header=BB124_1237 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1239:                           # %for.cond5274
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1237 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1242
# %bb.1240:                             # %for.body5277
                                        #   in Loop: Header=BB124_1239 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1241:                             # %for.inc5287
                                        #   in Loop: Header=BB124_1239 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1239
.LBB124_1242:                           # %for.end5289
                                        #   in Loop: Header=BB124_1237 Depth=2
	jmp	.LBB124_1243
.LBB124_1243:                           # %for.inc5290
                                        #   in Loop: Header=BB124_1237 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1237
.LBB124_1244:                           # %for.end5292
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-132(%rbp), %eax
	shll	$4, %eax
	movq	-48(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -24(%rbp)
.LBB124_1245:                           # %for.cond5296
                                        #   Parent Loop BB124_171 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_1247 Depth 3
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1279
# %bb.1246:                             # %for.body5299
                                        #   in Loop: Header=BB124_1245 Depth=2
	movl	$0, -20(%rbp)
.LBB124_1247:                           # %for.cond5300
                                        #   Parent Loop BB124_171 Depth=1
                                        #     Parent Loop BB124_1245 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1277
# %bb.1248:                             # %for.body5303
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -256(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-24(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-256(%rbp), %ecx
	movl	%ecx, -224(%rbp)
	movl	-256(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-24(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -176(%rbp)
	movl	-176(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -220(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-176(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB124_1250
# %bb.1249:                             # %cond.true5343
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_1251
.LBB124_1250:                           # %cond.false5344
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB124_1251:                           # %cond.end5356
                                        #   in Loop: Header=BB124_1247 Depth=3
	cmpl	%eax, %ecx
	jge	.LBB124_1253
# %bb.1252:                             # %cond.true5360
                                        #   in Loop: Header=BB124_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_1257
.LBB124_1253:                           # %cond.false5362
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	movl	-176(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_1255
# %bb.1254:                             # %cond.true5376
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_1256
.LBB124_1255:                           # %cond.false5377
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-176(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_1256:                           # %cond.end5389
                                        #   in Loop: Header=BB124_1247 Depth=3
.LBB124_1257:                           # %cond.end5391
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-224(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movslq	-128(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_1259
# %bb.1258:                             # %cond.true5415
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_1260
.LBB124_1259:                           # %cond.false5416
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_1260:                           # %cond.end5426
                                        #   in Loop: Header=BB124_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB124_1262
# %bb.1261:                             # %cond.true5430
                                        #   in Loop: Header=BB124_1247 Depth=3
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB124_1266
.LBB124_1262:                           # %cond.false5432
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	movl	-224(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movslq	-128(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_1264
# %bb.1263:                             # %cond.true5444
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_1265
.LBB124_1264:                           # %cond.false5445
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-224(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-128(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_1265:                           # %cond.end5455
                                        #   in Loop: Header=BB124_1247 Depth=3
.LBB124_1266:                           # %cond.end5457
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-220(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movq	-48(%rbp), %rdi
	movslq	524(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-20(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-24(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB124_1268
# %bb.1267:                             # %cond.true5483
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB124_1269
.LBB124_1268:                           # %cond.false5484
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB124_1269:                           # %cond.end5496
                                        #   in Loop: Header=BB124_1247 Depth=3
	cmpl	%ecx, %eax
	jge	.LBB124_1271
# %bb.1270:                             # %cond.true5500
                                        #   in Loop: Header=BB124_1247 Depth=3
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB124_1275
.LBB124_1271:                           # %cond.false5502
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	movl	-220(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movq	-48(%rbp), %rsi
	movslq	524(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB124_1273
# %bb.1272:                             # %cond.true5516
                                        #   in Loop: Header=BB124_1247 Depth=3
	xorl	%eax, %eax
	jmp	.LBB124_1274
.LBB124_1273:                           # %cond.false5517
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-220(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movq	-48(%rbp), %rdx
	movslq	524(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB124_1274:                           # %cond.end5529
                                        #   in Loop: Header=BB124_1247 Depth=3
.LBB124_1275:                           # %cond.end5531
                                        #   in Loop: Header=BB124_1247 Depth=3
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1276:                             # %for.inc5544
                                        #   in Loop: Header=BB124_1247 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1247
.LBB124_1277:                           # %for.end5546
                                        #   in Loop: Header=BB124_1245 Depth=2
	jmp	.LBB124_1278
.LBB124_1278:                           # %for.inc5547
                                        #   in Loop: Header=BB124_1245 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1245
.LBB124_1279:                           # %for.end5549
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1280
.LBB124_1280:                           # %if.end5550
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1282
.LBB124_1281:                           # %if.else5551
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-228(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
	movl	-308(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 576(%rcx)
.LBB124_1282:                           # %if.end5554
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1283
.LBB124_1283:                           # %if.end5555
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1284
.LBB124_1284:                           # %if.end5556
                                        #   in Loop: Header=BB124_171 Depth=1
	cmpl	$0, -264(%rbp)
	jne	.LBB124_1289
# %bb.1285:                             # %if.then5559
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1288
# %bb.1286:                             # %lor.lhs.false5563
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB124_1288
# %bb.1287:                             # %lor.rhs5567
                                        #   in Loop: Header=BB124_171 Depth=1
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB124_1288:                           # %lor.end5571
                                        #   in Loop: Header=BB124_171 Depth=1
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movl	%ecx, -260(%rbp)
.LBB124_1289:                           # %if.end5574
                                        #   in Loop: Header=BB124_171 Depth=1
	jmp	.LBB124_1290
.LBB124_1290:                           # %for.inc5575
                                        #   in Loop: Header=BB124_171 Depth=1
	movl	-264(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -264(%rbp)
	jmp	.LBB124_171
.LBB124_1291:                           # %for.end5577
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_1300
# %bb.1292:                             # %if.then5580
	cmpl	$0, cbp
	jne	.LBB124_1294
# %bb.1293:                             # %lor.lhs.false5583
	cmpl	$10, best_mode
	jne	.LBB124_1295
.LBB124_1294:                           # %if.then5586
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB124_1299
.LBB124_1295:                           # %if.else5587
	cmpl	$0, cbp
	jne	.LBB124_1298
# %bb.1296:                             # %land.lhs.true5590
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB124_1298
# %bb.1297:                             # %if.then5592
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB124_1298:                           # %if.end5597
	jmp	.LBB124_1299
.LBB124_1299:                           # %if.end5598
	callq	set_stored_macroblock_parameters
	jmp	.LBB124_1395
.LBB124_1300:                           # %if.else5599
	movl	best_mode, %edi
	callq	SetModesAndRefframeForBlocks
	cmpl	$8, best_mode
	jne	.LBB124_1314
# %bb.1301:                             # %if.then5602
	movq	-48(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB124_1305
# %bb.1302:                             # %land.lhs.true5605
	cmpl	$0, cbp8_8x8ts
	jne	.LBB124_1305
# %bb.1303:                             # %land.lhs.true5608
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	je	.LBB124_1305
# %bb.1304:                             # %if.then5612
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_1305:                           # %if.end5614
	movq	-48(%rbp), %rdi
	callq	SetCoeffAndReconstruction8x8
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB124_1306:                           # %for.cond5616
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_1308 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_1313
# %bb.1307:                             # %for.body5621
                                        #   in Loop: Header=BB124_1306 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB124_1308:                           # %for.cond5623
                                        #   Parent Loop BB124_1306 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_1311
# %bb.1309:                             # %for.body5628
                                        #   in Loop: Header=BB124_1308 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1310:                             # %for.inc5636
                                        #   in Loop: Header=BB124_1308 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_1308
.LBB124_1311:                           # %for.end5639
                                        #   in Loop: Header=BB124_1306 Depth=1
	jmp	.LBB124_1312
.LBB124_1312:                           # %for.inc5640
                                        #   in Loop: Header=BB124_1306 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1306
.LBB124_1313:                           # %for.end5642
	jmp	.LBB124_1370
.LBB124_1314:                           # %if.else5643
	cmpl	$13, best_mode
	jne	.LBB124_1342
# %bb.1315:                             # %if.then5646
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB124_1316:                           # %for.cond5647
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_1318 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB124_1323
# %bb.1317:                             # %for.body5650
                                        #   in Loop: Header=BB124_1316 Depth=1
	movl	$0, -24(%rbp)
.LBB124_1318:                           # %for.cond5651
                                        #   Parent Loop BB124_1316 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB124_1321
# %bb.1319:                             # %for.body5654
                                        #   in Loop: Header=BB124_1318 Depth=2
	movq	img, %rax
	movq	112(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	396(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.1320:                             # %for.inc5677
                                        #   in Loop: Header=BB124_1318 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_1318
.LBB124_1321:                           # %for.end5680
                                        #   in Loop: Header=BB124_1316 Depth=1
	jmp	.LBB124_1322
.LBB124_1322:                           # %for.inc5681
                                        #   in Loop: Header=BB124_1316 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1316
.LBB124_1323:                           # %for.end5683
	movl	$0, -24(%rbp)
.LBB124_1324:                           # %for.cond5684
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_1326 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1331
# %bb.1325:                             # %for.body5687
                                        #   in Loop: Header=BB124_1324 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1326:                           # %for.cond5688
                                        #   Parent Loop BB124_1324 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1329
# %bb.1327:                             # %for.body5691
                                        #   in Loop: Header=BB124_1326 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgY, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1328:                             # %for.inc5705
                                        #   in Loop: Header=BB124_1326 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1326
.LBB124_1329:                           # %for.end5707
                                        #   in Loop: Header=BB124_1324 Depth=1
	jmp	.LBB124_1330
.LBB124_1330:                           # %for.inc5708
                                        #   in Loop: Header=BB124_1324 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1324
.LBB124_1331:                           # %for.end5710
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_1341
# %bb.1332:                             # %if.then5713
	movl	$0, -24(%rbp)
.LBB124_1333:                           # %for.cond5714
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_1335 Depth 2
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1340
# %bb.1334:                             # %for.body5717
                                        #   in Loop: Header=BB124_1333 Depth=1
	movl	$0, -20(%rbp)
.LBB124_1335:                           # %for.cond5718
                                        #   Parent Loop BB124_1333 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1338
# %bb.1336:                             # %for.body5721
                                        #   in Loop: Header=BB124_1335 Depth=2
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgU, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movslq	-24(%rbp), %rax
	shlq	$5, %rax
	movabsq	$temp_imgV, %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movw	(%rcx,%rax,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.1337:                             # %for.inc5750
                                        #   in Loop: Header=BB124_1335 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1335
.LBB124_1338:                           # %for.end5752
                                        #   in Loop: Header=BB124_1333 Depth=1
	jmp	.LBB124_1339
.LBB124_1339:                           # %for.inc5753
                                        #   in Loop: Header=BB124_1333 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1333
.LBB124_1340:                           # %for.end5755
	jmp	.LBB124_1341
.LBB124_1341:                           # %if.end5756
	jmp	.LBB124_1342
.LBB124_1342:                           # %if.end5757
	cmpl	$9, best_mode
	je	.LBB124_1369
# %bb.1343:                             # %land.lhs.true5760
	cmpl	$13, best_mode
	je	.LBB124_1369
# %bb.1344:                             # %if.then5763
	movl	$0, -56(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -24(%rbp)
.LBB124_1345:                           # %for.cond5765
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_1347 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_1352
# %bb.1346:                             # %for.body5770
                                        #   in Loop: Header=BB124_1345 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -20(%rbp)
.LBB124_1347:                           # %for.cond5772
                                        #   Parent Loop BB124_1345 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_1350
# %bb.1348:                             # %for.body5777
                                        #   in Loop: Header=BB124_1347 Depth=2
	movq	-392(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-48(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.1349:                             # %for.inc5785
                                        #   in Loop: Header=BB124_1347 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB124_1347
.LBB124_1350:                           # %for.end5788
                                        #   in Loop: Header=BB124_1345 Depth=1
	jmp	.LBB124_1351
.LBB124_1351:                           # %for.inc5789
                                        #   in Loop: Header=BB124_1345 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1345
.LBB124_1352:                           # %for.end5791
	cmpl	$10, best_mode
	je	.LBB124_1368
# %bb.1353:                             # %if.then5794
	cmpl	$1, best_mode
	jl	.LBB124_1356
# %bb.1354:                             # %land.lhs.true5797
	cmpl	$3, best_mode
	jg	.LBB124_1356
# %bb.1355:                             # %if.then5800
	movl	-320(%rbp), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 572(%rcx)
.LBB124_1356:                           # %if.end5802
	movb	$0, %al
	callq	LumaResidualCoding
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB124_1359
# %bb.1357:                             # %land.lhs.true5806
	cmpl	$0, best_mode
	jne	.LBB124_1359
# %bb.1358:                             # %if.then5809
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_1359:                           # %if.end5811
	movl	$0, -20(%rbp)
.LBB124_1360:                           # %for.cond5812
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_1362 Depth 2
	cmpl	$16, -20(%rbp)
	jge	.LBB124_1367
# %bb.1361:                             # %for.body5815
                                        #   in Loop: Header=BB124_1360 Depth=1
	movl	$0, -24(%rbp)
.LBB124_1362:                           # %for.cond5816
                                        #   Parent Loop BB124_1360 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -24(%rbp)
	jge	.LBB124_1365
# %bb.1363:                             # %for.body5819
                                        #   in Loop: Header=BB124_1362 Depth=2
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-20(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$diffy, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.1364:                             # %for.inc5840
                                        #   in Loop: Header=BB124_1362 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB124_1362
.LBB124_1365:                           # %for.end5842
                                        #   in Loop: Header=BB124_1360 Depth=1
	jmp	.LBB124_1366
.LBB124_1366:                           # %for.inc5843
                                        #   in Loop: Header=BB124_1360 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB124_1360
.LBB124_1367:                           # %for.end5845
	jmp	.LBB124_1368
.LBB124_1368:                           # %if.end5846
	jmp	.LBB124_1369
.LBB124_1369:                           # %if.end5847
	jmp	.LBB124_1370
.LBB124_1370:                           # %if.end5848
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB124_1374
# %bb.1371:                             # %land.lhs.true5853
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_1374
# %bb.1372:                             # %lor.lhs.false5857
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_1374
# %bb.1373:                             # %if.then5861
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_1374:                           # %if.end5863
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB124_1376
# %bb.1375:                             # %if.then5867
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	IntraChromaPrediction
.LBB124_1376:                           # %if.end5868
	movq	img, %rax
	movl	$0, 72380(%rax)
	movl	$0, -288(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB124_1380
# %bb.1377:                             # %land.lhs.true5871
	cmpl	$9, best_mode
	je	.LBB124_1382
# %bb.1378:                             # %lor.lhs.false5874
	cmpl	$10, best_mode
	je	.LBB124_1382
# %bb.1379:                             # %lor.lhs.false5877
	cmpl	$13, best_mode
	je	.LBB124_1382
.LBB124_1380:                           # %land.lhs.true5880
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB124_1382
# %bb.1381:                             # %if.then5884
	leaq	-288(%rbp), %rdi
	callq	ChromaResidualCoding
.LBB124_1382:                           # %if.end5885
	cmpl	$10, best_mode
	jne	.LBB124_1384
# %bb.1383:                             # %if.then5888
	movq	-48(%rbp), %rax
	movl	460(%rax), %edi
	movl	-128(%rbp), %esi
	callq	I16Offset
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
.LBB124_1384:                           # %if.end5892
	movq	-48(%rbp), %rdi
	movl	-108(%rbp), %esi
	callq	SetMotionVectorsMB
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB124_1386
# %bb.1385:                             # %lor.lhs.false5896
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB124_1392
.LBB124_1386:                           # %land.lhs.true5900
	cmpl	$1, best_mode
	jne	.LBB124_1392
# %bb.1387:                             # %land.lhs.true5903
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB124_1392
# %bb.1388:                             # %land.lhs.true5907
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jne	.LBB124_1392
# %bb.1389:                             # %land.lhs.true5919
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB124_1392
# %bb.1390:                             # %land.lhs.true5939
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movslq	144(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movslq	148(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movswl	2(%rax), %eax
	movq	-440(%rbp), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movswl	2(%rcx), %ecx
	cmpl	%ecx, %eax
	jne	.LBB124_1392
# %bb.1391:                             # %if.then5959
	movq	-48(%rbp), %rax
	movl	$0, 484(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 480(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 476(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 472(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-48(%rbp), %rax
	movl	$0, 572(%rax)
.LBB124_1392:                           # %if.end5969
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB124_1394
# %bb.1393:                             # %if.then5972
	callq	set_mbaff_parameters
.LBB124_1394:                           # %if.end5973
	jmp	.LBB124_1395
.LBB124_1395:                           # %if.end5974
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB124_1410
# %bb.1396:                             # %if.then5977
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB124_1409
# %bb.1397:                             # %if.then5981
	movb	$0, %al
	callq	calc_MAD
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	%xmm0, (%rax,%rcx,8)
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB124_1408
# %bb.1398:                             # %if.then5988
	movq	img, %rax
	movq	72584(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	vmovsd	(%rax,%rcx,8), %xmm0    # xmm0 = mem[0],zero
	movq	img, %rax
	vaddsd	72544(%rax), %xmm0, %xmm0
	vmovsd	%xmm0, 72544(%rax)
	cmpl	$0, cbp
	jne	.LBB124_1400
# %bb.1399:                             # %lor.lhs.false5996
	cmpl	$10, best_mode
	jne	.LBB124_1401
.LBB124_1400:                           # %if.then5999
	movq	-48(%rbp), %rax
	movl	$1, 600(%rax)
	jmp	.LBB124_1402
.LBB124_1401:                           # %if.else6001
	movq	-48(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-48(%rbp), %rax
	movl	592(%rax), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-48(%rbp), %rax
	movl	$0, 600(%rax)
.LBB124_1402:                           # %if.end6008
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB124_1407
# %bb.1403:                             # %if.then6010
	movq	-48(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB124_1405
# %bb.1404:                             # %if.then6013
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP
	jmp	.LBB124_1406
.LBB124_1405:                           # %if.else6016
	movq	-48(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movq	-48(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
.LBB124_1406:                           # %if.end6019
	jmp	.LBB124_1407
.LBB124_1407:                           # %if.end6020
	jmp	.LBB124_1408
.LBB124_1408:                           # %if.end6021
	jmp	.LBB124_1409
.LBB124_1409:                           # %if.end6022
	jmp	.LBB124_1410
.LBB124_1410:                           # %if.end6023
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	je	.LBB124_1412
# %bb.1411:                             # %if.then6026
	vmovsd	-248(%rbp), %xmm0       # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
	jmp	.LBB124_1413
.LBB124_1412:                           # %if.else6028
	vcvtsi2sdl	-112(%rbp), %xmm0, %xmm0
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB124_1413:                           # %if.end6031
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB124_1430
# %bb.1414:                             # %if.then6034
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB124_1429
# %bb.1415:                             # %if.then6038
	movq	-48(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_1417
# %bb.1416:                             # %cond.true6041
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB124_1420
	jmp	.LBB124_1428
.LBB124_1417:                           # %cond.false6042
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_1419
# %bb.1418:                             # %cond.true6046
	movq	-48(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB124_1428
	jmp	.LBB124_1420
.LBB124_1419:                           # %cond.false6049
	movb	$1, %al
	testb	$1, %al
	jne	.LBB124_1420
	jmp	.LBB124_1428
.LBB124_1420:                           # %land.lhs.true6050
	movq	-448(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_1422
# %bb.1421:                             # %cond.true6053
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB124_1425
	jmp	.LBB124_1428
.LBB124_1422:                           # %cond.false6054
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB124_1424
# %bb.1423:                             # %cond.true6058
	movq	-448(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB124_1428
	jmp	.LBB124_1425
.LBB124_1424:                           # %cond.false6061
	movb	$1, %al
	testb	$1, %al
	jne	.LBB124_1425
	jmp	.LBB124_1428
.LBB124_1425:                           # %if.then6062
	callq	field_flag_inference
	cmpl	-280(%rbp), %eax
	je	.LBB124_1427
# %bb.1426:                             # %if.then6066
	vmovsd	.LCPI124_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	rdopt, %rax
	vmovsd	%xmm0, (%rax)
.LBB124_1427:                           # %if.end6068
	jmp	.LBB124_1428
.LBB124_1428:                           # %if.end6069
	jmp	.LBB124_1429
.LBB124_1429:                           # %if.end6070
	jmp	.LBB124_1430
.LBB124_1430:                           # %if.end6071
	movq	input, %rax
	cmpl	$1, 2908(%rax)
	jne	.LBB124_1453
# %bb.1431:                             # %if.then6075
	movq	input, %rax
	cmpl	$1, 2464(%rax)
	jne	.LBB124_1433
# %bb.1432:                             # %if.then6079
	xorl	%eax, %eax
	movl	-136(%rbp), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	movl	$0, %edx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rsi
	movq	img, %rdi
	movl	140(%rdi), %edi
	shll	$1, %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	136(%rdi), %edi
	shll	$1, %edi
	movslq	%edi, %rdi
	movb	%dl, (%rsi,%rdi)
	movl	-136(%rbp), %edx
	cmpl	$0, %edx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
	jmp	.LBB124_1452
.LBB124_1433:                           # %if.else6127
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB124_1451
# %bb.1434:                             # %if.then6131
	xorl	%eax, %eax
	cmpl	$0, -260(%rbp)
	jne	.LBB124_1438
# %bb.1435:                             # %land.rhs6134
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1437
# %bb.1436:                             # %lor.rhs6138
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB124_1437:                           # %lor.end6142
.LBB124_1438:                           # %land.end6144
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB124_1442
# %bb.1439:                             # %land.rhs6158
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB124_1441
# %bb.1440:                             # %lor.rhs6162
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB124_1441:                           # %lor.end6166
.LBB124_1442:                           # %land.end6168
	xorl	%eax, %eax
	xorl	%edx, %edx
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %edx
	movq	refresh_map, %rcx
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movq	(%rcx,%rsi,8), %rcx
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rcx,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB124_1446
# %bb.1443:                             # %land.rhs6183
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1445
# %bb.1444:                             # %lor.rhs6187
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB124_1445:                           # %lor.end6191
.LBB124_1446:                           # %land.end6193
	xorl	%ecx, %ecx
	xorl	%edx, %edx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %edx
	movq	refresh_map, %rax
	movq	img, %rsi
	movl	140(%rsi), %esi
	shll	$1, %esi
	addl	$1, %esi
	movslq	%esi, %rsi
	movq	(%rax,%rsi,8), %rax
	movq	img, %rsi
	movl	136(%rsi), %esi
	shll	$1, %esi
	movslq	%esi, %rsi
	movb	%dl, (%rax,%rsi)
	cmpl	$0, -260(%rbp)
	jne	.LBB124_1450
# %bb.1447:                             # %land.rhs6208
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %cl
	je	.LBB124_1449
# %bb.1448:                             # %lor.rhs6212
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%cl
.LBB124_1449:                           # %lor.end6216
.LBB124_1450:                           # %land.end6218
	xorl	%eax, %eax
	testb	$1, %cl
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	refresh_map, %rcx
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%al, (%rcx,%rdx)
.LBB124_1451:                           # %if.end6232
	jmp	.LBB124_1452
.LBB124_1452:                           # %if.end6233
	jmp	.LBB124_1464
.LBB124_1453:                           # %if.else6234
	movq	input, %rax
	cmpl	$2, 2908(%rax)
	jne	.LBB124_1463
# %bb.1454:                             # %if.then6238
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1456
# %bb.1455:                             # %lor.rhs6242
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB124_1456:                           # %lor.end6246
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1458
# %bb.1457:                             # %lor.rhs6261
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB124_1458:                           # %lor.end6265
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1460
# %bb.1459:                             # %lor.rhs6281
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB124_1460:                           # %lor.end6285
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB124_1462
# %bb.1461:                             # %lor.rhs6301
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	sete	%al
.LBB124_1462:                           # %lor.end6305
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%eax, %ecx
	movq	refresh_map, %rax
	movq	img, %rdx
	movl	140(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movq	(%rax,%rdx,8), %rax
	movq	img, %rdx
	movl	136(%rdx), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movb	%cl, (%rax,%rdx)
.LBB124_1463:                           # %if.end6319
	jmp	.LBB124_1464
.LBB124_1464:                           # %if.end6320
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	je	.LBB124_1466
# %bb.1465:                             # %if.then6323
	movl	best_mode, %edi
	movl	-64(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %esi
	callq	skip_intrabk_SAD
.LBB124_1466:                           # %if.end6327
	cmpl	$1718736779, -412(%rbp) # imm = 0x6671D78B
	jne	.LBB124_1468
.LBB124_1467:
	addq	$480, %rsp              # imm = 0x1E0
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_1468:                           # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_1467
.Lfunc_end124:
	.size	encode_one_macroblock.95, .Lfunc_end124-encode_one_macroblock.95
	.cfi_endproc
                                        # -- End function
	.globl	SetMotionVectorsMB.96   # -- Begin function SetMotionVectorsMB.96
	.p2align	4, 0x90
	.type	SetMotionVectorsMB.96,@function
SetMotionVectorsMB.96:                  # @SetMotionVectorsMB.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movl	$1642392884, -72(%rbp)  # imm = 0x61E4ED34
	movq	%rdi, -64(%rbp)
	movl	%esi, -68(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -8(%rbp)
.LBB125_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB125_33
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	$0, -4(%rbp)
.LBB125_3:                              # %for.cond3
                                        #   Parent Loop BB125_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB125_31
# %bb.4:                                # %for.body5
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-64(%rbp), %rsi
	movl	-8(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	addl	%edx, %ecx
	movl	%ecx, -24(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movq	-64(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movl	%eax, -52(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -36(%rbp)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB125_11
# %bb.5:                                # %land.lhs.true
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB125_11
# %bb.6:                                # %land.lhs.true31
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 72(%rax)
	jne	.LBB125_11
# %bb.7:                                # %if.then
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-64(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB125_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB125_10
.LBB125_9:                              # %cond.false
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB125_10:                             # %cond.end
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	%rax, -48(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -56(%rbp)
.LBB125_11:                             # %if.end
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB125_16
# %bb.12:                               # %if.then38
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$0, -52(%rbp)
	jl	.LBB125_14
# %bb.13:                               # %if.then41
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB125_15
.LBB125_14:                             # %if.else
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB125_15:                             # %if.end89
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_29
.LBB125_16:                             # %if.else90
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$-1, -52(%rbp)
	jne	.LBB125_18
# %bb.17:                               # %if.then93
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB125_28
.LBB125_18:                             # %if.else122
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$0, -52(%rbp)
	jne	.LBB125_20
# %bb.19:                               # %if.then125
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	jmp	.LBB125_27
.LBB125_20:                             # %if.else174
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$1, -52(%rbp)
	jne	.LBB125_22
# %bb.21:                               # %if.then177
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB125_26
.LBB125_22:                             # %if.else226
                                        #   in Loop: Header=BB125_3 Depth=2
	cmpl	$2, -52(%rbp)
	jne	.LBB125_24
# %bb.23:                               # %if.then229
                                        #   in Loop: Header=BB125_3 Depth=2
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB125_25
.LBB125_24:                             # %if.else298
                                        #   in Loop: Header=BB125_3 Depth=2
	movabsq	$.L.str.1, %rdi
	movl	$255, %esi
	callq	error
.LBB125_25:                             # %if.end299
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_26
.LBB125_26:                             # %if.end300
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_27
.LBB125_27:                             # %if.end301
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_28
.LBB125_28:                             # %if.end302
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_29
.LBB125_29:                             # %if.end303
                                        #   in Loop: Header=BB125_3 Depth=2
	jmp	.LBB125_30
.LBB125_30:                             # %for.inc
                                        #   in Loop: Header=BB125_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_3
.LBB125_31:                             # %for.end
                                        #   in Loop: Header=BB125_1 Depth=1
	jmp	.LBB125_32
.LBB125_32:                             # %for.inc304
                                        #   in Loop: Header=BB125_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_1
.LBB125_33:                             # %for.end306
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB125_55
# %bb.34:                               # %if.then308
	movl	$0, -4(%rbp)
.LBB125_35:                             # %for.cond309
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB125_37 Depth 2
                                        #       Child Loop BB125_39 Depth 3
                                        #         Child Loop BB125_41 Depth 4
                                        #           Child Loop BB125_43 Depth 5
	cmpl	$4, -4(%rbp)
	jge	.LBB125_54
# %bb.36:                               # %for.body312
                                        #   in Loop: Header=BB125_35 Depth=1
	movl	$0, -8(%rbp)
.LBB125_37:                             # %for.cond313
                                        #   Parent Loop BB125_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB125_39 Depth 3
                                        #         Child Loop BB125_41 Depth 4
                                        #           Child Loop BB125_43 Depth 5
	cmpl	$4, -8(%rbp)
	jge	.LBB125_52
# %bb.38:                               # %for.body316
                                        #   in Loop: Header=BB125_37 Depth=2
	movl	$0, -20(%rbp)
.LBB125_39:                             # %for.cond317
                                        #   Parent Loop BB125_35 Depth=1
                                        #     Parent Loop BB125_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB125_41 Depth 4
                                        #           Child Loop BB125_43 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB125_50
# %bb.40:                               # %for.body320
                                        #   in Loop: Header=BB125_39 Depth=3
	movl	$0, -24(%rbp)
.LBB125_41:                             # %for.cond321
                                        #   Parent Loop BB125_35 Depth=1
                                        #     Parent Loop BB125_37 Depth=2
                                        #       Parent Loop BB125_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB125_43 Depth 5
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB125_48
# %bb.42:                               # %for.body324
                                        #   in Loop: Header=BB125_41 Depth=4
	movl	$0, -28(%rbp)
.LBB125_43:                             # %for.cond325
                                        #   Parent Loop BB125_35 Depth=1
                                        #     Parent Loop BB125_37 Depth=2
                                        #       Parent Loop BB125_39 Depth=3
                                        #         Parent Loop BB125_41 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$9, -28(%rbp)
	jge	.LBB125_46
# %bb.44:                               # %for.body328
                                        #   in Loop: Header=BB125_43 Depth=5
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3240(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	rdopt, %rcx
	movq	3232(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.45:                               # %for.inc421
                                        #   in Loop: Header=BB125_43 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB125_43
.LBB125_46:                             # %for.end423
                                        #   in Loop: Header=BB125_41 Depth=4
	jmp	.LBB125_47
.LBB125_47:                             # %for.inc424
                                        #   in Loop: Header=BB125_41 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB125_41
.LBB125_48:                             # %for.end426
                                        #   in Loop: Header=BB125_39 Depth=3
	jmp	.LBB125_49
.LBB125_49:                             # %for.inc427
                                        #   in Loop: Header=BB125_39 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB125_39
.LBB125_50:                             # %for.end429
                                        #   in Loop: Header=BB125_37 Depth=2
	jmp	.LBB125_51
.LBB125_51:                             # %for.inc430
                                        #   in Loop: Header=BB125_37 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB125_37
.LBB125_52:                             # %for.end432
                                        #   in Loop: Header=BB125_35 Depth=1
	jmp	.LBB125_53
.LBB125_53:                             # %for.inc433
                                        #   in Loop: Header=BB125_35 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB125_35
.LBB125_54:                             # %for.end435
	jmp	.LBB125_55
.LBB125_55:                             # %if.end436
	cmpl	$1642392884, -72(%rbp)  # imm = 0x61E4ED34
	jne	.LBB125_57
.LBB125_56:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_57:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_56
.Lfunc_end125:
	.size	SetMotionVectorsMB.96, .Lfunc_end125-SetMotionVectorsMB.96
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.97
.LCPI126_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.97
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.97,@function
RDCost_for_8x8blocks.97:                # @RDCost_for_8x8blocks.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1677697543, -172(%rbp) # imm = 0x63FFA207
	movq	%rdi, -144(%rbp)
	movq	%rsi, -200(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -48(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-52(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -164(%rbp)
	cmpl	$0, -164(%rbp)
	je	.LBB126_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -40(%rbp)
	sete	%r10b
.LBB126_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-40(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -124(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB126_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB126_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI126_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -192(%rbp)
	jmp	.LBB126_139
.LBB126_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB126_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB126_8
.LBB126_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB126_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB126_19
.LBB126_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB126_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB126_13
.LBB126_12:                             # %cond.true69
	movl	-40(%rbp), %eax
	jmp	.LBB126_14
.LBB126_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB126_14
.LBB126_14:                             # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB126_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB126_17
.LBB126_16:                             # %cond.true80
	movl	-40(%rbp), %eax
	jmp	.LBB126_18
.LBB126_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB126_18
.LBB126_18:                             # %cond.end82
	movl	%eax, -160(%rbp)
	movq	-200(%rbp), %rsi
	movl	-36(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-160(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB126_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB126_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_23 Depth 2
                                        #       Child Loop BB126_25 Depth 3
                                        #     Child Loop BB126_31 Depth 2
                                        #       Child Loop BB126_33 Depth 3
                                        #     Child Loop BB126_39 Depth 2
                                        #       Child Loop BB126_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB126_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB126_21 Depth=1
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB126_23:                             # %for.cond96
                                        #   Parent Loop BB126_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB126_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB126_23 Depth=2
	movl	$0, -12(%rbp)
.LBB126_25:                             # %for.cond100
                                        #   Parent Loop BB126_21 Depth=1
                                        #     Parent Loop BB126_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB126_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB126_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_25
.LBB126_28:                             # %for.end
                                        #   in Loop: Header=BB126_23 Depth=2
	jmp	.LBB126_29
.LBB126_29:                             # %for.inc114
                                        #   in Loop: Header=BB126_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_23
.LBB126_30:                             # %for.end116
                                        #   in Loop: Header=BB126_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB126_31:                             # %for.cond120
                                        #   Parent Loop BB126_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB126_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB126_31 Depth=2
	movl	$0, -12(%rbp)
.LBB126_33:                             # %for.cond124
                                        #   Parent Loop BB126_21 Depth=1
                                        #     Parent Loop BB126_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB126_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB126_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_33
.LBB126_36:                             # %for.end152
                                        #   in Loop: Header=BB126_31 Depth=2
	jmp	.LBB126_37
.LBB126_37:                             # %for.inc153
                                        #   in Loop: Header=BB126_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_31
.LBB126_38:                             # %for.end155
                                        #   in Loop: Header=BB126_21 Depth=1
	movl	-36(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB126_39:                             # %for.cond159
                                        #   Parent Loop BB126_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB126_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB126_39 Depth=2
	movl	$0, -12(%rbp)
.LBB126_41:                             # %for.cond163
                                        #   Parent Loop BB126_21 Depth=1
                                        #     Parent Loop BB126_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB126_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB126_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB126_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_41
.LBB126_44:                             # %for.end180
                                        #   in Loop: Header=BB126_39 Depth=2
	jmp	.LBB126_45
.LBB126_45:                             # %for.inc181
                                        #   in Loop: Header=BB126_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_39
.LBB126_46:                             # %for.end183
                                        #   in Loop: Header=BB126_21 Depth=1
	jmp	.LBB126_47
.LBB126_47:                             # %for.inc184
                                        #   in Loop: Header=BB126_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB126_21
.LBB126_48:                             # %for.end186
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB126_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB126_49 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB126_51:                             # %for.cond192
                                        #   Parent Loop BB126_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -120(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-120(%rbp), %edx
	movl	%edx, -92(%rbp)
	movl	-120(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -80(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB126_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_55
.LBB126_54:                             # %cond.false229
                                        #   in Loop: Header=BB126_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB126_55:                             # %cond.end235
                                        #   in Loop: Header=BB126_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB126_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB126_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB126_61
.LBB126_57:                             # %cond.false241
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB126_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_60
.LBB126_59:                             # %cond.false250
                                        #   in Loop: Header=BB126_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB126_60:                             # %cond.end256
                                        #   in Loop: Header=BB126_51 Depth=2
.LBB126_61:                             # %cond.end258
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-92(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB126_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB126_64
.LBB126_63:                             # %cond.false276
                                        #   in Loop: Header=BB126_51 Depth=2
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB126_64:                             # %cond.end282
                                        #   in Loop: Header=BB126_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB126_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB126_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB126_70
.LBB126_66:                             # %cond.false288
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB126_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_69
.LBB126_68:                             # %cond.false297
                                        #   in Loop: Header=BB126_51 Depth=2
	movl	-92(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB126_69:                             # %cond.end303
                                        #   in Loop: Header=BB126_51 Depth=2
.LBB126_70:                             # %cond.end305
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-80(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB126_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB126_73
.LBB126_72:                             # %cond.false325
                                        #   in Loop: Header=BB126_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB126_73:                             # %cond.end331
                                        #   in Loop: Header=BB126_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB126_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB126_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB126_79
.LBB126_75:                             # %cond.false337
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB126_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB126_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB126_78
.LBB126_77:                             # %cond.false346
                                        #   in Loop: Header=BB126_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB126_78:                             # %cond.end352
                                        #   in Loop: Header=BB126_51 Depth=2
.LBB126_79:                             # %cond.end354
                                        #   in Loop: Header=BB126_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB126_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_51
.LBB126_81:                             # %for.end369
                                        #   in Loop: Header=BB126_49 Depth=1
	jmp	.LBB126_82
.LBB126_82:                             # %for.inc370
                                        #   in Loop: Header=BB126_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_49
.LBB126_83:                             # %for.end372
	jmp	.LBB126_84
.LBB126_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB126_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB126_87
# %bb.86:                               # %if.then379
	movl	-36(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB126_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB126_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB126_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB126_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_92 Depth 2
                                        #       Child Loop BB126_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB126_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB126_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB126_92:                             # %for.cond395
                                        #   Parent Loop BB126_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB126_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB126_94:                             # %for.cond403
                                        #   Parent Loop BB126_90 Depth=1
                                        #     Parent Loop BB126_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB126_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB126_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_94
.LBB126_97:                             # %for.end429
                                        #   in Loop: Header=BB126_92 Depth=2
	jmp	.LBB126_98
.LBB126_98:                             # %for.inc430
                                        #   in Loop: Header=BB126_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_92
.LBB126_99:                             # %for.end432
                                        #   in Loop: Header=BB126_90 Depth=1
	jmp	.LBB126_100
.LBB126_100:                            # %for.inc433
                                        #   in Loop: Header=BB126_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB126_90
.LBB126_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB126_113
.LBB126_102:                            # %if.else439
	movl	-52(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB126_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB126_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB126_105:                            # %for.cond447
                                        #   Parent Loop BB126_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB126_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB126_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB126_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB126_108:                            # %if.end524
                                        #   in Loop: Header=BB126_105 Depth=2
	jmp	.LBB126_109
.LBB126_109:                            # %for.inc525
                                        #   in Loop: Header=BB126_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB126_105
.LBB126_110:                            # %for.end527
                                        #   in Loop: Header=BB126_103 Depth=1
	jmp	.LBB126_111
.LBB126_111:                            # %for.inc528
                                        #   in Loop: Header=BB126_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB126_103
.LBB126_112:                            # %for.end530
	jmp	.LBB126_113
.LBB126_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_115
# %bb.114:                              # %if.then534
	movl	-124(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB126_116
.LBB126_115:                            # %if.else536
	movl	-124(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB126_116:                            # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB126_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB126_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB126_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB126_121
.LBB126_120:                            # %if.then560
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB126_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB126_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB126_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB126_126
.LBB126_125:                            # %if.then579
	movl	-40(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_126:                            # %if.end583
	jmp	.LBB126_127
.LBB126_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB126_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB126_130
.LBB126_129:                            # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-40(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB126_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB126_133
.LBB126_132:                            # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-40(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_133:                            # %if.end612
	jmp	.LBB126_134
.LBB126_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB126_136
# %bb.135:                              # %if.then617
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_136:                            # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB126_138
# %bb.137:                              # %if.then631
	movl	-36(%rbp), %edi
	movl	-40(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -192(%rbp)
.LBB126_139:                            # %return
	vmovsd	-192(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1677697543, -172(%rbp) # imm = 0x63FFA207
	jne	.LBB126_141
.LBB126_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB126_140
.Lfunc_end126:
	.size	RDCost_for_8x8blocks.97, .Lfunc_end126-RDCost_for_8x8blocks.97
	.cfi_endproc
                                        # -- End function
	.globl	Intra16x16_Mode_Decision.98 # -- Begin function Intra16x16_Mode_Decision.98
	.p2align	4, 0x90
	.type	Intra16x16_Mode_Decision.98,@function
Intra16x16_Mode_Decision.98:            # @Intra16x16_Mode_Decision.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$2118173496, -56(%rbp)  # imm = 0x7E40C338
	movq	%rdi, -64(%rbp)
	movq	%rsi, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	152(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	156(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	imgY_org, %rax
	movq	%rax, -80(%rbp)
	movq	imgUV_org, %rax
	movq	%rax, -72(%rbp)
	movb	$0, %al
	callq	intrapred_luma_16x16
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB127_2
# %bb.1:                                # %if.then
	movq	-48(%rbp), %rdi
	callq	find_sad_16x16
.LBB127_2:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB127_12
# %bb.3:                                # %if.then3
	movl	$0, -4(%rbp)
.LBB127_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_6 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_11
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB127_4 Depth=1
	movl	$0, -8(%rbp)
.LBB127_6:                              # %for.cond4
                                        #   Parent Loop BB127_4 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_9
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB127_6 Depth=2
	movq	-72(%rbp), %rax
	movq	(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -24(%rbp)
	movq	-72(%rbp), %rax
	movq	8(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	subl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	subl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movl	(%rdx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.8:                                # %for.inc
                                        #   in Loop: Header=BB127_6 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_6
.LBB127_9:                              # %for.end
                                        #   in Loop: Header=BB127_4 Depth=1
	jmp	.LBB127_10
.LBB127_10:                             # %for.inc87
                                        #   in Loop: Header=BB127_4 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_4
.LBB127_11:                             # %for.end89
	jmp	.LBB127_12
.LBB127_12:                             # %if.end90
	movq	-48(%rbp), %rax
	movl	(%rax), %edi
	callq	dct_luma_16x16
	movq	-64(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB127_73
# %bb.13:                               # %if.then94
	movl	$0, -4(%rbp)
.LBB127_14:                             # %for.cond95
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_16 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_21
# %bb.15:                               # %for.body98
                                        #   in Loop: Header=BB127_14 Depth=1
	movl	$0, -8(%rbp)
.LBB127_16:                             # %for.cond99
                                        #   Parent Loop BB127_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_19
# %bb.17:                               # %for.body102
                                        #   in Loop: Header=BB127_16 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.18:                               # %for.inc121
                                        #   in Loop: Header=BB127_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_16
.LBB127_19:                             # %for.end123
                                        #   in Loop: Header=BB127_14 Depth=1
	jmp	.LBB127_20
.LBB127_20:                             # %for.inc124
                                        #   in Loop: Header=BB127_14 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_14
.LBB127_21:                             # %for.end126
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB127_22:                             # %for.cond128
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_24 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_29
# %bb.23:                               # %for.body131
                                        #   in Loop: Header=BB127_22 Depth=1
	movl	$0, -8(%rbp)
.LBB127_24:                             # %for.cond132
                                        #   Parent Loop BB127_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_27
# %bb.25:                               # %for.body135
                                        #   in Loop: Header=BB127_24 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.26:                               # %for.inc154
                                        #   in Loop: Header=BB127_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_24
.LBB127_27:                             # %for.end156
                                        #   in Loop: Header=BB127_22 Depth=1
	jmp	.LBB127_28
.LBB127_28:                             # %for.inc157
                                        #   in Loop: Header=BB127_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_22
.LBB127_29:                             # %for.end159
	movl	-52(%rbp), %esi
	movl	$1, %edi
	callq	dct_chroma
	movl	%eax, -52(%rbp)
	movl	$0, -4(%rbp)
.LBB127_30:                             # %for.cond161
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_32 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_37
# %bb.31:                               # %for.body164
                                        #   in Loop: Header=BB127_30 Depth=1
	movl	$0, -8(%rbp)
.LBB127_32:                             # %for.cond165
                                        #   Parent Loop BB127_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_35
# %bb.33:                               # %for.body168
                                        #   in Loop: Header=BB127_32 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.34:                               # %for.inc178
                                        #   in Loop: Header=BB127_32 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_32
.LBB127_35:                             # %for.end180
                                        #   in Loop: Header=BB127_30 Depth=1
	jmp	.LBB127_36
.LBB127_36:                             # %for.inc181
                                        #   in Loop: Header=BB127_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_30
.LBB127_37:                             # %for.end183
	movl	-52(%rbp), %eax
	shll	$4, %eax
	movq	-64(%rbp), %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movl	$0, -4(%rbp)
.LBB127_38:                             # %for.cond186
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_40 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB127_72
# %bb.39:                               # %for.body189
                                        #   in Loop: Header=BB127_38 Depth=1
	movl	$0, -8(%rbp)
.LBB127_40:                             # %for.cond190
                                        #   Parent Loop BB127_38 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB127_70
# %bb.41:                               # %for.body193
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resB, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -36(%rbp)
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rsi
	movslq	-4(%rbp), %rcx
	movl	(%rsi,%rcx,4), %ecx
	addl	-36(%rbp), %ecx
	movl	%ecx, -24(%rbp)
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %ecx
	movl	%ecx, -16(%rbp)
	movl	-16(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	movl	%ecx, -32(%rbp)
	movq	img, %rcx
	movl	72688(%rcx), %ecx
	movl	-16(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %eax
	jle	.LBB127_43
# %bb.42:                               # %cond.true
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_44
.LBB127_43:                             # %cond.false
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %eax
.LBB127_44:                             # %cond.end
                                        #   in Loop: Header=BB127_40 Depth=2
	cmpl	%eax, %ecx
	jge	.LBB127_46
# %bb.45:                               # %cond.true244
                                        #   in Loop: Header=BB127_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB127_50
.LBB127_46:                             # %cond.false246
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	movl	-16(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB127_48
# %bb.47:                               # %cond.true259
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_49
.LBB127_48:                             # %cond.false260
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-16(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB127_49:                             # %cond.end271
                                        #   in Loop: Header=BB127_40 Depth=2
.LBB127_50:                             # %cond.end273
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-24(%rbp), %edx
	movq	img, %rsi
	addq	$4792, %rsi             # imm = 0x12B8
	movq	-48(%rbp), %rdi
	movslq	(%rdi), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB127_52
# %bb.51:                               # %cond.true294
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB127_53
.LBB127_52:                             # %cond.false295
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB127_53:                             # %cond.end305
                                        #   in Loop: Header=BB127_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB127_55
# %bb.54:                               # %cond.true309
                                        #   in Loop: Header=BB127_40 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB127_59
.LBB127_55:                             # %cond.false311
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	addq	$4792, %rdx             # imm = 0x12B8
	movq	-48(%rbp), %rsi
	movslq	(%rsi), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB127_57
# %bb.56:                               # %cond.true323
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_58
.LBB127_57:                             # %cond.false324
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB127_58:                             # %cond.end334
                                        #   in Loop: Header=BB127_40 Depth=2
.LBB127_59:                             # %cond.end336
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movl	-20(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-28(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %edx
	movq	img, %rsi
	addq	$8504, %rsi             # imm = 0x2138
	addq	$2048, %rsi             # imm = 0x800
	movslq	-12(%rbp), %rdi
	shlq	$9, %rdi
	addq	%rdi, %rsi
	movslq	-8(%rbp), %rdi
	shlq	$5, %rdi
	addq	%rdi, %rsi
	movslq	-4(%rbp), %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	cmpl	%edx, %ecx
	jle	.LBB127_61
# %bb.60:                               # %cond.true358
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB127_62
.LBB127_61:                             # %cond.false359
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
.LBB127_62:                             # %cond.end370
                                        #   in Loop: Header=BB127_40 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB127_64
# %bb.63:                               # %cond.true374
                                        #   in Loop: Header=BB127_40 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB127_68
.LBB127_64:                             # %cond.false376
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movq	img, %rdx
	addq	$8504, %rdx             # imm = 0x2138
	addq	$2048, %rdx             # imm = 0x800
	movslq	-12(%rbp), %rsi
	shlq	$9, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	shlq	$5, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	cmpl	%ecx, %eax
	jle	.LBB127_66
# %bb.65:                               # %cond.true389
                                        #   in Loop: Header=BB127_40 Depth=2
	xorl	%eax, %eax
	jmp	.LBB127_67
.LBB127_66:                             # %cond.false390
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-32(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	addq	$2048, %rcx             # imm = 0x800
	movslq	-12(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
.LBB127_67:                             # %cond.end401
                                        #   in Loop: Header=BB127_40 Depth=2
.LBB127_68:                             # %cond.end403
                                        #   in Loop: Header=BB127_40 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-20(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.69:                               # %for.inc414
                                        #   in Loop: Header=BB127_40 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_40
.LBB127_70:                             # %for.end416
                                        #   in Loop: Header=BB127_38 Depth=1
	jmp	.LBB127_71
.LBB127_71:                             # %for.inc417
                                        #   in Loop: Header=BB127_38 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_38
.LBB127_72:                             # %for.end419
	jmp	.LBB127_73
.LBB127_73:                             # %if.end420
	cmpl	$2118173496, -56(%rbp)  # imm = 0x7E40C338
	jne	.LBB127_75
.LBB127_74:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_75:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_74
.Lfunc_end127:
	.size	Intra16x16_Mode_Decision.98, .Lfunc_end127-Intra16x16_Mode_Decision.98
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.99
.LCPI128_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.99
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.99,@function
RDCost_for_8x8blocks.99:                # @RDCost_for_8x8blocks.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$92566880, -160(%rbp)   # imm = 0x5847560
	movq	%rdi, -144(%rbp)
	movq	%rsi, -208(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -120(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -172(%rbp)
	cmpl	$0, -172(%rbp)
	je	.LBB128_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB128_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -128(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -192(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -184(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -116(%rbp)
	je	.LBB128_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB128_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -200(%rbp)
	jmp	.LBB128_139
.LBB128_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-208(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-32(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB128_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB128_8
.LBB128_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB128_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-120(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB128_19
.LBB128_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB128_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB128_13
.LBB128_12:                             # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB128_14
.LBB128_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB128_14
.LBB128_14:                             # %cond.end71
	movl	%eax, -168(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB128_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB128_17
.LBB128_16:                             # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB128_18
.LBB128_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB128_18
.LBB128_18:                             # %cond.end82
	movl	%eax, -164(%rbp)
	movq	-208(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-168(%rbp), %r8d
	movl	-164(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-120(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB128_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB128_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB128_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_23 Depth 2
                                        #       Child Loop BB128_25 Depth 3
                                        #     Child Loop BB128_31 Depth 2
                                        #       Child Loop BB128_33 Depth 3
                                        #     Child Loop BB128_39 Depth 2
                                        #       Child Loop BB128_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB128_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB128_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -88(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	$0, -16(%rbp)
.LBB128_23:                             # %for.cond96
                                        #   Parent Loop BB128_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB128_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB128_23 Depth=2
	movl	$0, -12(%rbp)
.LBB128_25:                             # %for.cond100
                                        #   Parent Loop BB128_21 Depth=1
                                        #     Parent Loop BB128_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB128_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB128_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB128_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_25
.LBB128_28:                             # %for.end
                                        #   in Loop: Header=BB128_23 Depth=2
	jmp	.LBB128_29
.LBB128_29:                             # %for.inc114
                                        #   in Loop: Header=BB128_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_23
.LBB128_30:                             # %for.end116
                                        #   in Loop: Header=BB128_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB128_31:                             # %for.cond120
                                        #   Parent Loop BB128_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB128_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB128_31 Depth=2
	movl	$0, -12(%rbp)
.LBB128_33:                             # %for.cond124
                                        #   Parent Loop BB128_21 Depth=1
                                        #     Parent Loop BB128_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB128_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB128_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-88(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-84(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB128_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_33
.LBB128_36:                             # %for.end152
                                        #   in Loop: Header=BB128_31 Depth=2
	jmp	.LBB128_37
.LBB128_37:                             # %for.inc153
                                        #   in Loop: Header=BB128_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_31
.LBB128_38:                             # %for.end155
                                        #   in Loop: Header=BB128_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB128_39:                             # %for.cond159
                                        #   Parent Loop BB128_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB128_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB128_39 Depth=2
	movl	$0, -12(%rbp)
.LBB128_41:                             # %for.cond163
                                        #   Parent Loop BB128_21 Depth=1
                                        #     Parent Loop BB128_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB128_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB128_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB128_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_41
.LBB128_44:                             # %for.end180
                                        #   in Loop: Header=BB128_39 Depth=2
	jmp	.LBB128_45
.LBB128_45:                             # %for.inc181
                                        #   in Loop: Header=BB128_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_39
.LBB128_46:                             # %for.end183
                                        #   in Loop: Header=BB128_21 Depth=1
	jmp	.LBB128_47
.LBB128_47:                             # %for.inc184
                                        #   in Loop: Header=BB128_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB128_21
.LBB128_48:                             # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB128_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB128_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB128_51:                             # %for.cond192
                                        #   Parent Loop BB128_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -80(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -76(%rbp)
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -92(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-76(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB128_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB128_55
.LBB128_54:                             # %cond.false229
                                        #   in Loop: Header=BB128_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB128_55:                             # %cond.end235
                                        #   in Loop: Header=BB128_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB128_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB128_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB128_61
.LBB128_57:                             # %cond.false241
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB128_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB128_60
.LBB128_59:                             # %cond.false250
                                        #   in Loop: Header=BB128_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-76(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB128_60:                             # %cond.end256
                                        #   in Loop: Header=BB128_51 Depth=2
.LBB128_61:                             # %cond.end258
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB128_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB128_64
.LBB128_63:                             # %cond.false276
                                        #   in Loop: Header=BB128_51 Depth=2
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB128_64:                             # %cond.end282
                                        #   in Loop: Header=BB128_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB128_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB128_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB128_70
.LBB128_66:                             # %cond.false288
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	movl	-80(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB128_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB128_69
.LBB128_68:                             # %cond.false297
                                        #   in Loop: Header=BB128_51 Depth=2
	movl	-80(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB128_69:                             # %cond.end303
                                        #   in Loop: Header=BB128_51 Depth=2
.LBB128_70:                             # %cond.end305
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-92(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB128_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB128_73
.LBB128_72:                             # %cond.false325
                                        #   in Loop: Header=BB128_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-92(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB128_73:                             # %cond.end331
                                        #   in Loop: Header=BB128_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB128_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB128_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB128_79
.LBB128_75:                             # %cond.false337
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-92(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB128_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB128_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB128_78
.LBB128_77:                             # %cond.false346
                                        #   in Loop: Header=BB128_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-92(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB128_78:                             # %cond.end352
                                        #   in Loop: Header=BB128_51 Depth=2
.LBB128_79:                             # %cond.end354
                                        #   in Loop: Header=BB128_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB128_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_51
.LBB128_81:                             # %for.end369
                                        #   in Loop: Header=BB128_49 Depth=1
	jmp	.LBB128_82
.LBB128_82:                             # %for.inc370
                                        #   in Loop: Header=BB128_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_49
.LBB128_83:                             # %for.end372
	jmp	.LBB128_84
.LBB128_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB128_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB128_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB128_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB128_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB128_102
# %bb.89:                               # %if.then388
	movl	$0, -68(%rbp)
.LBB128_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_92 Depth 2
                                        #       Child Loop BB128_94 Depth 3
	movl	-68(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB128_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB128_90 Depth=1
	movl	-68(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB128_92:                             # %for.cond395
                                        #   Parent Loop BB128_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB128_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB128_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB128_94:                             # %for.cond403
                                        #   Parent Loop BB128_90 Depth=1
                                        #     Parent Loop BB128_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB128_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-68(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB128_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_94
.LBB128_97:                             # %for.end429
                                        #   in Loop: Header=BB128_92 Depth=2
	jmp	.LBB128_98
.LBB128_98:                             # %for.inc430
                                        #   in Loop: Header=BB128_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_92
.LBB128_99:                             # %for.end432
                                        #   in Loop: Header=BB128_90 Depth=1
	jmp	.LBB128_100
.LBB128_100:                            # %for.inc433
                                        #   in Loop: Header=BB128_90 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB128_90
.LBB128_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB128_113
.LBB128_102:                            # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB128_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB128_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB128_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB128_105:                            # %for.cond447
                                        #   Parent Loop BB128_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB128_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB128_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB128_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB128_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB128_108:                            # %if.end524
                                        #   in Loop: Header=BB128_105 Depth=2
	jmp	.LBB128_109
.LBB128_109:                            # %for.inc525
                                        #   in Loop: Header=BB128_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_105
.LBB128_110:                            # %for.end527
                                        #   in Loop: Header=BB128_103 Depth=1
	jmp	.LBB128_111
.LBB128_111:                            # %for.inc528
                                        #   in Loop: Header=BB128_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB128_103
.LBB128_112:                            # %for.end530
	jmp	.LBB128_113
.LBB128_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB128_115
# %bb.114:                              # %if.then534
	movl	-128(%rbp), %edi
	movl	-156(%rbp), %esi
	leaq	-72(%rbp), %rdx
	leaq	-156(%rbp), %rcx
	callq	ue_linfo
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB128_116
.LBB128_115:                            # %if.else536
	movl	-128(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB128_116:                            # %if.end547
	cmpl	$0, -116(%rbp)
	jne	.LBB128_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB128_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB128_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB128_121
.LBB128_120:                            # %if.then560
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB128_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB128_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB128_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB128_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB128_126
.LBB128_125:                            # %if.then579
	movl	-36(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB128_126:                            # %if.end583
	jmp	.LBB128_127
.LBB128_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB128_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB128_130
.LBB128_129:                            # %if.then592
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB128_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB128_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB128_133
.LBB128_132:                            # %if.then606
	movl	-32(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	addl	$2, %edx
	movl	-28(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB128_133:                            # %if.end612
	jmp	.LBB128_134
.LBB128_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB128_136
# %bb.135:                              # %if.then617
	movq	-192(%rbp), %rax
	movq	24(%rax), %rax
	movq	-184(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -72(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB128_136:                            # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB128_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB128_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
.LBB128_139:                            # %return
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$92566880, -160(%rbp)   # imm = 0x5847560
	jne	.LBB128_141
.LBB128_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB128_140
.Lfunc_end128:
	.size	RDCost_for_8x8blocks.99, .Lfunc_end128-RDCost_for_8x8blocks.99
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function RDCost_for_8x8blocks.100
.LCPI129_0:
	.quad	4906019910204099648     # double 1.0E+20
	.text
	.globl	RDCost_for_8x8blocks.100
	.p2align	4, 0x90
	.type	RDCost_for_8x8blocks.100,@function
RDCost_for_8x8blocks.100:               # @RDCost_for_8x8blocks.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movw	16(%rbp), %ax
	xorl	%r10d, %r10d
	movl	$1809737757, -156(%rbp) # imm = 0x6BDE681D
	movq	%rdi, -144(%rbp)
	movq	%rsi, -192(%rbp)
	vmovsd	%xmm0, -224(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -36(%rbp)
	movw	%r8w, -18(%rbp)
	movw	%r9w, -42(%rbp)
	movl	$0, -24(%rbp)
	movq	$0, -64(%rbp)
	movl	$0, -116(%rbp)
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -52(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -32(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -160(%rbp)
	cmpl	$0, -160(%rbp)
	je	.LBB129_2
# %bb.1:                                # %land.rhs
	cmpl	$0, -36(%rbp)
	sete	%r10b
.LBB129_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -128(%rbp)
	movl	-36(%rbp), %edi
	movswl	-18(%rbp), %esi
	callq	B8Mode2Value
	movl	%eax, -120(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-112(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -184(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movq	-112(%rbp), %rax
	movl	$0, 580(%rax)
	cmpl	$0, -128(%rbp)
	je	.LBB129_10
# %bb.3:                                # %if.then
	movq	direct_pdir, %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	jge	.LBB129_5
# %bb.4:                                # %if.then20
	vmovsd	.LCPI129_0(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	%xmm0, -200(%rbp)
	jmp	.LBB129_139
.LBB129_5:                              # %if.else
	xorl	%r8d, %r8d
	movq	-192(%rbp), %rsi
	movl	-40(%rbp), %edx
	movq	direct_pdir, %rcx
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rcx,%rdi,8), %rcx
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movw	(%rcx,%rdi,2), %r9w
	movq	direct_ref_idx, %rdi
	movq	(%rdi), %rdi
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-28(%rbp), %eax
	cltq
	movq	(%rdi,%rax,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %eax
	cmpl	%eax, %r8d
	jle	.LBB129_7
# %bb.6:                                # %cond.true
	xorl	%r10d, %r10d
	jmp	.LBB129_8
.LBB129_7:                              # %cond.false
	movq	direct_ref_idx, %rax
	movq	(%rax), %rax
	movq	img, %rdi
	movl	144(%rdi), %edi
	addl	-28(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rax,%rdi,8), %rax
	movq	img, %rdi
	movl	148(%rdi), %edi
	addl	-32(%rbp), %edi
	movslq	%edi, %rdi
	movswl	(%rax,%rdi,2), %r10d
.LBB129_8:                              # %cond.end
	movq	direct_ref_idx, %rdi
	movq	8(%rdi), %rdi
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rdi,%rcx,8), %r11
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-32(%rbp), %ecx
	movslq	%ecx, %rbx
	leaq	-116(%rbp), %rdi
	movswl	%r9w, %ecx
	movl	$0, %r8d
	movl	$0, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	(%r11,%rbx,2), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
# %bb.9:                                # %if.end
	jmp	.LBB129_19
.LBB129_10:                             # %if.else62
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB129_12
# %bb.11:                               # %lor.lhs.false
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB129_13
.LBB129_12:                             # %cond.true69
	movl	-36(%rbp), %eax
	jmp	.LBB129_14
.LBB129_13:                             # %cond.false70
	xorl	%eax, %eax
	jmp	.LBB129_14
.LBB129_14:                             # %cond.end71
	movl	%eax, -164(%rbp)
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB129_16
# %bb.15:                               # %lor.lhs.false76
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB129_17
.LBB129_16:                             # %cond.true80
	movl	-36(%rbp), %eax
	jmp	.LBB129_18
.LBB129_17:                             # %cond.false81
	xorl	%eax, %eax
	jmp	.LBB129_18
.LBB129_18:                             # %cond.end82
	movl	%eax, -172(%rbp)
	movq	-192(%rbp), %rsi
	movl	-40(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-164(%rbp), %r8d
	movl	-172(%rbp), %r9d
	movw	-42(%rbp), %bx
	leaq	-116(%rbp), %rdi
	movswl	%ax, %ecx
	movswl	%bx, %eax
	movl	%eax, (%rsp)
	movswl	16(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	movq	-144(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB129_19:                             # %if.end85
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB129_84
# %bb.20:                               # %if.then87
	movl	$0, -56(%rbp)
.LBB129_21:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_23 Depth 2
                                        #       Child Loop BB129_25 Depth 3
                                        #     Child Loop BB129_31 Depth 2
                                        #       Child Loop BB129_33 Depth 3
                                        #     Child Loop BB129_39 Depth 2
                                        #       Child Loop BB129_41 Depth 3
	cmpl	$4, -56(%rbp)
	jge	.LBB129_48
# %bb.22:                               # %for.body
                                        #   in Loop: Header=BB129_21 Depth=1
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$2, %edx
	addl	%edx, %ecx
	movl	%ecx, -80(%rbp)
	movl	-48(%rbp), %ecx
	movl	-56(%rbp), %eax
	cltd
	idivl	%esi
	shll	$2, %eax
	addl	%eax, %ecx
	movl	%ecx, -92(%rbp)
	movl	$0, -16(%rbp)
.LBB129_23:                             # %for.cond96
                                        #   Parent Loop BB129_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_25 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB129_30
# %bb.24:                               # %for.body99
                                        #   in Loop: Header=BB129_23 Depth=2
	movl	$0, -12(%rbp)
.LBB129_25:                             # %for.cond100
                                        #   Parent Loop BB129_21 Depth=1
                                        #     Parent Loop BB129_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB129_28
# %bb.26:                               # %for.body103
                                        #   in Loop: Header=BB129_25 Depth=3
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc
                                        #   in Loop: Header=BB129_25 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_25
.LBB129_28:                             # %for.end
                                        #   in Loop: Header=BB129_23 Depth=2
	jmp	.LBB129_29
.LBB129_29:                             # %for.inc114
                                        #   in Loop: Header=BB129_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_23
.LBB129_30:                             # %for.end116
                                        #   in Loop: Header=BB129_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$4, %edi
	movl	-56(%rbp), %esi
	xorl	%edx, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB129_31:                             # %for.cond120
                                        #   Parent Loop BB129_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_33 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB129_38
# %bb.32:                               # %for.body123
                                        #   in Loop: Header=BB129_31 Depth=2
	movl	$0, -12(%rbp)
.LBB129_33:                             # %for.cond124
                                        #   Parent Loop BB129_21 Depth=1
                                        #     Parent Loop BB129_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB129_36
# %bb.34:                               # %for.body127
                                        #   in Loop: Header=BB129_33 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	movl	-12(%rbp), %eax
	addl	-80(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-92(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.35:                               # %for.inc150
                                        #   in Loop: Header=BB129_33 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_33
.LBB129_36:                             # %for.end152
                                        #   in Loop: Header=BB129_31 Depth=2
	jmp	.LBB129_37
.LBB129_37:                             # %for.inc153
                                        #   in Loop: Header=BB129_31 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_31
.LBB129_38:                             # %for.end155
                                        #   in Loop: Header=BB129_21 Depth=1
	movl	-40(%rbp), %edi
	addl	$8, %edi
	movl	-56(%rbp), %esi
	movl	$1, %edx
	callq	RDCost_for_4x4Blocks_Chroma
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB129_39:                             # %for.cond159
                                        #   Parent Loop BB129_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB129_46
# %bb.40:                               # %for.body162
                                        #   in Loop: Header=BB129_39 Depth=2
	movl	$0, -12(%rbp)
.LBB129_41:                             # %for.cond163
                                        #   Parent Loop BB129_21 Depth=1
                                        #     Parent Loop BB129_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB129_44
# %bb.42:                               # %for.body166
                                        #   in Loop: Header=BB129_41 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc178
                                        #   in Loop: Header=BB129_41 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_41
.LBB129_44:                             # %for.end180
                                        #   in Loop: Header=BB129_39 Depth=2
	jmp	.LBB129_45
.LBB129_45:                             # %for.inc181
                                        #   in Loop: Header=BB129_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_39
.LBB129_46:                             # %for.end183
                                        #   in Loop: Header=BB129_21 Depth=1
	jmp	.LBB129_47
.LBB129_47:                             # %for.inc184
                                        #   in Loop: Header=BB129_21 Depth=1
	movl	-56(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB129_21
.LBB129_48:                             # %for.end186
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB129_49:                             # %for.cond187
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_51 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_83
# %bb.50:                               # %for.body191
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB129_51:                             # %for.cond192
                                        #   Parent Loop BB129_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_81
# %bb.52:                               # %for.body196
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -124(%rbp)
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rbx
	movslq	-16(%rbp), %rdx
	movl	(%rbx,%rdx,4), %edx
	addl	-124(%rbp), %edx
	movl	%edx, -88(%rbp)
	movl	-124(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resR, %rbx
	movq	%rbx, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -68(%rbp)
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rbx
	movslq	-16(%rbp), %rsi
	addl	(%rbx,%rsi,4), %edx
	movl	%edx, -84(%rbp)
	movq	img, %rdx
	movl	72688(%rdx), %edx
	movl	-68(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rcx
	movslq	-16(%rbp), %rdi
	addl	(%rcx,%rdi,4), %esi
	cmpl	%esi, %eax
	jle	.LBB129_54
# %bb.53:                               # %cond.true228
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_55
.LBB129_54:                             # %cond.false229
                                        #   in Loop: Header=BB129_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB129_55:                             # %cond.end235
                                        #   in Loop: Header=BB129_51 Depth=2
	cmpl	%eax, %edx
	jge	.LBB129_57
# %bb.56:                               # %cond.true239
                                        #   in Loop: Header=BB129_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB129_61
.LBB129_57:                             # %cond.false241
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB129_59
# %bb.58:                               # %cond.true249
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_60
.LBB129_59:                             # %cond.false250
                                        #   in Loop: Header=BB129_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-68(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB129_60:                             # %cond.end256
                                        #   in Loop: Header=BB129_51 Depth=2
.LBB129_61:                             # %cond.end258
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-88(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-16(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB129_63
# %bb.62:                               # %cond.true275
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB129_64
.LBB129_63:                             # %cond.false276
                                        #   in Loop: Header=BB129_51 Depth=2
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB129_64:                             # %cond.end282
                                        #   in Loop: Header=BB129_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB129_66
# %bb.65:                               # %cond.true286
                                        #   in Loop: Header=BB129_51 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB129_70
.LBB129_66:                             # %cond.false288
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	movl	-88(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB129_68
# %bb.67:                               # %cond.true296
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_69
.LBB129_68:                             # %cond.false297
                                        #   in Loop: Header=BB129_51 Depth=2
	movl	-88(%rbp), %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB129_69:                             # %cond.end303
                                        #   in Loop: Header=BB129_51 Depth=2
.LBB129_70:                             # %cond.end305
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-84(%rbp), %esi
	movslq	-12(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-16(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB129_72
# %bb.71:                               # %cond.true324
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB129_73
.LBB129_72:                             # %cond.false325
                                        #   in Loop: Header=BB129_51 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-84(%rbp), %ecx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB129_73:                             # %cond.end331
                                        #   in Loop: Header=BB129_51 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB129_75
# %bb.74:                               # %cond.true335
                                        #   in Loop: Header=BB129_51 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB129_79
.LBB129_75:                             # %cond.false337
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %edx
	movslq	-12(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-16(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB129_77
# %bb.76:                               # %cond.true345
                                        #   in Loop: Header=BB129_51 Depth=2
	xorl	%eax, %eax
	jmp	.LBB129_78
.LBB129_77:                             # %cond.false346
                                        #   in Loop: Header=BB129_51 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-84(%rbp), %eax
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB129_78:                             # %cond.end352
                                        #   in Loop: Header=BB129_51 Depth=2
.LBB129_79:                             # %cond.end354
                                        #   in Loop: Header=BB129_51 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.80:                               # %for.inc367
                                        #   in Loop: Header=BB129_51 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_51
.LBB129_81:                             # %for.end369
                                        #   in Loop: Header=BB129_49 Depth=1
	jmp	.LBB129_82
.LBB129_82:                             # %for.inc370
                                        #   in Loop: Header=BB129_49 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_49
.LBB129_83:                             # %for.end372
	jmp	.LBB129_84
.LBB129_84:                             # %if.end373
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB129_87
# %bb.85:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB129_87
# %bb.86:                               # %if.then379
	movl	-40(%rbp), %edi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	compute_residue_b8block
.LBB129_87:                             # %if.end380
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB129_102
# %bb.88:                               # %land.lhs.true384
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB129_102
# %bb.89:                               # %if.then388
	movl	$0, -72(%rbp)
.LBB129_90:                             # %for.cond389
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_92 Depth 2
                                        #       Child Loop BB129_94 Depth 3
	movl	-72(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB129_101
# %bb.91:                               # %for.body392
                                        #   in Loop: Header=BB129_90 Depth=1
	movl	-72(%rbp), %edi
	movl	-40(%rbp), %edx
	movl	-36(%rbp), %ecx
	movswl	-42(%rbp), %r8d
	movl	$8, %esi
	callq	decode_one_b8block
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB129_92:                             # %for.cond395
                                        #   Parent Loop BB129_90 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB129_94 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_99
# %bb.93:                               # %for.body401
                                        #   in Loop: Header=BB129_92 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB129_94:                             # %for.cond403
                                        #   Parent Loop BB129_90 Depth=1
                                        #     Parent Loop BB129_92 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_97
# %bb.95:                               # %for.body409
                                        #   in Loop: Header=BB129_94 Depth=3
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	decs, %rdx
	movq	8(%rdx), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-16(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
# %bb.96:                               # %for.inc427
                                        #   in Loop: Header=BB129_94 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_94
.LBB129_97:                             # %for.end429
                                        #   in Loop: Header=BB129_92 Depth=2
	jmp	.LBB129_98
.LBB129_98:                             # %for.inc430
                                        #   in Loop: Header=BB129_92 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_92
.LBB129_99:                             # %for.end432
                                        #   in Loop: Header=BB129_90 Depth=1
	jmp	.LBB129_100
.LBB129_100:                            # %for.inc433
                                        #   in Loop: Header=BB129_90 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB129_90
.LBB129_101:                            # %for.end435
	movq	input, %rax
	movslq	2904(%rax), %rcx
	movq	-64(%rbp), %rax
	cqto
	idivq	%rcx
	movq	%rax, -64(%rbp)
	jmp	.LBB129_113
.LBB129_102:                            # %if.else439
	movl	-48(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB129_103:                            # %for.cond440
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_105 Depth 2
	movl	-16(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_112
# %bb.104:                              # %for.body444
                                        #   in Loop: Header=BB129_103 Depth=1
	movq	img, %rax
	movl	152(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB129_105:                            # %for.cond447
                                        #   Parent Loop BB129_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-52(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB129_110
# %bb.106:                              # %for.body453
                                        #   in Loop: Header=BB129_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB129_108
# %bb.107:                              # %if.then477
                                        #   in Loop: Header=BB129_105 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	172(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-12(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-64(%rbp), %rax
	movq	%rax, -64(%rbp)
.LBB129_108:                            # %if.end524
                                        #   in Loop: Header=BB129_105 Depth=2
	jmp	.LBB129_109
.LBB129_109:                            # %for.inc525
                                        #   in Loop: Header=BB129_105 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB129_105
.LBB129_110:                            # %for.end527
                                        #   in Loop: Header=BB129_103 Depth=1
	jmp	.LBB129_111
.LBB129_111:                            # %for.inc528
                                        #   in Loop: Header=BB129_103 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB129_103
.LBB129_112:                            # %for.end530
	jmp	.LBB129_113
.LBB129_113:                            # %if.end531
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB129_115
# %bb.114:                              # %if.then534
	movl	-120(%rbp), %edi
	movl	-168(%rbp), %esi
	leaq	-76(%rbp), %rdx
	leaq	-168(%rbp), %rcx
	callq	ue_linfo
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB129_116
.LBB129_115:                            # %if.else536
	movl	-120(%rbp), %eax
	movq	-104(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-104(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-104(%rbp), %rax
	movl	$2, (%rax)
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movq	-104(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movq	112(%rax), %rax
	movq	-104(%rbp), %rdi
	movq	-136(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-104(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -104(%rbp)
	movq	-112(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB129_116:                            # %if.end547
	cmpl	$0, -128(%rbp)
	jne	.LBB129_134
# %bb.117:                              # %if.then549
	movq	img, %rax
	cmpl	$1, 72000(%rax)
	jle	.LBB129_121
# %bb.118:                              # %land.lhs.true552
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB129_120
# %bb.119:                              # %lor.lhs.false556
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB129_121
.LBB129_120:                            # %if.then560
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	-42(%rbp), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_121:                            # %if.end564
	movq	img, %rax
	cmpl	$1, 72004(%rax)
	jle	.LBB129_127
# %bb.122:                              # %land.lhs.true567
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB129_127
# %bb.123:                              # %if.then571
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB129_125
# %bb.124:                              # %lor.lhs.false575
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB129_126
.LBB129_125:                            # %if.then579
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movswl	16(%rbp), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_126:                            # %if.end583
	jmp	.LBB129_127
.LBB129_127:                            # %if.end584
	movswl	-18(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB129_129
# %bb.128:                              # %lor.lhs.false588
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB129_130
.LBB129_129:                            # %if.then592
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	-42(%rbp), %r8d
	movl	-36(%rbp), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_130:                            # %if.end598
	movswl	-18(%rbp), %eax
	cmpl	$1, %eax
	je	.LBB129_132
# %bb.131:                              # %lor.lhs.false602
	movswl	-18(%rbp), %eax
	cmpl	$2, %eax
	jne	.LBB129_133
.LBB129_132:                            # %if.then606
	movl	-28(%rbp), %edi
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	addl	$2, %edx
	movl	-32(%rbp), %ecx
	addl	$2, %ecx
	movswl	16(%rbp), %r8d
	movl	-36(%rbp), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_133:                            # %if.end612
	jmp	.LBB129_134
.LBB129_134:                            # %if.end613
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB129_136
# %bb.135:                              # %if.then617
	movq	-184(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	44(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -152(%rbp)
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	xorl	%esi, %esi
	movl	%eax, -76(%rbp)
	movl	-40(%rbp), %edi
	movq	-144(%rbp), %rax
	movl	(%rax), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovgl	%eax, %esi
	movl	cbp8x8, %edx
	movq	-112(%rbp), %rcx
	movq	-152(%rbp), %r9
	movl	$1, %r8d
	callq	writeCBP_BIT_CABAC
	movq	-152(%rbp), %rdi
	callq	arienco_bits_written
	subl	-76(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-76(%rbp), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_136:                            # %if.end629
	movq	-144(%rbp), %rax
	cmpl	$0, (%rax)
	je	.LBB129_138
# %bb.137:                              # %if.then631
	movl	-40(%rbp), %edi
	movl	-36(%rbp), %esi
	movq	-112(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB129_138:                            # %if.end634
	vcvtsi2sdq	-64(%rbp), %xmm0, %xmm0
	vmovsd	-224(%rbp), %xmm1       # xmm1 = mem[0],zero
	vcvtsi2sdl	-24(%rbp), %xmm0, %xmm2
	vmulsd	%xmm2, %xmm1, %xmm1
	vaddsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -200(%rbp)
.LBB129_139:                            # %return
	vmovsd	-200(%rbp), %xmm0       # xmm0 = mem[0],zero
	cmpl	$1809737757, -156(%rbp) # imm = 0x6BDE681D
	jne	.LBB129_141
.LBB129_140:
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	vmovsd	%xmm0, -216(%rbp)       # 8-byte Spill
	callq	detect_breach
	vmovsd	-216(%rbp), %xmm0       # 8-byte Reload
                                        # xmm0 = mem[0],zero
	jmp	.LBB129_140
.Lfunc_end129:
	.size	RDCost_for_8x8blocks.100, .Lfunc_end129-RDCost_for_8x8blocks.100
	.cfi_endproc
                                        # -- End function
	.type	cofDC,@object           # @cofDC
	.bss
	.globl	cofDC
	.p2align	3
cofDC:
	.quad	0
	.size	cofDC, 8

	.type	cofAC,@object           # @cofAC
	.globl	cofAC
	.p2align	3
cofAC:
	.quad	0
	.size	cofAC, 8

	.type	cofAC8x8,@object        # @cofAC8x8
	.globl	cofAC8x8
	.p2align	3
cofAC8x8:
	.quad	0
	.size	cofAC8x8, 8

	.type	cofAC4x4intern,@object  # @cofAC4x4intern
	.globl	cofAC4x4intern
	.p2align	3
cofAC4x4intern:
	.quad	0
	.size	cofAC4x4intern, 8

	.type	cofAC_8x8ts,@object     # @cofAC_8x8ts
	.globl	cofAC_8x8ts
	.p2align	3
cofAC_8x8ts:
	.quad	0
	.size	cofAC_8x8ts, 8

	.type	cs_mb,@object           # @cs_mb
	.globl	cs_mb
	.p2align	3
cs_mb:
	.quad	0
	.size	cs_mb, 8

	.type	cs_b8,@object           # @cs_b8
	.globl	cs_b8
	.p2align	3
cs_b8:
	.quad	0
	.size	cs_b8, 8

	.type	cs_cm,@object           # @cs_cm
	.globl	cs_cm
	.p2align	3
cs_cm:
	.quad	0
	.size	cs_cm, 8

	.type	cs_imb,@object          # @cs_imb
	.globl	cs_imb
	.p2align	3
cs_imb:
	.quad	0
	.size	cs_imb, 8

	.type	cs_ib8,@object          # @cs_ib8
	.globl	cs_ib8
	.p2align	3
cs_ib8:
	.quad	0
	.size	cs_ib8, 8

	.type	cs_ib4,@object          # @cs_ib4
	.globl	cs_ib4
	.p2align	3
cs_ib4:
	.quad	0
	.size	cs_ib4, 8

	.type	cs_pc,@object           # @cs_pc
	.globl	cs_pc
	.p2align	3
cs_pc:
	.quad	0
	.size	cs_pc, 8

	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	cofAC4x4,@object        # @cofAC4x4
	.globl	cofAC4x4
	.p2align	3
cofAC4x4:
	.quad	0
	.size	cofAC4x4, 8

	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	cofAC4x4_chroma,@object # @cofAC4x4_chroma
	.comm	cofAC4x4_chroma,288,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	cbp8x8,@object          # @cbp8x8
	.comm	cbp8x8,4,4
	.type	best8x8pdir,@object     # @best8x8pdir
	.comm	best8x8pdir,120,16
	.type	best8x8mode,@object     # @best8x8mode
	.comm	best8x8mode,8,2
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Unsupported mode in SetModesAndRefframeForBlocks!\n"
	.size	.L.str, 51

	.type	best8x8fwref,@object    # @best8x8fwref
	.comm	best8x8fwref,120,16
	.type	best8x8bwref,@object    # @best8x8bwref
	.comm	best8x8bwref,120,16
	.type	part8x8mode,@object     # @part8x8mode
	.comm	part8x8mode,16,16
	.type	part8x8pdir,@object     # @part8x8pdir
	.comm	part8x8pdir,8,2
	.type	part8x8fwref,@object    # @part8x8fwref
	.comm	part8x8fwref,8,2
	.type	part8x8bwref,@object    # @part8x8bwref
	.comm	part8x8bwref,8,2
	.type	cnt_nonz8_8x8ts,@object # @cnt_nonz8_8x8ts
	.comm	cnt_nonz8_8x8ts,4,4
	.type	mpr_8x8ts,@object       # @mpr_8x8ts
	.comm	mpr_8x8ts,512,16
	.type	cbp8_8x8ts,@object      # @cbp8_8x8ts
	.comm	cbp8_8x8ts,4,4
	.type	cbp_blk8_8x8ts,@object  # @cbp_blk8_8x8ts
	.comm	cbp_blk8_8x8ts,8,8
	.type	rec_mbY_8x8ts,@object   # @rec_mbY_8x8ts
	.comm	rec_mbY_8x8ts,512,16
	.type	rec_resG_8x8ts,@object  # @rec_resG_8x8ts
	.comm	rec_resG_8x8ts,1024,16
	.type	mprRGB_8x8ts,@object    # @mprRGB_8x8ts
	.comm	mprRGB_8x8ts,3072,16
	.type	resTrans_R_8x8ts,@object # @resTrans_R_8x8ts
	.comm	resTrans_R_8x8ts,1024,16
	.type	resTrans_B_8x8ts,@object # @resTrans_B_8x8ts
	.comm	resTrans_B_8x8ts,1024,16
	.type	cnt_nonz_8x8,@object    # @cnt_nonz_8x8
	.comm	cnt_nonz_8x8,4,4
	.type	mpr8x8,@object          # @mpr8x8
	.comm	mpr8x8,512,16
	.type	cbp_blk8x8,@object      # @cbp_blk8x8
	.comm	cbp_blk8x8,4,4
	.type	rec_mbY8x8,@object      # @rec_mbY8x8
	.comm	rec_mbY8x8,512,16
	.type	rec_resG_8x8,@object    # @rec_resG_8x8
	.comm	rec_resG_8x8,1024,16
	.type	mprRGB_8x8,@object      # @mprRGB_8x8
	.comm	mprRGB_8x8,3072,16
	.type	resTrans_R_8x8,@object  # @resTrans_R_8x8
	.comm	resTrans_R_8x8,1024,16
	.type	resTrans_B_8x8,@object  # @resTrans_B_8x8
	.comm	resTrans_B_8x8,1024,16
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"invalid direction mode"
	.size	.L.str.1, 23

	.type	pred,@object            # @pred
	.local	pred
	.comm	pred,1024,16
	.type	best_mode,@object       # @best_mode
	.comm	best_mode,4,4
	.type	best_c_imode,@object    # @best_c_imode
	.comm	best_c_imode,4,4
	.type	best_i16offset,@object  # @best_i16offset
	.comm	best_i16offset,4,4
	.type	bi_pred_me,@object      # @bi_pred_me
	.comm	bi_pred_me,4,4
	.type	b8mode,@object          # @b8mode
	.comm	b8mode,8,2
	.type	b8pdir,@object          # @b8pdir
	.comm	b8pdir,8,2
	.type	b4_ipredmode,@object    # @b4_ipredmode
	.comm	b4_ipredmode,64,16
	.type	b4_intra_pred_modes,@object # @b4_intra_pred_modes
	.comm	b4_intra_pred_modes,64,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	rec_mbY,@object         # @rec_mbY
	.comm	rec_mbY,512,16
	.type	rec_mbU,@object         # @rec_mbU
	.comm	rec_mbU,512,16
	.type	rec_mbV,@object         # @rec_mbV
	.comm	rec_mbV,512,16
	.type	cbp,@object             # @cbp
	.comm	cbp,4,4
	.type	cbp_blk,@object         # @cbp_blk
	.comm	cbp_blk,8,8
	.type	luma_transform_size_8x8_flag,@object # @luma_transform_size_8x8_flag
	.comm	luma_transform_size_8x8_flag,4,4
	.type	frefframe,@object       # @frefframe
	.comm	frefframe,32,16
	.type	brefframe,@object       # @brefframe
	.comm	brefframe,32,16
	.type	all_mv8x8,@object       # @all_mv8x8
	.comm	all_mv8x8,256,16
	.type	pred_mv8x8,@object      # @pred_mv8x8
	.comm	pred_mv8x8,256,16
	.type	encode_one_macroblock.b8_mode_table,@object # @encode_one_macroblock.b8_mode_table
	.section	.rodata,"a",@progbits
	.p2align	4
encode_one_macroblock.b8_mode_table:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	6                       # 0x6
	.long	7                       # 0x7
	.long	0                       # 0x0
	.size	encode_one_macroblock.b8_mode_table, 24

	.type	encode_one_macroblock.mb_mode_table,@object # @encode_one_macroblock.mb_mode_table
	.p2align	4
encode_one_macroblock.mb_mode_table:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table, 32

	.type	encode_one_macroblock.mb_mode_table_RCT,@object # @encode_one_macroblock.mb_mode_table_RCT
	.p2align	4
encode_one_macroblock.mb_mode_table_RCT:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	8                       # 0x8
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	10                      # 0xa
	.long	9                       # 0x9
	.long	13                      # 0xd
	.size	encode_one_macroblock.mb_mode_table_RCT, 44

	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	cost8_8x8ts,@object     # @cost8_8x8ts
	.comm	cost8_8x8ts,4,4
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	temp_imgU,@object       # @temp_imgU
	.comm	temp_imgU,512,16
	.type	temp_imgV,@object       # @temp_imgV
	.comm	temp_imgV,512,16
	.type	temp_imgY,@object       # @temp_imgY
	.comm	temp_imgY,512,16
	.type	DELTA_QP,@object        # @DELTA_QP
	.comm	DELTA_QP,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	DELTA_QP2,@object       # @DELTA_QP2
	.comm	DELTA_QP2,4,4
	.type	QP2,@object             # @QP2
	.comm	QP2,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	McostState,@object      # @McostState
	.comm	McostState,8,8
	.type	all_mincost,@object     # @all_mincost
	.comm	all_mincost,8,8
	.type	all_bwmincost,@object   # @all_bwmincost
	.comm	all_bwmincost,8,8
	.type	pred_SAD_space,@object  # @pred_SAD_space
	.comm	pred_SAD_space,4,4
	.type	pred_SAD_time,@object   # @pred_SAD_time
	.comm	pred_SAD_time,4,4
	.type	pred_SAD_ref,@object    # @pred_SAD_ref
	.comm	pred_SAD_ref,4,4
	.type	pred_SAD_uplayer,@object # @pred_SAD_uplayer
	.comm	pred_SAD_uplayer,4,4
	.type	FME_blocktype,@object   # @FME_blocktype
	.comm	FME_blocktype,4,4
	.type	pred_MV_time,@object    # @pred_MV_time
	.comm	pred_MV_time,8,4
	.type	pred_MV_ref,@object     # @pred_MV_ref
	.comm	pred_MV_ref,8,4
	.type	pred_MV_uplayer,@object # @pred_MV_uplayer
	.comm	pred_MV_uplayer,8,4
	.type	Quantize_step,@object   # @Quantize_step
	.comm	Quantize_step,4,4
	.type	Bsize,@object           # @Bsize
	.comm	Bsize,32,16
	.type	Thresh4x4,@object       # @Thresh4x4
	.comm	Thresh4x4,4,4
	.type	AlphaSec,@object        # @AlphaSec
	.comm	AlphaSec,32,16
	.type	AlphaThird,@object      # @AlphaThird
	.comm	AlphaThird,32,16
	.type	flag_intra,@object      # @flag_intra
	.comm	flag_intra,8,8
	.type	flag_intra_SAD,@object  # @flag_intra_SAD
	.comm	flag_intra_SAD,4,4
	.type	SearchState,@object     # @SearchState
	.comm	SearchState,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	best_transform_size,@object # @best_transform_size
	.comm	best_transform_size,16,16
	.type	NoMbPartLessThan8x8Flag,@object # @NoMbPartLessThan8x8Flag
	.comm	NoMbPartLessThan8x8Flag,4,4
	.type	mv8x8,@object           # @mv8x8
	.comm	mv8x8,128,16
	.type	ref8x8,@object          # @ref8x8
	.comm	ref8x8,64,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
